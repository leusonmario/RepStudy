import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest18 {

    public static boolean debug = false;

    @Test
    public void test09001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09001");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        boolean boolean9 = textNode6.isBlank();
        boolean boolean11 = textNode6.hasAttr("!");
        textNode6.setBaseUri("#text");
        int int14 = textNode6.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode6.siblingNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(nodeList15);
    }

    @Test
    public void test09002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09002");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str4 = textNode2.absUrl("t");
        textNode2.text = "text";
        java.lang.String str7 = textNode2.text;
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings10.setprettyPrint(true);
        java.nio.charset.Charset charset20 = outputSettings10.getcharset();
        outputSettings10.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings10.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = null;
        outputSettings25.setescapeMode(escapeMode28);
        outputSettings25.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = null;
        outputSettings25.setescapeMode(escapeMode32);
        boolean boolean34 = outputSettings25.forceAllElementAsBlock;
        int int35 = outputSettings25.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings25.escapeMode(escapeMode36);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = null;
        outputSettings38.setescapeMode(escapeMode41);
        outputSettings38.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = null;
        outputSettings38.setescapeMode(escapeMode45);
        boolean boolean47 = outputSettings38.forceAllElementAsBlock;
        int int48 = outputSettings38.indentAmount;
        java.nio.charset.Charset charset49 = outputSettings38.getcharset();
        outputSettings37.setcharset(charset49);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings24.charset(charset49);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings52.clone();
        int int54 = outputSettings53.getindentAmount();
        java.nio.charset.Charset charset55 = outputSettings53.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings51.charset(charset55);
        outputSettings51.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings51.clone();
        textNode2.outerHtmlTail(stringBuilder8, (int) 'a', outputSettings59);
        java.lang.String str61 = textNode2.text();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
    }

    @Test
    public void test09003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09003");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.Document document6 = textNode0.ownerDocument();
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode("text", "text");
        int int10 = textNode9.siblingIndex();
        int int11 = textNode9.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode9.childNodes();
        org.jsoup.nodes.Node node13 = textNode9.parent();
        java.lang.String str14 = textNode9.toString();
        boolean boolean15 = textNode0.equals((java.lang.Object) str14);
        org.jsoup.nodes.TextNode textNode17 = textNode0.text("h");
        org.jsoup.nodes.Node node19 = textNode17.removeAttr("h");
        textNode17.setBaseUri("");
        java.lang.String str22 = textNode17.outerHtml();
        org.jsoup.nodes.Node node23 = textNode17.previousSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "h" + "'", str22, "h");
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test09004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09004");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        boolean boolean9 = textNode7.isBlank();
        java.lang.String str10 = textNode7.text;
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings15.clone();
        outputSettings15.prettyPrint = true;
        textNode7.outerHtmlTail(stringBuilder11, (int) (short) 0, outputSettings15);
        org.jsoup.nodes.Node node20 = textNode7.nextSibling();
        int int21 = textNode7.siblingIndex();
        textNode7.setBaseUri("h");
        org.jsoup.nodes.Node node25 = textNode7.removeAttr("text");
        java.lang.String str26 = node25.outerHtml();
        org.jsoup.nodes.TextNode textNode29 = new org.jsoup.nodes.TextNode("text", "text");
        int int30 = textNode29.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList31 = textNode29.siblingNodes();
        textNode29.text = "";
        java.lang.String str34 = textNode29.baseUri();
        java.lang.String str36 = textNode29.attr("");
        org.jsoup.nodes.Document document37 = textNode29.ownerDocument();
        java.lang.String str38 = textNode29.text;
        java.lang.StringBuilder stringBuilder39 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        int int44 = outputSettings41.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings41.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean48 = outputSettings47.prettyPrint;
        boolean boolean49 = outputSettings47.forceAllElementAsBlock;
        outputSettings47.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset53 = outputSettings52.charset();
        outputSettings47.setcharset(charset53);
        outputSettings46.setcharset(charset53);
        outputSettings41.setcharset(charset53);
        textNode29.outerHtmlTail(stringBuilder39, 0, outputSettings41);
        java.util.List<org.jsoup.nodes.Node> nodeList58 = textNode29.siblingNodes();
        java.lang.String str59 = textNode29.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node60 = node25.after((org.jsoup.nodes.Node) textNode29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "text" + "'", str34, "text");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(document37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "#text" + "'", str59, "#text");
    }

    @Test
    public void test09005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09005");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        outputSettings3.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        outputSettings3.setcharset(charset9);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings11.encoder();
        outputSettings3.setcharsetEncoder(charsetEncoder13);
        java.nio.charset.Charset charset15 = outputSettings3.getcharset();
        int int16 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings3.escapeMode();
        outputSettings0.escapeMode = escapeMode17;
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings0.charsetEncoder;
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder19);
    }

    @Test
    public void test09006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09006");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        boolean boolean9 = textNode7.isBlank();
        java.lang.String str10 = textNode7.text;
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings15.clone();
        outputSettings15.prettyPrint = true;
        textNode7.outerHtmlTail(stringBuilder11, (int) (short) 0, outputSettings15);
        java.lang.String str20 = textNode7.toString();
        java.lang.String str22 = textNode7.absUrl("ext");
        textNode7.text = "#text";
        textNode7.ensureAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node27 = textNode7.after("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test09007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09007");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        int int1 = textNode0.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        java.nio.charset.Charset charset16 = outputSettings5.getcharset();
        outputSettings2.charset = charset16;
        boolean boolean18 = textNode0.equals((java.lang.Object) outputSettings2);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode();
        outputSettings25.setprettyPrint(true);
        boolean boolean29 = textNode0.equals((java.lang.Object) outputSettings25);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings25.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        int int34 = outputSettings31.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings31.getcharsetEncoder();
        outputSettings25.setcharsetEncoder(charsetEncoder35);
        outputSettings25.setforceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings25.encoder();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertNotNull(charsetEncoder39);
    }

    @Test
    public void test09008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09008");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        boolean boolean15 = outputSettings11.getforceAllElementAsBlock();
        outputSettings11.setprettyPrint(false);
        textNode6.outerHtmlTail(stringBuilder9, (int) '#', outputSettings11);
        textNode6.settext("ext");
        java.lang.StringBuilder stringBuilder21 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings23.setescapeMode(escapeMode26);
        outputSettings23.indentAmount = '4';
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings23.prettyPrint(false);
        boolean boolean32 = outputSettings23.forceAllElementAsBlock();
        textNode6.outerHtmlTail(stringBuilder21, (int) (short) 100, outputSettings23);
        java.lang.String str34 = textNode6.toString();
        java.lang.String str36 = textNode6.attr("t");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test09009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09009");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.escapeMode(escapeMode6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        outputSettings8.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings8.setcharset(charset14);
        java.nio.charset.Charset charset16 = outputSettings8.getcharset();
        outputSettings7.charset = charset16;
        int int18 = outputSettings7.indentAmount;
        int int19 = outputSettings7.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test09010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09010");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.indentAmount((int) '#');
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings13.setcharset(charset19);
        outputSettings13.setprettyPrint(true);
        java.nio.charset.Charset charset23 = outputSettings13.getcharset();
        outputSettings13.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings13.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings28.setescapeMode(escapeMode31);
        outputSettings28.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        outputSettings28.setescapeMode(escapeMode35);
        boolean boolean37 = outputSettings28.forceAllElementAsBlock;
        int int38 = outputSettings28.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings28.escapeMode(escapeMode39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = null;
        outputSettings41.setescapeMode(escapeMode44);
        outputSettings41.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = null;
        outputSettings41.setescapeMode(escapeMode48);
        boolean boolean50 = outputSettings41.forceAllElementAsBlock;
        int int51 = outputSettings41.indentAmount;
        java.nio.charset.Charset charset52 = outputSettings41.getcharset();
        outputSettings40.setcharset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings27.charset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        outputSettings55.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset61 = outputSettings60.charset();
        outputSettings55.setcharset(charset61);
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset64 = outputSettings63.charset();
        java.nio.charset.CharsetEncoder charsetEncoder65 = outputSettings63.encoder();
        outputSettings55.setcharsetEncoder(charsetEncoder65);
        java.nio.charset.Charset charset67 = outputSettings55.getcharset();
        boolean boolean68 = outputSettings55.forceAllElementAsBlock();
        java.nio.charset.Charset charset69 = outputSettings55.charset;
        outputSettings54.setcharset(charset69);
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings12.charset(charset69);
        boolean boolean72 = outputSettings71.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder73 = outputSettings71.charsetEncoder;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(charsetEncoder65);
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(charsetEncoder73);
    }

    @Test
    public void test09011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09011");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean3 = textNode2.isBlank();
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode("text", "text");
        int int10 = textNode9.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode9.siblingNodes();
        textNode9.text = "";
        java.lang.String str15 = textNode9.absUrl("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode9.childNodes();
        org.jsoup.nodes.Node node18 = textNode9.removeAttr("text");
        org.jsoup.nodes.TextNode textNode20 = textNode9.text("hi!");
        java.lang.StringBuilder stringBuilder21 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        boolean boolean26 = outputSettings23.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings23.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.escapeMode(escapeMode29);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings31.setescapeMode(escapeMode34);
        outputSettings31.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings31.setescapeMode(escapeMode38);
        outputSettings31.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings31.getcharsetEncoder();
        boolean boolean43 = outputSettings31.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings31.forceAllElementAsBlock(false);
        outputSettings45.indentAmount = (short) -1;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings48.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings48.getescapeMode();
        int int53 = outputSettings48.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings48.escapeMode();
        outputSettings45.escapeMode = escapeMode54;
        outputSettings30.escapeMode = escapeMode54;
        textNode9.outerHtmlTail(stringBuilder21, (int) (short) 100, outputSettings30);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node58 = textNode2.before((org.jsoup.nodes.Node) textNode9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09012");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        java.lang.String str11 = textNode2.text;
        boolean boolean12 = textNode2.isBlank();
        java.lang.String str13 = textNode2.text();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test09013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09013");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.getWholeText();
        org.jsoup.nodes.Node node5 = textNode2.nextSibling();
        java.lang.String str6 = textNode2.toString();
        org.jsoup.nodes.Node node7 = textNode2.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node9 = node7.before("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test09014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09014");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        textNode0.text = "text";
        org.jsoup.nodes.Node node10 = textNode0.previousSibling();
        org.jsoup.nodes.Node node11 = textNode0.clone();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test09015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09015");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings5.prettyPrint = true;
        boolean boolean8 = outputSettings5.forceAllElementAsBlock();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09016");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset3 = outputSettings0.charset;
        boolean boolean4 = outputSettings0.prettyPrint;
        outputSettings0.setforceAllElementAsBlock(true);
        outputSettings0.indentAmount = (short) 100;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        java.nio.charset.Charset charset15 = outputSettings9.charset();
        outputSettings9.setindentAmount(52);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings18.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings24.encoder();
        outputSettings9.charsetEncoder = charsetEncoder25;
        outputSettings0.charsetEncoder = charsetEncoder25;
        java.nio.charset.Charset charset28 = outputSettings0.getcharset();
        boolean boolean29 = outputSettings0.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test09017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09017");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        textNode0.ensureAttributes();
        org.jsoup.nodes.Attributes attributes10 = textNode0.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(attributes10);
    }

    @Test
    public void test09018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09018");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node7 = textNode2.attr("#text", "");
        java.lang.String str8 = textNode2.gettext();
        java.lang.String str9 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
    }

    @Test
    public void test09019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09019");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = null;
        outputSettings5.setcharset(charset6);
        boolean boolean8 = outputSettings5.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        boolean boolean11 = outputSettings5.prettyPrint();
        outputSettings5.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        outputSettings14.setprettyPrint(false);
        outputSettings14.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset20 = outputSettings14.charset;
        outputSettings14.setindentAmount(52);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        outputSettings23.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings23.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings29.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings29.escapeMode = escapeMode31;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        outputSettings33.setprettyPrint(false);
        java.nio.charset.Charset charset38 = outputSettings33.charset;
        java.nio.charset.Charset charset39 = outputSettings33.charset;
        outputSettings29.setcharset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        outputSettings41.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset47 = outputSettings46.charset();
        outputSettings41.setcharset(charset47);
        outputSettings41.setprettyPrint(true);
        java.nio.charset.Charset charset51 = outputSettings41.getcharset();
        outputSettings41.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings41.forceAllElementAsBlock(false);
        outputSettings55.setforceAllElementAsBlock(false);
        boolean boolean58 = outputSettings55.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        outputSettings59.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings59.indentAmount(1);
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings55.escapeMode(escapeMode66);
        outputSettings29.setescapeMode(escapeMode66);
        outputSettings14.setescapeMode(escapeMode66);
        outputSettings5.escapeMode = escapeMode66;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings67);
    }

    @Test
    public void test09020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09020");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings11.setescapeMode(escapeMode14);
        outputSettings11.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings11.setescapeMode(escapeMode18);
        boolean boolean20 = outputSettings11.forceAllElementAsBlock;
        int int21 = outputSettings11.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings11.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings24.setescapeMode(escapeMode27);
        outputSettings24.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings24.setescapeMode(escapeMode31);
        boolean boolean33 = outputSettings24.forceAllElementAsBlock;
        int int34 = outputSettings24.indentAmount;
        java.nio.charset.Charset charset35 = outputSettings24.getcharset();
        outputSettings23.setcharset(charset35);
        outputSettings23.setforceAllElementAsBlock(false);
        textNode8.outerHtmlTail(stringBuilder9, (int) (short) 0, outputSettings23);
        textNode8.ensureAttributes();
        org.jsoup.nodes.Node node41 = textNode8.nextSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNull(node41);
    }

    @Test
    public void test09021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09021");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "ext");
        org.jsoup.nodes.TextNode textNode5 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = textNode5.equals((java.lang.Object) outputSettings6);
        boolean boolean9 = outputSettings6.forceAllElementAsBlock;
        boolean boolean10 = textNode2.equals((java.lang.Object) outputSettings6);
        java.lang.String str11 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
    }

    @Test
    public void test09022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09022");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        java.nio.charset.Charset charset16 = outputSettings10.charset();
        outputSettings9.setcharset(charset16);
        outputSettings9.indentAmount = (-1);
        boolean boolean20 = outputSettings9.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test09023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09023");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.String str3 = textNode2.nodeName();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.gettext();
        java.lang.String str7 = textNode2.absUrl("t");
        java.lang.String str8 = textNode2.toString();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("t");
        boolean boolean12 = textNode10.hasAttr("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09024");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        boolean boolean15 = outputSettings12.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings12.prettyPrint(false);
        int int18 = outputSettings17.getindentAmount();
        outputSettings17.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings21.charset = charset23;
        outputSettings21.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        int int30 = outputSettings27.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        outputSettings33.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings33.setcharset(charset39);
        outputSettings32.setcharset(charset39);
        outputSettings27.setcharset(charset39);
        outputSettings21.setcharset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings17.charset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        boolean boolean48 = outputSettings45.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings45.prettyPrint(false);
        int int51 = outputSettings50.getindentAmount();
        outputSettings50.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings50.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        boolean boolean58 = outputSettings55.getprettyPrint();
        boolean boolean59 = outputSettings55.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings55.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode();
        outputSettings50.setescapeMode(escapeMode62);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings17.escapeMode(escapeMode62);
        java.nio.charset.Charset charset65 = outputSettings64.charset();
        outputSettings0.setcharset(charset65);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset69 = outputSettings68.charset();
        outputSettings67.charset = charset69;
        java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings67.encoder();
        boolean boolean72 = outputSettings67.prettyPrint;
        java.nio.charset.Charset charset73 = outputSettings67.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings0.charset(charset73);
        boolean boolean75 = outputSettings0.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(charsetEncoder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test09025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09025");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("text");
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("t");
        textNode2.text = "#text";
        textNode2.settext("");
        int int16 = textNode2.siblingIndex();
        java.lang.String str17 = textNode2.toString();
        java.lang.StringBuilder stringBuilder18 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = null;
        textNode2.outerHtmlTail(stringBuilder18, (int) (byte) 0, outputSettings20);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
    }

    @Test
    public void test09026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09026");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "#");
        org.jsoup.nodes.Node node4 = textNode2.removeAttr("#");
        org.jsoup.nodes.Node node5 = textNode2.previousSibling();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test09027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09027");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.nextSibling();
        java.lang.String str10 = textNode2.outerHtml();
        java.lang.String str12 = textNode2.attr("#text");
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = textNode15.equals((java.lang.Object) outputSettings16);
        boolean boolean19 = outputSettings16.prettyPrint;
        int int20 = outputSettings16.indentAmount();
        boolean boolean21 = textNode2.equals((java.lang.Object) outputSettings16);
        outputSettings16.indentAmount = 0;
        outputSettings16.setprettyPrint(false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09028");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings9.setcharset(charset15);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings17.encoder();
        outputSettings9.setcharsetEncoder(charsetEncoder19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        int int24 = outputSettings21.getindentAmount();
        boolean boolean25 = outputSettings21.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings21.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings21.getcharsetEncoder();
        outputSettings9.setcharsetEncoder(charsetEncoder27);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings9.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings32.encoder();
        java.nio.charset.Charset charset34 = outputSettings32.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings8.charset(charset34);
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings8.charsetEncoder;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(charsetEncoder36);
    }

    @Test
    public void test09029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09029");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.lang.String str8 = textNode0.outerHtml();
        textNode0.setBaseUri("");
        textNode0.ensureAttributes();
        java.lang.String str12 = textNode0.outerHtml();
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode();
        textNode13.setBaseUri("hi!");
        java.lang.String str16 = textNode13.getTEXT_KEY();
        textNode13.text = "hi!";
        boolean boolean20 = textNode13.hasAttr("text");
        org.jsoup.nodes.Node node21 = textNode13.clone();
        int int22 = node21.siblingIndex();
        org.jsoup.nodes.TextNode textNode25 = new org.jsoup.nodes.TextNode("text", "text");
        int int26 = textNode25.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList27 = textNode25.childNodes();
        java.lang.String str28 = textNode25.getWholeText();
        java.lang.String str29 = textNode25.text();
        org.jsoup.nodes.Document document30 = textNode25.ownerDocument();
        org.jsoup.nodes.TextNode textNode32 = textNode25.splitText((int) (short) 0);
        java.lang.String str33 = textNode32.nodeName();
        boolean boolean34 = node21.equals((java.lang.Object) str33);
        boolean boolean35 = textNode0.equals((java.lang.Object) str33);
        textNode0.settext("");
        org.jsoup.nodes.Node node38 = textNode0.parent();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "text" + "'", str28, "text");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "text" + "'", str29, "text");
        org.junit.Assert.assertNull(document30);
        org.junit.Assert.assertNotNull(textNode32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "#text" + "'", str33, "#text");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test09030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09030");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings14.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings31.clone();
        int int33 = outputSettings32.getindentAmount();
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        outputSettings14.setcharset(charset34);
        outputSettings0.setcharset(charset34);
        boolean boolean37 = outputSettings0.prettyPrint();
        java.nio.charset.Charset charset38 = outputSettings0.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        outputSettings39.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings39.indentAmount(1);
        outputSettings39.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings48.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings48.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = null;
        outputSettings51.setescapeMode(escapeMode54);
        outputSettings51.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = null;
        outputSettings51.setescapeMode(escapeMode58);
        outputSettings51.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder62 = outputSettings51.getcharsetEncoder();
        outputSettings48.charsetEncoder = charsetEncoder62;
        outputSettings39.charsetEncoder = charsetEncoder62;
        outputSettings39.setindentAmount((int) (byte) 100);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean68 = outputSettings67.prettyPrint;
        boolean boolean69 = outputSettings67.forceAllElementAsBlock;
        int int70 = outputSettings67.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings67.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        outputSettings73.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset79 = outputSettings78.charset();
        outputSettings73.setcharset(charset79);
        outputSettings72.setcharset(charset79);
        outputSettings67.setcharset(charset79);
        org.jsoup.nodes.Entities.EscapeMode escapeMode83 = outputSettings67.escapeMode;
        outputSettings39.setescapeMode(escapeMode83);
        outputSettings0.setescapeMode(escapeMode83);
        boolean boolean86 = outputSettings0.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charsetEncoder62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(charset79);
        org.junit.Assert.assertTrue("'" + escapeMode83 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode83.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test09031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09031");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        org.jsoup.nodes.TextNode textNode7 = new org.jsoup.nodes.TextNode();
        textNode7.setBaseUri("hi!");
        java.lang.String str10 = textNode7.getTEXT_KEY();
        textNode7.text = "hi!";
        boolean boolean14 = textNode7.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode7.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        boolean boolean19 = outputSettings16.getprettyPrint();
        boolean boolean20 = outputSettings16.forceAllElementAsBlock();
        boolean boolean21 = outputSettings16.forceAllElementAsBlock;
        boolean boolean22 = textNode7.equals((java.lang.Object) outputSettings16);
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings16.getcharsetEncoder();
        outputSettings16.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings16.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings16.clone();
        java.nio.charset.Charset charset28 = outputSettings16.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings29.charset = charset31;
        outputSettings29.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings29.prettyPrint(false);
        java.nio.charset.Charset charset37 = outputSettings29.charset;
        outputSettings29.setprettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings29.getescapeMode();
        outputSettings16.setescapeMode(escapeMode40);
        outputSettings0.setescapeMode(escapeMode40);
        boolean boolean43 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        outputSettings45.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset51 = outputSettings50.charset();
        outputSettings45.setcharset(charset51);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset54 = outputSettings53.charset();
        java.nio.charset.CharsetEncoder charsetEncoder55 = outputSettings53.encoder();
        outputSettings45.setcharsetEncoder(charsetEncoder55);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean58 = outputSettings57.prettyPrint;
        boolean boolean59 = outputSettings57.forceAllElementAsBlock;
        int int60 = outputSettings57.getindentAmount();
        boolean boolean61 = outputSettings57.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder62 = outputSettings57.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder63 = outputSettings57.getcharsetEncoder();
        outputSettings45.setcharsetEncoder(charsetEncoder63);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings45.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset71 = outputSettings70.charset();
        outputSettings69.charset = charset71;
        java.nio.charset.CharsetEncoder charsetEncoder73 = outputSettings69.encoder();
        boolean boolean74 = outputSettings69.getprettyPrint();
        int int75 = outputSettings69.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings76.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings76.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings76.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder80 = outputSettings76.getcharsetEncoder();
        outputSettings69.setcharsetEncoder(charsetEncoder80);
        org.jsoup.nodes.Entities.EscapeMode escapeMode82 = outputSettings69.getescapeMode();
        outputSettings68.escapeMode = escapeMode82;
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings68.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings0.escapeMode(escapeMode84);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(charsetEncoder55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(charsetEncoder62);
        org.junit.Assert.assertNotNull(charsetEncoder63);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNotNull(charset71);
        org.junit.Assert.assertNotNull(charsetEncoder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder80);
        org.junit.Assert.assertTrue("'" + escapeMode82 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode82.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings85);
    }

    @Test
    public void test09032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09032");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings9.encoder();
        boolean boolean14 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings5.escapeMode(escapeMode15);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings0.escapeMode(escapeMode15);
        outputSettings17.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.clone();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings20.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
    }

    @Test
    public void test09033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09033");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        java.lang.String str8 = textNode2.baseUri();
        textNode2.settext("hi!");
        java.lang.String str11 = textNode2.text;
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode2.childNodes();
        java.lang.String str13 = textNode2.text;
        org.jsoup.nodes.Node node14 = textNode2.previousSibling();
        org.jsoup.nodes.Node node17 = textNode2.attr("i!", "ext");
        java.lang.String str18 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node20 = textNode2.childNode(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test09034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09034");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("ext", "hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder4 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings6.indentAmount((int) (short) 0);
        outputSettings6.prettyPrint = false;
        int int12 = outputSettings6.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings6.escapeMode;
        textNode2.outerHtmlTail(stringBuilder4, (int) (byte) 1, outputSettings6);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09035");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node4 = textNode2.parent();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode2.text;
        java.lang.String str8 = textNode2.text;
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode();
        textNode9.setBaseUri("hi!");
        java.lang.String str12 = textNode9.getTEXT_KEY();
        textNode9.text = "hi!";
        boolean boolean16 = textNode9.hasAttr("text");
        org.jsoup.nodes.Node node17 = textNode9.clone();
        textNode9.text = "#text";
        java.lang.String str21 = textNode9.attr("#text");
        org.jsoup.nodes.Node node22 = textNode9.nextSibling();
        boolean boolean23 = textNode9.isBlank();
        org.jsoup.nodes.Node node26 = textNode9.attr("h", "t");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node27 = textNode2.before((org.jsoup.nodes.Node) textNode9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test09036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09036");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        outputSettings7.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings7.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        outputSettings22.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings22.setescapeMode(escapeMode29);
        boolean boolean31 = outputSettings22.forceAllElementAsBlock;
        int int32 = outputSettings22.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings22.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings35.setescapeMode(escapeMode38);
        outputSettings35.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings35.setescapeMode(escapeMode42);
        boolean boolean44 = outputSettings35.forceAllElementAsBlock;
        int int45 = outputSettings35.indentAmount;
        java.nio.charset.Charset charset46 = outputSettings35.getcharset();
        outputSettings34.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset46);
        int int49 = outputSettings48.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 0, outputSettings48);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        boolean boolean54 = outputSettings51.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings51.prettyPrint(false);
        boolean boolean57 = outputSettings56.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean59 = outputSettings58.prettyPrint;
        boolean boolean60 = outputSettings58.forceAllElementAsBlock;
        boolean boolean61 = outputSettings58.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings58.prettyPrint(false);
        int int64 = outputSettings63.getindentAmount();
        outputSettings63.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset69 = outputSettings68.charset();
        outputSettings67.charset = charset69;
        outputSettings67.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        int int76 = outputSettings73.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder77 = outputSettings73.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean80 = outputSettings79.prettyPrint;
        boolean boolean81 = outputSettings79.forceAllElementAsBlock;
        outputSettings79.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset85 = outputSettings84.charset();
        outputSettings79.setcharset(charset85);
        outputSettings78.setcharset(charset85);
        outputSettings73.setcharset(charset85);
        outputSettings67.setcharset(charset85);
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings63.charset(charset85);
        java.nio.charset.CharsetEncoder charsetEncoder91 = outputSettings63.getcharsetEncoder();
        outputSettings56.charsetEncoder = charsetEncoder91;
        outputSettings48.setcharsetEncoder(charsetEncoder91);
        java.nio.charset.CharsetEncoder charsetEncoder94 = outputSettings48.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings96 = outputSettings48.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings98 = outputSettings96.prettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder99 = outputSettings96.encoder();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charset85);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertNotNull(charsetEncoder91);
        org.junit.Assert.assertNotNull(charsetEncoder94);
        org.junit.Assert.assertNotNull(outputSettings96);
        org.junit.Assert.assertNotNull(outputSettings98);
        org.junit.Assert.assertNotNull(charsetEncoder99);
    }

    @Test
    public void test09037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09037");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(true);
        outputSettings10.setforceAllElementAsBlock(false);
        boolean boolean13 = outputSettings10.prettyPrint();
        java.nio.charset.Charset charset14 = outputSettings10.charset;
        boolean boolean15 = outputSettings10.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings10.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings17.charset = charset19;
        outputSettings17.indentAmount = (-1);
        java.nio.charset.Charset charset23 = outputSettings17.charset();
        boolean boolean24 = outputSettings17.forceAllElementAsBlock();
        java.nio.charset.Charset charset25 = outputSettings17.getcharset();
        boolean boolean26 = outputSettings17.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        int int30 = outputSettings27.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        outputSettings33.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings33.setcharset(charset39);
        outputSettings32.setcharset(charset39);
        outputSettings27.setcharset(charset39);
        int int43 = outputSettings27.getindentAmount();
        outputSettings27.indentAmount = 'a';
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings27.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings17.escapeMode(escapeMode46);
        boolean boolean48 = outputSettings17.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings17.encoder();
        outputSettings10.charsetEncoder = charsetEncoder49;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charsetEncoder49);
    }

    @Test
    public void test09038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09038");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str3 = textNode2.gettext();
        textNode2.text = "hi!";
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings9.setescapeMode(escapeMode12);
        outputSettings9.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings9.setescapeMode(escapeMode16);
        boolean boolean18 = outputSettings9.forceAllElementAsBlock;
        int int19 = outputSettings9.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings9.escapeMode(escapeMode20);
        int int22 = outputSettings9.getindentAmount();
        outputSettings9.indentAmount = 10;
        outputSettings9.indentAmount = (byte) 1;
        textNode2.outerHtmlTail(stringBuilder7, 97, outputSettings9);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings28.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder33 = null;
        outputSettings32.charsetEncoder = charsetEncoder33;
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings32.getescapeMode();
        outputSettings9.setescapeMode(escapeMode35);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings9.forceAllElementAsBlock(true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings38);
    }

    @Test
    public void test09039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09039");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.String str4 = textNode2.absUrl("text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings13.setcharset(charset19);
        outputSettings12.setcharset(charset19);
        outputSettings7.setcharset(charset19);
        int int23 = outputSettings7.getindentAmount();
        boolean boolean24 = outputSettings7.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings25.charset = charset27;
        outputSettings25.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings25.escapeMode(escapeMode32);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings34.charset = charset36;
        outputSettings34.indentAmount = (-1);
        java.nio.charset.Charset charset40 = outputSettings34.charset();
        boolean boolean41 = outputSettings34.forceAllElementAsBlock();
        java.nio.charset.Charset charset42 = outputSettings34.getcharset();
        outputSettings33.charset = charset42;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings7.charset(charset42);
        textNode2.outerHtmlTail(stringBuilder5, (int) (byte) 100, outputSettings7);
        java.lang.String str46 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "text" + "'", str46, "text");
    }

    @Test
    public void test09040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09040");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str3 = textNode2.gettext();
        textNode2.text = "hi!";
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings9.setescapeMode(escapeMode12);
        outputSettings9.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings9.setescapeMode(escapeMode16);
        boolean boolean18 = outputSettings9.forceAllElementAsBlock;
        int int19 = outputSettings9.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings9.escapeMode(escapeMode20);
        int int22 = outputSettings9.getindentAmount();
        outputSettings9.indentAmount = 10;
        outputSettings9.indentAmount = (byte) 1;
        textNode2.outerHtmlTail(stringBuilder7, 97, outputSettings9);
        org.jsoup.nodes.Node node29 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Node node31 = textNode2.removeAttr("ext");
        textNode2.settext("");
        java.util.List<org.jsoup.nodes.Node> nodeList34 = textNode2.childNodes();
        org.jsoup.nodes.Node node35 = textNode2.previousSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeList34);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test09041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09041");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        boolean boolean7 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("t");
        java.lang.String str10 = textNode2.toString();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("#text");
        org.jsoup.nodes.Node node15 = textNode12.attr("hi!", "!");
        java.lang.String str16 = node15.baseUri();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "t" + "'", str10, "t");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
    }

    @Test
    public void test09042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09042");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        textNode2.settext("");
        textNode2.ensureAttributes();
        java.lang.String str28 = textNode2.gettext();
        java.lang.String str29 = textNode2.outerHtml();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test09043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09043");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        boolean boolean7 = textNode2.isBlank();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        java.lang.String str9 = textNode2.gettext();
        java.lang.String str10 = textNode2.nodeName();
        java.lang.String str12 = textNode2.attr("text");
        java.lang.String str13 = textNode2.gettext();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
    }

    @Test
    public void test09044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09044");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "");
        org.jsoup.nodes.Node node3 = textNode2.parent();
        java.lang.String str4 = textNode2.nodeName();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        boolean boolean6 = textNode2.isBlank();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09045");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        outputSettings6.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        outputSettings6.setcharset(charset12);
        outputSettings5.setcharset(charset12);
        outputSettings0.setcharset(charset12);
        int int16 = outputSettings0.getindentAmount();
        outputSettings0.indentAmount = 'a';
        boolean boolean19 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.TextNode textNode24 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = textNode24.equals((java.lang.Object) outputSettings25);
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        outputSettings25.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings25.prettyPrint(true);
        boolean boolean33 = outputSettings25.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset35 = outputSettings34.charset();
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings34.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = null;
        outputSettings34.setescapeMode(escapeMode37);
        boolean boolean39 = outputSettings34.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset42 = outputSettings41.charset();
        outputSettings40.charset = charset42;
        outputSettings40.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings40.getcharsetEncoder();
        outputSettings34.charsetEncoder = charsetEncoder46;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings34.prettyPrint(true);
        java.nio.charset.Charset charset50 = outputSettings34.charset();
        outputSettings25.setcharset(charset50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings0.charset(charset50);
        boolean boolean53 = outputSettings52.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(charsetEncoder46);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test09046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09046");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings0.prettyPrint(false);
        boolean boolean19 = outputSettings18.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.indentAmount(10);
        outputSettings18.setforceAllElementAsBlock(true);
        boolean boolean24 = outputSettings18.getforceAllElementAsBlock();
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test09047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09047");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset8 = outputSettings0.charset;
        outputSettings0.setprettyPrint(false);
        outputSettings0.prettyPrint = false;
        java.nio.charset.Charset charset13 = null;
        outputSettings0.setcharset(charset13);
        int int15 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        outputSettings16.indentAmount = (-1);
        java.nio.charset.Charset charset22 = outputSettings16.charset();
        boolean boolean23 = outputSettings16.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings16.charsetEncoder;
        java.nio.charset.Charset charset25 = outputSettings16.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings26.clone();
        int int28 = outputSettings27.getindentAmount();
        java.nio.charset.Charset charset29 = outputSettings27.charset();
        outputSettings16.setcharset(charset29);
        outputSettings0.setcharset(charset29);
        java.nio.charset.Charset charset32 = outputSettings0.charset();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charset32);
    }

    @Test
    public void test09048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09048");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.text();
        java.lang.String str9 = textNode7.getWholeText();
        org.jsoup.nodes.Node node10 = textNode7.nextSibling();
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode("text", "text");
        int int14 = textNode13.siblingIndex();
        int int15 = textNode13.siblingIndex();
        org.jsoup.nodes.Node node16 = textNode13.clone();
        java.lang.String str17 = textNode13.text;
        java.lang.String str18 = textNode13.nodeName();
        textNode13.setBaseUri("ext");
        java.lang.String str21 = textNode13.getTEXT_KEY();
        textNode13.text = "";
        org.jsoup.nodes.Attributes attributes24 = textNode13.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList25 = textNode13.siblingNodes();
        boolean boolean27 = textNode13.hasAttr("ext");
        java.lang.String str28 = textNode13.text;
        textNode13.setBaseUri("!");
        org.jsoup.nodes.TextNode textNode32 = textNode13.text("i");
        java.lang.String str34 = textNode32.attr("!");
        // The following exception was thrown during execution in test generation
        try {
            node10.replaceWith((org.jsoup.nodes.Node) textNode32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#text" + "'", str18, "#text");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertNotNull(attributes24);
        org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(textNode32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test09049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09049");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        boolean boolean13 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset16 = outputSettings0.charset;
        outputSettings0.forceAllElementAsBlock = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charset16);
    }

    @Test
    public void test09050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09050");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        int int2 = outputSettings1.getindentAmount();
        int int3 = outputSettings1.indentAmount;
        outputSettings1.indentAmount = (-1);
        outputSettings1.prettyPrint = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings1.escapeMode;
        boolean boolean9 = outputSettings1.getforceAllElementAsBlock();
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09051");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        org.jsoup.nodes.Node node10 = textNode6.attr("text", "text");
        java.lang.String str11 = node10.outerHtml();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = node10.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
    }

    @Test
    public void test09052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09052");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings0.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings0.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09053");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.nextSibling();
        textNode0.settext("t");
        java.lang.String str12 = textNode0.absUrl("ext");
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode();
        textNode13.setBaseUri("hi!");
        java.lang.String str16 = textNode13.getTEXT_KEY();
        java.lang.String str17 = textNode13.baseUri();
        boolean boolean18 = textNode13.isBlank();
        textNode13.text = "t";
        textNode13.settext("text");
        textNode13.ensureAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode0.after((org.jsoup.nodes.Node) textNode13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test09054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09054");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode9 = textNode2.splitText(0);
        java.lang.String str10 = textNode9.toString();
        org.jsoup.nodes.Node node12 = textNode9.removeAttr("i!");
        java.lang.String str13 = textNode9.text;
        org.jsoup.nodes.Document document14 = textNode9.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node16 = document14.before("h");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertNull(document14);
    }

    @Test
    public void test09055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09055");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        boolean boolean9 = textNode2.hasAttr("text");
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        java.nio.charset.Charset charset16 = outputSettings10.charset;
        outputSettings10.setprettyPrint(false);
        java.nio.charset.Charset charset19 = outputSettings10.getcharset();
        boolean boolean20 = textNode2.equals((java.lang.Object) charset19);
        org.jsoup.nodes.Node node21 = textNode2.nextSibling();
        textNode2.settext("i!");
        org.jsoup.nodes.Attributes attributes24 = textNode2.attributes();
        org.jsoup.nodes.Node node25 = textNode2.clone();
        textNode2.text = "hi!";
        java.lang.String str28 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node29 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(attributes24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "text" + "'", str28, "text");
    }

    @Test
    public void test09056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09056");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        org.jsoup.nodes.Node node26 = textNode2.removeAttr("hi!");
        java.lang.StringBuilder stringBuilder27 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.getforceAllElementAsBlock();
        boolean boolean31 = outputSettings29.getprettyPrint();
        outputSettings29.setprettyPrint(false);
        textNode2.outerHtmlTail(stringBuilder27, (-1), outputSettings29);
        boolean boolean35 = outputSettings29.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings29.indentAmount((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings29.charset("i!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: i!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(outputSettings37);
    }

    @Test
    public void test09057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09057");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        org.jsoup.nodes.Node node11 = textNode2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.setprettyPrint(false);
        outputSettings18.setindentAmount(0);
        outputSettings18.indentAmount = (byte) 1;
        java.nio.charset.Charset charset27 = outputSettings18.getcharset();
        outputSettings12.setcharset(charset27);
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings12.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings30.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings36.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings36.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings36.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(false);
        int int48 = outputSettings47.getindentAmount();
        outputSettings47.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        boolean boolean56 = outputSettings52.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings52.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        outputSettings47.setescapeMode(escapeMode59);
        outputSettings36.escapeMode = escapeMode59;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings12.escapeMode(escapeMode59);
        boolean boolean63 = textNode2.equals((java.lang.Object) outputSettings62);
        int int64 = outputSettings62.getindentAmount();
        outputSettings62.setindentAmount((int) (short) 0);
        outputSettings62.setprettyPrint(false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test09058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09058");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("ext", "text");
        java.lang.String str3 = textNode2.nodeName();
        java.lang.Object obj4 = null;
        boolean boolean5 = textNode2.equals(obj4);
        org.jsoup.nodes.Node node8 = textNode2.attr("ext", "hi!");
        org.jsoup.nodes.Node node9 = node8.parent();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test09059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09059");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.gettext();
        textNode2.text = "hi!";
        org.jsoup.nodes.Node node12 = textNode2.parent();
        java.lang.String str13 = textNode2.getWholeText();
        java.lang.String str14 = textNode2.nodeName();
        java.lang.StringBuilder stringBuilder15 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        int int24 = outputSettings21.getindentAmount();
        boolean boolean25 = outputSettings21.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings21.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings21.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset30 = outputSettings29.charset();
        outputSettings28.charset = charset30;
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings28.encoder();
        boolean boolean33 = outputSettings28.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings28.escapeMode;
        outputSettings21.setescapeMode(escapeMode34);
        outputSettings17.setescapeMode(escapeMode34);
        outputSettings17.setindentAmount((int) (byte) 0);
        boolean boolean39 = outputSettings17.getprettyPrint();
        textNode2.outerHtmlTail(stringBuilder15, (int) (short) -1, outputSettings17);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(charsetEncoder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test09060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09060");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.gettext();
        textNode2.text = "hi!";
        java.lang.String str12 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node15 = textNode2.attr("!", "");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode2.siblingNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(nodeList16);
    }

    @Test
    public void test09061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09061");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.forceAllElementAsBlock(true);
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode();
        textNode9.setBaseUri("hi!");
        java.lang.String str12 = textNode9.getTEXT_KEY();
        textNode9.text = "hi!";
        java.lang.String str15 = textNode9.getWholeText();
        java.lang.StringBuilder stringBuilder16 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings18.getcharsetEncoder();
        outputSettings18.prettyPrint = true;
        boolean boolean26 = outputSettings18.forceAllElementAsBlock;
        textNode9.outerHtmlTail(stringBuilder16, (int) (byte) 100, outputSettings18);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        boolean boolean31 = outputSettings28.getprettyPrint();
        boolean boolean32 = outputSettings28.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings28.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode();
        outputSettings34.setprettyPrint(true);
        int int38 = outputSettings34.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings34.encoder();
        outputSettings18.setcharsetEncoder(charsetEncoder39);
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings18.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings6.escapeMode(escapeMode41);
        outputSettings6.forceAllElementAsBlock = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings42);
    }

    @Test
    public void test09062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09062");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("i", "i");
    }

    @Test
    public void test09063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09063");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        textNode2.setBaseUri("text");
        java.lang.String str12 = textNode2.text;
        java.lang.String str14 = textNode2.absUrl("#text");
        java.lang.String str16 = textNode2.attr("");
        boolean boolean17 = textNode2.isBlank();
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode20 = textNode2.text("i!");
        java.lang.String str21 = textNode2.text;
        java.lang.String str22 = textNode2.text;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "i!" + "'", str21, "i!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "i!" + "'", str22, "i!");
    }

    @Test
    public void test09064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09064");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.prettyPrint(true);
        outputSettings0.indentAmount = (short) -1;
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        boolean boolean9 = outputSettings8.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings10.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings13.setescapeMode(escapeMode16);
        outputSettings13.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        outputSettings13.setescapeMode(escapeMode20);
        boolean boolean22 = outputSettings13.forceAllElementAsBlock;
        int int23 = outputSettings13.indentAmount;
        java.nio.charset.Charset charset24 = outputSettings13.getcharset();
        outputSettings10.charset = charset24;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings10.escapeMode();
        outputSettings10.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        boolean boolean32 = outputSettings29.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        boolean boolean37 = outputSettings33.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings33.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset43 = outputSettings42.charset();
        outputSettings41.charset = charset43;
        outputSettings41.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean48 = outputSettings47.prettyPrint;
        boolean boolean49 = outputSettings47.forceAllElementAsBlock;
        int int50 = outputSettings47.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        outputSettings53.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset59 = outputSettings58.charset();
        outputSettings53.setcharset(charset59);
        outputSettings52.setcharset(charset59);
        outputSettings47.setcharset(charset59);
        outputSettings41.setcharset(charset59);
        outputSettings39.setcharset(charset59);
        outputSettings29.setcharset(charset59);
        outputSettings10.charset = charset59;
        outputSettings8.charset = charset59;
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charset59);
    }

    @Test
    public void test09065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09065");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        boolean boolean5 = textNode2.hasAttr("#text");
        textNode2.setBaseUri("text");
        int int8 = textNode2.siblingIndex();
        java.lang.String str9 = textNode2.getTEXT_KEY();
        java.lang.String str10 = textNode2.baseUri();
        java.lang.String str12 = textNode2.attr("");
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode15.siblingNodes();
        textNode15.text = "";
        org.jsoup.nodes.Node node20 = textNode15.parent();
        boolean boolean22 = textNode15.hasAttr("text");
        java.lang.String str23 = textNode15.outerHtml();
        java.lang.String str24 = textNode15.getWholeText();
        int int25 = textNode15.siblingIndex();
        java.lang.String str26 = textNode15.toString();
        boolean boolean28 = textNode15.hasAttr("i");
        int int29 = textNode15.siblingIndex();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test09066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09066");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        outputSettings0.prettyPrint = false;
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset17 = outputSettings16.charset();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings16.encoder();
        boolean boolean19 = outputSettings16.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset22 = outputSettings21.charset();
        outputSettings20.charset = charset22;
        outputSettings20.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings20.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings20.escapeMode(escapeMode27);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings29.charset = charset31;
        outputSettings29.indentAmount = (-1);
        java.nio.charset.Charset charset35 = outputSettings29.charset();
        boolean boolean36 = outputSettings29.forceAllElementAsBlock();
        java.nio.charset.Charset charset37 = outputSettings29.getcharset();
        outputSettings28.charset = charset37;
        outputSettings16.setcharset(charset37);
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings16.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings0.escapeMode(escapeMode40);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
    }

    @Test
    public void test09067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09067");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        int int8 = outputSettings0.getindentAmount();
        boolean boolean9 = outputSettings0.prettyPrint;
        boolean boolean10 = outputSettings0.getprettyPrint();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test09068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09068");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        java.lang.String str25 = textNode2.nodeName();
        java.lang.String str26 = textNode2.text();
        java.lang.String str27 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node29 = textNode2.childNode((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#text" + "'", str25, "#text");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "text" + "'", str26, "text");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "text" + "'", str27, "text");
    }

    @Test
    public void test09069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09069");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "");
        org.jsoup.nodes.Attributes attributes3 = textNode2.attributes();
        java.lang.String str4 = textNode2.baseUri();
        java.lang.String str5 = textNode2.text;
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings8.clone();
        outputSettings9.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode();
        outputSettings9.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings9.clone();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder6, 10, outputSettings15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
    }

    @Test
    public void test09070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09070");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.indentAmount((int) (short) 0);
        outputSettings0.prettyPrint = false;
        int int6 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.clone();
        org.jsoup.nodes.TextNode textNode10 = new org.jsoup.nodes.TextNode("text", "text");
        int int11 = textNode10.siblingIndex();
        int int12 = textNode10.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode10.childNodes();
        java.lang.String str14 = textNode10.getWholeText();
        org.jsoup.nodes.TextNode textNode16 = textNode10.splitText(1);
        java.lang.String str17 = textNode10.gettext();
        textNode10.settext("hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings20.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        outputSettings26.setprettyPrint(false);
        outputSettings26.setindentAmount(0);
        outputSettings26.indentAmount = (byte) 1;
        java.nio.charset.Charset charset35 = outputSettings26.getcharset();
        outputSettings20.setcharset(charset35);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings20.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        outputSettings38.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings38.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings44.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings44.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        boolean boolean53 = outputSettings50.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings50.prettyPrint(false);
        int int56 = outputSettings55.getindentAmount();
        outputSettings55.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder59 = outputSettings55.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        boolean boolean63 = outputSettings60.getprettyPrint();
        boolean boolean64 = outputSettings60.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings60.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings66.escapeMode();
        outputSettings55.setescapeMode(escapeMode67);
        outputSettings44.escapeMode = escapeMode67;
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings20.escapeMode(escapeMode67);
        boolean boolean71 = outputSettings20.prettyPrint;
        outputSettings20.setindentAmount((int) '4');
        java.nio.charset.Charset charset74 = outputSettings20.charset;
        boolean boolean75 = textNode10.equals((java.lang.Object) charset74);
        outputSettings0.setcharset(charset74);
        boolean boolean77 = outputSettings0.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "t" + "'", str17, "t");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test09071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09071");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.charsetEncoder;
        outputSettings0.charsetEncoder = charsetEncoder11;
        outputSettings0.setprettyPrint(true);
        boolean boolean15 = outputSettings0.forceAllElementAsBlock();
        boolean boolean16 = outputSettings0.getprettyPrint();
        java.nio.charset.Charset charset17 = outputSettings0.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings18.charset = charset20;
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings18.encoder();
        outputSettings18.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings18.escapeMode;
        outputSettings18.forceAllElementAsBlock = false;
        boolean boolean28 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.setindentAmount((-1));
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings18.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings34.charset = charset36;
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings34.encoder();
        outputSettings34.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings34.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset44 = outputSettings43.charset();
        outputSettings42.charset = charset44;
        outputSettings42.indentAmount = (-1);
        java.nio.charset.Charset charset48 = outputSettings42.charset();
        outputSettings42.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        boolean boolean54 = outputSettings51.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings51.prettyPrint(false);
        int int57 = outputSettings56.getindentAmount();
        outputSettings56.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder60 = outputSettings56.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean62 = outputSettings61.prettyPrint;
        boolean boolean63 = outputSettings61.forceAllElementAsBlock;
        boolean boolean64 = outputSettings61.getprettyPrint();
        boolean boolean65 = outputSettings61.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings61.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings67.escapeMode();
        outputSettings56.setescapeMode(escapeMode68);
        outputSettings42.escapeMode = escapeMode68;
        outputSettings34.setescapeMode(escapeMode68);
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings34.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings34.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings73.clone();
        java.nio.charset.Charset charset75 = outputSettings74.charset;
        outputSettings33.setcharset(charset75);
        outputSettings0.setcharset(charset75);
        outputSettings0.prettyPrint = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(charset75);
    }

    @Test
    public void test09072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09072");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        java.lang.String str7 = textNode2.baseUri();
        textNode2.setBaseUri("");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        boolean boolean16 = outputSettings13.getprettyPrint();
        boolean boolean17 = outputSettings13.forceAllElementAsBlock();
        java.nio.charset.Charset charset18 = outputSettings13.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings13.clone();
        textNode2.outerHtmlTail(stringBuilder11, 1, outputSettings19);
        boolean boolean21 = outputSettings19.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09073");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        int int8 = textNode6.siblingIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test09074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09074");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        textNode0.text = "#text";
        java.lang.String str11 = textNode0.outerHtml();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode0.childNodes();
        org.jsoup.nodes.Node node14 = textNode0.removeAttr("i");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test09075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09075");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(true);
        outputSettings10.setforceAllElementAsBlock(false);
        boolean boolean13 = outputSettings10.prettyPrint();
        java.nio.charset.Charset charset14 = outputSettings10.charset;
        boolean boolean15 = outputSettings10.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings10.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings10.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charsetEncoder17);
    }

    @Test
    public void test09076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09076");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        boolean boolean7 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("t");
        java.lang.String str10 = textNode2.toString();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("#text");
        textNode2.setBaseUri("!");
        java.lang.StringBuilder stringBuilder15 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        outputSettings17.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings17.forceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder15, (int) (short) 0, outputSettings23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "t" + "'", str10, "t");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test09077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09077");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        boolean boolean9 = textNode7.isBlank();
        java.lang.String str10 = textNode7.text;
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings15.clone();
        outputSettings15.prettyPrint = true;
        textNode7.outerHtmlTail(stringBuilder11, (int) (short) 0, outputSettings15);
        org.jsoup.nodes.Node node20 = textNode7.nextSibling();
        org.jsoup.nodes.Node node21 = null;
        // The following exception was thrown during execution in test generation
        try {
            node20.replaceWith(node21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test09078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09078");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.charsetEncoder;
        outputSettings0.charsetEncoder = charsetEncoder11;
        outputSettings0.setprettyPrint(false);
        int int15 = outputSettings0.indentAmount;
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode();
        textNode16.setBaseUri("hi!");
        java.lang.String str19 = textNode16.getTEXT_KEY();
        textNode16.text = "hi!";
        java.lang.String str22 = textNode16.getWholeText();
        java.lang.StringBuilder stringBuilder23 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        outputSettings25.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings25.getcharsetEncoder();
        outputSettings25.prettyPrint = true;
        boolean boolean33 = outputSettings25.forceAllElementAsBlock;
        textNode16.outerHtmlTail(stringBuilder23, (int) (byte) 100, outputSettings25);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        boolean boolean38 = outputSettings35.getprettyPrint();
        boolean boolean39 = outputSettings35.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings35.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings41.escapeMode();
        outputSettings41.setprettyPrint(true);
        int int45 = outputSettings41.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings41.encoder();
        outputSettings25.setcharsetEncoder(charsetEncoder46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings48.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings48.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings48.getcharsetEncoder();
        outputSettings25.setcharsetEncoder(charsetEncoder53);
        outputSettings0.setcharsetEncoder(charsetEncoder53);
        boolean boolean56 = outputSettings0.getprettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder46);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertNotNull(charsetEncoder53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test09079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09079");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        java.nio.charset.Charset charset16 = outputSettings5.getcharset();
        textNode2.outerHtmlTail(stringBuilder3, (int) (short) -1, outputSettings5);
        boolean boolean18 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.TextNode textNode21 = new org.jsoup.nodes.TextNode("text", "text");
        int int22 = textNode21.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList23 = textNode21.childNodes();
        textNode21.settext("");
        java.lang.String str26 = textNode21.baseUri();
        textNode21.text = "t";
        java.lang.StringBuilder stringBuilder29 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings39.encoder();
        outputSettings31.setcharsetEncoder(charsetEncoder41);
        textNode21.outerHtmlTail(stringBuilder29, 0, outputSettings31);
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings31.encoder();
        outputSettings5.charsetEncoder = charsetEncoder44;
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings5.getcharsetEncoder();
        outputSettings5.setindentAmount((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "text" + "'", str26, "text");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertNotNull(charsetEncoder46);
    }

    @Test
    public void test09080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09080");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean2 = outputSettings0.getprettyPrint();
        outputSettings0.setprettyPrint(false);
        int int5 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset8 = outputSettings0.charset;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings0.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder10 = null;
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09081");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "ext");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        int int8 = outputSettings5.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings5.getcharsetEncoder();
        boolean boolean10 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings11.setescapeMode(escapeMode14);
        outputSettings11.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings11.setescapeMode(escapeMode18);
        boolean boolean20 = outputSettings11.forceAllElementAsBlock;
        int int21 = outputSettings11.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings11.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings24.setescapeMode(escapeMode27);
        outputSettings24.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings24.setescapeMode(escapeMode31);
        boolean boolean33 = outputSettings24.forceAllElementAsBlock;
        int int34 = outputSettings24.indentAmount;
        java.nio.charset.Charset charset35 = outputSettings24.getcharset();
        outputSettings23.setcharset(charset35);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings5.charset(charset35);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        boolean boolean41 = outputSettings38.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings38.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        int int47 = outputSettings44.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings44.getcharsetEncoder();
        outputSettings43.setcharsetEncoder(charsetEncoder48);
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings43.escapeMode;
        outputSettings5.setescapeMode(escapeMode50);
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset53 = outputSettings5.getcharset();
        outputSettings5.prettyPrint = true;
        textNode2.outerHtmlTail(stringBuilder3, 97, outputSettings5);
        org.jsoup.select.NodeVisitor nodeVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node58 = textNode2.traverse(nodeVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset53);
    }

    @Test
    public void test09082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09082");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        boolean boolean12 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        boolean boolean18 = outputSettings15.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings15.prettyPrint(false);
        java.nio.charset.Charset charset21 = outputSettings15.charset;
        outputSettings15.setprettyPrint(false);
        java.nio.charset.Charset charset24 = outputSettings15.getcharset();
        boolean boolean25 = outputSettings15.forceAllElementAsBlock;
        outputSettings15.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        int int31 = outputSettings28.getindentAmount();
        boolean boolean32 = outputSettings28.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        outputSettings39.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings39.getcharsetEncoder();
        outputSettings33.setcharsetEncoder(charsetEncoder44);
        outputSettings28.charsetEncoder = charsetEncoder44;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset48 = outputSettings47.charset();
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings47.encoder();
        boolean boolean50 = outputSettings47.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset53 = outputSettings52.charset();
        outputSettings51.charset = charset53;
        outputSettings51.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder57 = outputSettings51.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings51.escapeMode(escapeMode58);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset62 = outputSettings61.charset();
        outputSettings60.charset = charset62;
        outputSettings60.indentAmount = (-1);
        java.nio.charset.Charset charset66 = outputSettings60.charset();
        boolean boolean67 = outputSettings60.forceAllElementAsBlock();
        java.nio.charset.Charset charset68 = outputSettings60.getcharset();
        outputSettings59.charset = charset68;
        outputSettings47.setcharset(charset68);
        outputSettings28.setcharset(charset68);
        java.nio.charset.Charset charset72 = outputSettings28.charset();
        outputSettings15.setcharset(charset72);
        outputSettings14.charset = charset72;
        boolean boolean75 = outputSettings14.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(charsetEncoder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(charsetEncoder57);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test09083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09083");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        java.nio.charset.Charset charset16 = outputSettings15.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        int int19 = outputSettings17.indentAmount;
        java.nio.charset.Charset charset20 = outputSettings17.charset;
        boolean boolean21 = outputSettings17.prettyPrint;
        outputSettings17.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings17.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings15.escapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings15.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings15.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings15.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings30.charsetEncoder;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charsetEncoder31);
    }

    @Test
    public void test09084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09084");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.text;
        org.jsoup.nodes.Node node12 = textNode2.attr("h", "i!");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("");
        // The following exception was thrown during execution in test generation
        try {
            textNode14.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(textNode14);
    }

    @Test
    public void test09085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09085");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode2.siblingNodes();
        java.lang.String str7 = textNode2.baseUri();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("#");
        org.jsoup.nodes.TextNode textNode11 = textNode2.splitText((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(nodeList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(textNode11);
    }

    @Test
    public void test09086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09086");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.lang.String str8 = textNode2.text();
        boolean boolean9 = textNode2.isBlank();
        java.lang.String str10 = textNode2.nodeName();
        java.lang.String str11 = textNode2.baseUri();
        org.jsoup.nodes.Node node13 = textNode2.removeAttr("!");
        org.jsoup.nodes.Node node14 = textNode2.parent();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test09087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09087");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("#text");
        java.lang.String str9 = textNode2.text;
        textNode2.settext("t");
        textNode2.ensureAttributes();
        java.lang.String str13 = textNode2.gettext();
        java.lang.String str14 = textNode2.getTEXT_KEY();
        java.lang.String str15 = textNode2.gettext();
        java.lang.String str16 = textNode2.getWholeText();
        org.jsoup.nodes.Attributes attributes17 = textNode2.attributes();
        java.lang.String str18 = textNode2.text();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "t" + "'", str13, "t");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "t" + "'", str15, "t");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "t" + "'", str16, "t");
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "t" + "'", str18, "t");
    }

    @Test
    public void test09088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09088");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings5.prettyPrint = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings5.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.indentAmount(35);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings10);
    }

    @Test
    public void test09089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09089");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        int int9 = textNode2.siblingIndex();
        java.lang.String str10 = textNode2.getWholeText();
        org.jsoup.select.NodeVisitor nodeVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = textNode2.traverse(nodeVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test09090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09090");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.escapeMode(escapeMode11);
        int int13 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings16.clone();
        java.nio.charset.Charset charset18 = outputSettings17.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings0.charset(charset18);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings20.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.clone();
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings20.getcharsetEncoder();
        org.jsoup.nodes.TextNode textNode24 = new org.jsoup.nodes.TextNode();
        int int25 = textNode24.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings26.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = null;
        outputSettings29.setescapeMode(escapeMode32);
        outputSettings29.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = null;
        outputSettings29.setescapeMode(escapeMode36);
        boolean boolean38 = outputSettings29.forceAllElementAsBlock;
        int int39 = outputSettings29.indentAmount;
        java.nio.charset.Charset charset40 = outputSettings29.getcharset();
        outputSettings26.charset = charset40;
        boolean boolean42 = textNode24.equals((java.lang.Object) outputSettings26);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        boolean boolean47 = outputSettings43.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings43.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings49.escapeMode();
        outputSettings49.setprettyPrint(true);
        boolean boolean53 = textNode24.equals((java.lang.Object) outputSettings49);
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings49.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        int int58 = outputSettings55.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder59 = outputSettings55.getcharsetEncoder();
        outputSettings49.setcharsetEncoder(charsetEncoder59);
        outputSettings20.setcharsetEncoder(charsetEncoder59);
        outputSettings19.charsetEncoder = charsetEncoder59;
        boolean boolean63 = outputSettings19.prettyPrint;
        outputSettings19.setforceAllElementAsBlock(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test09091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09091");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        java.lang.String str10 = textNode2.absUrl("t");
        java.lang.String str11 = textNode2.outerHtml();
        java.lang.String str13 = textNode2.absUrl("hi!");
        java.lang.String str14 = textNode2.outerHtml();
        int int15 = textNode2.siblingIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test09092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09092");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        int int6 = outputSettings5.getindentAmount();
        outputSettings5.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        boolean boolean14 = outputSettings10.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings10.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode();
        outputSettings5.setescapeMode(escapeMode17);
        int int19 = outputSettings5.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset22 = outputSettings21.charset();
        outputSettings20.charset = charset22;
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings20.encoder();
        boolean boolean25 = outputSettings20.prettyPrint;
        java.nio.charset.Charset charset26 = outputSettings20.charset;
        outputSettings5.charset = charset26;
        boolean boolean28 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings5.prettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(outputSettings30);
    }

    @Test
    public void test09093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09093");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        int int6 = outputSettings5.getindentAmount();
        outputSettings5.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        outputSettings9.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings20.setcharset(charset27);
        outputSettings15.setcharset(charset27);
        outputSettings9.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings5.charset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        outputSettings35.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset41 = outputSettings40.charset();
        outputSettings35.setcharset(charset41);
        outputSettings35.setprettyPrint(true);
        java.nio.charset.Charset charset45 = outputSettings35.getcharset();
        outputSettings35.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings35.forceAllElementAsBlock(false);
        outputSettings49.setforceAllElementAsBlock(false);
        boolean boolean52 = outputSettings49.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        outputSettings53.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings53.indentAmount(1);
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings59.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings49.escapeMode(escapeMode60);
        outputSettings34.setescapeMode(escapeMode60);
        java.nio.charset.Charset charset63 = outputSettings34.charset();
        boolean boolean64 = outputSettings34.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test09094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09094");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        boolean boolean13 = outputSettings9.forceAllElementAsBlock();
        boolean boolean14 = outputSettings9.forceAllElementAsBlock;
        boolean boolean15 = textNode0.equals((java.lang.Object) outputSettings9);
        java.lang.String str16 = textNode0.text;
        org.jsoup.nodes.Node node17 = textNode0.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode0.siblingNodes();
        java.lang.String str19 = textNode0.toString();
        textNode0.ensureAttributes();
        org.jsoup.nodes.Node node21 = textNode0.nextSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test09095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09095");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.Document document6 = textNode0.ownerDocument();
        java.lang.String str7 = textNode0.outerHtml();
        java.lang.String str8 = textNode0.text();
        org.jsoup.nodes.Node node10 = textNode0.removeAttr("#text");
        textNode0.setBaseUri("#text");
        org.jsoup.nodes.Node node13 = textNode0.clone();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test09096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09096");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        boolean boolean13 = outputSettings9.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings9.indentAmount((int) '4');
        textNode0.outerHtmlTail(stringBuilder7, 35, outputSettings15);
        textNode0.ensureAttributes();
        org.jsoup.nodes.Node node18 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode20 = textNode0.text("!");
        java.lang.StringBuilder stringBuilder21 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset24 = outputSettings23.charset();
        int int25 = outputSettings23.indentAmount;
        java.nio.charset.Charset charset26 = outputSettings23.charset;
        boolean boolean27 = outputSettings23.prettyPrint;
        outputSettings23.setforceAllElementAsBlock(true);
        outputSettings23.indentAmount = (short) 100;
        int int32 = outputSettings23.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings23.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset35 = outputSettings34.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings36.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        boolean boolean43 = outputSettings40.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings40.prettyPrint(false);
        java.nio.charset.Charset charset46 = outputSettings40.charset;
        outputSettings40.setprettyPrint(false);
        java.nio.charset.Charset charset49 = outputSettings40.getcharset();
        outputSettings36.setcharset(charset49);
        outputSettings34.setcharset(charset49);
        // The following exception was thrown during execution in test generation
        try {
            textNode0.outerHtmlHead(stringBuilder21, 97, outputSettings34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(charset49);
    }

    @Test
    public void test09097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09097");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        textNode2.setBaseUri("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.childNodes();
        java.lang.String str10 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode("text", "text");
        int int14 = textNode13.siblingIndex();
        int int15 = textNode13.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode13.childNodes();
        org.jsoup.nodes.Node node17 = textNode13.parent();
        java.lang.String str18 = textNode13.toString();
        java.lang.String str20 = textNode13.attr("hi!");
        org.jsoup.nodes.Attributes attributes21 = textNode13.attributes();
        java.lang.StringBuilder stringBuilder22 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        boolean boolean27 = outputSettings24.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings24.prettyPrint(false);
        java.nio.charset.Charset charset30 = null;
        outputSettings29.setcharset(charset30);
        boolean boolean32 = outputSettings29.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings29.prettyPrint(false);
        outputSettings29.prettyPrint = false;
        outputSettings29.setprettyPrint(true);
        textNode13.outerHtmlTail(stringBuilder22, (int) (byte) -1, outputSettings29);
        textNode13.settext("h");
        java.lang.StringBuilder stringBuilder42 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.getforceAllElementAsBlock();
        boolean boolean46 = outputSettings44.getprettyPrint();
        outputSettings44.setprettyPrint(false);
        outputSettings44.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings44.encoder();
        boolean boolean52 = outputSettings44.forceAllElementAsBlock;
        java.nio.charset.Charset charset53 = outputSettings44.charset();
        textNode13.outerHtmlTail(stringBuilder42, (int) (byte) 0, outputSettings44);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node55 = textNode2.before((org.jsoup.nodes.Node) textNode13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(charset53);
    }

    @Test
    public void test09098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09098");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.escapeMode(escapeMode11);
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings0.forceAllElementAsBlock(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNull(escapeMode13);
        org.junit.Assert.assertNull(escapeMode14);
        org.junit.Assert.assertNotNull(outputSettings16);
    }

    @Test
    public void test09099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09099");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(true);
        outputSettings10.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        boolean boolean16 = outputSettings13.getprettyPrint();
        boolean boolean17 = outputSettings13.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings13.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings13.getescapeMode();
        outputSettings10.escapeMode = escapeMode20;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings10.escapeMode();
        boolean boolean23 = outputSettings10.getprettyPrint();
        boolean boolean24 = outputSettings10.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test09100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09100");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.TextNode textNode7 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = textNode7.equals((java.lang.Object) outputSettings8);
        int int11 = outputSettings8.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings12.setprettyPrint(true);
        java.nio.charset.Charset charset22 = outputSettings12.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings12.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings12.escapeMode();
        boolean boolean25 = outputSettings12.getprettyPrint();
        boolean boolean26 = outputSettings12.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings12.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings8.escapeMode(escapeMode27);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings28.clone();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings28.getcharsetEncoder();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder3, (int) (byte) 100, outputSettings28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(charsetEncoder30);
    }

    @Test
    public void test09101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09101");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset8 = outputSettings0.charset;
        outputSettings0.setprettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(true);
        boolean boolean13 = outputSettings0.prettyPrint;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09102");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Node node5 = textNode2.removeAttr("text");
        org.jsoup.nodes.Node node7 = textNode2.removeAttr("h");
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("text", "text");
        int int13 = textNode12.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode12.childNodes();
        textNode12.settext("");
        textNode12.setBaseUri("hi!");
        java.lang.StringBuilder stringBuilder19 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = null;
        outputSettings21.setescapeMode(escapeMode24);
        outputSettings21.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = null;
        outputSettings21.setescapeMode(escapeMode28);
        boolean boolean30 = outputSettings21.forceAllElementAsBlock;
        int int31 = outputSettings21.indentAmount;
        java.nio.charset.Charset charset32 = outputSettings21.getcharset();
        textNode12.outerHtmlTail(stringBuilder19, (int) (short) 1, outputSettings21);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        boolean boolean37 = outputSettings34.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings34.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        int int43 = outputSettings40.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings40.getcharsetEncoder();
        outputSettings39.setcharsetEncoder(charsetEncoder44);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        boolean boolean49 = outputSettings46.getprettyPrint();
        boolean boolean50 = outputSettings46.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings46.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings46.getescapeMode();
        outputSettings39.setescapeMode(escapeMode53);
        outputSettings39.indentAmount = (byte) 100;
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings39.escapeMode;
        outputSettings21.escapeMode = escapeMode57;
        textNode2.outerHtmlTail(stringBuilder8, 1, outputSettings21);
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09103");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        java.nio.charset.Charset charset7 = outputSettings0.getcharset();
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings10.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder15 = null;
        outputSettings14.charsetEncoder = charsetEncoder15;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings14.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings0.escapeMode(escapeMode17);
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings0.getescapeMode();
        java.lang.Class<?> wildcardClass20 = outputSettings0.getClass();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test09104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09104");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.lang.String str8 = textNode2.toString();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        org.jsoup.select.NodeVisitor nodeVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node11 = textNode2.traverse(nodeVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test09105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09105");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        textNode2.setBaseUri("hi!");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings11.setescapeMode(escapeMode14);
        outputSettings11.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings11.setescapeMode(escapeMode18);
        boolean boolean20 = outputSettings11.forceAllElementAsBlock;
        int int21 = outputSettings11.indentAmount;
        java.nio.charset.Charset charset22 = outputSettings11.getcharset();
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) 1, outputSettings11);
        java.lang.String str24 = textNode2.text;
        org.jsoup.nodes.Node node25 = textNode2.clone();
        java.lang.StringBuilder stringBuilder26 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        boolean boolean31 = outputSettings28.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings28.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.escapeMode(escapeMode34);
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings33.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings33.escapeMode;
        int int38 = outputSettings33.indentAmount();
        textNode2.outerHtmlTail(stringBuilder26, 100, outputSettings33);
        boolean boolean40 = textNode2.isBlank();
        java.lang.String str41 = textNode2.gettext();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNull(escapeMode36);
        org.junit.Assert.assertNull(escapeMode37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test09106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09106");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        boolean boolean6 = outputSettings3.getprettyPrint();
        boolean boolean7 = outputSettings3.forceAllElementAsBlock();
        outputSettings3.forceAllElementAsBlock = false;
        outputSettings3.setindentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings12.charset = charset14;
        outputSettings12.indentAmount = (-1);
        java.nio.charset.Charset charset18 = outputSettings12.charset();
        outputSettings3.charset = charset18;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        int int23 = outputSettings20.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings20.getcharsetEncoder();
        boolean boolean25 = outputSettings20.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings26.setescapeMode(escapeMode29);
        outputSettings26.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        outputSettings26.setescapeMode(escapeMode33);
        boolean boolean35 = outputSettings26.forceAllElementAsBlock;
        int int36 = outputSettings26.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings26.escapeMode(escapeMode37);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings39.setescapeMode(escapeMode42);
        outputSettings39.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = null;
        outputSettings39.setescapeMode(escapeMode46);
        boolean boolean48 = outputSettings39.forceAllElementAsBlock;
        int int49 = outputSettings39.indentAmount;
        java.nio.charset.Charset charset50 = outputSettings39.getcharset();
        outputSettings38.setcharset(charset50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings20.charset(charset50);
        outputSettings3.setcharset(charset50);
        outputSettings2.charset = charset50;
        int int55 = outputSettings2.getindentAmount();
        boolean boolean56 = outputSettings2.prettyPrint();
        int int57 = outputSettings2.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings2.clone();
        outputSettings58.indentAmount = 32;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(outputSettings58);
    }

    @Test
    public void test09107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09107");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        outputSettings5.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        boolean boolean15 = outputSettings12.getprettyPrint();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings12.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings12.getescapeMode();
        outputSettings5.setescapeMode(escapeMode19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings21.setprettyPrint(true);
        java.nio.charset.Charset charset31 = outputSettings21.getcharset();
        outputSettings21.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings21.forceAllElementAsBlock(false);
        boolean boolean36 = outputSettings21.prettyPrint();
        org.jsoup.nodes.TextNode textNode39 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = textNode39.equals((java.lang.Object) outputSettings40);
        int int43 = outputSettings40.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        outputSettings44.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset50 = outputSettings49.charset();
        outputSettings44.setcharset(charset50);
        outputSettings44.setprettyPrint(true);
        java.nio.charset.Charset charset54 = outputSettings44.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder55 = outputSettings44.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings44.escapeMode();
        boolean boolean57 = outputSettings44.getprettyPrint();
        boolean boolean58 = outputSettings44.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings44.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings40.escapeMode(escapeMode59);
        java.nio.charset.Charset charset61 = outputSettings60.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings60.escapeMode();
        outputSettings21.setescapeMode(escapeMode62);
        outputSettings5.setescapeMode(escapeMode62);
        boolean boolean65 = outputSettings5.forceAllElementAsBlock();
        boolean boolean66 = outputSettings5.forceAllElementAsBlock;
        int int67 = outputSettings5.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings5.indentAmount((int) '#');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(charsetEncoder55);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(outputSettings69);
    }

    @Test
    public void test09108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09108");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings0.escapeMode;
        boolean boolean6 = outputSettings0.prettyPrint();
        boolean boolean7 = outputSettings0.getforceAllElementAsBlock();
        int int8 = outputSettings0.indentAmount();
        boolean boolean9 = outputSettings0.prettyPrint;
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings0.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charsetEncoder10);
    }

    @Test
    public void test09109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09109");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset19 = outputSettings0.charset;
        boolean boolean20 = outputSettings0.forceAllElementAsBlock();
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09110");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings4.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset7 = outputSettings6.charset();
        int int8 = outputSettings6.indentAmount;
        java.nio.charset.Charset charset9 = outputSettings6.charset;
        boolean boolean10 = outputSettings6.prettyPrint;
        outputSettings6.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings6.clone();
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = null;
        outputSettings6.setescapeMode(escapeMode15);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.prettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings6.encoder();
        outputSettings5.setcharsetEncoder(charsetEncoder19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        boolean boolean29 = outputSettings26.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset32 = outputSettings31.charset();
        outputSettings30.charset = charset32;
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings30.encoder();
        boolean boolean35 = outputSettings30.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings30.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings26.escapeMode(escapeMode36);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings21.escapeMode(escapeMode36);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings39.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings39.setescapeMode(escapeMode42);
        boolean boolean44 = outputSettings39.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset47 = outputSettings46.charset();
        outputSettings45.charset = charset47;
        outputSettings45.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings45.getcharsetEncoder();
        outputSettings39.charsetEncoder = charsetEncoder51;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings39.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        int int58 = outputSettings55.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder59 = outputSettings55.getcharsetEncoder();
        boolean boolean60 = outputSettings55.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean62 = outputSettings61.prettyPrint;
        boolean boolean63 = outputSettings61.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = null;
        outputSettings61.setescapeMode(escapeMode64);
        outputSettings61.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = null;
        outputSettings61.setescapeMode(escapeMode68);
        boolean boolean70 = outputSettings61.forceAllElementAsBlock;
        int int71 = outputSettings61.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings61.escapeMode(escapeMode72);
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean75 = outputSettings74.prettyPrint;
        boolean boolean76 = outputSettings74.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode77 = null;
        outputSettings74.setescapeMode(escapeMode77);
        outputSettings74.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode81 = null;
        outputSettings74.setescapeMode(escapeMode81);
        boolean boolean83 = outputSettings74.forceAllElementAsBlock;
        int int84 = outputSettings74.indentAmount;
        java.nio.charset.Charset charset85 = outputSettings74.getcharset();
        outputSettings73.setcharset(charset85);
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings55.charset(charset85);
        outputSettings54.charset = charset85;
        outputSettings21.setcharset(charset85);
        boolean boolean90 = outputSettings21.prettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder91 = outputSettings21.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode92 = outputSettings21.escapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder93 = outputSettings21.encoder();
        outputSettings5.setcharsetEncoder(charsetEncoder93);
        java.nio.charset.CharsetEncoder charsetEncoder95 = outputSettings5.charsetEncoder;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertNotNull(charset85);
        org.junit.Assert.assertNotNull(outputSettings87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(charsetEncoder91);
        org.junit.Assert.assertTrue("'" + escapeMode92 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode92.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder93);
        org.junit.Assert.assertNotNull(charsetEncoder95);
    }

    @Test
    public void test09111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09111");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.Attributes attributes9 = textNode0.attributes();
        org.jsoup.nodes.Node node10 = textNode0.parent();
        org.jsoup.nodes.Node node11 = textNode0.clone();
        java.lang.String str12 = textNode0.toString();
        java.lang.String str13 = textNode0.gettext();
        boolean boolean15 = textNode0.hasAttr("i");
        java.lang.String str16 = textNode0.gettext();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(attributes9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test09112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09112");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        outputSettings0.forceAllElementAsBlock = false;
        boolean boolean10 = outputSettings0.forceAllElementAsBlock;
        java.nio.charset.Charset charset11 = outputSettings0.charset;
        outputSettings0.forceAllElementAsBlock = false;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charset11);
    }

    @Test
    public void test09113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09113");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node11 = textNode2.attr("hi!", "");
        java.lang.String str12 = textNode2.toString();
        textNode2.text = "!";
        org.jsoup.nodes.Node node15 = textNode2.nextSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test09114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09114");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.prettyPrint(false);
        boolean boolean7 = outputSettings6.forceAllElementAsBlock();
        boolean boolean8 = outputSettings6.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings9.setcharset(charset15);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings17.encoder();
        outputSettings9.setcharsetEncoder(charsetEncoder19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        int int24 = outputSettings21.getindentAmount();
        boolean boolean25 = outputSettings21.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings21.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings21.getcharsetEncoder();
        outputSettings9.setcharsetEncoder(charsetEncoder27);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings9.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset35 = outputSettings34.charset();
        outputSettings33.charset = charset35;
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings33.encoder();
        boolean boolean38 = outputSettings33.getprettyPrint();
        int int39 = outputSettings33.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings40.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings40.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings40.getcharsetEncoder();
        outputSettings33.setcharsetEncoder(charsetEncoder44);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings33.getescapeMode();
        outputSettings32.escapeMode = escapeMode46;
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings32.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings6.escapeMode(escapeMode48);
        int int50 = outputSettings49.getindentAmount();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test09115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09115");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.String str7 = textNode2.toString();
        java.lang.String str9 = textNode2.attr("hi!");
        textNode2.settext("h");
        org.jsoup.nodes.Document document12 = textNode2.ownerDocument();
        java.lang.String str13 = textNode2.gettext();
        textNode2.ensureAttributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "h" + "'", str13, "h");
    }

    @Test
    public void test09116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09116");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.getWholeText();
        java.lang.String str6 = textNode2.text();
        org.jsoup.nodes.Document document7 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode9 = textNode2.splitText((int) (short) 0);
        textNode2.settext("t");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = textNode16.equals((java.lang.Object) outputSettings17);
        int int20 = outputSettings17.getindentAmount();
        outputSettings17.indentAmount = (short) -1;
        boolean boolean23 = outputSettings17.forceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder12, 10, outputSettings17);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings17.escapeMode;
        outputSettings17.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings17.prettyPrint(false);
        outputSettings29.indentAmount = 100;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNull(document7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings29);
    }

    @Test
    public void test09117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09117");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        org.jsoup.nodes.TextNode textNode13 = textNode2.splitText(1);
        org.jsoup.nodes.Node node16 = textNode2.attr("text", "t");
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node18 = textNode2.clone();
        boolean boolean20 = textNode2.hasAttr("text");
        int int21 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node22 = textNode2.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node23 = node22.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test09118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09118");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.gettext();
        textNode2.text = "hi!";
        org.jsoup.nodes.Node node12 = textNode2.parent();
        java.lang.String str13 = textNode2.getWholeText();
        org.jsoup.nodes.Attributes attributes14 = textNode2.attributes();
        boolean boolean16 = textNode2.hasAttr("!");
        org.jsoup.nodes.TextNode textNode18 = textNode2.text("");
        java.lang.String str20 = textNode2.attr("hi!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(textNode18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test09119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09119");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        outputSettings11.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings11.getcharsetEncoder();
        outputSettings5.setcharsetEncoder(charsetEncoder16);
        outputSettings0.charsetEncoder = charsetEncoder16;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings19.encoder();
        boolean boolean22 = outputSettings19.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings23.charset = charset25;
        outputSettings23.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings23.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings23.escapeMode(escapeMode30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings32.charset = charset34;
        outputSettings32.indentAmount = (-1);
        java.nio.charset.Charset charset38 = outputSettings32.charset();
        boolean boolean39 = outputSettings32.forceAllElementAsBlock();
        java.nio.charset.Charset charset40 = outputSettings32.getcharset();
        outputSettings31.charset = charset40;
        outputSettings19.setcharset(charset40);
        outputSettings0.setcharset(charset40);
        java.nio.charset.Charset charset44 = outputSettings0.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        outputSettings45.setprettyPrint(false);
        int int50 = outputSettings45.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        boolean boolean54 = outputSettings51.getprettyPrint();
        boolean boolean55 = outputSettings51.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings51.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode();
        int int59 = outputSettings57.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        outputSettings60.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset66 = outputSettings65.charset();
        outputSettings60.setcharset(charset66);
        outputSettings60.setprettyPrint(true);
        java.nio.charset.Charset charset70 = outputSettings60.getcharset();
        outputSettings60.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings60.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset75 = outputSettings74.getcharset();
        outputSettings57.charset = charset75;
        outputSettings45.setcharset(charset75);
        java.nio.charset.Charset charset78 = outputSettings45.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings0.charset(charset78);
        boolean boolean80 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.indentAmount = '#';
        java.nio.charset.Charset charset83 = outputSettings0.getcharset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(charset83);
    }

    @Test
    public void test09120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09120");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        textNode2.text = "hi!";
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        boolean boolean12 = textNode2.isBlank();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings13.indentAmount(1);
        outputSettings13.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings13.encoder();
        boolean boolean23 = textNode2.equals((java.lang.Object) charsetEncoder22);
        org.jsoup.select.NodeVisitor nodeVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node25 = textNode2.traverse(nodeVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09121");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset15 = outputSettings14.getcharset();
        outputSettings14.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        boolean boolean25 = outputSettings22.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings22.prettyPrint(false);
        java.nio.charset.Charset charset28 = outputSettings22.charset;
        outputSettings22.setprettyPrint(false);
        java.nio.charset.Charset charset31 = outputSettings22.getcharset();
        outputSettings18.setcharset(charset31);
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings18.encoder();
        outputSettings14.setcharsetEncoder(charsetEncoder33);
        int int35 = outputSettings14.indentAmount;
        outputSettings14.setprettyPrint(true);
        java.nio.charset.Charset charset38 = outputSettings14.getcharset();
        outputSettings14.prettyPrint = true;
        boolean boolean41 = outputSettings14.forceAllElementAsBlock;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings14.charset("!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: !");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09122");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "");
        org.jsoup.nodes.Node node3 = textNode2.parent();
        java.lang.String str4 = textNode2.nodeName();
        org.jsoup.nodes.Node node6 = textNode2.removeAttr("ext");
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        outputSettings7.charset = charset9;
        outputSettings7.indentAmount = (-1);
        java.nio.charset.Charset charset13 = outputSettings7.charset();
        outputSettings7.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings18.clone();
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings18.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = null;
        outputSettings21.setescapeMode(escapeMode24);
        outputSettings21.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = null;
        outputSettings21.setescapeMode(escapeMode28);
        boolean boolean30 = outputSettings21.forceAllElementAsBlock;
        int int31 = outputSettings21.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings21.escapeMode(escapeMode32);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = null;
        outputSettings34.setescapeMode(escapeMode37);
        outputSettings34.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = null;
        outputSettings34.setescapeMode(escapeMode41);
        boolean boolean43 = outputSettings34.forceAllElementAsBlock;
        int int44 = outputSettings34.indentAmount;
        java.nio.charset.Charset charset45 = outputSettings34.getcharset();
        outputSettings33.setcharset(charset45);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings18.charset(charset45);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings7.charset(charset45);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings7.indentAmount((int) (short) 1);
        outputSettings50.forceAllElementAsBlock = true;
        java.nio.charset.Charset charset53 = outputSettings50.getcharset();
        boolean boolean54 = node6.equals((java.lang.Object) outputSettings50);
        int int55 = outputSettings50.indentAmount;
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test09123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09123");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings20.encoder();
        outputSettings12.setcharsetEncoder(charsetEncoder22);
        java.nio.charset.Charset charset24 = outputSettings12.getcharset();
        boolean boolean25 = outputSettings12.forceAllElementAsBlock();
        java.nio.charset.Charset charset26 = outputSettings12.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings0.charset(charset26);
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        boolean boolean33 = outputSettings30.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings30.prettyPrint(false);
        int int36 = outputSettings35.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings35.forceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.getescapeMode();
        outputSettings0.setescapeMode(escapeMode39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        outputSettings41.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings41.getcharsetEncoder();
        outputSettings41.prettyPrint = true;
        outputSettings41.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        boolean boolean54 = outputSettings51.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings51.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean58 = outputSettings57.prettyPrint;
        boolean boolean59 = outputSettings57.forceAllElementAsBlock;
        int int60 = outputSettings57.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings57.getcharsetEncoder();
        outputSettings56.setcharsetEncoder(charsetEncoder61);
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean64 = outputSettings63.prettyPrint;
        boolean boolean65 = outputSettings63.forceAllElementAsBlock;
        boolean boolean66 = outputSettings63.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings63.prettyPrint(false);
        java.nio.charset.Charset charset69 = outputSettings63.charset();
        outputSettings56.charset = charset69;
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings41.charset(charset69);
        outputSettings0.setcharset(charset69);
        boolean boolean73 = outputSettings0.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charsetEncoder46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test09124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09124");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        boolean boolean15 = outputSettings11.getforceAllElementAsBlock();
        outputSettings11.setprettyPrint(false);
        textNode6.outerHtmlTail(stringBuilder9, (int) '#', outputSettings11);
        org.jsoup.nodes.Node node19 = textNode6.parent();
        boolean boolean20 = textNode6.isBlank();
        org.jsoup.nodes.Node node21 = textNode6.previousSibling();
        java.lang.String str22 = textNode6.gettext();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test09125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09125");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("");
        org.jsoup.nodes.Node node12 = textNode2.attr("h", "h");
        textNode2.setBaseUri("h");
        java.lang.String str15 = textNode2.outerHtml();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test09126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09126");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings3.clone();
        boolean boolean5 = outputSettings4.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test09127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09127");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.text;
        java.lang.String str4 = textNode0.nodeName();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode0.siblingNodes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node6 = textNode0.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
        org.junit.Assert.assertNotNull(nodeList5);
    }

    @Test
    public void test09128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09128");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.absUrl("text");
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("ext");
        java.lang.String str10 = textNode2.toString();
        java.lang.String str11 = textNode2.text();
        textNode2.text = "t";
        java.lang.String str15 = textNode2.absUrl("i!");
        org.jsoup.nodes.TextNode textNode17 = textNode2.text("i");
        boolean boolean19 = textNode17.hasAttr("!");
        org.jsoup.nodes.TextNode textNode21 = textNode17.text("i");
        textNode21.text = "ext";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(textNode21);
    }

    @Test
    public void test09129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09129");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = null;
        outputSettings6.setescapeMode(escapeMode9);
        outputSettings6.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings6.setescapeMode(escapeMode13);
        boolean boolean15 = outputSettings6.forceAllElementAsBlock;
        int int16 = outputSettings6.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings19.setescapeMode(escapeMode22);
        outputSettings19.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings19.setescapeMode(escapeMode26);
        boolean boolean28 = outputSettings19.forceAllElementAsBlock;
        int int29 = outputSettings19.indentAmount;
        java.nio.charset.Charset charset30 = outputSettings19.getcharset();
        outputSettings18.setcharset(charset30);
        outputSettings0.charset = charset30;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings34.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings34.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        outputSettings38.charset = charset40;
        outputSettings38.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        int int47 = outputSettings44.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings44.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        outputSettings50.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset56 = outputSettings55.charset();
        outputSettings50.setcharset(charset56);
        outputSettings49.setcharset(charset56);
        outputSettings44.setcharset(charset56);
        outputSettings38.setcharset(charset56);
        outputSettings38.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder63 = outputSettings38.encoder();
        java.nio.charset.Charset charset64 = outputSettings38.getcharset();
        boolean boolean65 = outputSettings38.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean67 = outputSettings66.prettyPrint;
        boolean boolean68 = outputSettings66.forceAllElementAsBlock;
        outputSettings66.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings66.indentAmount(1);
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings72.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings72.clone();
        boolean boolean75 = outputSettings72.prettyPrint();
        java.nio.charset.Charset charset76 = outputSettings72.charset;
        outputSettings38.charset = charset76;
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings37.charset(charset76);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings78.forceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(charsetEncoder63);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(charset76);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertNotNull(outputSettings80);
    }

    @Test
    public void test09130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09130");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        textNode2.settext("");
        boolean boolean10 = textNode2.equals((java.lang.Object) (short) 1);
        org.jsoup.nodes.Document document11 = textNode2.ownerDocument();
        java.lang.String str12 = textNode2.nodeName();
        org.jsoup.nodes.Node node14 = textNode2.removeAttr("#");
        java.lang.String str15 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node17 = textNode2.after("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test09131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09131");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "text");
        java.lang.String str3 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode6 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document7 = textNode6.ownerDocument();
        org.jsoup.nodes.Node node10 = textNode6.attr("t", "");
        java.lang.String str11 = textNode6.baseUri();
        boolean boolean13 = textNode6.hasAttr("t");
        java.lang.String str14 = textNode6.text();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.before((org.jsoup.nodes.Node) textNode6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNull(document7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test09132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09132");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        boolean boolean6 = outputSettings3.getprettyPrint();
        boolean boolean7 = outputSettings3.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings3.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings3.getescapeMode();
        outputSettings2.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings2.getprettyPrint();
        java.nio.charset.Charset charset13 = outputSettings2.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings2.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09133");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset7 = outputSettings0.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        outputSettings8.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings8.setcharset(charset14);
        outputSettings8.setprettyPrint(true);
        java.nio.charset.Charset charset18 = outputSettings8.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings8.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings8.escapeMode();
        boolean boolean21 = outputSettings8.getprettyPrint();
        boolean boolean22 = outputSettings8.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings8.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings8.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings8.indentAmount((int) (byte) 1);
        java.nio.charset.Charset charset27 = outputSettings8.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings0.charset(charset27);
        org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str33 = textNode31.absUrl("t");
        textNode31.setBaseUri("");
        java.lang.StringBuilder stringBuilder36 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        int int41 = outputSettings38.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.charsetEncoder;
        outputSettings38.setprettyPrint(false);
        int int45 = outputSettings38.getindentAmount();
        textNode31.outerHtmlTail(stringBuilder36, (int) (short) 10, outputSettings38);
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings38.getcharsetEncoder();
        outputSettings28.setcharsetEncoder(charsetEncoder47);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(textNode31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder47);
    }

    @Test
    public void test09134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09134");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings2.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings5.escapeMode(escapeMode16);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = null;
        outputSettings18.setescapeMode(escapeMode21);
        outputSettings18.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings18.setescapeMode(escapeMode25);
        boolean boolean27 = outputSettings18.forceAllElementAsBlock;
        int int28 = outputSettings18.indentAmount;
        java.nio.charset.Charset charset29 = outputSettings18.getcharset();
        outputSettings17.setcharset(charset29);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings2.charset(charset29);
        int int32 = outputSettings31.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test09135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09135");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "#text");
        java.lang.String str3 = textNode2.outerHtml();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("i!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(textNode5);
    }

    @Test
    public void test09136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09136");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "ext");
        org.jsoup.nodes.Node node4 = textNode2.removeAttr("#");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node5 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test09137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09137");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.prettyPrint(true);
        boolean boolean9 = outputSettings8.prettyPrint;
        int int10 = outputSettings8.indentAmount;
        outputSettings8.forceAllElementAsBlock = false;
        int int13 = outputSettings8.indentAmount();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test09138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09138");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        int int25 = outputSettings8.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings8.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings8.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        outputSettings28.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings37.charset = charset39;
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings37.encoder();
        boolean boolean42 = outputSettings37.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings37.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings33.escapeMode(escapeMode43);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings28.escapeMode(escapeMode43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings28.getescapeMode();
        outputSettings8.setescapeMode(escapeMode46);
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset49 = outputSettings8.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings8.indentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        int int55 = outputSettings52.getindentAmount();
        boolean boolean56 = outputSettings52.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder57 = outputSettings52.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean59 = outputSettings58.prettyPrint;
        boolean boolean60 = outputSettings58.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = null;
        outputSettings58.setescapeMode(escapeMode61);
        outputSettings58.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = null;
        outputSettings58.setescapeMode(escapeMode65);
        boolean boolean67 = outputSettings58.forceAllElementAsBlock;
        int int68 = outputSettings58.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings58.escapeMode(escapeMode69);
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean72 = outputSettings71.prettyPrint;
        boolean boolean73 = outputSettings71.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode74 = null;
        outputSettings71.setescapeMode(escapeMode74);
        outputSettings71.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = null;
        outputSettings71.setescapeMode(escapeMode78);
        boolean boolean80 = outputSettings71.forceAllElementAsBlock;
        int int81 = outputSettings71.indentAmount;
        java.nio.charset.Charset charset82 = outputSettings71.getcharset();
        outputSettings70.setcharset(charset82);
        outputSettings52.charset = charset82;
        outputSettings51.charset = charset82;
        outputSettings51.setindentAmount((int) '4');
        java.nio.charset.CharsetEncoder charsetEncoder88 = outputSettings51.encoder();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charsetEncoder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(charset82);
        org.junit.Assert.assertNotNull(charsetEncoder88);
    }

    @Test
    public void test09139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09139");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.nodeName();
        org.jsoup.nodes.Node node4 = textNode2.clone();
        boolean boolean5 = textNode2.isBlank();
        java.lang.String str6 = textNode2.gettext();
        org.jsoup.nodes.Node node7 = textNode2.clone();
        java.lang.String str8 = node7.baseUri();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
    }

    @Test
    public void test09140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09140");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset3 = outputSettings0.charset;
        boolean boolean4 = outputSettings0.prettyPrint;
        outputSettings0.setforceAllElementAsBlock(true);
        outputSettings0.indentAmount = (short) 100;
        int int9 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings11.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings14.getcharsetEncoder();
        outputSettings14.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset24 = outputSettings23.charset();
        outputSettings22.charset = charset24;
        outputSettings22.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings22.getcharsetEncoder();
        outputSettings22.setforceAllElementAsBlock(false);
        boolean boolean31 = outputSettings22.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings32.charset = charset34;
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings32.encoder();
        outputSettings32.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset42 = outputSettings41.charset();
        outputSettings40.charset = charset42;
        outputSettings40.indentAmount = (-1);
        java.nio.charset.Charset charset46 = outputSettings40.charset();
        outputSettings40.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        boolean boolean52 = outputSettings49.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings49.prettyPrint(false);
        int int55 = outputSettings54.getindentAmount();
        outputSettings54.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings54.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        boolean boolean62 = outputSettings59.getprettyPrint();
        boolean boolean63 = outputSettings59.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings59.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.escapeMode();
        outputSettings54.setescapeMode(escapeMode66);
        outputSettings40.escapeMode = escapeMode66;
        outputSettings32.setescapeMode(escapeMode66);
        outputSettings22.setescapeMode(escapeMode66);
        outputSettings14.setescapeMode(escapeMode66);
        int int72 = outputSettings14.getindentAmount();
        java.nio.charset.Charset charset73 = outputSettings14.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings11.charset(charset73);
        outputSettings11.setindentAmount((int) '4');
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(outputSettings74);
    }

    @Test
    public void test09141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09141");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings6.forceAllElementAsBlock(true);
        int int12 = outputSettings6.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test09142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09142");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str3 = textNode2.gettext();
        textNode2.text = "hi!";
        textNode2.setBaseUri("");
        java.lang.String str8 = textNode2.toString();
        org.jsoup.nodes.Node node10 = textNode2.removeAttr("t");
        org.jsoup.nodes.TextNode textNode12 = textNode2.splitText(0);
        java.lang.String str13 = textNode2.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.before("i");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test09143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09143");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.charsetEncoder;
        outputSettings0.charsetEncoder = charsetEncoder11;
        outputSettings0.setprettyPrint(false);
        int int15 = outputSettings0.indentAmount;
        outputSettings0.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings0.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(charsetEncoder18);
    }

    @Test
    public void test09144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09144");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        textNode2.ensureAttributes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        outputSettings11.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings11.forceAllElementAsBlock(true);
        int int18 = outputSettings11.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings11.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.forceAllElementAsBlock(true);
        outputSettings21.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        boolean boolean27 = outputSettings24.getprettyPrint();
        boolean boolean28 = outputSettings24.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings24.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings24.getescapeMode();
        outputSettings21.escapeMode = escapeMode31;
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings21.charsetEncoder;
        textNode2.outerHtmlTail(stringBuilder9, (int) '4', outputSettings21);
        java.lang.StringBuilder stringBuilder35 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings37.charset = charset39;
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings37.encoder();
        outputSettings37.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings37.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset47 = outputSettings46.charset();
        outputSettings45.charset = charset47;
        outputSettings45.indentAmount = (-1);
        java.nio.charset.Charset charset51 = outputSettings45.charset();
        outputSettings45.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        boolean boolean57 = outputSettings54.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings54.prettyPrint(false);
        int int60 = outputSettings59.getindentAmount();
        outputSettings59.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder63 = outputSettings59.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean65 = outputSettings64.prettyPrint;
        boolean boolean66 = outputSettings64.forceAllElementAsBlock;
        boolean boolean67 = outputSettings64.getprettyPrint();
        boolean boolean68 = outputSettings64.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings64.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings70.escapeMode();
        outputSettings59.setescapeMode(escapeMode71);
        outputSettings45.escapeMode = escapeMode71;
        outputSettings37.setescapeMode(escapeMode71);
        org.jsoup.nodes.Entities.EscapeMode escapeMode75 = outputSettings37.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings37.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings76.clone();
        textNode2.outerHtmlTail(stringBuilder35, (int) (short) -1, outputSettings77);
        java.lang.String str80 = textNode2.attr("#");
        org.jsoup.nodes.Node node83 = textNode2.attr("h", "!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node85 = textNode2.after("ext");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode75 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode75.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test09145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09145");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        boolean boolean7 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.encoder();
        boolean boolean13 = outputSettings8.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings8.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.escapeMode(escapeMode14);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings17.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings17.escapeMode;
        outputSettings17.setforceAllElementAsBlock(true);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09146");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        java.nio.charset.Charset charset17 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings0.encoder();
        outputSettings0.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset21 = outputSettings0.charset();
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charset21);
    }

    @Test
    public void test09147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09147");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        textNode2.text = "#text";
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        boolean boolean19 = outputSettings16.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings16.prettyPrint(false);
        java.nio.charset.Charset charset22 = outputSettings16.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings16.clone();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings23.charsetEncoder;
        boolean boolean25 = outputSettings23.getforceAllElementAsBlock();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder14, (int) (short) 10, outputSettings23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09148");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        outputSettings0.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings0.escapeMode();
        int int16 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings0.getescapeMode();
        org.jsoup.nodes.TextNode textNode20 = new org.jsoup.nodes.TextNode("text", "text");
        int int21 = textNode20.siblingIndex();
        int int22 = textNode20.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList23 = textNode20.childNodes();
        java.lang.StringBuilder stringBuilder24 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        int int29 = outputSettings26.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings26.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        outputSettings32.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset38 = outputSettings37.charset();
        outputSettings32.setcharset(charset38);
        outputSettings31.setcharset(charset38);
        outputSettings26.setcharset(charset38);
        textNode20.outerHtmlTail(stringBuilder24, 10, outputSettings26);
        int int43 = outputSettings26.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings26.encoder();
        outputSettings26.prettyPrint = true;
        int int47 = outputSettings26.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings26.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings0.escapeMode(escapeMode48);
        boolean boolean50 = outputSettings0.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertNull(escapeMode15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(escapeMode17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test09149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09149");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("ext", "ext");
        java.lang.String str3 = textNode2.text();
        java.lang.StringBuilder stringBuilder4 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset8 = outputSettings7.charset();
        outputSettings6.charset = charset8;
        outputSettings6.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings6.prettyPrint(false);
        java.nio.charset.Charset charset14 = outputSettings6.charset;
        outputSettings6.setprettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings6.getescapeMode();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder4, (int) (byte) 1, outputSettings6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ext" + "'", str3, "ext");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09150");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        int int25 = outputSettings8.indentAmount;
        boolean boolean26 = outputSettings8.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings8.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        boolean boolean31 = outputSettings28.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings28.prettyPrint(false);
        int int34 = outputSettings33.getindentAmount();
        outputSettings33.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings37.charset = charset39;
        outputSettings37.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        int int46 = outputSettings43.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings43.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        outputSettings49.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset55 = outputSettings54.charset();
        outputSettings49.setcharset(charset55);
        outputSettings48.setcharset(charset55);
        outputSettings43.setcharset(charset55);
        outputSettings37.setcharset(charset55);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings33.charset(charset55);
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings33.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean63 = outputSettings62.prettyPrint;
        boolean boolean64 = outputSettings62.forceAllElementAsBlock;
        int int65 = outputSettings62.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder66 = outputSettings62.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean69 = outputSettings68.prettyPrint;
        boolean boolean70 = outputSettings68.forceAllElementAsBlock;
        outputSettings68.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset74 = outputSettings73.charset();
        outputSettings68.setcharset(charset74);
        outputSettings67.setcharset(charset74);
        outputSettings62.setcharset(charset74);
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings62.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings79.clone();
        int int81 = outputSettings80.getindentAmount();
        java.nio.charset.Charset charset82 = outputSettings80.charset();
        outputSettings62.setcharset(charset82);
        outputSettings33.charset = charset82;
        outputSettings8.charset = charset82;
        java.nio.charset.Charset charset86 = outputSettings8.getcharset();
        outputSettings8.forceAllElementAsBlock = false;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(charset82);
        org.junit.Assert.assertNotNull(charset86);
    }

    @Test
    public void test09151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09151");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        java.nio.charset.Charset charset8 = outputSettings0.getcharset();
        boolean boolean9 = outputSettings0.prettyPrint();
        boolean boolean10 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings11.clone();
        outputSettings11.setprettyPrint(false);
        outputSettings11.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset17 = outputSettings11.charset;
        outputSettings0.setcharset(charset17);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charset17);
    }

    @Test
    public void test09152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09152");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        int int15 = outputSettings14.getindentAmount();
        outputSettings14.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode();
        outputSettings14.setescapeMode(escapeMode26);
        outputSettings0.escapeMode = escapeMode26;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        boolean boolean33 = outputSettings30.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings30.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.escapeMode(escapeMode36);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        outputSettings38.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset44 = outputSettings43.charset();
        outputSettings38.setcharset(charset44);
        java.nio.charset.Charset charset46 = outputSettings38.getcharset();
        outputSettings37.charset = charset46;
        int int48 = outputSettings37.indentAmount;
        java.nio.charset.Charset charset49 = outputSettings37.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings37.prettyPrint(false);
        java.nio.charset.Charset charset52 = outputSettings51.charset;
        outputSettings0.setcharset(charset52);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(charset52);
    }

    @Test
    public void test09153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09153");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        outputSettings10.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings10.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        boolean boolean18 = outputSettings15.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings15.prettyPrint(false);
        java.nio.charset.Charset charset21 = outputSettings15.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings15.getescapeMode();
        outputSettings10.escapeMode = escapeMode22;
        boolean boolean24 = outputSettings10.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNull(escapeMode11);
        org.junit.Assert.assertNull(escapeMode14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test09154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09154");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        outputSettings8.indentAmount = (-1);
        java.nio.charset.Charset charset14 = outputSettings8.charset();
        outputSettings8.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.prettyPrint(false);
        int int23 = outputSettings22.getindentAmount();
        outputSettings22.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings22.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        boolean boolean30 = outputSettings27.getprettyPrint();
        boolean boolean31 = outputSettings27.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings27.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode();
        outputSettings22.setescapeMode(escapeMode34);
        outputSettings8.escapeMode = escapeMode34;
        outputSettings0.setescapeMode(escapeMode34);
        int int38 = outputSettings0.indentAmount();
        boolean boolean39 = outputSettings0.getprettyPrint();
        outputSettings0.setindentAmount((-1));
        java.nio.charset.Charset charset42 = outputSettings0.charset;
        boolean boolean43 = outputSettings0.forceAllElementAsBlock();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test09155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09155");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        org.jsoup.nodes.Node node7 = textNode2.clone();
        textNode2.text = "t";
        textNode2.ensureAttributes();
        textNode2.ensureAttributes();
        boolean boolean12 = textNode2.isBlank();
        org.jsoup.nodes.Document document13 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node16 = textNode2.attr("hi!", "#text");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(document13);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test09156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09156");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        boolean boolean9 = textNode6.isBlank();
        boolean boolean11 = textNode6.hasAttr("!");
        textNode6.setBaseUri("#text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode15 = textNode6.splitText((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09157");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings0.getcharsetEncoder();
        outputSettings0.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings0.escapeMode();
        boolean boolean10 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset13 = outputSettings0.charset;
        int int14 = outputSettings0.getindentAmount();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test09158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09158");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        outputSettings0.prettyPrint = false;
        outputSettings0.setforceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings0.getcharsetEncoder();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        boolean boolean13 = outputSettings8.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings14.setescapeMode(escapeMode17);
        outputSettings14.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = null;
        outputSettings14.setescapeMode(escapeMode21);
        boolean boolean23 = outputSettings14.forceAllElementAsBlock;
        int int24 = outputSettings14.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings14.escapeMode(escapeMode25);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        outputSettings27.setescapeMode(escapeMode30);
        outputSettings27.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings27.setescapeMode(escapeMode34);
        boolean boolean36 = outputSettings27.forceAllElementAsBlock;
        int int37 = outputSettings27.indentAmount;
        java.nio.charset.Charset charset38 = outputSettings27.getcharset();
        outputSettings26.setcharset(charset38);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings8.charset(charset38);
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings40.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings0.escapeMode(escapeMode41);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.charset("#");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: #");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings42);
    }

    @Test
    public void test09159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09159");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Document document1 = textNode0.ownerDocument();
        org.jsoup.nodes.TextNode textNode3 = textNode0.text("h");
        java.lang.String str4 = textNode0.gettext();
        textNode0.settext("t");
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(textNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "h" + "'", str4, "h");
    }

    @Test
    public void test09160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09160");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        int int11 = outputSettings9.indentAmount;
        java.nio.charset.Charset charset12 = outputSettings9.charset;
        outputSettings0.charset = charset12;
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings0.getcharsetEncoder();
        outputSettings0.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings0.escapeMode();
        boolean boolean18 = outputSettings0.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test09161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09161");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("#text");
        java.lang.String str12 = textNode2.gettext();
        textNode2.settext("hi!");
        org.jsoup.nodes.Node node15 = textNode2.clone();
        org.jsoup.nodes.Node node16 = textNode2.parent();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document17 = node16.ownerDocument();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test09162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09162");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "ext");
        org.jsoup.nodes.TextNode textNode5 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = textNode5.equals((java.lang.Object) outputSettings6);
        boolean boolean9 = outputSettings6.forceAllElementAsBlock;
        boolean boolean10 = textNode2.equals((java.lang.Object) outputSettings6);
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode("text", "text");
        int int14 = textNode13.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode13.childNodes();
        textNode13.settext("");
        java.lang.String str18 = textNode13.baseUri();
        textNode13.text = "t";
        java.lang.StringBuilder stringBuilder21 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        outputSettings23.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings23.setcharset(charset29);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset32 = outputSettings31.charset();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings31.encoder();
        outputSettings23.setcharsetEncoder(charsetEncoder33);
        textNode13.outerHtmlTail(stringBuilder21, 0, outputSettings23);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings23.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings23.getcharsetEncoder();
        outputSettings6.charsetEncoder = charsetEncoder38;
        outputSettings6.setindentAmount(0);
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(charsetEncoder38);
    }

    @Test
    public void test09163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09163");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings3.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings7.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings7.charsetEncoder;
        outputSettings3.setcharsetEncoder(charsetEncoder14);
        int int16 = outputSettings3.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings3.indentAmount(32);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(outputSettings20);
    }

    @Test
    public void test09164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09164");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.gettext();
        textNode2.text = "hi!";
        org.jsoup.nodes.Node node12 = textNode2.parent();
        java.lang.String str13 = textNode2.getWholeText();
        java.lang.String str14 = textNode2.nodeName();
        boolean boolean15 = textNode2.isBlank();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09165");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        int int3 = textNode2.siblingIndex();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test09166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09166");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("text");
        java.lang.String str9 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node10 = textNode2.parent();
        org.jsoup.nodes.Node node13 = textNode2.attr("text", "hi!");
        java.lang.String str14 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node17 = textNode2.attr("t", "i");
        org.jsoup.nodes.TextNode textNode20 = new org.jsoup.nodes.TextNode("text", "text");
        int int21 = textNode20.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList22 = textNode20.childNodes();
        textNode20.settext("");
        textNode20.setBaseUri("hi!");
        java.lang.StringBuilder stringBuilder27 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = null;
        outputSettings29.setescapeMode(escapeMode32);
        outputSettings29.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = null;
        outputSettings29.setescapeMode(escapeMode36);
        boolean boolean38 = outputSettings29.forceAllElementAsBlock;
        int int39 = outputSettings29.indentAmount;
        java.nio.charset.Charset charset40 = outputSettings29.getcharset();
        textNode20.outerHtmlTail(stringBuilder27, (int) (short) 1, outputSettings29);
        java.lang.String str42 = textNode20.getTEXT_KEY();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(nodeList22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "text" + "'", str42, "text");
    }

    @Test
    public void test09167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09167");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        boolean boolean4 = outputSettings3.forceAllElementAsBlock();
        int int5 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings3.indentAmount((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(outputSettings7);
    }

    @Test
    public void test09168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09168");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        boolean boolean23 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode26 = new org.jsoup.nodes.TextNode("text", "text");
        int int27 = textNode26.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList28 = textNode26.siblingNodes();
        textNode26.text = "";
        java.lang.String str31 = textNode26.baseUri();
        java.lang.String str33 = textNode26.attr("");
        org.jsoup.nodes.Document document34 = textNode26.ownerDocument();
        java.lang.String str35 = textNode26.text;
        java.lang.StringBuilder stringBuilder36 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        int int41 = outputSettings38.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        outputSettings44.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset50 = outputSettings49.charset();
        outputSettings44.setcharset(charset50);
        outputSettings43.setcharset(charset50);
        outputSettings38.setcharset(charset50);
        textNode26.outerHtmlTail(stringBuilder36, 0, outputSettings38);
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings38.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings0.escapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings56.prettyPrint(true);
        outputSettings60.setindentAmount(35);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "text" + "'", str31, "text");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(document34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNotNull(outputSettings60);
    }

    @Test
    public void test09169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09169");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        int int6 = outputSettings5.getindentAmount();
        outputSettings5.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        outputSettings9.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings20.setcharset(charset27);
        outputSettings15.setcharset(charset27);
        outputSettings9.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings5.charset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        int int39 = outputSettings38.getindentAmount();
        outputSettings38.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        boolean boolean47 = outputSettings43.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings43.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings49.escapeMode();
        outputSettings38.setescapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings5.escapeMode(escapeMode50);
        java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings52.charsetEncoder;
        java.nio.charset.Charset charset54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings52.charset(charset54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertNotNull(charsetEncoder53);
    }

    @Test
    public void test09170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09170");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.forceAllElementAsBlock(true);
        boolean boolean5 = outputSettings4.prettyPrint();
        int int6 = outputSettings4.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder7 = null;
        outputSettings4.charsetEncoder = charsetEncoder7;
        outputSettings4.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings4.prettyPrint(false);
        outputSettings12.setindentAmount(35);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings12);
    }

    @Test
    public void test09171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09171");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.Node node6 = textNode2.previousSibling();
        java.lang.String str7 = textNode2.text();
        textNode2.settext("hi!");
        java.lang.String str11 = textNode2.attr("text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test09172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09172");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.getprettyPrint();
        int int6 = outputSettings0.indentAmount();
        boolean boolean7 = outputSettings0.prettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.charsetEncoder;
        java.nio.charset.Charset charset9 = outputSettings0.charset;
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings0.encoder();
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charset11);
    }

    @Test
    public void test09173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09173");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        outputSettings10.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings10.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        boolean boolean18 = outputSettings15.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings15.prettyPrint(false);
        java.nio.charset.Charset charset21 = outputSettings15.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings15.getescapeMode();
        outputSettings10.escapeMode = escapeMode22;
        boolean boolean24 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        boolean boolean28 = outputSettings25.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings25.prettyPrint(false);
        java.nio.charset.Charset charset31 = outputSettings25.charset();
        outputSettings10.charset = charset31;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = null;
        outputSettings33.setescapeMode(escapeMode36);
        outputSettings33.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = null;
        outputSettings33.setescapeMode(escapeMode40);
        boolean boolean42 = outputSettings33.forceAllElementAsBlock;
        int int43 = outputSettings33.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings33.indentAmount((int) '#');
        java.nio.charset.Charset charset46 = outputSettings45.getcharset();
        outputSettings10.setcharset(charset46);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNull(escapeMode11);
        org.junit.Assert.assertNull(escapeMode14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(charset46);
    }

    @Test
    public void test09174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09174");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        boolean boolean12 = outputSettings10.prettyPrint;
        boolean boolean13 = outputSettings10.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset16 = outputSettings15.charset;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNull(escapeMode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset16);
    }

    @Test
    public void test09175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09175");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings14.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.forceAllElementAsBlock(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
    }

    @Test
    public void test09176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09176");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        java.lang.String str10 = textNode2.toString();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        outputSettings11.indentAmount = (-1);
        java.nio.charset.Charset charset17 = outputSettings11.charset();
        boolean boolean18 = outputSettings11.forceAllElementAsBlock();
        java.nio.charset.Charset charset19 = outputSettings11.getcharset();
        boolean boolean20 = outputSettings11.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        int int24 = outputSettings21.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings21.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        outputSettings27.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset33 = outputSettings32.charset();
        outputSettings27.setcharset(charset33);
        outputSettings26.setcharset(charset33);
        outputSettings21.setcharset(charset33);
        int int37 = outputSettings21.getindentAmount();
        outputSettings21.indentAmount = 'a';
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings11.escapeMode(escapeMode40);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.prettyPrint(true);
        boolean boolean44 = textNode2.equals((java.lang.Object) outputSettings41);
        java.lang.String str45 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "text" + "'", str45, "text");
    }

    @Test
    public void test09177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09177");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        int int1 = textNode0.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        java.nio.charset.Charset charset16 = outputSettings5.getcharset();
        outputSettings2.charset = charset16;
        boolean boolean18 = textNode0.equals((java.lang.Object) outputSettings2);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode();
        outputSettings25.setprettyPrint(true);
        boolean boolean29 = textNode0.equals((java.lang.Object) outputSettings25);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings25.forceAllElementAsBlock(false);
        org.jsoup.nodes.TextNode textNode32 = new org.jsoup.nodes.TextNode();
        int int33 = textNode32.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings34.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = null;
        outputSettings37.setescapeMode(escapeMode40);
        outputSettings37.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = null;
        outputSettings37.setescapeMode(escapeMode44);
        boolean boolean46 = outputSettings37.forceAllElementAsBlock;
        int int47 = outputSettings37.indentAmount;
        java.nio.charset.Charset charset48 = outputSettings37.getcharset();
        outputSettings34.charset = charset48;
        boolean boolean50 = textNode32.equals((java.lang.Object) outputSettings34);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        boolean boolean54 = outputSettings51.getprettyPrint();
        boolean boolean55 = outputSettings51.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings51.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode();
        outputSettings57.setprettyPrint(true);
        boolean boolean61 = textNode32.equals((java.lang.Object) outputSettings57);
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings57.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = null;
        outputSettings57.escapeMode = escapeMode63;
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean66 = outputSettings65.prettyPrint;
        boolean boolean67 = outputSettings65.forceAllElementAsBlock;
        outputSettings65.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings65.forceAllElementAsBlock(true);
        int int72 = outputSettings65.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings65.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset75 = outputSettings74.charset();
        int int76 = outputSettings74.indentAmount;
        java.nio.charset.Charset charset77 = outputSettings74.charset;
        outputSettings65.charset = charset77;
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings65.getcharsetEncoder();
        outputSettings57.setcharsetEncoder(charsetEncoder79);
        outputSettings25.charsetEncoder = charsetEncoder79;
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings82.clone();
        int int84 = outputSettings83.getindentAmount();
        int int85 = outputSettings83.indentAmount;
        outputSettings83.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean89 = outputSettings88.prettyPrint;
        boolean boolean90 = outputSettings88.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings92 = outputSettings88.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder93 = null;
        outputSettings92.charsetEncoder = charsetEncoder93;
        org.jsoup.nodes.Entities.EscapeMode escapeMode95 = outputSettings92.getescapeMode();
        outputSettings83.escapeMode = escapeMode95;
        org.jsoup.nodes.Document.OutputSettings outputSettings97 = outputSettings25.escapeMode(escapeMode95);
        boolean boolean98 = outputSettings97.getforceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode99 = outputSettings97.getescapeMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertNotNull(charsetEncoder79);
        org.junit.Assert.assertNotNull(outputSettings83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(outputSettings92);
        org.junit.Assert.assertTrue("'" + escapeMode95 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode95.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + escapeMode99 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode99.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09178");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.getTEXT_KEY();
        java.lang.String str11 = textNode2.absUrl("ext");
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode2.siblingNodes();
        org.jsoup.nodes.Attributes attributes13 = textNode2.attributes();
        org.jsoup.nodes.Node node14 = textNode2.previousSibling();
        textNode2.ensureAttributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test09179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09179");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node4 = textNode2.parent();
        textNode2.ensureAttributes();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings6.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings6.prettyPrint(true);
        outputSettings6.indentAmount = (short) -1;
        outputSettings6.setindentAmount((int) (short) -1);
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings6.encoder();
        boolean boolean16 = textNode2.equals((java.lang.Object) outputSettings6);
        int int17 = textNode2.siblingIndex();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test09180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09180");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        boolean boolean7 = textNode2.equals((java.lang.Object) 1L);
        java.lang.String str8 = textNode2.getWholeText();
        java.lang.String str9 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
    }

    @Test
    public void test09181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09181");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings0.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        outputSettings8.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings8.setcharset(charset14);
        outputSettings8.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings18.charset = charset20;
        outputSettings18.indentAmount = (-1);
        java.nio.charset.Charset charset24 = outputSettings18.charset();
        outputSettings18.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset27 = outputSettings18.getcharset();
        outputSettings8.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings0.charset(charset27);
        int int30 = outputSettings29.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings31.forceAllElementAsBlock(true);
        int int38 = outputSettings31.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings31.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.forceAllElementAsBlock(true);
        outputSettings41.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        boolean boolean47 = outputSettings44.getprettyPrint();
        boolean boolean48 = outputSettings44.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings44.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings44.getescapeMode();
        outputSettings41.escapeMode = escapeMode51;
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings29.escapeMode(escapeMode51);
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings29.encoder();
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertNotNull(charsetEncoder54);
    }

    @Test
    public void test09182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09182");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings9.getcharsetEncoder();
        outputSettings9.prettyPrint = true;
        boolean boolean17 = outputSettings9.forceAllElementAsBlock;
        textNode0.outerHtmlTail(stringBuilder7, (int) (byte) 100, outputSettings9);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode();
        outputSettings25.setprettyPrint(true);
        int int29 = outputSettings25.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings25.encoder();
        outputSettings9.setcharsetEncoder(charsetEncoder30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings32.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings32.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings32.getcharsetEncoder();
        outputSettings9.setcharsetEncoder(charsetEncoder37);
        java.nio.charset.Charset charset39 = outputSettings9.charset();
        boolean boolean40 = outputSettings9.forceAllElementAsBlock();
        boolean boolean41 = outputSettings9.getforceAllElementAsBlock();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09183");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        java.lang.String str9 = textNode2.attr("#text");
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("text", "text");
        int int13 = textNode12.siblingIndex();
        int int14 = textNode12.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode12.childNodes();
        java.lang.String str16 = textNode12.getWholeText();
        java.lang.String str17 = textNode12.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode12.childNodes();
        org.jsoup.nodes.Node node19 = textNode12.nextSibling();
        java.lang.String str20 = textNode12.outerHtml();
        java.lang.String str22 = textNode12.attr("#text");
        org.jsoup.nodes.TextNode textNode25 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = textNode25.equals((java.lang.Object) outputSettings26);
        boolean boolean29 = outputSettings26.prettyPrint;
        int int30 = outputSettings26.indentAmount();
        boolean boolean31 = textNode12.equals((java.lang.Object) outputSettings26);
        java.lang.String str32 = textNode12.text;
        org.jsoup.nodes.Attributes attributes33 = textNode12.attributes();
        java.lang.String str34 = textNode12.getWholeText();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node35 = textNode2.after((org.jsoup.nodes.Node) textNode12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "text" + "'", str32, "text");
        org.junit.Assert.assertNotNull(attributes33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "text" + "'", str34, "text");
    }

    @Test
    public void test09184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09184");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        outputSettings6.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        outputSettings6.setcharset(charset12);
        outputSettings5.setcharset(charset12);
        outputSettings0.setcharset(charset12);
        int int16 = outputSettings0.getindentAmount();
        outputSettings0.indentAmount = 'a';
        boolean boolean19 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings21.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        outputSettings23.setprettyPrint(false);
        java.nio.charset.Charset charset28 = outputSettings23.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings23.indentAmount((int) (byte) 10);
        boolean boolean31 = outputSettings30.prettyPrint();
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings30.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings30.getcharsetEncoder();
        outputSettings21.charsetEncoder = charsetEncoder34;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder34);
    }

    @Test
    public void test09185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09185");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode8.toString();
        java.lang.String str10 = textNode8.text();
        org.jsoup.nodes.TextNode textNode12 = textNode8.splitText(0);
        boolean boolean13 = textNode12.isBlank();
        java.lang.String str14 = textNode12.nodeName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ext" + "'", str9, "ext");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ext" + "'", str10, "ext");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
    }

    @Test
    public void test09186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09186");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("text");
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("t");
        java.lang.String str12 = textNode2.getWholeText();
        org.jsoup.nodes.Node node13 = textNode2.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            node13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test09187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09187");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        boolean boolean6 = textNode2.hasAttr("");
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("i!");
        java.lang.String str9 = textNode2.nodeName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
    }

    @Test
    public void test09188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09188");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        outputSettings0.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        outputSettings10.charset = charset12;
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings10.encoder();
        boolean boolean15 = outputSettings10.getprettyPrint();
        int int16 = outputSettings10.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings17.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings17.getcharsetEncoder();
        outputSettings10.setcharsetEncoder(charsetEncoder21);
        outputSettings0.setcharsetEncoder(charsetEncoder21);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings0.clone();
        boolean boolean25 = outputSettings24.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        boolean boolean29 = outputSettings26.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings26.prettyPrint(false);
        int int32 = outputSettings31.getindentAmount();
        outputSettings31.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings31.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        boolean boolean39 = outputSettings36.getprettyPrint();
        boolean boolean40 = outputSettings36.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings36.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings42.escapeMode();
        outputSettings31.setescapeMode(escapeMode43);
        org.jsoup.nodes.TextNode textNode47 = new org.jsoup.nodes.TextNode("text", "text");
        int int48 = textNode47.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList49 = textNode47.childNodes();
        java.lang.String str50 = textNode47.getWholeText();
        java.lang.String str51 = textNode47.text();
        org.jsoup.nodes.Document document52 = textNode47.ownerDocument();
        org.jsoup.nodes.TextNode textNode54 = textNode47.splitText((int) (short) 0);
        textNode47.settext("t");
        java.lang.StringBuilder stringBuilder57 = null;
        org.jsoup.nodes.TextNode textNode61 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean63 = outputSettings62.prettyPrint;
        boolean boolean64 = textNode61.equals((java.lang.Object) outputSettings62);
        int int65 = outputSettings62.getindentAmount();
        outputSettings62.indentAmount = (short) -1;
        boolean boolean68 = outputSettings62.forceAllElementAsBlock();
        textNode47.outerHtmlTail(stringBuilder57, 10, outputSettings62);
        org.jsoup.nodes.Entities.EscapeMode escapeMode70 = outputSettings62.escapeMode;
        outputSettings31.setescapeMode(escapeMode70);
        outputSettings24.escapeMode = escapeMode70;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(nodeList49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "text" + "'", str50, "text");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "text" + "'", str51, "text");
        org.junit.Assert.assertNull(document52);
        org.junit.Assert.assertNotNull(textNode54);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09189");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        java.lang.String str4 = textNode0.baseUri();
        java.lang.String str5 = textNode0.text;
        boolean boolean6 = textNode0.isBlank();
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode0.siblingNodes();
        java.lang.String str8 = textNode0.nodeName();
        org.jsoup.nodes.Node node9 = textNode0.clone();
        boolean boolean10 = textNode0.isBlank();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test09190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09190");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("t");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode();
        textNode11.setBaseUri("hi!");
        java.lang.String str14 = textNode11.text;
        java.lang.String str15 = textNode11.nodeName();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode11.siblingNodes();
        boolean boolean17 = textNode2.equals((java.lang.Object) nodeList16);
        java.lang.String str18 = textNode2.getTEXT_KEY();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        textNode2.ensureAttributes();
        org.jsoup.nodes.Attributes attributes21 = textNode2.attributes();
        java.lang.String str22 = textNode2.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode2.before("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
    }

    @Test
    public void test09191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09191");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("i!");
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings9.encoder();
        outputSettings9.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings9.escapeMode;
        outputSettings9.prettyPrint = false;
        java.nio.charset.Charset charset19 = outputSettings9.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings9.clone();
        textNode2.outerHtmlTail(stringBuilder7, (int) (short) 0, outputSettings20);
        outputSettings20.setprettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings20.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings20.escapeMode;
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09192");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        boolean boolean6 = outputSettings3.prettyPrint;
        int int7 = outputSettings3.indentAmount;
        boolean boolean8 = outputSettings3.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings3.prettyPrint(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
    }

    @Test
    public void test09193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09193");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        outputSettings6.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        outputSettings6.setcharset(charset12);
        outputSettings5.setcharset(charset12);
        outputSettings0.setcharset(charset12);
        int int16 = outputSettings0.getindentAmount();
        outputSettings0.indentAmount = 'a';
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(true);
        int int22 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        int int26 = outputSettings23.getindentAmount();
        boolean boolean27 = outputSettings23.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings23.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = null;
        outputSettings29.setescapeMode(escapeMode32);
        outputSettings29.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = null;
        outputSettings29.setescapeMode(escapeMode36);
        boolean boolean38 = outputSettings29.forceAllElementAsBlock;
        int int39 = outputSettings29.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings29.escapeMode(escapeMode40);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = null;
        outputSettings42.setescapeMode(escapeMode45);
        outputSettings42.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = null;
        outputSettings42.setescapeMode(escapeMode49);
        boolean boolean51 = outputSettings42.forceAllElementAsBlock;
        int int52 = outputSettings42.indentAmount;
        java.nio.charset.Charset charset53 = outputSettings42.getcharset();
        outputSettings41.setcharset(charset53);
        outputSettings23.charset = charset53;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings23.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings57.charsetEncoder;
        outputSettings0.setcharsetEncoder(charsetEncoder58);
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings0.escapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09194");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.forceAllElementAsBlock = false;
        int int7 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.forceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(outputSettings9);
    }

    @Test
    public void test09195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09195");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.nodeName();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "i!");
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.charsetEncoder;
        outputSettings7.setprettyPrint(false);
        boolean boolean14 = textNode2.equals((java.lang.Object) outputSettings7);
        boolean boolean15 = outputSettings7.getforceAllElementAsBlock();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09196");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        textNode2.text = "#text";
        org.jsoup.nodes.Node node14 = textNode2.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test09197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09197");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = null;
        outputSettings0.setescapeMode(escapeMode5);
        boolean boolean7 = outputSettings0.prettyPrint;
        outputSettings0.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings10.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder15 = null;
        outputSettings14.charsetEncoder = charsetEncoder15;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings14.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings14.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings0.escapeMode(escapeMode18);
        outputSettings19.setprettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings19);
    }

    @Test
    public void test09198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09198");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node1 = textNode0.parent();
        java.util.List<org.jsoup.nodes.Node> nodeList2 = textNode0.childNodes();
        textNode0.setBaseUri("hi!");
        org.jsoup.nodes.Document document5 = textNode0.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = textNode0.attr("t");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNotNull(nodeList2);
        org.junit.Assert.assertNull(document5);
    }

    @Test
    public void test09199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09199");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.text();
        org.jsoup.nodes.Node node6 = textNode2.removeAttr("i!");
        java.lang.String str7 = textNode2.gettext();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
    }

    @Test
    public void test09200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09200");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        org.jsoup.nodes.Node node6 = textNode2.parent();
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.lang.String str8 = textNode2.getWholeText();
        java.lang.String str9 = textNode2.nodeName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
    }

    @Test
    public void test09201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09201");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings0.escapeMode;
        boolean boolean6 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings7.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings13.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings13.charsetEncoder;
        outputSettings13.prettyPrint = false;
        outputSettings13.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings20.forceAllElementAsBlock(true);
        int int27 = outputSettings20.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings20.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.forceAllElementAsBlock(true);
        boolean boolean31 = outputSettings28.prettyPrint();
        int int32 = outputSettings28.getindentAmount();
        org.jsoup.nodes.TextNode textNode35 = new org.jsoup.nodes.TextNode("text", "text");
        int int36 = textNode35.siblingIndex();
        int int37 = textNode35.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList38 = textNode35.childNodes();
        java.lang.StringBuilder stringBuilder39 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        int int44 = outputSettings41.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings41.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean48 = outputSettings47.prettyPrint;
        boolean boolean49 = outputSettings47.forceAllElementAsBlock;
        outputSettings47.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset53 = outputSettings52.charset();
        outputSettings47.setcharset(charset53);
        outputSettings46.setcharset(charset53);
        outputSettings41.setcharset(charset53);
        textNode35.outerHtmlTail(stringBuilder39, 10, outputSettings41);
        int int58 = outputSettings41.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder59 = outputSettings41.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings41.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean62 = outputSettings61.prettyPrint;
        boolean boolean63 = outputSettings61.forceAllElementAsBlock;
        outputSettings61.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean67 = outputSettings66.prettyPrint;
        boolean boolean68 = outputSettings66.forceAllElementAsBlock;
        boolean boolean69 = outputSettings66.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset72 = outputSettings71.charset();
        outputSettings70.charset = charset72;
        java.nio.charset.CharsetEncoder charsetEncoder74 = outputSettings70.encoder();
        boolean boolean75 = outputSettings70.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings70.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings66.escapeMode(escapeMode76);
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings61.escapeMode(escapeMode76);
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings61.getescapeMode();
        outputSettings41.setescapeMode(escapeMode79);
        org.jsoup.nodes.Entities.EscapeMode escapeMode81 = outputSettings41.escapeMode;
        java.nio.charset.Charset charset82 = outputSettings41.charset;
        java.nio.charset.Charset charset83 = outputSettings41.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings28.charset(charset83);
        outputSettings13.setcharset(charset83);
        java.nio.charset.CharsetEncoder charsetEncoder86 = outputSettings13.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder86);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder59);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(charsetEncoder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode81 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode81.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset82);
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertNotNull(charsetEncoder86);
    }

    @Test
    public void test09202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09202");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        boolean boolean11 = textNode0.isBlank();
        java.lang.String str12 = textNode0.gettext();
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        int int17 = textNode15.siblingIndex();
        org.jsoup.nodes.Node node18 = textNode15.clone();
        java.lang.String str19 = textNode15.text;
        java.lang.String str20 = textNode15.nodeName();
        org.jsoup.nodes.TextNode textNode22 = textNode15.splitText(0);
        java.lang.String str23 = textNode22.toString();
        org.jsoup.nodes.Node node25 = textNode22.removeAttr("i!");
        boolean boolean26 = textNode0.equals((java.lang.Object) textNode22);
        java.lang.String str27 = textNode0.gettext();
        org.jsoup.nodes.Attributes attributes28 = textNode0.attributes();
        textNode0.setBaseUri("i!");
        org.jsoup.nodes.Node node33 = textNode0.attr("ext", "h");
        org.jsoup.nodes.Node node34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node35 = node33.before(node34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ext" + "'", str12, "ext");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "text" + "'", str23, "text");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ext" + "'", str27, "ext");
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test09203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09203");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset8 = outputSettings7.charset();
        outputSettings6.charset = charset8;
        outputSettings6.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings6.getcharsetEncoder();
        outputSettings0.charsetEncoder = charsetEncoder12;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.prettyPrint(true);
        boolean boolean16 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        outputSettings19.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.forceAllElementAsBlock(true);
        int int26 = outputSettings19.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings19.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.forceAllElementAsBlock(true);
        outputSettings29.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        boolean boolean35 = outputSettings32.getprettyPrint();
        boolean boolean36 = outputSettings32.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings32.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings32.getescapeMode();
        outputSettings29.escapeMode = escapeMode39;
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings29.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings0.escapeMode(escapeMode41);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = null;
        outputSettings43.setescapeMode(escapeMode46);
        outputSettings43.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = null;
        outputSettings43.setescapeMode(escapeMode50);
        boolean boolean52 = outputSettings43.forceAllElementAsBlock;
        int int53 = outputSettings43.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings43.escapeMode(escapeMode54);
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        boolean boolean59 = outputSettings56.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings56.prettyPrint(false);
        java.nio.charset.Charset charset62 = null;
        outputSettings61.setcharset(charset62);
        boolean boolean64 = outputSettings61.getforceAllElementAsBlock();
        boolean boolean65 = outputSettings61.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings61.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings55.escapeMode(escapeMode66);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings42.escapeMode(escapeMode66);
        int int69 = outputSettings68.getindentAmount();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test09204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09204");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "t");
        textNode2.setBaseUri("ext");
        int int5 = textNode2.siblingIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node7 = textNode2.before("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09205");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint;
        outputSettings0.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings8.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings11.setescapeMode(escapeMode14);
        outputSettings11.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings11.setescapeMode(escapeMode18);
        boolean boolean20 = outputSettings11.forceAllElementAsBlock;
        int int21 = outputSettings11.indentAmount;
        java.nio.charset.Charset charset22 = outputSettings11.getcharset();
        outputSettings8.charset = charset22;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings0.charset(charset22);
        outputSettings24.forceAllElementAsBlock = false;
        boolean boolean27 = outputSettings24.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        outputSettings28.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings28.setcharset(charset34);
        outputSettings28.setprettyPrint(true);
        java.nio.charset.Charset charset38 = outputSettings28.getcharset();
        outputSettings28.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings28.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset43 = outputSettings42.getcharset();
        outputSettings42.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings46.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        boolean boolean53 = outputSettings50.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings50.prettyPrint(false);
        java.nio.charset.Charset charset56 = outputSettings50.charset;
        outputSettings50.setprettyPrint(false);
        java.nio.charset.Charset charset59 = outputSettings50.getcharset();
        outputSettings46.setcharset(charset59);
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings46.encoder();
        outputSettings42.setcharsetEncoder(charsetEncoder61);
        outputSettings24.setcharsetEncoder(charsetEncoder61);
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings24.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertNotNull(charsetEncoder64);
    }

    @Test
    public void test09206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09206");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        textNode2.settext("hi!");
        boolean boolean9 = textNode2.hasAttr("text");
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings12.clone();
        boolean boolean14 = outputSettings13.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        boolean boolean19 = outputSettings15.forceAllElementAsBlock;
        java.nio.charset.Charset charset20 = outputSettings15.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings13.charset(charset20);
        boolean boolean22 = textNode2.equals((java.lang.Object) charset20);
        boolean boolean23 = textNode2.isBlank();
        org.jsoup.nodes.Attributes attributes24 = textNode2.attributes();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(attributes24);
    }

    @Test
    public void test09207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09207");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        java.nio.charset.Charset charset8 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.indentAmount(35);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(outputSettings10);
    }

    @Test
    public void test09208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09208");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Node node9 = textNode0.nextSibling();
        java.lang.String str10 = textNode0.text;
        java.lang.String str12 = textNode0.attr("ext");
        org.jsoup.nodes.Node node13 = textNode0.previousSibling();
        java.lang.String str14 = textNode0.text;
        java.lang.String str15 = textNode0.toString();
        org.jsoup.nodes.Document document16 = textNode0.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            document16.setBaseUri("i!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(document16);
    }

    @Test
    public void test09209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09209");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode2.baseUri();
        textNode2.settext("#");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
    }

    @Test
    public void test09210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09210");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.getWholeText();
        boolean boolean7 = textNode2.hasAttr("");
        java.lang.String str8 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.siblingNodes();
        boolean boolean11 = textNode2.hasAttr("text");
        org.jsoup.nodes.Node node12 = textNode2.previousSibling();
        org.jsoup.nodes.Node node13 = textNode2.parent();
        java.lang.String str14 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
    }

    @Test
    public void test09211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09211");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        int int14 = outputSettings11.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings11.getcharsetEncoder();
        outputSettings10.setcharsetEncoder(charsetEncoder15);
        outputSettings0.charsetEncoder = charsetEncoder15;
        outputSettings0.setforceAllElementAsBlock(false);
        int int20 = outputSettings0.getindentAmount();
        boolean boolean21 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.encoder();
        boolean boolean29 = outputSettings24.getprettyPrint();
        int int30 = outputSettings24.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings31.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings31.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings31.getcharsetEncoder();
        outputSettings24.setcharsetEncoder(charsetEncoder35);
        int int37 = outputSettings24.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings24.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings24.getcharsetEncoder();
        outputSettings0.charsetEncoder = charsetEncoder39;
        int int41 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset42 = outputSettings0.getcharset();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charset42);
    }

    @Test
    public void test09212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09212");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "t");
        org.jsoup.nodes.Node node3 = textNode2.parent();
        org.jsoup.nodes.Node node4 = textNode2.previousSibling();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        outputSettings8.setescapeMode(escapeMode11);
        outputSettings8.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = null;
        outputSettings8.setescapeMode(escapeMode15);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings8.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode;
        outputSettings18.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings18.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        boolean boolean26 = outputSettings23.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings23.prettyPrint(false);
        java.nio.charset.Charset charset29 = outputSettings23.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings23.getescapeMode();
        outputSettings18.escapeMode = escapeMode30;
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings18.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings18.getcharsetEncoder();
        textNode2.outerHtmlTail(stringBuilder6, (int) (short) -1, outputSettings18);
        org.jsoup.nodes.Attributes attributes35 = textNode2.attributes();
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNull(escapeMode19);
        org.junit.Assert.assertNull(escapeMode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(attributes35);
    }

    @Test
    public void test09213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09213");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        java.lang.String str6 = textNode2.nodeName();
        textNode2.ensureAttributes();
        java.lang.String str8 = textNode2.baseUri();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
    }

    @Test
    public void test09214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09214");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.Node node6 = textNode2.previousSibling();
        org.jsoup.nodes.Node node8 = textNode2.removeAttr("#text");
        boolean boolean10 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("h");
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode15.childNodes();
        org.jsoup.nodes.TextNode textNode19 = textNode15.text("");
        int int20 = textNode15.siblingIndex();
        org.jsoup.nodes.TextNode textNode22 = textNode15.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList23 = textNode15.childNodes();
        org.jsoup.nodes.TextNode textNode25 = textNode15.text("hi!");
        boolean boolean26 = textNode12.equals((java.lang.Object) "hi!");
        org.jsoup.nodes.Node node27 = textNode12.nextSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertNotNull(textNode19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertNotNull(textNode25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
    }

    @Test
    public void test09215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09215");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings0.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings9.setescapeMode(escapeMode12);
        outputSettings9.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings9.setescapeMode(escapeMode16);
        boolean boolean18 = outputSettings9.forceAllElementAsBlock;
        int int19 = outputSettings9.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings9.escapeMode(escapeMode20);
        int int22 = outputSettings9.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings25.clone();
        java.nio.charset.Charset charset27 = outputSettings26.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings9.charset(charset27);
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings28.escapeMode();
        org.jsoup.nodes.TextNode textNode30 = new org.jsoup.nodes.TextNode();
        textNode30.setBaseUri("hi!");
        java.lang.String str33 = textNode30.getTEXT_KEY();
        textNode30.text = "hi!";
        boolean boolean37 = textNode30.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList38 = textNode30.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        boolean boolean42 = outputSettings39.getprettyPrint();
        boolean boolean43 = outputSettings39.forceAllElementAsBlock();
        boolean boolean44 = outputSettings39.forceAllElementAsBlock;
        boolean boolean45 = textNode30.equals((java.lang.Object) outputSettings39);
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings39.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings39.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings39.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings28.escapeMode(escapeMode48);
        outputSettings0.setescapeMode(escapeMode48);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNull(escapeMode29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "text" + "'", str33, "text");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charsetEncoder46);
        org.junit.Assert.assertNotNull(charsetEncoder47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings49);
    }

    @Test
    public void test09216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09216");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings12.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(true);
        org.jsoup.nodes.TextNode textNode26 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = textNode26.equals((java.lang.Object) outputSettings27);
        int int30 = outputSettings27.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings31.charsetEncoder;
        outputSettings27.setcharsetEncoder(charsetEncoder34);
        outputSettings23.charsetEncoder = charsetEncoder34;
        outputSettings23.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings23.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset41 = outputSettings40.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        outputSettings42.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset48 = outputSettings47.charset();
        outputSettings42.setcharset(charset48);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset51 = outputSettings50.charset();
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings50.encoder();
        outputSettings42.setcharsetEncoder(charsetEncoder52);
        boolean boolean54 = outputSettings42.forceAllElementAsBlock();
        boolean boolean55 = outputSettings42.prettyPrint();
        outputSettings42.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings42.clone();
        java.nio.charset.Charset charset59 = outputSettings58.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset62 = outputSettings61.charset();
        outputSettings60.charset = charset62;
        outputSettings60.indentAmount = (-1);
        java.nio.charset.Charset charset66 = outputSettings60.charset();
        outputSettings60.setforceAllElementAsBlock(true);
        boolean boolean69 = outputSettings60.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings60.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean72 = outputSettings71.prettyPrint;
        boolean boolean73 = outputSettings71.forceAllElementAsBlock;
        outputSettings71.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder76 = outputSettings71.getcharsetEncoder();
        outputSettings71.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings71.getcharsetEncoder();
        java.nio.charset.Charset charset80 = outputSettings71.charset;
        outputSettings70.charset = charset80;
        outputSettings70.prettyPrint = true;
        java.nio.charset.Charset charset84 = outputSettings70.charset;
        outputSettings58.charset = charset84;
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings40.charset(charset84);
        int int87 = outputSettings40.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(charsetEncoder76);
        org.junit.Assert.assertNotNull(charsetEncoder79);
        org.junit.Assert.assertNotNull(charset80);
        org.junit.Assert.assertNotNull(charset84);
        org.junit.Assert.assertNotNull(outputSettings86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
    }

    @Test
    public void test09217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09217");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.getcharsetEncoder();
        outputSettings0.prettyPrint = true;
        boolean boolean8 = outputSettings0.forceAllElementAsBlock;
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        boolean boolean10 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings0.escapeMode;
        outputSettings0.setindentAmount((int) '#');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09218");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str9 = textNode0.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.forceAllElementAsBlock(false);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings42);
        org.jsoup.nodes.Node node46 = textNode0.previousSibling();
        java.lang.String str47 = textNode0.toString();
        boolean boolean48 = textNode0.isBlank();
        textNode0.settext("!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test09219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09219");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings6.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings6.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.clone();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
    }

    @Test
    public void test09220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09220");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        int int9 = textNode2.siblingIndex();
        java.lang.String str10 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node11 = textNode2.nextSibling();
        org.jsoup.nodes.Attributes attributes12 = textNode2.attributes();
        java.lang.String str13 = textNode2.toString();
        java.lang.String str14 = textNode2.text;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test09221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09221");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        java.lang.String str11 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode13.siblingNodes();
        java.lang.String str15 = textNode13.text;
        java.lang.String str16 = textNode13.text();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test09222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09222");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        java.nio.charset.Charset charset11 = outputSettings0.charset();
        outputSettings0.setforceAllElementAsBlock(true);
        outputSettings0.indentAmount = 0;
        outputSettings0.setprettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charset11);
    }

    @Test
    public void test09223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09223");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.absUrl("text");
        java.lang.String str6 = textNode2.text();
        org.jsoup.nodes.Node node7 = textNode2.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node9 = textNode2.childNode((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test09224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09224");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.gettext();
        java.lang.String str7 = textNode2.text();
        org.jsoup.nodes.Node node8 = textNode2.clone();
        org.jsoup.nodes.Node node9 = textNode2.nextSibling();
        textNode2.setBaseUri("i");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test09225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09225");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        boolean boolean11 = outputSettings8.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings8.prettyPrint(false);
        int int14 = outputSettings13.getindentAmount();
        outputSettings13.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings17.charset = charset19;
        outputSettings17.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        int int26 = outputSettings23.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings23.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        outputSettings29.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset35 = outputSettings34.charset();
        outputSettings29.setcharset(charset35);
        outputSettings28.setcharset(charset35);
        outputSettings23.setcharset(charset35);
        outputSettings17.setcharset(charset35);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings13.charset(charset35);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        boolean boolean44 = outputSettings41.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings41.prettyPrint(false);
        int int47 = outputSettings46.getindentAmount();
        outputSettings46.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder50 = outputSettings46.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        boolean boolean54 = outputSettings51.getprettyPrint();
        boolean boolean55 = outputSettings51.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings51.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode();
        outputSettings46.setescapeMode(escapeMode58);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings13.escapeMode(escapeMode58);
        textNode2.outerHtmlTail(stringBuilder6, (int) (byte) 0, outputSettings13);
        java.lang.String str62 = textNode2.text;
        org.jsoup.nodes.TextNode textNode64 = textNode2.text("hi!");
        boolean boolean65 = textNode64.isBlank();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "t" + "'", str62, "t");
        org.junit.Assert.assertNotNull(textNode64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test09226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09226");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings0.escapeMode;
        boolean boolean6 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        outputSettings8.prettyPrint = false;
        boolean boolean12 = outputSettings8.prettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings8.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder13);
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("text", "text");
        int int18 = textNode17.siblingIndex();
        textNode17.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode22 = textNode17.text("text");
        java.lang.String str23 = textNode22.baseUri();
        boolean boolean24 = textNode22.isBlank();
        java.lang.StringBuilder stringBuilder25 = null;
        org.jsoup.nodes.TextNode textNode29 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList30 = textNode29.childNodes();
        org.jsoup.nodes.TextNode textNode32 = textNode29.splitText(1);
        org.jsoup.nodes.Node node35 = textNode32.attr("hi!", "t");
        java.lang.String str37 = textNode32.attr("#text");
        java.lang.String str38 = textNode32.getTEXT_KEY();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset41 = outputSettings40.charset();
        outputSettings39.charset = charset41;
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings39.encoder();
        outputSettings39.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings39.escapeMode;
        outputSettings39.prettyPrint = false;
        boolean boolean49 = outputSettings39.getforceAllElementAsBlock();
        boolean boolean50 = textNode32.equals((java.lang.Object) outputSettings39);
        textNode22.outerHtmlTail(stringBuilder25, (int) (short) -1, outputSettings39);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings52.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder57 = null;
        outputSettings56.charsetEncoder = charsetEncoder57;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings56.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings56.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset63 = outputSettings56.getcharset();
        outputSettings39.setcharset(charset63);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings0.charset(charset63);
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings65.escapeMode(escapeMode66);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "text" + "'", str23, "text");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeList30);
        org.junit.Assert.assertNotNull(textNode32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "text" + "'", str38, "text");
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(outputSettings67);
    }

    @Test
    public void test09227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09227");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        outputSettings5.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings5.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings5.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings14.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings20.encoder();
        int int22 = outputSettings20.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings20.getcharsetEncoder();
        java.nio.charset.Charset charset24 = outputSettings20.charset();
        outputSettings5.charset = charset24;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(charset24);
    }

    @Test
    public void test09228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09228");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        outputSettings0.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings0.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings0.prettyPrint(false);
        int int18 = outputSettings0.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertNull(escapeMode15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test09229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09229");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings7.charsetEncoder;
        outputSettings3.setcharsetEncoder(charsetEncoder10);
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings3.encoder();
        boolean boolean13 = outputSettings3.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09230");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        int int9 = textNode2.siblingIndex();
        boolean boolean11 = textNode2.hasAttr("t");
        org.jsoup.nodes.Node node12 = textNode2.clone();
        textNode2.ensureAttributes();
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.encoder();
        boolean boolean21 = outputSettings16.prettyPrint;
        java.nio.charset.Charset charset22 = outputSettings16.charset;
        boolean boolean23 = outputSettings16.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.encoder();
        boolean boolean29 = outputSettings24.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings24.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings16.escapeMode(escapeMode30);
        boolean boolean32 = outputSettings16.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        int int36 = outputSettings33.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings33.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        outputSettings39.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset45 = outputSettings44.charset();
        outputSettings39.setcharset(charset45);
        outputSettings38.setcharset(charset45);
        outputSettings33.setcharset(charset45);
        outputSettings16.charset = charset45;
        java.nio.charset.CharsetEncoder charsetEncoder50 = outputSettings16.encoder();
        textNode2.outerHtmlTail(stringBuilder14, 0, outputSettings16);
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings16.getescapeMode();
        boolean boolean53 = outputSettings16.getprettyPrint();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(charsetEncoder50);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test09231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09231");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node7 = textNode2.attr("#text", "");
        java.lang.String str8 = textNode2.gettext();
        int int9 = textNode2.siblingIndex();
        java.lang.String str10 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("ext");
        textNode12.text = "h";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertNotNull(textNode12);
    }

    @Test
    public void test09232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09232");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.escapeMode(escapeMode11);
        int int13 = outputSettings0.getindentAmount();
        outputSettings0.indentAmount = 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        outputSettings16.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings16.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        int int27 = outputSettings24.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.getcharsetEncoder();
        outputSettings16.setcharsetEncoder(charsetEncoder28);
        outputSettings0.setcharsetEncoder(charsetEncoder28);
        outputSettings0.forceAllElementAsBlock = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder28);
    }

    @Test
    public void test09233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09233");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        int int6 = outputSettings5.getindentAmount();
        outputSettings5.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        boolean boolean14 = outputSettings10.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings10.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode();
        outputSettings5.setescapeMode(escapeMode17);
        boolean boolean19 = outputSettings5.prettyPrint;
        boolean boolean20 = outputSettings5.prettyPrint();
        java.nio.charset.Charset charset21 = outputSettings5.charset();
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings5.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charsetEncoder22);
    }

    @Test
    public void test09234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09234");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = node9.outerHtml();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test09235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09235");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.TextNode textNode4 = org.jsoup.nodes.TextNode.createFromEncoded("text", "text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings7.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings13.encoder();
        int int15 = outputSettings13.indentAmount;
        outputSettings13.setforceAllElementAsBlock(false);
        textNode4.outerHtmlTail(stringBuilder5, 0, outputSettings13);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings13.getcharsetEncoder();
        outputSettings0.charsetEncoder = charsetEncoder19;
        int int21 = outputSettings0.indentAmount;
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test09236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09236");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node6 = textNode2.attr("#text", "text");
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings9.setcharset(charset16);
        textNode2.outerHtmlTail(stringBuilder7, 0, outputSettings9);
        java.lang.String str20 = textNode2.gettext();
        java.lang.String str21 = textNode2.outerHtml();
        java.lang.String str22 = textNode2.text();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode2.childNode((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test09237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09237");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "ext");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings5.escapeMode(escapeMode16);
        int int18 = outputSettings5.getindentAmount();
        outputSettings5.indentAmount = (-1);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings5.getcharset();
        textNode2.outerHtmlTail(stringBuilder3, (int) (short) 10, outputSettings5);
        java.lang.String str24 = textNode2.text;
        java.lang.String str25 = textNode2.gettext();
        org.jsoup.nodes.Document document26 = textNode2.ownerDocument();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNull(escapeMode21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(document26);
    }

    @Test
    public void test09238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09238");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings6.encoder();
        int int8 = outputSettings6.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings6.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.forceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.getescapeMode();
        java.nio.charset.Charset charset20 = outputSettings18.getcharset();
        java.nio.charset.Charset charset21 = outputSettings18.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings6.charset(charset21);
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings22.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(charsetEncoder23);
    }

    @Test
    public void test09239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09239");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        org.jsoup.nodes.TextNode textNode13 = textNode2.splitText(1);
        org.jsoup.nodes.Node node16 = textNode2.attr("text", "t");
        org.jsoup.nodes.TextNode textNode19 = new org.jsoup.nodes.TextNode("text", "text");
        int int20 = textNode19.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList21 = textNode19.siblingNodes();
        textNode19.text = "";
        java.lang.String str24 = textNode19.baseUri();
        java.lang.String str26 = textNode19.attr("");
        org.jsoup.nodes.Document document27 = textNode19.ownerDocument();
        java.lang.String str28 = textNode19.text;
        java.lang.String str29 = textNode19.gettext();
        org.jsoup.nodes.Node node30 = textNode19.nextSibling();
        java.lang.String str31 = textNode19.outerHtml();
        boolean boolean32 = node16.equals((java.lang.Object) str31);
        org.jsoup.nodes.Document document33 = node16.ownerDocument();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "text" + "'", str24, "text");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(document33);
    }

    @Test
    public void test09240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09240");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        textNode2.settext("");
        boolean boolean10 = textNode2.equals((java.lang.Object) (short) 1);
        org.jsoup.nodes.Document document11 = textNode2.ownerDocument();
        java.lang.String str13 = textNode2.attr("h");
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        int int19 = outputSettings16.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = null;
        outputSettings16.setescapeMode(escapeMode21);
        boolean boolean23 = outputSettings16.prettyPrint;
        outputSettings16.setprettyPrint(false);
        textNode2.outerHtmlTail(stringBuilder14, (int) (byte) 100, outputSettings16);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings27.charset = charset29;
        outputSettings27.indentAmount = (-1);
        java.nio.charset.Charset charset33 = outputSettings27.charset();
        outputSettings27.setforceAllElementAsBlock(true);
        boolean boolean36 = outputSettings27.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings27.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        outputSettings38.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings38.getcharsetEncoder();
        outputSettings38.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings38.getcharsetEncoder();
        java.nio.charset.Charset charset47 = outputSettings38.charset;
        outputSettings37.charset = charset47;
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings37.getescapeMode();
        outputSettings16.escapeMode = escapeMode49;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(document11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertNotNull(charsetEncoder46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09241");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        boolean boolean12 = outputSettings10.prettyPrint;
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = textNode15.equals((java.lang.Object) outputSettings16);
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset20 = outputSettings16.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings21.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings21.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings21.escapeMode();
        outputSettings16.setescapeMode(escapeMode25);
        outputSettings10.escapeMode = escapeMode25;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        outputSettings28.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings28.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings34.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = null;
        outputSettings34.escapeMode = escapeMode36;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        int int41 = outputSettings38.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        outputSettings44.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset50 = outputSettings49.charset();
        outputSettings44.setcharset(charset50);
        outputSettings43.setcharset(charset50);
        outputSettings38.setcharset(charset50);
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings38.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = null;
        outputSettings55.setescapeMode(escapeMode58);
        outputSettings55.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = null;
        outputSettings55.setescapeMode(escapeMode62);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings55.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.escapeMode;
        outputSettings65.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings65.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean71 = outputSettings70.prettyPrint;
        boolean boolean72 = outputSettings70.forceAllElementAsBlock;
        boolean boolean73 = outputSettings70.getprettyPrint();
        boolean boolean74 = outputSettings70.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings70.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode77 = outputSettings76.escapeMode();
        outputSettings65.setescapeMode(escapeMode77);
        outputSettings38.escapeMode = escapeMode77;
        outputSettings34.setescapeMode(escapeMode77);
        org.jsoup.nodes.Entities.EscapeMode escapeMode81 = outputSettings34.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings10.escapeMode(escapeMode81);
        outputSettings82.setindentAmount((int) (byte) -1);
        java.nio.charset.Charset charset85 = outputSettings82.charset;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNull(escapeMode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNull(escapeMode66);
        org.junit.Assert.assertNull(escapeMode69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + escapeMode77 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode77.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode81 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode81.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertNotNull(charset85);
    }

    @Test
    public void test09242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09242");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        textNode2.text = "ext";
        textNode2.ensureAttributes();
        int int12 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node13 = textNode2.parent();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test09243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09243");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings9.getcharsetEncoder();
        outputSettings9.prettyPrint = true;
        boolean boolean17 = outputSettings9.forceAllElementAsBlock;
        textNode0.outerHtmlTail(stringBuilder7, (int) (byte) 100, outputSettings9);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode();
        outputSettings25.setprettyPrint(true);
        int int29 = outputSettings25.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings25.encoder();
        outputSettings9.setcharsetEncoder(charsetEncoder30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings32.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings32.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings32.getcharsetEncoder();
        outputSettings9.setcharsetEncoder(charsetEncoder37);
        java.nio.charset.Charset charset39 = outputSettings9.charset();
        outputSettings9.setforceAllElementAsBlock(true);
        outputSettings9.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings9.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset46 = outputSettings45.charset;
        int int47 = outputSettings45.indentAmount();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test09244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09244");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings9.getcharsetEncoder();
        outputSettings9.prettyPrint = true;
        boolean boolean17 = outputSettings9.forceAllElementAsBlock;
        textNode0.outerHtmlTail(stringBuilder7, (int) (byte) 100, outputSettings9);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode();
        outputSettings25.setprettyPrint(true);
        int int29 = outputSettings25.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings25.encoder();
        outputSettings9.setcharsetEncoder(charsetEncoder30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings32.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings32.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings32.getcharsetEncoder();
        outputSettings9.setcharsetEncoder(charsetEncoder37);
        java.nio.charset.Charset charset39 = outputSettings9.charset();
        outputSettings9.setforceAllElementAsBlock(true);
        outputSettings9.forceAllElementAsBlock = false;
        outputSettings9.indentAmount = (byte) -1;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings9.charset("hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(charset39);
    }

    @Test
    public void test09245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09245");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.getWholeText();
        java.lang.String str8 = textNode2.outerHtml();
        java.lang.String str9 = textNode2.outerHtml();
        java.lang.Class<?> wildcardClass10 = textNode2.getClass();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test09246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09246");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings10.setprettyPrint(true);
        java.nio.charset.Charset charset20 = outputSettings10.getcharset();
        outputSettings10.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings10.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset25 = outputSettings24.getcharset();
        outputSettings24.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings28.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        boolean boolean35 = outputSettings32.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings32.prettyPrint(false);
        java.nio.charset.Charset charset38 = outputSettings32.charset;
        outputSettings32.setprettyPrint(false);
        java.nio.charset.Charset charset41 = outputSettings32.getcharset();
        outputSettings28.setcharset(charset41);
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings28.encoder();
        outputSettings24.setcharsetEncoder(charsetEncoder43);
        outputSettings0.charsetEncoder = charsetEncoder43;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset48 = outputSettings47.charset();
        outputSettings46.charset = charset48;
        java.nio.charset.CharsetEncoder charsetEncoder50 = outputSettings46.encoder();
        boolean boolean51 = outputSettings46.prettyPrint;
        java.nio.charset.Charset charset52 = outputSettings46.charset;
        boolean boolean53 = outputSettings46.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset56 = outputSettings55.charset();
        outputSettings54.charset = charset56;
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings54.encoder();
        boolean boolean59 = outputSettings54.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings54.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings46.escapeMode(escapeMode60);
        boolean boolean62 = outputSettings61.forceAllElementAsBlock();
        boolean boolean63 = outputSettings61.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean65 = outputSettings64.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings64.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean69 = outputSettings68.prettyPrint;
        boolean boolean70 = outputSettings68.forceAllElementAsBlock;
        boolean boolean71 = outputSettings68.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings68.prettyPrint(false);
        java.nio.charset.Charset charset74 = outputSettings68.charset;
        outputSettings68.setprettyPrint(false);
        java.nio.charset.Charset charset77 = outputSettings68.getcharset();
        outputSettings64.setcharset(charset77);
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings64.encoder();
        outputSettings61.charsetEncoder = charsetEncoder79;
        outputSettings0.setcharsetEncoder(charsetEncoder79);
        java.nio.charset.Charset charset82 = outputSettings0.charset;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(charsetEncoder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertNotNull(charsetEncoder79);
        org.junit.Assert.assertNotNull(charset82);
    }

    @Test
    public void test09247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09247");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Node node9 = textNode0.nextSibling();
        java.lang.String str10 = textNode0.text;
        boolean boolean11 = textNode0.isBlank();
        org.jsoup.nodes.Node node12 = textNode0.clone();
        java.lang.String str13 = textNode0.getTEXT_KEY();
        java.lang.String str14 = textNode0.getTEXT_KEY();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
    }

    @Test
    public void test09248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09248");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        textNode2.text = "hi!";
        org.jsoup.nodes.Node node11 = textNode2.clone();
        org.jsoup.nodes.Node node12 = node11.previousSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test09249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09249");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        java.lang.String str8 = textNode2.baseUri();
        textNode2.settext("ext");
        boolean boolean11 = textNode2.isBlank();
        textNode2.ensureAttributes();
        java.lang.String str13 = textNode2.getWholeText();
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.encoder();
        boolean boolean21 = outputSettings16.prettyPrint;
        java.nio.charset.Charset charset22 = outputSettings16.charset;
        boolean boolean23 = outputSettings16.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.encoder();
        boolean boolean29 = outputSettings24.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings24.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings16.escapeMode(escapeMode30);
        boolean boolean32 = outputSettings31.forceAllElementAsBlock();
        boolean boolean33 = outputSettings31.getforceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings31.encoder();
        textNode2.outerHtmlTail(stringBuilder14, (int) (byte) 100, outputSettings31);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings31.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings40.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings41.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings43.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = null;
        outputSettings48.setescapeMode(escapeMode51);
        outputSettings48.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = null;
        outputSettings48.setescapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings48.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode;
        outputSettings58.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings58.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean64 = outputSettings63.prettyPrint;
        boolean boolean65 = outputSettings63.forceAllElementAsBlock;
        boolean boolean66 = outputSettings63.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings63.prettyPrint(false);
        java.nio.charset.Charset charset69 = outputSettings63.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode70 = outputSettings63.getescapeMode();
        outputSettings58.escapeMode = escapeMode70;
        boolean boolean72 = outputSettings58.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        boolean boolean76 = outputSettings73.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings73.prettyPrint(false);
        java.nio.charset.Charset charset79 = outputSettings73.charset();
        outputSettings58.charset = charset79;
        outputSettings43.setcharset(charset79);
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings42.charset(charset79);
        outputSettings42.prettyPrint = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode85 = outputSettings42.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings37.escapeMode(escapeMode85);
        java.nio.charset.Charset charset87 = outputSettings37.charset;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ext" + "'", str13, "ext");
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNull(escapeMode59);
        org.junit.Assert.assertNull(escapeMode62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertNotNull(charset79);
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertTrue("'" + escapeMode85 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode85.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings86);
        org.junit.Assert.assertNotNull(charset87);
    }

    @Test
    public void test09250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09250");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.prettyPrint = false;
        outputSettings0.setindentAmount((int) (byte) 1);
        boolean boolean12 = outputSettings0.prettyPrint;
        java.nio.charset.CharsetEncoder charsetEncoder13 = null;
        outputSettings0.setcharsetEncoder(charsetEncoder13);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09251");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.getcharsetEncoder();
        boolean boolean9 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings0.getescapeMode();
        java.lang.Class<?> wildcardClass11 = escapeMode10.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test09252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09252");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        java.lang.String str8 = textNode2.baseUri();
        textNode2.settext("ext");
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        org.jsoup.nodes.Node node13 = textNode2.removeAttr("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = node13.after("t");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test09253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09253");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("h", "#text");
        org.jsoup.nodes.Node node3 = textNode2.nextSibling();
        org.jsoup.select.NodeVisitor nodeVisitor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node5 = node3.traverse(nodeVisitor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test09254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09254");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.getprettyPrint();
        int int6 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings7.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder11);
        int int13 = outputSettings0.getindentAmount();
        outputSettings0.setprettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode;
        int int17 = outputSettings0.indentAmount;
        int int18 = outputSettings0.indentAmount;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test09255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09255");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node6 = textNode2.attr("#text", "text");
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("ext");
        java.lang.String str9 = textNode2.gettext();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ext" + "'", str9, "ext");
    }

    @Test
    public void test09256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09256");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings12.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(true);
        org.jsoup.nodes.TextNode textNode26 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = textNode26.equals((java.lang.Object) outputSettings27);
        int int30 = outputSettings27.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings31.charsetEncoder;
        outputSettings27.setcharsetEncoder(charsetEncoder34);
        outputSettings23.charsetEncoder = charsetEncoder34;
        outputSettings23.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings23.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset41 = outputSettings40.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        outputSettings42.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset48 = outputSettings47.charset();
        outputSettings42.setcharset(charset48);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset51 = outputSettings50.charset();
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings50.encoder();
        outputSettings42.setcharsetEncoder(charsetEncoder52);
        boolean boolean54 = outputSettings42.forceAllElementAsBlock();
        boolean boolean55 = outputSettings42.prettyPrint();
        outputSettings42.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings42.clone();
        java.nio.charset.Charset charset59 = outputSettings58.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset62 = outputSettings61.charset();
        outputSettings60.charset = charset62;
        outputSettings60.indentAmount = (-1);
        java.nio.charset.Charset charset66 = outputSettings60.charset();
        outputSettings60.setforceAllElementAsBlock(true);
        boolean boolean69 = outputSettings60.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings60.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean72 = outputSettings71.prettyPrint;
        boolean boolean73 = outputSettings71.forceAllElementAsBlock;
        outputSettings71.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder76 = outputSettings71.getcharsetEncoder();
        outputSettings71.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings71.getcharsetEncoder();
        java.nio.charset.Charset charset80 = outputSettings71.charset;
        outputSettings70.charset = charset80;
        outputSettings70.prettyPrint = true;
        java.nio.charset.Charset charset84 = outputSettings70.charset;
        outputSettings58.charset = charset84;
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings40.charset(charset84);
        int int87 = outputSettings86.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(charsetEncoder76);
        org.junit.Assert.assertNotNull(charsetEncoder79);
        org.junit.Assert.assertNotNull(charset80);
        org.junit.Assert.assertNotNull(charset84);
        org.junit.Assert.assertNotNull(outputSettings86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
    }

    @Test
    public void test09257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09257");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        java.lang.String str11 = textNode10.gettext();
        textNode10.ensureAttributes();
        java.lang.String str13 = textNode10.nodeName();
        org.jsoup.nodes.Attributes attributes14 = textNode10.attributes();
        org.jsoup.nodes.TextNode textNode16 = textNode10.text("text");
        boolean boolean17 = textNode10.isBlank();
        int int18 = textNode10.siblingIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ext" + "'", str11, "ext");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test09258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09258");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.getprettyPrint();
        int int6 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings7.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder11);
        int int13 = outputSettings0.indentAmount;
        boolean boolean14 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset17 = outputSettings16.charset();
        outputSettings15.charset = charset17;
        outputSettings15.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings15.escapeMode(escapeMode22);
        outputSettings15.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings28.clone();
        boolean boolean30 = outputSettings29.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        int int34 = outputSettings31.getindentAmount();
        boolean boolean35 = outputSettings31.forceAllElementAsBlock;
        java.nio.charset.Charset charset36 = outputSettings31.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings29.charset(charset36);
        outputSettings15.charset = charset36;
        outputSettings0.charset = charset36;
        boolean boolean40 = outputSettings0.forceAllElementAsBlock;
        java.nio.charset.Charset charset41 = outputSettings0.charset();
        java.nio.charset.Charset charset42 = outputSettings0.charset;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charset42);
    }

    @Test
    public void test09259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09259");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = null;
        outputSettings0.setescapeMode(escapeMode5);
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        outputSettings8.setescapeMode(escapeMode11);
        outputSettings8.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = null;
        outputSettings8.setescapeMode(escapeMode15);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings8.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode;
        outputSettings18.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings18.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        boolean boolean26 = outputSettings23.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings23.prettyPrint(false);
        java.nio.charset.Charset charset29 = outputSettings23.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings23.getescapeMode();
        outputSettings18.escapeMode = escapeMode30;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings0.escapeMode(escapeMode30);
        outputSettings32.setforceAllElementAsBlock(false);
        outputSettings32.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings37.charset = charset39;
        outputSettings37.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        int int46 = outputSettings43.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings43.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        outputSettings49.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset55 = outputSettings54.charset();
        outputSettings49.setcharset(charset55);
        outputSettings48.setcharset(charset55);
        outputSettings43.setcharset(charset55);
        outputSettings37.setcharset(charset55);
        boolean boolean60 = outputSettings37.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode63 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean65 = outputSettings64.prettyPrint;
        boolean boolean66 = textNode63.equals((java.lang.Object) outputSettings64);
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings64.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings37.escapeMode(escapeMode67);
        outputSettings32.escapeMode = escapeMode67;
        boolean boolean70 = outputSettings32.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNull(escapeMode19);
        org.junit.Assert.assertNull(escapeMode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test09260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09260");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean5 = outputSettings4.prettyPrint;
        boolean boolean6 = outputSettings4.forceAllElementAsBlock;
        outputSettings4.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings4.setcharset(charset10);
        java.nio.charset.Charset charset12 = outputSettings4.getcharset();
        outputSettings3.setcharset(charset12);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        boolean boolean17 = outputSettings14.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings14.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.escapeMode(escapeMode20);
        outputSettings19.setindentAmount(52);
        int int24 = outputSettings19.indentAmount();
        outputSettings19.prettyPrint = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings19.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings28.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings28.setescapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings28.indentAmount((int) (byte) 10);
        int int35 = outputSettings28.getindentAmount();
        outputSettings28.indentAmount = 0;
        java.nio.charset.CharsetEncoder charsetEncoder38 = null;
        outputSettings28.setcharsetEncoder(charsetEncoder38);
        org.jsoup.nodes.TextNode textNode42 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = textNode42.equals((java.lang.Object) outputSettings43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings43.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings43.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings43.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings49.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings49.escapeMode;
        outputSettings28.escapeMode = escapeMode51;
        outputSettings19.setescapeMode(escapeMode51);
        outputSettings3.setescapeMode(escapeMode51);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        boolean boolean58 = outputSettings55.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings55.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings60.escapeMode(escapeMode61);
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean64 = outputSettings63.prettyPrint;
        boolean boolean65 = outputSettings63.forceAllElementAsBlock;
        outputSettings63.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset69 = outputSettings68.charset();
        outputSettings63.setcharset(charset69);
        java.nio.charset.Charset charset71 = outputSettings63.getcharset();
        outputSettings62.charset = charset71;
        java.nio.charset.CharsetEncoder charsetEncoder73 = outputSettings62.encoder();
        java.nio.charset.Charset charset74 = outputSettings62.charset();
        outputSettings3.charset = charset74;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNull(escapeMode27);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(charset71);
        org.junit.Assert.assertNotNull(charsetEncoder73);
        org.junit.Assert.assertNotNull(charset74);
    }

    @Test
    public void test09261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09261");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("text");
        java.lang.String str9 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node10 = textNode2.parent();
        org.jsoup.nodes.Node node13 = textNode2.attr("text", "hi!");
        org.jsoup.nodes.TextNode textNode16 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        org.jsoup.nodes.Document document17 = textNode16.ownerDocument();
        textNode16.setBaseUri("ext");
        java.lang.StringBuilder stringBuilder20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = null;
        textNode16.outerHtmlTail(stringBuilder20, (int) (short) 100, outputSettings22);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = node13.after((org.jsoup.nodes.Node) textNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertNull(document17);
    }

    @Test
    public void test09262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09262");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str10 = textNode2.attr("i");
        boolean boolean11 = textNode2.isBlank();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09263");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList9 = node8.siblingNodes();
        org.jsoup.nodes.Node node10 = node8.clone();
        java.lang.Class<?> wildcardClass11 = node10.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test09264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09264");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        java.lang.String str3 = textNode2.toString();
        java.lang.String str4 = textNode2.toString();
        org.jsoup.nodes.TextNode textNode6 = textNode2.splitText(0);
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings9.setescapeMode(escapeMode12);
        outputSettings9.indentAmount = '4';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings9.prettyPrint(false);
        boolean boolean18 = outputSettings9.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings9.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.indentAmount((int) (byte) 10);
        boolean boolean23 = outputSettings22.forceAllElementAsBlock;
        textNode2.outerHtmlTail(stringBuilder7, (int) (short) 100, outputSettings22);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings22.getcharsetEncoder();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "text" + "'", str4, "text");
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charsetEncoder25);
    }

    @Test
    public void test09265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09265");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        int int25 = outputSettings8.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings8.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings8.indentAmount((int) (short) 100);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings8.indentAmount(10);
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings30.charsetEncoder;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charsetEncoder32);
    }

    @Test
    public void test09266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09266");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.Document document6 = textNode0.ownerDocument();
        org.jsoup.nodes.Node node7 = textNode0.nextSibling();
        textNode0.setBaseUri("i");
        textNode0.settext("i!");
        java.lang.String str12 = textNode0.outerHtml();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "i!" + "'", str12, "i!");
    }

    @Test
    public void test09267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09267");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        org.jsoup.nodes.Node node11 = textNode2.attr("text", "#text");
        org.jsoup.nodes.Node node12 = textNode2.previousSibling();
        org.jsoup.nodes.Node node15 = textNode2.attr("t", "t");
        boolean boolean17 = textNode2.hasAttr("hi!");
        textNode2.ensureAttributes();
        java.lang.String str19 = textNode2.getWholeText();
        boolean boolean20 = textNode2.isBlank();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#text" + "'", str19, "#text");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09268");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings3.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        boolean boolean9 = outputSettings5.forceAllElementAsBlock();
        boolean boolean10 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings5.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings4.escapeMode(escapeMode11);
        int int13 = outputSettings12.indentAmount();
        boolean boolean14 = outputSettings12.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings12.clone();
        int int16 = outputSettings15.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test09269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09269");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.getWholeText();
        java.lang.String str8 = textNode2.gettext();
        java.lang.String str9 = textNode2.nodeName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
    }

    @Test
    public void test09270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09270");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        java.lang.String str11 = textNode2.text;
        java.lang.String str12 = textNode2.gettext();
        org.jsoup.nodes.Node node13 = textNode2.nextSibling();
        java.lang.String str14 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode16 = textNode2.text("i!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(textNode16);
    }

    @Test
    public void test09271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09271");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.lang.String str8 = textNode0.outerHtml();
        textNode0.setBaseUri("");
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode0.childNodes();
        java.lang.String str12 = textNode0.baseUri();
        java.lang.String str14 = textNode0.attr("i");
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode();
        textNode15.setBaseUri("hi!");
        java.lang.String str18 = textNode15.getTEXT_KEY();
        textNode15.text = "hi!";
        boolean boolean22 = textNode15.hasAttr("text");
        org.jsoup.nodes.Node node23 = textNode15.nextSibling();
        java.lang.String str24 = textNode15.getWholeText();
        org.jsoup.nodes.Document document25 = textNode15.ownerDocument();
        java.lang.String str26 = textNode15.text;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node27 = textNode0.after((org.jsoup.nodes.Node) textNode15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(document25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test09272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09272");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode9 = textNode2.splitText(0);
        java.lang.String str11 = textNode9.attr("");
        textNode9.ensureAttributes();
        textNode9.settext("i!");
        org.jsoup.nodes.Node node15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node16 = textNode9.after(node15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test09273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09273");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode();
        textNode16.setBaseUri("hi!");
        java.lang.String str19 = textNode16.getTEXT_KEY();
        textNode16.text = "hi!";
        boolean boolean23 = textNode16.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList24 = textNode16.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        boolean boolean28 = outputSettings25.getprettyPrint();
        boolean boolean29 = outputSettings25.forceAllElementAsBlock();
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = textNode16.equals((java.lang.Object) outputSettings25);
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings25.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings25.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings14.escapeMode(escapeMode34);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset38 = outputSettings37.charset();
        outputSettings36.charset = charset38;
        outputSettings36.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings36.prettyPrint(false);
        java.nio.charset.Charset charset44 = outputSettings43.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings35.charset(charset44);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings35.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charsetEncoder32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09274");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        textNode0.text = "#text";
        java.lang.String str12 = textNode0.attr("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode0.siblingNodes();
        org.jsoup.nodes.TextNode textNode15 = textNode0.text("text");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode0.childNodes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertNotNull(nodeList16);
    }

    @Test
    public void test09275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09275");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        textNode2.settext("");
        java.lang.String str27 = textNode2.getTEXT_KEY();
        java.lang.String str29 = textNode2.absUrl("!");
        org.jsoup.nodes.Attributes attributes30 = textNode2.attributes();
        org.jsoup.nodes.Node node31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node32 = textNode2.before(node31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "text" + "'", str27, "text");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(attributes30);
    }

    @Test
    public void test09276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09276");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("ext");
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.childNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNotNull(nodeList11);
    }

    @Test
    public void test09277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09277");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        outputSettings11.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset17 = outputSettings16.charset();
        outputSettings11.setcharset(charset17);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings11.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        boolean boolean23 = outputSettings20.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(false);
        int int26 = outputSettings25.getindentAmount();
        outputSettings25.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings29.charset = charset31;
        outputSettings29.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        int int38 = outputSettings35.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings35.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        outputSettings41.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset47 = outputSettings46.charset();
        outputSettings41.setcharset(charset47);
        outputSettings40.setcharset(charset47);
        outputSettings35.setcharset(charset47);
        outputSettings29.setcharset(charset47);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings25.charset(charset47);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        boolean boolean56 = outputSettings53.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings53.prettyPrint(false);
        int int59 = outputSettings58.getindentAmount();
        outputSettings58.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder62 = outputSettings58.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean64 = outputSettings63.prettyPrint;
        boolean boolean65 = outputSettings63.forceAllElementAsBlock;
        boolean boolean66 = outputSettings63.getprettyPrint();
        boolean boolean67 = outputSettings63.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings63.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode70 = outputSettings69.escapeMode();
        outputSettings58.setescapeMode(escapeMode70);
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings25.escapeMode(escapeMode70);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings11.escapeMode(escapeMode70);
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings11.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean77 = outputSettings76.prettyPrint;
        boolean boolean78 = outputSettings76.forceAllElementAsBlock;
        int int79 = outputSettings76.getindentAmount();
        boolean boolean80 = outputSettings76.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder81 = outputSettings76.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder82 = outputSettings76.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset85 = outputSettings84.charset();
        outputSettings83.charset = charset85;
        java.nio.charset.CharsetEncoder charsetEncoder87 = outputSettings83.encoder();
        boolean boolean88 = outputSettings83.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode89 = outputSettings83.escapeMode;
        outputSettings76.setescapeMode(escapeMode89);
        org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings75.escapeMode(escapeMode89);
        outputSettings75.indentAmount = (byte) -1;
        boolean boolean94 = outputSettings75.prettyPrint;
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) 100, outputSettings75);
        java.lang.String str96 = textNode2.baseUri();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(charsetEncoder81);
        org.junit.Assert.assertNotNull(charsetEncoder82);
        org.junit.Assert.assertNotNull(charset85);
        org.junit.Assert.assertNotNull(charsetEncoder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + escapeMode89 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode89.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "text" + "'", str96, "text");
    }

    @Test
    public void test09278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09278");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        textNode0.text = "text";
        java.lang.String str10 = textNode0.toString();
        org.jsoup.nodes.Node node11 = textNode0.parent();
        java.lang.String str12 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder13 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        boolean boolean18 = outputSettings15.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings15.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings15.indentAmount(52);
        textNode0.outerHtmlTail(stringBuilder13, 32, outputSettings15);
        java.lang.String str24 = textNode0.text();
        java.lang.String str25 = textNode0.text();
        org.jsoup.nodes.Document document26 = textNode0.ownerDocument();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(document26);
    }

    @Test
    public void test09279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09279");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.prettyPrint(false);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        java.nio.charset.Charset charset16 = null;
        outputSettings15.setcharset(charset16);
        boolean boolean18 = outputSettings15.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings15.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        boolean boolean27 = outputSettings24.getprettyPrint();
        boolean boolean28 = outputSettings24.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings24.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings24.getescapeMode();
        outputSettings23.setescapeMode(escapeMode31);
        outputSettings20.escapeMode = escapeMode31;
        outputSettings0.escapeMode = escapeMode31;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09280");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings15.setescapeMode(escapeMode18);
        outputSettings15.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings15.setescapeMode(escapeMode22);
        boolean boolean24 = outputSettings15.forceAllElementAsBlock;
        int int25 = outputSettings15.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings15.escapeMode(escapeMode26);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings28.setescapeMode(escapeMode31);
        outputSettings28.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        outputSettings28.setescapeMode(escapeMode35);
        boolean boolean37 = outputSettings28.forceAllElementAsBlock;
        int int38 = outputSettings28.indentAmount;
        java.nio.charset.Charset charset39 = outputSettings28.getcharset();
        outputSettings27.setcharset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset39);
        boolean boolean42 = outputSettings41.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings41.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        boolean boolean48 = outputSettings45.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings45.prettyPrint(false);
        int int51 = outputSettings50.getindentAmount();
        outputSettings50.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings50.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        boolean boolean58 = outputSettings55.getprettyPrint();
        boolean boolean59 = outputSettings55.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings55.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode();
        outputSettings50.setescapeMode(escapeMode62);
        boolean boolean64 = outputSettings50.prettyPrint;
        java.nio.charset.Charset charset65 = outputSettings50.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings41.charset(charset65);
        boolean boolean67 = outputSettings41.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09281");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        org.jsoup.nodes.TextNode textNode13 = textNode2.splitText(1);
        org.jsoup.nodes.Node node16 = textNode2.attr("text", "t");
        java.lang.String str17 = textNode2.gettext();
        java.lang.String str19 = textNode2.attr("t");
        java.lang.String str20 = textNode2.text();
        textNode2.settext("i!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "h" + "'", str17, "h");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "t" + "'", str20, "t");
    }

    @Test
    public void test09282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09282");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        textNode2.setBaseUri("text");
        java.lang.String str12 = textNode2.text;
        int int13 = textNode2.siblingIndex();
        java.lang.String str14 = textNode2.getWholeText();
        textNode2.text = "#text";
        org.jsoup.nodes.TextNode textNode18 = textNode2.text("i!");
        textNode18.settext("#");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(textNode18);
    }

    @Test
    public void test09283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09283");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings0.getescapeMode();
        outputSettings0.prettyPrint = true;
        java.lang.Class<?> wildcardClass14 = outputSettings0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNull(escapeMode11);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test09284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09284");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("text");
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("t");
        org.jsoup.nodes.TextNode textNode13 = textNode2.splitText((int) (short) 1);
        org.jsoup.nodes.Node node14 = textNode13.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode13.siblingNodes();
        textNode13.text = "i!";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(nodeList15);
    }

    @Test
    public void test09285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09285");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        textNode2.setBaseUri("text");
        java.lang.String str12 = textNode2.text;
        java.lang.String str14 = textNode2.absUrl("#text");
        java.lang.String str16 = textNode2.attr("");
        boolean boolean17 = textNode2.isBlank();
        textNode2.ensureAttributes();
        java.lang.StringBuilder stringBuilder19 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = null;
        outputSettings21.setescapeMode(escapeMode24);
        outputSettings21.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = null;
        outputSettings21.setescapeMode(escapeMode28);
        boolean boolean30 = outputSettings21.forceAllElementAsBlock;
        int int31 = outputSettings21.indentAmount;
        java.nio.charset.Charset charset32 = outputSettings21.getcharset();
        boolean boolean33 = outputSettings21.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings21.forceAllElementAsBlock(false);
        textNode2.outerHtmlTail(stringBuilder19, (int) (byte) -1, outputSettings35);
        org.jsoup.nodes.Node node37 = textNode2.clone();
        org.jsoup.nodes.Node node38 = node37.nextSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test09286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09286");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        java.nio.charset.Charset charset17 = outputSettings0.getcharset();
        outputSettings0.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings0.clone();
        boolean boolean21 = outputSettings20.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09287");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        outputSettings0.prettyPrint = false;
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings0.charsetEncoder;
        boolean boolean14 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.prettyPrint = false;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09288");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        textNode2.settext("hi!");
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("hi!");
        java.lang.String str12 = textNode11.outerHtml();
        java.lang.String str13 = textNode11.text();
        java.lang.String str15 = textNode11.attr("t");
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test09289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09289");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        outputSettings7.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings7.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        outputSettings22.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings22.setescapeMode(escapeMode29);
        boolean boolean31 = outputSettings22.forceAllElementAsBlock;
        int int32 = outputSettings22.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings22.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings35.setescapeMode(escapeMode38);
        outputSettings35.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings35.setescapeMode(escapeMode42);
        boolean boolean44 = outputSettings35.forceAllElementAsBlock;
        int int45 = outputSettings35.indentAmount;
        java.nio.charset.Charset charset46 = outputSettings35.getcharset();
        outputSettings34.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset46);
        int int49 = outputSettings48.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 0, outputSettings48);
        java.lang.String str51 = textNode2.text();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node53 = textNode2.removeAttr("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "text" + "'", str51, "text");
    }

    @Test
    public void test09290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09290");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.Attributes attributes9 = textNode0.attributes();
        org.jsoup.nodes.Node node10 = textNode0.parent();
        org.jsoup.nodes.Node node11 = textNode0.clone();
        java.lang.String str12 = textNode0.toString();
        java.lang.String str13 = textNode0.gettext();
        java.lang.String str14 = textNode0.gettext();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(attributes9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test09291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09291");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Node node12 = textNode2.attr("ext", "#text");
        textNode2.text = "ext";
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode17.childNodes();
        org.jsoup.nodes.TextNode textNode20 = textNode17.splitText(1);
        org.jsoup.nodes.Node node23 = textNode20.attr("hi!", "t");
        java.lang.String str25 = textNode20.attr("#text");
        java.lang.String str26 = textNode20.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode28 = textNode20.text("ext");
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings29.charset = charset31;
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings29.encoder();
        boolean boolean34 = outputSettings29.prettyPrint;
        boolean boolean35 = outputSettings29.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        int int39 = outputSettings36.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings36.getcharsetEncoder();
        boolean boolean41 = outputSettings36.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = null;
        outputSettings42.setescapeMode(escapeMode45);
        outputSettings42.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = null;
        outputSettings42.setescapeMode(escapeMode49);
        boolean boolean51 = outputSettings42.forceAllElementAsBlock;
        int int52 = outputSettings42.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings42.escapeMode(escapeMode53);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = null;
        outputSettings55.setescapeMode(escapeMode58);
        outputSettings55.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = null;
        outputSettings55.setescapeMode(escapeMode62);
        boolean boolean64 = outputSettings55.forceAllElementAsBlock;
        int int65 = outputSettings55.indentAmount;
        java.nio.charset.Charset charset66 = outputSettings55.getcharset();
        outputSettings54.setcharset(charset66);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings36.charset(charset66);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean70 = outputSettings69.prettyPrint;
        boolean boolean71 = outputSettings69.forceAllElementAsBlock;
        boolean boolean72 = outputSettings69.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings69.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean76 = outputSettings75.prettyPrint;
        boolean boolean77 = outputSettings75.forceAllElementAsBlock;
        int int78 = outputSettings75.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings75.getcharsetEncoder();
        outputSettings74.setcharsetEncoder(charsetEncoder79);
        org.jsoup.nodes.Entities.EscapeMode escapeMode81 = outputSettings74.escapeMode;
        outputSettings36.setescapeMode(escapeMode81);
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings29.escapeMode(escapeMode81);
        boolean boolean84 = textNode20.equals((java.lang.Object) outputSettings29);
        boolean boolean85 = textNode2.equals((java.lang.Object) textNode20);
        java.util.List<org.jsoup.nodes.Node> nodeList86 = textNode2.siblingNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "text" + "'", str26, "text");
        org.junit.Assert.assertNotNull(textNode28);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder79);
        org.junit.Assert.assertTrue("'" + escapeMode81 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode81.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(nodeList86);
    }

    @Test
    public void test09292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09292");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset8 = outputSettings0.charset;
        outputSettings0.setprettyPrint(false);
        outputSettings0.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.prettyPrint(true);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(outputSettings14);
    }

    @Test
    public void test09293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09293");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        int int1 = textNode0.siblingIndex();
        java.lang.String str2 = textNode0.gettext();
        org.jsoup.nodes.Document document3 = textNode0.ownerDocument();
        boolean boolean4 = textNode0.isBlank();
        org.jsoup.nodes.Document document5 = textNode0.ownerDocument();
        java.lang.String str6 = textNode0.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node8 = textNode0.childNode(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
    }

    @Test
    public void test09294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09294");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        java.lang.String str10 = textNode0.absUrl("text");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test09295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09295");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        textNode2.settext("");
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings9.indentAmount((int) (short) 0);
        outputSettings9.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings9.charsetEncoder;
        boolean boolean16 = textNode2.equals((java.lang.Object) outputSettings9);
        int int17 = outputSettings9.indentAmount;
        java.nio.charset.Charset charset18 = outputSettings9.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings9.indentAmount(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings20);
    }

    @Test
    public void test09296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09296");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        outputSettings0.prettyPrint = false;
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.encoder();
        boolean boolean12 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings0.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings0.prettyPrint(true);
        int int17 = outputSettings0.getindentAmount();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test09297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09297");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.escapeMode(escapeMode11);
        int int13 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings16.clone();
        java.nio.charset.Charset charset18 = outputSettings17.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings0.charset(charset18);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode();
        outputSettings19.forceAllElementAsBlock = true;
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.prettyPrint(false);
        int int26 = outputSettings19.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings19.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset29 = outputSettings19.charset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNull(escapeMode20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(charset29);
    }

    @Test
    public void test09298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09298");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.forceAllElementAsBlock = true;
        outputSettings0.prettyPrint = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings0.escapeMode();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09299");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset15 = outputSettings14.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        outputSettings16.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset22 = outputSettings21.charset();
        outputSettings16.setcharset(charset22);
        outputSettings16.setprettyPrint(true);
        java.nio.charset.Charset charset26 = outputSettings16.getcharset();
        java.nio.charset.Charset charset27 = outputSettings16.charset();
        outputSettings14.setcharset(charset27);
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings14.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset32 = outputSettings31.charset();
        outputSettings30.charset = charset32;
        outputSettings30.indentAmount = (-1);
        java.nio.charset.Charset charset36 = outputSettings30.charset();
        boolean boolean37 = outputSettings30.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings30.forceAllElementAsBlock(false);
        int int40 = outputSettings39.indentAmount;
        boolean boolean41 = outputSettings39.prettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings39.getcharsetEncoder();
        outputSettings14.charsetEncoder = charsetEncoder42;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(charsetEncoder42);
    }

    @Test
    public void test09300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09300");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.charsetEncoder;
        outputSettings0.charsetEncoder = charsetEncoder11;
        outputSettings0.setprettyPrint(true);
        boolean boolean15 = outputSettings0.forceAllElementAsBlock();
        boolean boolean16 = outputSettings0.getprettyPrint();
        java.nio.charset.Charset charset17 = outputSettings0.charset();
        outputSettings0.forceAllElementAsBlock = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charset17);
    }

    @Test
    public void test09301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09301");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        java.nio.charset.Charset charset17 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings0.encoder();
        boolean boolean19 = outputSettings0.forceAllElementAsBlock;
        int int20 = outputSettings0.indentAmount;
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test09302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09302");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        org.jsoup.nodes.Node node9 = textNode0.removeAttr("hi!");
        org.jsoup.nodes.TextNode textNode11 = textNode0.text("i");
        org.jsoup.nodes.Attributes attributes12 = textNode11.attributes();
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        int int17 = textNode15.siblingIndex();
        org.jsoup.nodes.Node node18 = textNode15.clone();
        java.lang.String str19 = textNode15.text;
        java.lang.String str20 = textNode15.nodeName();
        textNode15.setBaseUri("ext");
        org.jsoup.nodes.Document document23 = textNode15.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode11.before((org.jsoup.nodes.Node) textNode15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
        org.junit.Assert.assertNull(document23);
    }

    @Test
    public void test09303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09303");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        org.jsoup.nodes.Node node8 = textNode5.attr("hi!", "t");
        java.lang.String str9 = node8.baseUri();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test09304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09304");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset8 = outputSettings7.charset();
        outputSettings6.charset = charset8;
        outputSettings6.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings6.getcharsetEncoder();
        outputSettings0.charsetEncoder = charsetEncoder12;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.prettyPrint(true);
        outputSettings15.indentAmount = (byte) 100;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings15.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        boolean boolean20 = outputSettings15.prettyPrint();
        java.nio.charset.Charset charset21 = outputSettings15.charset;
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNull(escapeMode18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charset21);
    }

    @Test
    public void test09305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09305");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.text;
        org.jsoup.nodes.TextNode textNode5 = textNode0.text("");
        java.lang.String str6 = textNode0.nodeName();
        boolean boolean8 = textNode0.hasAttr("hi!");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        boolean boolean14 = outputSettings11.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings11.prettyPrint(false);
        java.nio.charset.Charset charset17 = outputSettings11.charset;
        outputSettings11.setprettyPrint(false);
        boolean boolean20 = outputSettings11.forceAllElementAsBlock;
        boolean boolean21 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings11.indentAmount((int) '4');
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings23.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings23.getcharsetEncoder();
        textNode0.outerHtmlTail(stringBuilder9, 32, outputSettings23);
        textNode0.setBaseUri("i!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
    }

    @Test
    public void test09306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09306");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        boolean boolean5 = textNode2.hasAttr("#text");
        textNode2.setBaseUri("text");
        int int8 = textNode2.siblingIndex();
        java.lang.String str9 = textNode2.getTEXT_KEY();
        java.lang.String str10 = textNode2.nodeName();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
    }

    @Test
    public void test09307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09307");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        textNode2.setBaseUri("text");
        java.lang.String str12 = textNode2.text;
        java.lang.String str14 = textNode2.absUrl("#text");
        java.lang.String str16 = textNode2.attr("");
        boolean boolean17 = textNode2.isBlank();
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode20 = textNode2.text("i!");
        java.lang.String str21 = textNode20.nodeName();
        java.lang.StringBuilder stringBuilder22 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        outputSettings24.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings24.indentAmount(1);
        outputSettings24.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings33.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = null;
        outputSettings36.setescapeMode(escapeMode39);
        outputSettings36.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = null;
        outputSettings36.setescapeMode(escapeMode43);
        outputSettings36.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings36.getcharsetEncoder();
        outputSettings33.charsetEncoder = charsetEncoder47;
        outputSettings24.charsetEncoder = charsetEncoder47;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings24.clone();
        boolean boolean51 = outputSettings24.prettyPrint();
        outputSettings24.setindentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings24.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings24.indentAmount(0);
        // The following exception was thrown during execution in test generation
        try {
            textNode20.outerHtmlHead(stringBuilder22, (int) (byte) 0, outputSettings24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charsetEncoder47);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings56);
    }

    @Test
    public void test09308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09308");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.forceAllElementAsBlock(true);
        int int11 = outputSettings0.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test09309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09309");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        java.lang.String str10 = textNode2.toString();
        java.lang.String str12 = textNode2.absUrl("hi!");
        org.jsoup.nodes.Node node15 = textNode2.attr("#", "!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node16 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test09310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09310");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.escapeMode(escapeMode6);
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings5.escapeMode;
        boolean boolean9 = outputSettings5.prettyPrint();
        boolean boolean10 = outputSettings5.getforceAllElementAsBlock();
        int int11 = outputSettings5.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNull(escapeMode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test09311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09311");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("text");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        boolean boolean14 = outputSettings11.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings11.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        outputSettings19.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings19.setcharset(charset25);
        java.nio.charset.Charset charset27 = outputSettings19.getcharset();
        outputSettings18.charset = charset27;
        textNode2.outerHtmlTail(stringBuilder9, 100, outputSettings18);
        textNode2.setBaseUri("h");
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.getforceAllElementAsBlock();
        boolean boolean34 = outputSettings32.getprettyPrint();
        outputSettings32.setprettyPrint(false);
        outputSettings32.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings32.encoder();
        boolean boolean40 = textNode2.equals((java.lang.Object) outputSettings32);
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Node node45 = textNode2.attr("ext", "text");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test09312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09312");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        textNode2.setBaseUri("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.childNodes();
        java.lang.String str10 = textNode2.gettext();
        org.jsoup.nodes.Node node12 = textNode2.removeAttr("t");
        textNode2.text = "";
        java.lang.String str15 = textNode2.gettext();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test09313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09313");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Document document1 = textNode0.ownerDocument();
        boolean boolean2 = textNode0.isBlank();
        textNode0.settext("text");
        java.lang.String str5 = textNode0.text;
        int int6 = textNode0.siblingIndex();
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test09314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09314");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "!");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode4 = new org.jsoup.nodes.TextNode();
        textNode4.setBaseUri("hi!");
        java.lang.String str7 = textNode4.getTEXT_KEY();
        textNode4.text = "hi!";
        boolean boolean11 = textNode4.hasAttr("");
        java.lang.String str12 = textNode4.toString();
        java.lang.String str13 = textNode4.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        boolean boolean17 = outputSettings14.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings14.prettyPrint(false);
        int int20 = outputSettings19.getindentAmount();
        outputSettings19.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings23.charset = charset25;
        outputSettings23.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        int int32 = outputSettings29.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings29.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        outputSettings35.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset41 = outputSettings40.charset();
        outputSettings35.setcharset(charset41);
        outputSettings34.setcharset(charset41);
        outputSettings29.setcharset(charset41);
        outputSettings23.setcharset(charset41);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings19.charset(charset41);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.forceAllElementAsBlock(false);
        boolean boolean49 = textNode4.equals((java.lang.Object) outputSettings46);
        org.jsoup.nodes.Node node50 = textNode4.previousSibling();
        java.lang.String str51 = textNode4.getTEXT_KEY();
        textNode4.ensureAttributes();
        boolean boolean53 = textNode2.equals((java.lang.Object) textNode4);
        java.lang.String str54 = textNode2.nodeName();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "text" + "'", str51, "text");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "#text" + "'", str54, "#text");
    }

    @Test
    public void test09315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09315");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str9 = textNode0.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.forceAllElementAsBlock(false);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings42);
        outputSettings42.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings42.prettyPrint(false);
        boolean boolean50 = outputSettings42.prettyPrint();
        boolean boolean51 = outputSettings42.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings42.prettyPrint(false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(outputSettings53);
    }

    @Test
    public void test09316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09316");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("#text");
        java.lang.String str12 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode14 = textNode2.splitText((int) (short) 1);
        boolean boolean15 = textNode2.isBlank();
        java.lang.String str16 = textNode2.baseUri();
        org.jsoup.nodes.Node node19 = textNode2.attr("#", "i!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node20 = node19.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test09317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09317");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str9 = textNode0.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.forceAllElementAsBlock(false);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings42);
        org.jsoup.nodes.Attributes attributes46 = textNode0.attributes();
        int int47 = textNode0.siblingIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(attributes46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test09318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09318");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("ext", "text");
        java.lang.String str3 = textNode2.outerHtml();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("");
        org.jsoup.nodes.Node node6 = textNode5.clone();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ext" + "'", str3, "ext");
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node6);
    }

    @Test
    public void test09319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09319");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode9.childNodes();
        org.jsoup.select.NodeVisitor nodeVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = textNode9.traverse(nodeVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
    }

    @Test
    public void test09320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09320");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str3 = textNode2.text;
        int int4 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.text;
        java.lang.String str7 = textNode2.attr("");
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        outputSettings8.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings8.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings14.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings14.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings19.prettyPrint(false);
        java.nio.charset.Charset charset25 = null;
        outputSettings24.setcharset(charset25);
        boolean boolean27 = outputSettings24.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings24.prettyPrint(false);
        int int30 = outputSettings24.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset33 = outputSettings32.charset();
        outputSettings31.charset = charset33;
        outputSettings31.indentAmount = (-1);
        java.nio.charset.Charset charset37 = outputSettings31.charset();
        outputSettings31.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        boolean boolean43 = outputSettings40.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings40.prettyPrint(false);
        int int46 = outputSettings45.getindentAmount();
        outputSettings45.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings45.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        boolean boolean53 = outputSettings50.getprettyPrint();
        boolean boolean54 = outputSettings50.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings50.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings56.escapeMode();
        outputSettings45.setescapeMode(escapeMode57);
        outputSettings31.escapeMode = escapeMode57;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings24.escapeMode(escapeMode57);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings14.escapeMode(escapeMode57);
        boolean boolean62 = textNode2.equals((java.lang.Object) outputSettings14);
        org.jsoup.nodes.Node node63 = textNode2.nextSibling();
        boolean boolean65 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode68 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str69 = textNode68.text;
        org.jsoup.nodes.Node node72 = textNode68.attr("#text", "text");
        java.lang.StringBuilder stringBuilder73 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean77 = outputSettings76.prettyPrint;
        boolean boolean78 = outputSettings76.forceAllElementAsBlock;
        outputSettings76.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset82 = outputSettings81.charset();
        outputSettings76.setcharset(charset82);
        outputSettings75.setcharset(charset82);
        textNode68.outerHtmlTail(stringBuilder73, 0, outputSettings75);
        java.lang.String str86 = textNode68.gettext();
        org.jsoup.nodes.Node node89 = textNode68.attr("t", "#text");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(textNode68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(charset82);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test09321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09321");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        org.jsoup.nodes.Node node9 = textNode7.previousSibling();
        org.jsoup.nodes.Node node12 = textNode7.attr("text", "text");
        org.jsoup.nodes.Node node13 = textNode7.clone();
        org.jsoup.nodes.Node node15 = textNode7.removeAttr("#");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test09322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09322");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        int int7 = outputSettings3.getindentAmount();
        boolean boolean8 = outputSettings3.forceAllElementAsBlock;
        outputSettings3.setprettyPrint(false);
        int int11 = outputSettings3.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test09323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09323");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.lang.String str8 = textNode2.text();
        boolean boolean9 = textNode2.isBlank();
        boolean boolean10 = textNode2.isBlank();
        int int11 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node12 = textNode2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings13.indentAmount(1);
        outputSettings13.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings13.encoder();
        boolean boolean23 = textNode2.equals((java.lang.Object) outputSettings13);
        org.jsoup.nodes.Document document24 = textNode2.ownerDocument();
        java.lang.String str25 = textNode2.gettext();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test09324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09324");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings3.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings5.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings10.setescapeMode(escapeMode13);
        outputSettings10.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings10.setescapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings10.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        outputSettings20.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings20.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        boolean boolean28 = outputSettings25.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings25.prettyPrint(false);
        java.nio.charset.Charset charset31 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings25.getescapeMode();
        outputSettings20.escapeMode = escapeMode32;
        boolean boolean34 = outputSettings20.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        boolean boolean38 = outputSettings35.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings35.prettyPrint(false);
        java.nio.charset.Charset charset41 = outputSettings35.charset();
        outputSettings20.charset = charset41;
        outputSettings5.setcharset(charset41);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings4.charset(charset41);
        int int45 = outputSettings44.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        boolean boolean49 = outputSettings46.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings46.prettyPrint(false);
        int int52 = outputSettings51.getindentAmount();
        outputSettings51.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset57 = outputSettings56.charset();
        outputSettings55.charset = charset57;
        outputSettings55.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean62 = outputSettings61.prettyPrint;
        boolean boolean63 = outputSettings61.forceAllElementAsBlock;
        int int64 = outputSettings61.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder65 = outputSettings61.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean68 = outputSettings67.prettyPrint;
        boolean boolean69 = outputSettings67.forceAllElementAsBlock;
        outputSettings67.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset73 = outputSettings72.charset();
        outputSettings67.setcharset(charset73);
        outputSettings66.setcharset(charset73);
        outputSettings61.setcharset(charset73);
        outputSettings55.setcharset(charset73);
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings51.charset(charset73);
        int int79 = outputSettings51.indentAmount;
        java.nio.charset.Charset charset80 = outputSettings51.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings44.charset(charset80);
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings81.clone();
        boolean boolean83 = outputSettings81.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNull(escapeMode21);
        org.junit.Assert.assertNull(escapeMode24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertNotNull(charset80);
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test09325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09325");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        java.lang.String str7 = textNode2.gettext();
        textNode2.setBaseUri("t");
        java.lang.String str10 = textNode2.text;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = textNode2.childNode(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
    }

    @Test
    public void test09326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09326");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "ext");
        textNode2.ensureAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node5 = textNode2.before("#text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
    }

    @Test
    public void test09327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09327");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.String str3 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode4 = new org.jsoup.nodes.TextNode();
        textNode4.setBaseUri("hi!");
        java.lang.String str7 = textNode4.getTEXT_KEY();
        java.lang.String str8 = textNode4.baseUri();
        java.lang.String str9 = textNode4.text;
        boolean boolean10 = textNode4.isBlank();
        textNode4.text = "#text";
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings13.setescapeMode(escapeMode16);
        outputSettings13.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        outputSettings13.setescapeMode(escapeMode20);
        boolean boolean22 = outputSettings13.forceAllElementAsBlock;
        int int23 = outputSettings13.indentAmount;
        java.nio.charset.Charset charset24 = outputSettings13.getcharset();
        outputSettings13.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        int int30 = outputSettings27.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        outputSettings33.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings33.setcharset(charset39);
        outputSettings32.setcharset(charset39);
        outputSettings27.setcharset(charset39);
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings27.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings44.clone();
        int int46 = outputSettings45.getindentAmount();
        java.nio.charset.Charset charset47 = outputSettings45.charset();
        outputSettings27.setcharset(charset47);
        outputSettings13.setcharset(charset47);
        boolean boolean50 = textNode4.equals((java.lang.Object) charset47);
        boolean boolean51 = textNode2.equals((java.lang.Object) boolean50);
        java.lang.StringBuilder stringBuilder52 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset56 = outputSettings55.charset();
        outputSettings54.charset = charset56;
        outputSettings54.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        int int63 = outputSettings60.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings60.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean67 = outputSettings66.prettyPrint;
        boolean boolean68 = outputSettings66.forceAllElementAsBlock;
        outputSettings66.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset72 = outputSettings71.charset();
        outputSettings66.setcharset(charset72);
        outputSettings65.setcharset(charset72);
        outputSettings60.setcharset(charset72);
        outputSettings54.setcharset(charset72);
        boolean boolean77 = outputSettings54.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode80 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean82 = outputSettings81.prettyPrint;
        boolean boolean83 = textNode80.equals((java.lang.Object) outputSettings81);
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings81.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings54.escapeMode(escapeMode84);
        textNode2.outerHtmlTail(stringBuilder52, 100, outputSettings54);
        java.lang.String str87 = textNode2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test09328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09328");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.indentAmount((int) (short) 0);
        outputSettings0.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false);
        outputSettings9.prettyPrint = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(outputSettings9);
    }

    @Test
    public void test09329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09329");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        int int14 = outputSettings11.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings11.getcharsetEncoder();
        outputSettings10.setcharsetEncoder(charsetEncoder15);
        outputSettings0.charsetEncoder = charsetEncoder15;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings0.escapeMode();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings0.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNull(escapeMode18);
    }

    @Test
    public void test09330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09330");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        java.lang.String str9 = textNode0.nodeName();
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings12.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings12.setescapeMode(escapeMode17);
        int int19 = outputSettings12.indentAmount();
        textNode0.outerHtmlTail(stringBuilder10, 10, outputSettings12);
        boolean boolean22 = textNode0.hasAttr("#text");
        org.jsoup.nodes.TextNode textNode25 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.String str26 = textNode25.nodeName();
        org.jsoup.nodes.Node node28 = textNode25.removeAttr("hi!");
        boolean boolean29 = textNode0.equals((java.lang.Object) "hi!");
        java.lang.String str30 = textNode0.text;
        org.jsoup.nodes.TextNode textNode31 = new org.jsoup.nodes.TextNode();
        textNode31.setBaseUri("hi!");
        java.lang.String str34 = textNode31.getTEXT_KEY();
        java.lang.String str35 = textNode31.baseUri();
        java.lang.String str36 = textNode31.text;
        org.jsoup.nodes.TextNode textNode39 = new org.jsoup.nodes.TextNode("text", "text");
        int int40 = textNode39.siblingIndex();
        int int41 = textNode39.siblingIndex();
        org.jsoup.nodes.Node node42 = textNode39.clone();
        boolean boolean43 = textNode31.equals((java.lang.Object) textNode39);
        java.lang.String str44 = textNode39.getTEXT_KEY();
        // The following exception was thrown during execution in test generation
        try {
            textNode0.replaceWith((org.jsoup.nodes.Node) textNode39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#text" + "'", str26, "#text");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "text" + "'", str34, "text");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "text" + "'", str44, "text");
    }

    @Test
    public void test09331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09331");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.prettyPrint(false);
        outputSettings0.prettyPrint = true;
        boolean boolean11 = outputSettings0.getprettyPrint();
        int int12 = outputSettings0.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test09332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09332");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        textNode2.setBaseUri("hi!");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings11.setescapeMode(escapeMode14);
        outputSettings11.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings11.setescapeMode(escapeMode18);
        boolean boolean20 = outputSettings11.forceAllElementAsBlock;
        int int21 = outputSettings11.indentAmount;
        java.nio.charset.Charset charset22 = outputSettings11.getcharset();
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) 1, outputSettings11);
        java.lang.String str24 = textNode2.text;
        org.jsoup.nodes.Node node25 = textNode2.clone();
        java.lang.StringBuilder stringBuilder26 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        boolean boolean31 = outputSettings28.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings28.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.escapeMode(escapeMode34);
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings33.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings33.escapeMode;
        int int38 = outputSettings33.indentAmount();
        textNode2.outerHtmlTail(stringBuilder26, 100, outputSettings33);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        boolean boolean43 = outputSettings40.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings40.prettyPrint(false);
        java.nio.charset.Charset charset46 = outputSettings40.charset;
        outputSettings40.setprettyPrint(false);
        boolean boolean49 = outputSettings40.forceAllElementAsBlock;
        boolean boolean50 = outputSettings40.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings40.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode();
        outputSettings33.setescapeMode(escapeMode53);
        outputSettings33.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings33.clone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNull(escapeMode36);
        org.junit.Assert.assertNull(escapeMode37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings57);
    }

    @Test
    public void test09333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09333");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings3.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.indentAmount(0);
        java.nio.charset.Charset charset13 = outputSettings10.charset();
        boolean boolean14 = outputSettings10.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.StringBuilder stringBuilder18 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = null;
        outputSettings20.setescapeMode(escapeMode23);
        outputSettings20.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings20.setescapeMode(escapeMode27);
        boolean boolean29 = outputSettings20.forceAllElementAsBlock;
        int int30 = outputSettings20.indentAmount;
        java.nio.charset.Charset charset31 = outputSettings20.getcharset();
        textNode17.outerHtmlTail(stringBuilder18, (int) (short) -1, outputSettings20);
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings20.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings20.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings36.clone();
        int int38 = outputSettings37.getindentAmount();
        int int39 = outputSettings37.indentAmount;
        outputSettings37.indentAmount = (-1);
        outputSettings37.prettyPrint = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings37.escapeMode;
        outputSettings20.escapeMode = escapeMode44;
        outputSettings10.setescapeMode(escapeMode44);
        java.nio.charset.Charset charset47 = outputSettings10.getcharset();
        boolean boolean48 = outputSettings10.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        outputSettings49.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        boolean boolean57 = outputSettings54.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset60 = outputSettings59.charset();
        outputSettings58.charset = charset60;
        java.nio.charset.CharsetEncoder charsetEncoder62 = outputSettings58.encoder();
        boolean boolean63 = outputSettings58.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings58.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings54.escapeMode(escapeMode64);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings49.escapeMode(escapeMode64);
        boolean boolean67 = outputSettings66.getforceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings66.escapeMode;
        outputSettings10.setescapeMode(escapeMode68);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(charsetEncoder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09334");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        outputSettings8.indentAmount = (-1);
        java.nio.charset.Charset charset14 = outputSettings8.charset();
        outputSettings8.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.prettyPrint(false);
        int int23 = outputSettings22.getindentAmount();
        outputSettings22.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings22.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        boolean boolean30 = outputSettings27.getprettyPrint();
        boolean boolean31 = outputSettings27.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings27.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode();
        outputSettings22.setescapeMode(escapeMode34);
        outputSettings8.escapeMode = escapeMode34;
        outputSettings0.setescapeMode(escapeMode34);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings0.clone();
        boolean boolean40 = outputSettings39.prettyPrint();
        outputSettings39.setforceAllElementAsBlock(true);
        boolean boolean43 = outputSettings39.forceAllElementAsBlock;
        outputSettings39.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings39.getcharsetEncoder();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(charsetEncoder46);
    }

    @Test
    public void test09335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09335");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.siblingNodes();
        org.jsoup.nodes.Document document11 = textNode2.ownerDocument();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNull(document11);
    }

    @Test
    public void test09336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09336");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode9 = textNode2.splitText(0);
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode9.childNodes();
        org.jsoup.nodes.Node node11 = textNode9.previousSibling();
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        int int30 = outputSettings14.getindentAmount();
        outputSettings14.indentAmount = 'a';
        textNode9.outerHtmlTail(stringBuilder12, (int) (byte) 10, outputSettings14);
        java.util.List<org.jsoup.nodes.Node> nodeList34 = textNode9.childNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(nodeList34);
    }

    @Test
    public void test09337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09337");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(true);
        outputSettings10.setforceAllElementAsBlock(false);
        boolean boolean13 = outputSettings10.prettyPrint();
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("text", "text");
        int int17 = textNode16.siblingIndex();
        int int18 = textNode16.siblingIndex();
        org.jsoup.nodes.Node node19 = textNode16.clone();
        java.lang.String str20 = textNode16.text;
        org.jsoup.nodes.Node node21 = textNode16.previousSibling();
        boolean boolean23 = textNode16.hasAttr("text");
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        boolean boolean27 = outputSettings24.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings24.prettyPrint(false);
        java.nio.charset.Charset charset30 = outputSettings24.charset;
        outputSettings24.setprettyPrint(false);
        java.nio.charset.Charset charset33 = outputSettings24.getcharset();
        boolean boolean34 = textNode16.equals((java.lang.Object) charset33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings10.charset(charset33);
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings10.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        boolean boolean40 = outputSettings37.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings37.prettyPrint(false);
        java.nio.charset.Charset charset43 = null;
        outputSettings42.setcharset(charset43);
        boolean boolean45 = outputSettings42.getforceAllElementAsBlock();
        boolean boolean46 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean48 = outputSettings47.prettyPrint;
        boolean boolean49 = outputSettings47.forceAllElementAsBlock;
        outputSettings47.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset58 = outputSettings57.charset();
        outputSettings56.charset = charset58;
        java.nio.charset.CharsetEncoder charsetEncoder60 = outputSettings56.encoder();
        boolean boolean61 = outputSettings56.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings56.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings52.escapeMode(escapeMode62);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings47.escapeMode(escapeMode62);
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = outputSettings47.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings42.escapeMode(escapeMode65);
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings66.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings10.escapeMode(escapeMode67);
        outputSettings10.forceAllElementAsBlock = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(charsetEncoder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
    }

    @Test
    public void test09338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09338");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.getcharsetEncoder();
        outputSettings0.prettyPrint = true;
        outputSettings0.forceAllElementAsBlock = true;
        boolean boolean10 = outputSettings0.forceAllElementAsBlock;
        boolean boolean11 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = null;
        outputSettings12.setescapeMode(escapeMode15);
        outputSettings12.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null;
        outputSettings12.setescapeMode(escapeMode19);
        boolean boolean21 = outputSettings12.forceAllElementAsBlock;
        int int22 = outputSettings12.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings12.escapeMode(escapeMode23);
        int int25 = outputSettings12.getindentAmount();
        outputSettings12.indentAmount = 10;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings12.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder28);
        outputSettings0.setprettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder28);
    }

    @Test
    public void test09339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09339");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.getWholeText();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        org.jsoup.nodes.Node node9 = textNode2.nextSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test09340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09340");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "");
        org.jsoup.nodes.Node node3 = textNode2.parent();
        org.jsoup.nodes.Node node5 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Node node6 = node5.parent();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test09341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09341");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings3.prettyPrint(true);
        outputSettings3.setforceAllElementAsBlock(false);
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode("text", "text");
        int int14 = textNode13.siblingIndex();
        int int15 = textNode13.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode13.childNodes();
        java.lang.StringBuilder stringBuilder17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        int int22 = outputSettings19.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings19.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        outputSettings25.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings25.setcharset(charset31);
        outputSettings24.setcharset(charset31);
        outputSettings19.setcharset(charset31);
        textNode13.outerHtmlTail(stringBuilder17, 10, outputSettings19);
        int int36 = outputSettings19.indentAmount;
        boolean boolean37 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings19.getescapeMode();
        boolean boolean39 = outputSettings19.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        outputSettings40.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings40.setcharset(charset46);
        outputSettings40.setprettyPrint(true);
        java.nio.charset.Charset charset50 = outputSettings40.getcharset();
        outputSettings40.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings40.forceAllElementAsBlock(false);
        boolean boolean55 = outputSettings40.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset58 = outputSettings57.charset();
        outputSettings56.charset = charset58;
        java.nio.charset.CharsetEncoder charsetEncoder60 = outputSettings56.encoder();
        boolean boolean61 = outputSettings56.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings56.escapeMode;
        outputSettings40.escapeMode = escapeMode62;
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings19.escapeMode(escapeMode62);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings3.escapeMode(escapeMode62);
        java.nio.charset.CharsetEncoder charsetEncoder66 = outputSettings65.getcharsetEncoder();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(charsetEncoder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(charsetEncoder66);
    }

    @Test
    public void test09342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09342");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        outputSettings2.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings2.indentAmount((int) ' ');
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings2.charsetEncoder;
        outputSettings2.indentAmount = (byte) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        outputSettings10.charset = charset12;
        boolean boolean14 = outputSettings10.getforceAllElementAsBlock();
        outputSettings10.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings10.prettyPrint(true);
        org.jsoup.nodes.TextNode textNode21 = new org.jsoup.nodes.TextNode("text", "text");
        int int22 = textNode21.siblingIndex();
        int int23 = textNode21.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList24 = textNode21.childNodes();
        java.lang.StringBuilder stringBuilder25 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        int int30 = outputSettings27.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        outputSettings33.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings33.setcharset(charset39);
        outputSettings32.setcharset(charset39);
        outputSettings27.setcharset(charset39);
        textNode21.outerHtmlTail(stringBuilder25, 10, outputSettings27);
        int int44 = outputSettings27.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings27.encoder();
        outputSettings27.prettyPrint = true;
        java.nio.charset.Charset charset48 = outputSettings27.charset;
        outputSettings10.setcharset(charset48);
        outputSettings2.setcharset(charset48);
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertNotNull(charset48);
    }

    @Test
    public void test09343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09343");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        java.lang.String str6 = textNode2.text;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node8 = textNode2.childNode((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
    }

    @Test
    public void test09344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09344");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        outputSettings0.setprettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(false);
        int int13 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        boolean boolean18 = outputSettings14.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings14.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = null;
        outputSettings20.setescapeMode(escapeMode23);
        outputSettings20.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings20.setescapeMode(escapeMode27);
        boolean boolean29 = outputSettings20.forceAllElementAsBlock;
        int int30 = outputSettings20.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings20.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = null;
        outputSettings33.setescapeMode(escapeMode36);
        outputSettings33.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = null;
        outputSettings33.setescapeMode(escapeMode40);
        boolean boolean42 = outputSettings33.forceAllElementAsBlock;
        int int43 = outputSettings33.indentAmount;
        java.nio.charset.Charset charset44 = outputSettings33.getcharset();
        outputSettings32.setcharset(charset44);
        outputSettings14.charset = charset44;
        outputSettings0.charset = charset44;
        boolean boolean48 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.getforceAllElementAsBlock();
        int int51 = outputSettings49.indentAmount();
        java.nio.charset.Charset charset52 = outputSettings49.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings0.charset(charset52);
        outputSettings53.setprettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings53);
    }

    @Test
    public void test09345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09345");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.prettyPrint(true);
        boolean boolean10 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.indentAmount(0);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings14);
    }

    @Test
    public void test09346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09346");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        int int14 = outputSettings11.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings11.getcharsetEncoder();
        outputSettings10.setcharsetEncoder(charsetEncoder15);
        outputSettings0.charsetEncoder = charsetEncoder15;
        outputSettings0.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset20 = outputSettings0.charset();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(charset20);
    }

    @Test
    public void test09347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09347");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        boolean boolean6 = outputSettings3.forceAllElementAsBlock;
        outputSettings3.indentAmount = (short) 0;
        outputSettings3.setprettyPrint(false);
        outputSettings3.prettyPrint = true;
        boolean boolean13 = outputSettings3.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test09348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09348");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.getcharsetEncoder();
        int int6 = outputSettings0.indentAmount;
        outputSettings0.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings0.getcharsetEncoder();
        java.nio.charset.Charset charset10 = outputSettings0.charset;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertNotNull(charset10);
    }

    @Test
    public void test09349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09349");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("text");
        java.lang.String str9 = textNode2.text();
        java.lang.String str10 = textNode2.getWholeText();
        java.lang.String str11 = textNode2.outerHtml();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode2.childNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNotNull(nodeList12);
    }

    @Test
    public void test09350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09350");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        int int14 = outputSettings11.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings11.getcharsetEncoder();
        outputSettings10.setcharsetEncoder(charsetEncoder15);
        outputSettings0.charsetEncoder = charsetEncoder15;
        outputSettings0.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset20 = outputSettings0.charset;
        boolean boolean21 = outputSettings0.getprettyPrint();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test09351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09351");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        int int8 = outputSettings6.indentAmount;
        int int9 = outputSettings6.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    }

    @Test
    public void test09352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09352");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean4 = textNode2.hasAttr("");
        boolean boolean5 = textNode2.isBlank();
        java.lang.String str6 = textNode2.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        boolean boolean13 = outputSettings9.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder7, 0, outputSettings9);
        org.jsoup.nodes.Node node15 = textNode2.previousSibling();
        java.lang.String str16 = textNode2.text();
        java.lang.String str17 = textNode2.toString();
        org.jsoup.select.NodeVisitor nodeVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node19 = textNode2.traverse(nodeVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test09353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09353");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("text");
        boolean boolean9 = textNode8.isBlank();
        java.lang.String str10 = textNode8.getWholeText();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node11 = textNode8.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
    }

    @Test
    public void test09354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09354");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.prettyPrint(true);
        outputSettings9.setindentAmount(0);
        java.nio.charset.Charset charset12 = outputSettings9.charset;
        int int13 = outputSettings9.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test09355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09355");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        boolean boolean9 = outputSettings5.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings5.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings13.charset = charset15;
        outputSettings13.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        int int22 = outputSettings19.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings19.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        outputSettings25.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings25.setcharset(charset31);
        outputSettings24.setcharset(charset31);
        outputSettings19.setcharset(charset31);
        outputSettings13.setcharset(charset31);
        outputSettings11.setcharset(charset31);
        outputSettings0.setcharset(charset31);
        outputSettings0.setindentAmount((-1));
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings0.getcharsetEncoder();
        outputSettings0.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings43.prettyPrint(false);
        java.nio.charset.Charset charset49 = outputSettings43.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings43.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        int int54 = outputSettings51.getindentAmount();
        outputSettings51.setprettyPrint(false);
        java.nio.charset.Charset charset57 = outputSettings51.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean59 = outputSettings58.prettyPrint;
        boolean boolean60 = outputSettings58.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = null;
        outputSettings58.setescapeMode(escapeMode61);
        outputSettings58.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = null;
        outputSettings58.setescapeMode(escapeMode65);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings58.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings68.escapeMode;
        outputSettings68.setindentAmount(0);
        java.nio.charset.Charset charset72 = outputSettings68.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings51.charset(charset72);
        outputSettings43.charset = charset72;
        outputSettings0.charset = charset72;
        boolean boolean76 = outputSettings0.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNull(escapeMode69);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test09356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09356");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        boolean boolean9 = textNode7.isBlank();
        java.lang.String str10 = textNode7.text;
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings15.clone();
        outputSettings15.prettyPrint = true;
        textNode7.outerHtmlTail(stringBuilder11, (int) (short) 0, outputSettings15);
        java.lang.String str21 = textNode7.attr("");
        java.lang.String str22 = textNode7.baseUri();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode7.after("t");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
    }

    @Test
    public void test09357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09357");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        textNode0.text = "#text";
        java.lang.String str12 = textNode0.attr("#text");
        org.jsoup.nodes.Node node13 = textNode0.nextSibling();
        boolean boolean14 = textNode0.isBlank();
        org.jsoup.nodes.Node node17 = textNode0.attr("h", "t");
        org.jsoup.nodes.Attributes attributes18 = textNode0.attributes();
        org.jsoup.nodes.Attributes attributes19 = textNode0.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertNotNull(attributes19);
    }

    @Test
    public void test09358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09358");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        outputSettings0.prettyPrint = false;
        boolean boolean19 = outputSettings0.prettyPrint();
        boolean boolean20 = outputSettings0.prettyPrint();
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09359");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode5.childNodes();
        java.lang.String str7 = textNode5.outerHtml();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(nodeList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test09360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09360");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.Document document6 = textNode0.ownerDocument();
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode("text", "text");
        int int10 = textNode9.siblingIndex();
        int int11 = textNode9.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode9.childNodes();
        org.jsoup.nodes.Node node13 = textNode9.parent();
        java.lang.String str14 = textNode9.toString();
        boolean boolean15 = textNode0.equals((java.lang.Object) str14);
        org.jsoup.nodes.TextNode textNode17 = textNode0.text("h");
        org.jsoup.nodes.Node node19 = textNode17.removeAttr("h");
        textNode17.setBaseUri("");
        java.lang.String str22 = textNode17.outerHtml();
        java.lang.String str23 = textNode17.nodeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "h" + "'", str22, "h");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#text" + "'", str23, "#text");
    }

    @Test
    public void test09361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09361");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.escapeMode(escapeMode11);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings13.setescapeMode(escapeMode16);
        outputSettings13.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        outputSettings13.setescapeMode(escapeMode20);
        boolean boolean22 = outputSettings13.forceAllElementAsBlock;
        int int23 = outputSettings13.indentAmount;
        java.nio.charset.Charset charset24 = outputSettings13.getcharset();
        outputSettings12.setcharset(charset24);
        int int26 = outputSettings12.indentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings12.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings12.escapeMode(escapeMode28);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.prettyPrint(false);
        java.nio.charset.Charset charset32 = outputSettings29.getcharset();
        int int33 = outputSettings29.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNull(escapeMode27);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
    }

    @Test
    public void test09362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09362");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        int int10 = outputSettings6.indentAmount();
        outputSettings6.forceAllElementAsBlock = false;
        outputSettings6.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings6.clone();
        java.nio.charset.Charset charset16 = outputSettings15.charset;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset16);
    }

    @Test
    public void test09363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09363");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.escapeMode(escapeMode11);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings13.setescapeMode(escapeMode16);
        outputSettings13.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        outputSettings13.setescapeMode(escapeMode20);
        boolean boolean22 = outputSettings13.forceAllElementAsBlock;
        int int23 = outputSettings13.indentAmount;
        java.nio.charset.Charset charset24 = outputSettings13.getcharset();
        outputSettings12.setcharset(charset24);
        int int26 = outputSettings12.indentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings12.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings12.escapeMode(escapeMode28);
        outputSettings29.setforceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNull(escapeMode27);
        org.junit.Assert.assertNotNull(outputSettings29);
    }

    @Test
    public void test09364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09364");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.nodeName();
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.childNodes();
        java.lang.Object obj10 = null;
        boolean boolean11 = textNode2.equals(obj10);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = textNode2.before("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09365");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        textNode2.setBaseUri("text");
        java.lang.String str8 = textNode2.getWholeText();
        java.lang.String str9 = textNode2.text();
        boolean boolean11 = textNode2.hasAttr("");
        java.lang.String str13 = textNode2.absUrl("ext");
        java.lang.String str14 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
    }

    @Test
    public void test09366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09366");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.prettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.charsetEncoder;
        java.nio.charset.Charset charset12 = outputSettings0.charset;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charset12);
    }

    @Test
    public void test09367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09367");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings14.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings31.clone();
        int int33 = outputSettings32.getindentAmount();
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        outputSettings14.setcharset(charset34);
        outputSettings0.setcharset(charset34);
        boolean boolean37 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        outputSettings38.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset44 = outputSettings43.charset();
        outputSettings38.setcharset(charset44);
        outputSettings38.setprettyPrint(true);
        java.nio.charset.Charset charset48 = outputSettings38.getcharset();
        outputSettings38.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings38.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = null;
        outputSettings53.setescapeMode(escapeMode56);
        outputSettings53.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = null;
        outputSettings53.setescapeMode(escapeMode60);
        boolean boolean62 = outputSettings53.forceAllElementAsBlock;
        int int63 = outputSettings53.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings53.escapeMode(escapeMode64);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean67 = outputSettings66.prettyPrint;
        boolean boolean68 = outputSettings66.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = null;
        outputSettings66.setescapeMode(escapeMode69);
        outputSettings66.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = null;
        outputSettings66.setescapeMode(escapeMode73);
        boolean boolean75 = outputSettings66.forceAllElementAsBlock;
        int int76 = outputSettings66.indentAmount;
        java.nio.charset.Charset charset77 = outputSettings66.getcharset();
        outputSettings65.setcharset(charset77);
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings52.charset(charset77);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings80.clone();
        int int82 = outputSettings81.getindentAmount();
        java.nio.charset.Charset charset83 = outputSettings81.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings79.charset(charset83);
        outputSettings0.charset = charset83;
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings0.prettyPrint(true);
        int int88 = outputSettings0.getindentAmount();
        int int89 = outputSettings0.indentAmount;
        outputSettings0.prettyPrint = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertNotNull(outputSettings87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test09368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09368");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.absUrl("text");
        textNode2.setBaseUri("#text");
        java.lang.String str9 = textNode2.absUrl("ext");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("#text");
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode();
        textNode12.setBaseUri("hi!");
        java.lang.String str15 = textNode12.getTEXT_KEY();
        textNode12.text = "hi!";
        org.jsoup.nodes.TextNode textNode19 = textNode12.splitText((int) (byte) 0);
        java.util.List<org.jsoup.nodes.Node> nodeList20 = textNode12.siblingNodes();
        org.jsoup.nodes.Document document21 = textNode12.ownerDocument();
        textNode12.settext("hi!");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
        org.junit.Assert.assertNotNull(textNode19);
        org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNull(document21);
    }

    @Test
    public void test09369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09369");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings6.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.encoder();
        outputSettings8.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings8.escapeMode;
        outputSettings6.escapeMode = escapeMode15;
        boolean boolean17 = outputSettings6.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = null;
        outputSettings18.setescapeMode(escapeMode21);
        outputSettings18.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings18.setescapeMode(escapeMode25);
        boolean boolean27 = outputSettings18.forceAllElementAsBlock;
        int int28 = outputSettings18.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings18.escapeMode(escapeMode29);
        int int31 = outputSettings18.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings34.clone();
        java.nio.charset.Charset charset36 = outputSettings35.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings18.charset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings6.charset(charset36);
        boolean boolean39 = outputSettings6.getprettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test09370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09370");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean4 = textNode2.hasAttr("");
        boolean boolean5 = textNode2.isBlank();
        java.lang.String str6 = textNode2.getTEXT_KEY();
        java.lang.String str7 = textNode2.text;
        java.lang.String str8 = textNode2.nodeName();
        org.jsoup.select.NodeVisitor nodeVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode2.traverse(nodeVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
    }

    @Test
    public void test09371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09371");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(true);
        outputSettings10.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        boolean boolean16 = outputSettings13.getprettyPrint();
        boolean boolean17 = outputSettings13.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings13.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings13.getescapeMode();
        outputSettings10.escapeMode = escapeMode20;
        java.nio.charset.Charset charset22 = outputSettings10.charset;
        outputSettings10.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings10.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        boolean boolean33 = outputSettings30.getprettyPrint();
        boolean boolean34 = outputSettings30.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings30.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings30.getescapeMode();
        outputSettings29.setescapeMode(escapeMode37);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings10.escapeMode(escapeMode37);
        boolean boolean40 = outputSettings39.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test09372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09372");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        textNode2.text = "hi!";
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        boolean boolean12 = textNode2.isBlank();
        org.jsoup.nodes.Node node14 = textNode2.removeAttr("t");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test09373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09373");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.getWholeText();
        java.lang.String str8 = textNode2.outerHtml();
        org.jsoup.nodes.Attributes attributes9 = textNode2.attributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(attributes9);
    }

    @Test
    public void test09374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09374");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.indentAmount((int) (short) 0);
        outputSettings0.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.forceAllElementAsBlock(true);
        outputSettings8.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        int int14 = outputSettings11.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings11.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        outputSettings16.indentAmount = (-1);
        java.nio.charset.Charset charset22 = outputSettings16.charset();
        boolean boolean23 = outputSettings16.forceAllElementAsBlock;
        boolean boolean24 = outputSettings16.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings16.indentAmount((int) (byte) 100);
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings16.escapeMode;
        outputSettings11.setescapeMode(escapeMode27);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings8.escapeMode(escapeMode27);
        org.jsoup.nodes.TextNode textNode32 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = textNode32.equals((java.lang.Object) outputSettings33);
        int int36 = outputSettings33.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        outputSettings37.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset43 = outputSettings42.charset();
        outputSettings37.setcharset(charset43);
        outputSettings37.setprettyPrint(true);
        java.nio.charset.Charset charset47 = outputSettings37.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings37.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings37.escapeMode();
        boolean boolean50 = outputSettings37.getprettyPrint();
        boolean boolean51 = outputSettings37.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings37.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings33.escapeMode(escapeMode52);
        org.jsoup.nodes.TextNode textNode56 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean58 = textNode56.hasAttr("");
        boolean boolean59 = textNode56.isBlank();
        java.lang.String str60 = textNode56.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder61 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset65 = outputSettings64.charset();
        outputSettings63.charset = charset65;
        boolean boolean67 = outputSettings63.getforceAllElementAsBlock();
        textNode56.outerHtmlTail(stringBuilder61, 0, outputSettings63);
        java.nio.charset.CharsetEncoder charsetEncoder69 = outputSettings63.charsetEncoder;
        outputSettings53.setcharsetEncoder(charsetEncoder69);
        outputSettings29.charsetEncoder = charsetEncoder69;
        outputSettings29.setprettyPrint(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertNotNull(textNode56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "text" + "'", str60, "text");
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(charsetEncoder69);
    }

    @Test
    public void test09375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09375");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings0.getcharsetEncoder();
        boolean boolean7 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(outputSettings8);
    }

    @Test
    public void test09376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09376");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(true);
        outputSettings10.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        boolean boolean16 = outputSettings13.getprettyPrint();
        boolean boolean17 = outputSettings13.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings13.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings13.getescapeMode();
        outputSettings10.escapeMode = escapeMode20;
        java.nio.charset.Charset charset22 = outputSettings10.charset;
        outputSettings10.setprettyPrint(false);
        int int25 = outputSettings10.getindentAmount();
        boolean boolean26 = outputSettings10.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09377");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        java.lang.String str4 = textNode0.baseUri();
        java.lang.String str5 = textNode0.text;
        org.jsoup.nodes.Node node6 = textNode0.parent();
        java.lang.String str7 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings10.setprettyPrint(true);
        java.nio.charset.Charset charset20 = outputSettings10.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings10.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) '4');
        boolean boolean25 = outputSettings24.forceAllElementAsBlock();
        // The following exception was thrown during execution in test generation
        try {
            textNode0.outerHtmlHead(stringBuilder8, (int) (byte) 10, outputSettings24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09378");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode6 = new org.jsoup.nodes.TextNode();
        textNode6.setBaseUri("hi!");
        java.lang.String str9 = textNode6.getTEXT_KEY();
        textNode6.text = "hi!";
        org.jsoup.nodes.TextNode textNode13 = textNode6.splitText((int) (byte) 0);
        org.jsoup.nodes.Node node16 = textNode13.attr("#text", "");
        boolean boolean17 = textNode2.equals((java.lang.Object) node16);
        java.lang.String str18 = textNode2.text;
        java.lang.String str20 = textNode2.attr("t");
        java.lang.String str21 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
    }

    @Test
    public void test09379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09379");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        outputSettings10.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings10.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        boolean boolean18 = outputSettings15.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings15.prettyPrint(false);
        java.nio.charset.Charset charset21 = outputSettings15.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings15.getescapeMode();
        outputSettings10.escapeMode = escapeMode22;
        boolean boolean24 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        outputSettings25.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings25.forceAllElementAsBlock(true);
        int int32 = outputSettings25.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings25.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.forceAllElementAsBlock(true);
        outputSettings35.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        boolean boolean41 = outputSettings38.getprettyPrint();
        boolean boolean42 = outputSettings38.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings38.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings38.getescapeMode();
        outputSettings35.escapeMode = escapeMode45;
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings35.escapeMode();
        outputSettings10.escapeMode = escapeMode47;
        int int49 = outputSettings10.getindentAmount();
        int int50 = outputSettings10.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        outputSettings51.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings51.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings57.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings57.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings57.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings57.escapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings57.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings57.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder67 = outputSettings57.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset70 = outputSettings69.charset();
        outputSettings68.charset = charset70;
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings68.forceAllElementAsBlock(false);
        int int74 = outputSettings73.indentAmount();
        boolean boolean75 = outputSettings73.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings73.escapeMode();
        outputSettings57.setescapeMode(escapeMode76);
        outputSettings10.setescapeMode(escapeMode76);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNull(escapeMode11);
        org.junit.Assert.assertNull(escapeMode14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertNotNull(charsetEncoder67);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09380");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        int int6 = outputSettings5.getindentAmount();
        outputSettings5.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        outputSettings9.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings20.setcharset(charset27);
        outputSettings15.setcharset(charset27);
        outputSettings9.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings5.charset(charset27);
        outputSettings5.setprettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings5.indentAmount(0);
        outputSettings37.prettyPrint = false;
        boolean boolean40 = outputSettings37.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test09381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09381");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        int int6 = outputSettings0.indentAmount();
        outputSettings0.setforceAllElementAsBlock(false);
        outputSettings0.prettyPrint = true;
        outputSettings0.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings0.getcharsetEncoder();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder13);
    }

    @Test
    public void test09382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09382");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings15.setescapeMode(escapeMode18);
        outputSettings15.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings15.setescapeMode(escapeMode22);
        boolean boolean24 = outputSettings15.forceAllElementAsBlock;
        int int25 = outputSettings15.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings15.escapeMode(escapeMode26);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings28.setescapeMode(escapeMode31);
        outputSettings28.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        outputSettings28.setescapeMode(escapeMode35);
        boolean boolean37 = outputSettings28.forceAllElementAsBlock;
        int int38 = outputSettings28.indentAmount;
        java.nio.charset.Charset charset39 = outputSettings28.getcharset();
        outputSettings27.setcharset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset39);
        boolean boolean42 = outputSettings41.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test09383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09383");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings14.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings31.clone();
        int int33 = outputSettings32.getindentAmount();
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        outputSettings14.setcharset(charset34);
        outputSettings0.setcharset(charset34);
        boolean boolean37 = outputSettings0.prettyPrint();
        int int38 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        int int41 = outputSettings39.indentAmount;
        java.nio.charset.Charset charset42 = outputSettings39.charset;
        boolean boolean43 = outputSettings39.prettyPrint;
        outputSettings39.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings39.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings0.escapeMode(escapeMode46);
        org.jsoup.nodes.TextNode textNode48 = new org.jsoup.nodes.TextNode();
        textNode48.setBaseUri("hi!");
        java.lang.String str51 = textNode48.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder52 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        boolean boolean57 = outputSettings54.getprettyPrint();
        boolean boolean58 = outputSettings54.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings54.indentAmount((int) '4');
        textNode48.outerHtmlTail(stringBuilder52, (int) (short) 100, outputSettings60);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean63 = outputSettings62.prettyPrint;
        boolean boolean64 = outputSettings62.forceAllElementAsBlock;
        boolean boolean65 = outputSettings62.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings62.prettyPrint(false);
        outputSettings62.setforceAllElementAsBlock(false);
        outputSettings62.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset72 = outputSettings62.charset;
        java.nio.charset.CharsetEncoder charsetEncoder73 = outputSettings62.getcharsetEncoder();
        outputSettings60.charsetEncoder = charsetEncoder73;
        outputSettings47.charsetEncoder = charsetEncoder73;
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings47.indentAmount((int) (short) 100);
        boolean boolean78 = outputSettings77.prettyPrint();
        outputSettings77.setforceAllElementAsBlock(true);
        boolean boolean81 = outputSettings77.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "text" + "'", str51, "text");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(charsetEncoder73);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test09384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09384");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.siblingNodes();
        java.lang.String str7 = textNode2.absUrl("i!");
        textNode2.text = "h";
        java.lang.String str11 = textNode2.absUrl("ext");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test09385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09385");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str3 = textNode2.text;
        boolean boolean4 = textNode2.isBlank();
        java.lang.String str5 = textNode2.text;
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        outputSettings8.prettyPrint = false;
        outputSettings8.setforceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings8.getcharsetEncoder();
        boolean boolean15 = outputSettings8.forceAllElementAsBlock();
        boolean boolean16 = outputSettings8.prettyPrint();
        textNode2.outerHtmlTail(stringBuilder6, (-1), outputSettings8);
        org.jsoup.nodes.Node node19 = textNode2.removeAttr("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test09386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09386");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset8 = outputSettings7.charset();
        outputSettings6.charset = charset8;
        outputSettings6.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings6.getcharsetEncoder();
        outputSettings0.charsetEncoder = charsetEncoder12;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.prettyPrint(true);
        int int16 = outputSettings0.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.setprettyPrint(false);
        java.nio.charset.Charset charset23 = outputSettings18.charset;
        outputSettings18.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings18.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder26);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings0.indentAmount(10);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings0.escapeMode;
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNull(escapeMode30);
    }

    @Test
    public void test09387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09387");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        textNode2.setBaseUri("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        outputSettings11.indentAmount = (-1);
        java.nio.charset.Charset charset17 = outputSettings11.charset();
        boolean boolean18 = outputSettings11.forceAllElementAsBlock();
        int int19 = outputSettings11.indentAmount();
        textNode2.outerHtmlTail(stringBuilder9, 97, outputSettings11);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node21 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test09388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09388");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        java.lang.String str11 = textNode2.text;
        java.lang.String str12 = textNode2.gettext();
        org.jsoup.nodes.Node node13 = textNode2.nextSibling();
        java.lang.String str14 = textNode2.outerHtml();
        textNode2.text = "#text";
        java.lang.String str17 = textNode2.text;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node19 = textNode2.after("ext");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#text" + "'", str17, "#text");
    }

    @Test
    public void test09389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09389");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        boolean boolean10 = outputSettings7.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings7.prettyPrint(false);
        java.nio.charset.Charset charset13 = outputSettings7.getcharset();
        outputSettings6.setcharset(charset13);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings15.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings15.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings28.encoder();
        outputSettings20.setcharsetEncoder(charsetEncoder30);
        java.nio.charset.Charset charset32 = outputSettings20.getcharset();
        boolean boolean33 = outputSettings20.forceAllElementAsBlock();
        java.nio.charset.Charset charset34 = outputSettings20.charset;
        outputSettings15.setcharset(charset34);
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings15.escapeMode();
        outputSettings6.setescapeMode(escapeMode36);
        outputSettings6.prettyPrint = false;
        org.jsoup.nodes.TextNode textNode40 = new org.jsoup.nodes.TextNode();
        textNode40.setBaseUri("hi!");
        java.lang.String str43 = textNode40.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder44 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        boolean boolean49 = outputSettings46.getprettyPrint();
        boolean boolean50 = outputSettings46.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings46.indentAmount((int) '4');
        textNode40.outerHtmlTail(stringBuilder44, (int) (short) 100, outputSettings52);
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        boolean boolean57 = outputSettings54.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings54.prettyPrint(false);
        outputSettings54.setforceAllElementAsBlock(false);
        outputSettings54.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset64 = outputSettings54.charset;
        java.nio.charset.CharsetEncoder charsetEncoder65 = outputSettings54.getcharsetEncoder();
        outputSettings52.charsetEncoder = charsetEncoder65;
        outputSettings6.charsetEncoder = charsetEncoder65;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "text" + "'", str43, "text");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(charsetEncoder65);
    }

    @Test
    public void test09390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09390");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.prettyPrint(true);
        java.nio.charset.Charset charset5 = outputSettings4.charset();
        int int6 = outputSettings4.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings7.charsetEncoder;
        outputSettings4.charsetEncoder = charsetEncoder18;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings4.prettyPrint(false);
        boolean boolean22 = outputSettings4.prettyPrint();
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09391");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset3 = outputSettings0.charset;
        boolean boolean4 = outputSettings0.prettyPrint;
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.clone();
        boolean boolean8 = outputSettings0.getprettyPrint();
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        outputSettings11.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset17 = outputSettings16.charset();
        outputSettings11.setcharset(charset17);
        outputSettings11.setprettyPrint(true);
        java.nio.charset.Charset charset21 = outputSettings11.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings11.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings11.escapeMode();
        boolean boolean24 = outputSettings11.getprettyPrint();
        boolean boolean25 = outputSettings11.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings11.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings11.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings11.indentAmount((int) (byte) 1);
        java.nio.charset.Charset charset30 = outputSettings11.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings11.escapeMode;
        outputSettings10.setescapeMode(escapeMode31);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09392");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        java.lang.String str8 = textNode6.getWholeText();
        java.lang.String str9 = textNode6.nodeName();
        java.lang.String str10 = textNode6.outerHtml();
        java.lang.String str11 = textNode6.gettext();
        org.jsoup.nodes.Node node14 = textNode6.attr("#text", "");
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("text", "text");
        int int18 = textNode17.siblingIndex();
        int int19 = textNode17.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList20 = textNode17.childNodes();
        java.lang.String str21 = textNode17.gettext();
        textNode17.settext("text");
        java.lang.String str24 = textNode17.getTEXT_KEY();
        org.jsoup.nodes.Node node25 = textNode17.parent();
        org.jsoup.nodes.Node node28 = textNode17.attr("text", "hi!");
        java.lang.String str29 = textNode17.getTEXT_KEY();
        java.util.List<org.jsoup.nodes.Node> nodeList30 = textNode17.siblingNodes();
        // The following exception was thrown during execution in test generation
        try {
            node14.replaceWith((org.jsoup.nodes.Node) textNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "text" + "'", str24, "text");
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "text" + "'", str29, "text");
        org.junit.Assert.assertNotNull(nodeList30);
    }

    @Test
    public void test09393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09393");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        int int14 = outputSettings11.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings11.getcharsetEncoder();
        outputSettings10.setcharsetEncoder(charsetEncoder15);
        outputSettings0.charsetEncoder = charsetEncoder15;
        outputSettings0.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset20 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings21.charset = charset23;
        outputSettings21.indentAmount = (-1);
        java.nio.charset.Charset charset27 = outputSettings21.charset();
        boolean boolean28 = outputSettings21.forceAllElementAsBlock();
        java.nio.charset.Charset charset29 = outputSettings21.getcharset();
        boolean boolean30 = outputSettings21.prettyPrint();
        boolean boolean31 = outputSettings21.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings21.prettyPrint;
        java.nio.charset.Charset charset33 = outputSettings21.charset;
        outputSettings0.setcharset(charset33);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings0.charset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charset33);
    }

    @Test
    public void test09394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09394");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        java.lang.String str6 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode9.childNodes();
        org.jsoup.nodes.Node node11 = textNode9.nextSibling();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode9.siblingNodes();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(nodeList12);
    }

    @Test
    public void test09395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09395");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("h", "text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        java.lang.String str4 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("h");
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode("text", "text");
        int int10 = textNode9.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode9.siblingNodes();
        textNode9.text = "";
        java.lang.String str14 = textNode9.baseUri();
        java.lang.String str16 = textNode9.attr("");
        org.jsoup.nodes.Node node19 = textNode9.attr("ext", "#text");
        textNode9.text = "ext";
        org.jsoup.nodes.TextNode textNode23 = textNode9.text("ext");
        int int24 = textNode9.siblingIndex();
        // The following exception was thrown during execution in test generation
        try {
            textNode6.replaceWith((org.jsoup.nodes.Node) textNode9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "text" + "'", str4, "text");
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(textNode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test09396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09396");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.Node node5 = textNode2.nextSibling();
        int int6 = textNode2.siblingIndex();
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.text();
        java.lang.String str9 = textNode2.baseUri();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
    }

    @Test
    public void test09397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09397");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        java.lang.String str9 = textNode6.nodeName();
        java.lang.String str10 = textNode6.text;
        textNode6.text = "t";
        org.jsoup.nodes.Node node13 = textNode6.clone();
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null;
        outputSettings16.setescapeMode(escapeMode19);
        outputSettings16.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = null;
        outputSettings16.setescapeMode(escapeMode23);
        outputSettings16.setprettyPrint(false);
        org.jsoup.nodes.TextNode textNode29 = new org.jsoup.nodes.TextNode("text", "text");
        int int30 = textNode29.siblingIndex();
        int int31 = textNode29.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList32 = textNode29.childNodes();
        java.lang.StringBuilder stringBuilder33 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        int int38 = outputSettings35.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings35.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        outputSettings41.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset47 = outputSettings46.charset();
        outputSettings41.setcharset(charset47);
        outputSettings40.setcharset(charset47);
        outputSettings35.setcharset(charset47);
        textNode29.outerHtmlTail(stringBuilder33, 10, outputSettings35);
        int int52 = outputSettings35.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings35.encoder();
        outputSettings16.charsetEncoder = charsetEncoder53;
        // The following exception was thrown during execution in test generation
        try {
            textNode6.outerHtmlHead(stringBuilder14, (int) (byte) 10, outputSettings16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder53);
    }

    @Test
    public void test09398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09398");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        outputSettings8.indentAmount = (-1);
        java.nio.charset.Charset charset14 = outputSettings8.charset();
        outputSettings8.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.prettyPrint(false);
        int int23 = outputSettings22.getindentAmount();
        outputSettings22.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings22.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        boolean boolean30 = outputSettings27.getprettyPrint();
        boolean boolean31 = outputSettings27.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings27.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode();
        outputSettings22.setescapeMode(escapeMode34);
        outputSettings8.escapeMode = escapeMode34;
        outputSettings0.setescapeMode(escapeMode34);
        int int38 = outputSettings0.indentAmount();
        java.nio.charset.Charset charset39 = outputSettings0.charset;
        outputSettings0.indentAmount = 10;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(charset39);
    }

    @Test
    public void test09399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09399");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset3 = outputSettings0.charset;
        boolean boolean4 = outputSettings0.prettyPrint;
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings7.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.encoder();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
    }

    @Test
    public void test09400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09400");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        boolean boolean3 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings4.charset = charset6;
        outputSettings4.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings4.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings4.escapeMode(escapeMode11);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings13.charset = charset15;
        outputSettings13.indentAmount = (-1);
        java.nio.charset.Charset charset19 = outputSettings13.charset();
        boolean boolean20 = outputSettings13.forceAllElementAsBlock();
        java.nio.charset.Charset charset21 = outputSettings13.getcharset();
        outputSettings12.charset = charset21;
        outputSettings0.setcharset(charset21);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings0.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings25.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder29);
        outputSettings0.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings0.forceAllElementAsBlock(false);
        boolean boolean35 = outputSettings34.forceAllElementAsBlock();
        outputSettings34.setindentAmount(10);
        outputSettings34.prettyPrint = false;
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09401");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.settext("text");
        org.jsoup.nodes.Node node6 = textNode0.nextSibling();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        outputSettings7.charset = charset9;
        boolean boolean11 = outputSettings7.getforceAllElementAsBlock();
        boolean boolean12 = textNode0.equals((java.lang.Object) outputSettings7);
        boolean boolean13 = textNode0.isBlank();
        org.jsoup.nodes.Node node15 = textNode0.removeAttr("!");
        org.jsoup.nodes.Node node16 = textNode0.nextSibling();
        textNode0.ensureAttributes();
        java.lang.String str18 = textNode0.getWholeText();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
    }

    @Test
    public void test09402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09402");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        java.nio.charset.Charset charset16 = outputSettings5.getcharset();
        textNode2.outerHtmlTail(stringBuilder3, (int) (short) -1, outputSettings5);
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings5.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings5.prettyPrint(true);
        boolean boolean21 = outputSettings20.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset24 = outputSettings23.charset();
        outputSettings22.charset = charset24;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings22.encoder();
        outputSettings22.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings22.escapeMode;
        outputSettings22.forceAllElementAsBlock = false;
        boolean boolean32 = outputSettings22.prettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings22.getcharsetEncoder();
        outputSettings20.setcharsetEncoder(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charsetEncoder33);
    }

    @Test
    public void test09403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09403");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings0.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings0.getcharset();
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode("text", "text");
        int int10 = textNode9.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode9.childNodes();
        org.jsoup.nodes.TextNode textNode13 = textNode9.text("");
        java.lang.String str14 = textNode13.toString();
        java.lang.String str15 = textNode13.getWholeText();
        org.jsoup.nodes.Node node16 = textNode13.nextSibling();
        java.lang.StringBuilder stringBuilder17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        outputSettings19.setprettyPrint(false);
        outputSettings19.setindentAmount(0);
        outputSettings19.indentAmount = (byte) 1;
        java.nio.charset.Charset charset28 = outputSettings19.getcharset();
        textNode13.outerHtmlTail(stringBuilder17, (int) '4', outputSettings19);
        outputSettings19.setprettyPrint(false);
        java.nio.charset.Charset charset32 = outputSettings19.charset();
        outputSettings0.charset = charset32;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        boolean boolean37 = outputSettings34.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings34.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        int int43 = outputSettings40.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings40.getcharsetEncoder();
        outputSettings39.setcharsetEncoder(charsetEncoder44);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings39.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings0.escapeMode(escapeMode46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset50 = outputSettings49.charset();
        outputSettings48.charset = charset50;
        outputSettings48.indentAmount = (-1);
        java.nio.charset.Charset charset54 = outputSettings48.charset();
        outputSettings48.setforceAllElementAsBlock(true);
        boolean boolean57 = outputSettings48.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings48.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        outputSettings59.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings59.getcharsetEncoder();
        outputSettings59.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder67 = outputSettings59.getcharsetEncoder();
        java.nio.charset.Charset charset68 = outputSettings59.charset;
        outputSettings58.charset = charset68;
        outputSettings58.prettyPrint = true;
        java.nio.charset.Charset charset72 = outputSettings58.charset;
        java.nio.charset.Charset charset73 = outputSettings58.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings47.charset(charset73);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertNotNull(charsetEncoder67);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(outputSettings74);
    }

    @Test
    public void test09404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09404");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("#text");
        java.lang.String str12 = textNode2.baseUri();
        org.jsoup.nodes.Node node14 = textNode2.removeAttr("h");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test09405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09405");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("h");
        java.lang.String str10 = textNode2.baseUri();
        java.lang.String str11 = textNode2.text();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test09406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09406");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node6 = textNode2.attr("#text", "text");
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings9.setcharset(charset16);
        textNode2.outerHtmlTail(stringBuilder7, 0, outputSettings9);
        boolean boolean21 = textNode2.hasAttr("!");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09407");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.getWholeText();
        boolean boolean7 = textNode2.hasAttr("");
        java.lang.String str8 = textNode2.getWholeText();
        textNode2.settext("hi!");
        java.lang.String str11 = textNode2.nodeName();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings12.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings12.encoder();
        outputSettings12.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset24 = outputSettings23.charset();
        outputSettings22.charset = charset24;
        outputSettings22.indentAmount = (-1);
        java.nio.charset.Charset charset28 = outputSettings22.charset();
        outputSettings22.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        boolean boolean34 = outputSettings31.getprettyPrint();
        boolean boolean35 = outputSettings31.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings31.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings37.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset41 = outputSettings40.charset();
        outputSettings39.charset = charset41;
        outputSettings39.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        int int48 = outputSettings45.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings45.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        outputSettings51.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset57 = outputSettings56.charset();
        outputSettings51.setcharset(charset57);
        outputSettings50.setcharset(charset57);
        outputSettings45.setcharset(charset57);
        outputSettings39.setcharset(charset57);
        outputSettings37.setcharset(charset57);
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings22.charset(charset57);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings12.charset(charset57);
        boolean boolean65 = textNode2.equals((java.lang.Object) outputSettings12);
        java.lang.String str67 = textNode2.attr("!");
        java.lang.String str68 = textNode2.text();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "text" + "'", str68, "text");
    }

    @Test
    public void test09408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09408");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        outputSettings6.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        outputSettings6.setcharset(charset12);
        outputSettings5.setcharset(charset12);
        outputSettings0.setcharset(charset12);
        int int16 = outputSettings0.getindentAmount();
        outputSettings0.indentAmount = 'a';
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(true);
        int int22 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings0.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings24.charsetEncoder;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
    }

    @Test
    public void test09409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09409");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        java.lang.String str4 = textNode2.attr("");
        boolean boolean5 = textNode2.isBlank();
        java.lang.String str6 = textNode2.baseUri();
        int int7 = textNode2.siblingIndex();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test09410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09410");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode6 = new org.jsoup.nodes.TextNode();
        textNode6.setBaseUri("hi!");
        java.lang.String str9 = textNode6.getTEXT_KEY();
        textNode6.text = "hi!";
        org.jsoup.nodes.TextNode textNode13 = textNode6.splitText((int) (byte) 0);
        org.jsoup.nodes.Node node16 = textNode13.attr("#text", "");
        boolean boolean17 = textNode2.equals((java.lang.Object) node16);
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.gettext();
        org.jsoup.nodes.Node node22 = textNode2.attr("ext", "i!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode2.childNode(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test09411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09411");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(false);
        outputSettings0.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset10 = outputSettings0.charset;
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings0.forceAllElementAsBlock(true);
        boolean boolean14 = outputSettings0.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09412");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        int int6 = outputSettings0.indentAmount();
        java.nio.charset.Charset charset7 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        outputSettings8.setescapeMode(escapeMode11);
        outputSettings8.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = null;
        outputSettings8.setescapeMode(escapeMode15);
        boolean boolean17 = outputSettings8.forceAllElementAsBlock;
        int int18 = outputSettings8.indentAmount;
        java.nio.charset.Charset charset19 = outputSettings8.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings28.encoder();
        outputSettings20.setcharsetEncoder(charsetEncoder30);
        java.nio.charset.Charset charset32 = outputSettings20.getcharset();
        boolean boolean33 = outputSettings20.forceAllElementAsBlock();
        java.nio.charset.Charset charset34 = outputSettings20.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings8.charset(charset34);
        outputSettings8.setforceAllElementAsBlock(true);
        outputSettings8.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset41 = outputSettings40.charset();
        int int42 = outputSettings40.indentAmount;
        java.nio.charset.Charset charset43 = outputSettings40.charset;
        boolean boolean44 = outputSettings40.prettyPrint;
        outputSettings40.setforceAllElementAsBlock(true);
        outputSettings40.indentAmount = (short) 100;
        int int49 = outputSettings40.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings40.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset52 = outputSettings51.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings8.charset(charset52);
        outputSettings0.setcharset(charset52);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings53);
    }

    @Test
    public void test09413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09413");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        boolean boolean15 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.encoder();
        boolean boolean21 = outputSettings16.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings16.escapeMode;
        outputSettings0.escapeMode = escapeMode22;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings0.forceAllElementAsBlock(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
    }

    @Test
    public void test09414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09414");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.String str7 = textNode2.toString();
        java.lang.String str9 = textNode2.attr("hi!");
        java.lang.String str11 = textNode2.absUrl("hi!");
        org.jsoup.nodes.TextNode textNode14 = new org.jsoup.nodes.TextNode("text", "text");
        int int15 = textNode14.siblingIndex();
        org.jsoup.nodes.Attributes attributes16 = textNode14.attributes();
        textNode14.ensureAttributes();
        org.jsoup.nodes.Node node18 = textNode14.parent();
        textNode14.ensureAttributes();
        org.jsoup.nodes.Node node20 = textNode14.clone();
        boolean boolean21 = textNode2.equals((java.lang.Object) textNode14);
        boolean boolean23 = textNode2.hasAttr("i!");
        org.jsoup.nodes.Attributes attributes24 = textNode2.attributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node26 = textNode2.before("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(attributes24);
    }

    @Test
    public void test09415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09415");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        int int2 = outputSettings1.getindentAmount();
        int int3 = outputSettings1.indentAmount;
        outputSettings1.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings6.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder11 = null;
        outputSettings10.charsetEncoder = charsetEncoder11;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings10.getescapeMode();
        outputSettings1.escapeMode = escapeMode13;
        boolean boolean15 = outputSettings1.prettyPrint();
        int int16 = outputSettings1.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings1.escapeMode;
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09416");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.String str3 = textNode2.nodeName();
        java.lang.String str5 = textNode2.absUrl("t");
        org.jsoup.nodes.Attributes attributes6 = textNode2.attributes();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings9.setcharset(charset15);
        outputSettings9.setprettyPrint(true);
        java.nio.charset.Charset charset19 = outputSettings9.getcharset();
        outputSettings9.setprettyPrint(true);
        boolean boolean22 = outputSettings9.prettyPrint;
        boolean boolean23 = outputSettings9.forceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder7, 1, outputSettings9);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean27 = outputSettings25.getprettyPrint();
        outputSettings25.setprettyPrint(false);
        outputSettings25.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings25.clone();
        outputSettings32.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings32.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings36.escapeMode();
        outputSettings9.setescapeMode(escapeMode37);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09417");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        textNode2.text = "";
        textNode2.text = "text";
        org.jsoup.nodes.Node node15 = textNode2.attr("#", "");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test09418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09418");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        outputSettings9.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings9.getcharsetEncoder();
        outputSettings9.setforceAllElementAsBlock(false);
        boolean boolean18 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.TextNode textNode21 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = textNode21.equals((java.lang.Object) outputSettings22);
        int int25 = outputSettings22.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        outputSettings26.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset32 = outputSettings31.charset();
        outputSettings26.setcharset(charset32);
        outputSettings26.setprettyPrint(true);
        java.nio.charset.Charset charset36 = outputSettings26.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings26.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings26.escapeMode();
        boolean boolean39 = outputSettings26.getprettyPrint();
        boolean boolean40 = outputSettings26.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings26.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings22.escapeMode(escapeMode41);
        java.nio.charset.Charset charset43 = outputSettings42.charset();
        outputSettings9.setcharset(charset43);
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings9.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings9.clone();
        boolean boolean47 = outputSettings46.forceAllElementAsBlock();
        textNode6.outerHtmlTail(stringBuilder7, (int) (short) 10, outputSettings46);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test09419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09419");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings4.charset = charset6;
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings4.encoder();
        outputSettings4.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings4.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings12.charset = charset14;
        outputSettings12.indentAmount = (-1);
        java.nio.charset.Charset charset18 = outputSettings12.charset();
        outputSettings12.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        boolean boolean24 = outputSettings21.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings21.prettyPrint(false);
        int int27 = outputSettings26.getindentAmount();
        outputSettings26.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings26.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        boolean boolean34 = outputSettings31.getprettyPrint();
        boolean boolean35 = outputSettings31.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings31.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings37.escapeMode();
        outputSettings26.setescapeMode(escapeMode38);
        outputSettings12.escapeMode = escapeMode38;
        outputSettings4.setescapeMode(escapeMode38);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings4.indentAmount((int) (byte) 1);
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings43.encoder();
        outputSettings3.setcharsetEncoder(charsetEncoder44);
        boolean boolean46 = outputSettings3.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings3.clone();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
    }

    @Test
    public void test09420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09420");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        boolean boolean7 = outputSettings3.getforceAllElementAsBlock();
        boolean boolean8 = outputSettings3.forceAllElementAsBlock();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings3.charset("hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09421");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        textNode2.settext("");
        java.lang.String str27 = textNode2.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder28 = null;
        org.jsoup.nodes.TextNode textNode32 = new org.jsoup.nodes.TextNode("text", "text");
        int int33 = textNode32.siblingIndex();
        int int34 = textNode32.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList35 = textNode32.childNodes();
        java.lang.StringBuilder stringBuilder36 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        int int41 = outputSettings38.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        outputSettings44.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset50 = outputSettings49.charset();
        outputSettings44.setcharset(charset50);
        outputSettings43.setcharset(charset50);
        outputSettings38.setcharset(charset50);
        textNode32.outerHtmlTail(stringBuilder36, 10, outputSettings38);
        int int55 = outputSettings38.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder56 = outputSettings38.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings38.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean59 = outputSettings58.prettyPrint;
        boolean boolean60 = outputSettings58.forceAllElementAsBlock;
        outputSettings58.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean64 = outputSettings63.prettyPrint;
        boolean boolean65 = outputSettings63.forceAllElementAsBlock;
        boolean boolean66 = outputSettings63.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset69 = outputSettings68.charset();
        outputSettings67.charset = charset69;
        java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings67.encoder();
        boolean boolean72 = outputSettings67.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings67.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings63.escapeMode(escapeMode73);
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings58.escapeMode(escapeMode73);
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings58.getescapeMode();
        outputSettings38.setescapeMode(escapeMode76);
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings38.escapeMode;
        java.nio.charset.Charset charset79 = outputSettings38.charset;
        int int80 = outputSettings38.indentAmount();
        outputSettings38.forceAllElementAsBlock = false;
        boolean boolean83 = outputSettings38.forceAllElementAsBlock;
        int int84 = outputSettings38.indentAmount;
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder28, 97, outputSettings38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "text" + "'", str27, "text");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder56);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(charsetEncoder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test09422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09422");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings14.setindentAmount((int) (short) -1);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.indentAmount((int) (short) 0);
        outputSettings17.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings17.encoder();
        outputSettings14.setcharsetEncoder(charsetEncoder23);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings14.encoder();
        boolean boolean26 = outputSettings14.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09423");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings7.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings7.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings11.encoder();
        outputSettings0.charsetEncoder = charsetEncoder12;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings0.escapeMode();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09424");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        int int15 = outputSettings14.getindentAmount();
        outputSettings14.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings18.charset = charset20;
        outputSettings18.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        int int27 = outputSettings24.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings30.setcharset(charset36);
        outputSettings29.setcharset(charset36);
        outputSettings24.setcharset(charset36);
        outputSettings18.setcharset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(false);
        int int48 = outputSettings47.getindentAmount();
        outputSettings47.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        boolean boolean56 = outputSettings52.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings52.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        outputSettings47.setescapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings14.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings0.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings0.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder65 = outputSettings0.charsetEncoder;
        outputSettings0.forceAllElementAsBlock = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(charsetEncoder65);
    }

    @Test
    public void test09425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09425");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        textNode2.text = "hi!";
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        boolean boolean12 = textNode2.isBlank();
        org.jsoup.nodes.Node node14 = textNode2.removeAttr("t");
        java.lang.String str15 = textNode2.nodeName();
        java.lang.String str16 = textNode2.text;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test09426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09426");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "ext");
        org.jsoup.nodes.Node node3 = textNode2.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node4 = node3.parent();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test09427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09427");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean3 = textNode2.isBlank();
        int int4 = textNode2.siblingIndex();
        textNode2.ensureAttributes();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test09428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09428");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.absUrl("text");
        textNode2.setBaseUri("#text");
        boolean boolean9 = textNode2.hasAttr("#text");
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.getWholeText();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = textNode2.wrap("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
    }

    @Test
    public void test09429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09429");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        textNode2.setBaseUri("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.getWholeText();
        boolean boolean11 = textNode2.hasAttr("!");
        java.lang.String str12 = textNode2.text();
        java.lang.String str13 = textNode2.gettext();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
    }

    @Test
    public void test09430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09430");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str10 = textNode2.attr("ext");
        org.jsoup.nodes.Node node11 = textNode2.parent();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test09431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09431");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str4 = textNode2.absUrl("t");
        textNode2.text = "text";
        java.lang.String str7 = textNode2.text;
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings10.setprettyPrint(true);
        java.nio.charset.Charset charset20 = outputSettings10.getcharset();
        outputSettings10.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings10.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = null;
        outputSettings25.setescapeMode(escapeMode28);
        outputSettings25.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = null;
        outputSettings25.setescapeMode(escapeMode32);
        boolean boolean34 = outputSettings25.forceAllElementAsBlock;
        int int35 = outputSettings25.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings25.escapeMode(escapeMode36);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = null;
        outputSettings38.setescapeMode(escapeMode41);
        outputSettings38.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = null;
        outputSettings38.setescapeMode(escapeMode45);
        boolean boolean47 = outputSettings38.forceAllElementAsBlock;
        int int48 = outputSettings38.indentAmount;
        java.nio.charset.Charset charset49 = outputSettings38.getcharset();
        outputSettings37.setcharset(charset49);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings24.charset(charset49);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings52.clone();
        int int54 = outputSettings53.getindentAmount();
        java.nio.charset.Charset charset55 = outputSettings53.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings51.charset(charset55);
        outputSettings51.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings51.clone();
        textNode2.outerHtmlTail(stringBuilder8, (int) 'a', outputSettings59);
        java.lang.StringBuilder stringBuilder61 = null;
        org.jsoup.nodes.TextNode textNode65 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.StringBuilder stringBuilder66 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean69 = outputSettings68.prettyPrint;
        boolean boolean70 = outputSettings68.forceAllElementAsBlock;
        int int71 = outputSettings68.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder72 = outputSettings68.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean75 = outputSettings74.prettyPrint;
        boolean boolean76 = outputSettings74.forceAllElementAsBlock;
        outputSettings74.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset80 = outputSettings79.charset();
        outputSettings74.setcharset(charset80);
        outputSettings73.setcharset(charset80);
        outputSettings68.setcharset(charset80);
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings68.escapeMode;
        textNode65.outerHtmlTail(stringBuilder66, 0, outputSettings68);
        outputSettings68.setindentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings89 = outputSettings68.prettyPrint(false);
        outputSettings68.indentAmount = ' ';
        textNode2.outerHtmlTail(stringBuilder61, (int) (byte) 100, outputSettings68);
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(textNode65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(charset80);
        org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings89);
    }

    @Test
    public void test09432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09432");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        boolean boolean7 = textNode2.equals((java.lang.Object) 1L);
        org.jsoup.nodes.Node node10 = textNode2.attr("#text", "t");
        org.jsoup.nodes.Node node13 = textNode2.attr("text", "");
        java.lang.String str14 = textNode2.gettext();
        boolean boolean16 = textNode2.hasAttr("text");
        org.jsoup.nodes.Node node18 = textNode2.removeAttr("#");
        org.jsoup.nodes.Node node20 = textNode2.removeAttr("h");
        java.lang.String str21 = textNode2.nodeName();
        java.lang.Class<?> wildcardClass22 = textNode2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test09433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09433");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        java.lang.String str5 = textNode2.attr("text");
        org.jsoup.nodes.Node node6 = textNode2.clone();
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        outputSettings8.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings8.setcharset(charset14);
        outputSettings8.setprettyPrint(true);
        java.nio.charset.Charset charset18 = outputSettings8.getcharset();
        outputSettings8.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings8.forceAllElementAsBlock(false);
        outputSettings22.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        outputSettings25.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings25.setcharset(charset31);
        outputSettings25.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings35.charset = charset37;
        outputSettings35.indentAmount = (-1);
        java.nio.charset.Charset charset41 = outputSettings35.charset();
        outputSettings35.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset44 = outputSettings35.getcharset();
        outputSettings25.setcharset(charset44);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings46.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings46.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings46.escapeMode();
        outputSettings25.escapeMode = escapeMode50;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings22.escapeMode(escapeMode50);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = node7.equals((java.lang.Object) outputSettings52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
    }

    @Test
    public void test09434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09434");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        org.jsoup.nodes.Node node7 = textNode2.clone();
        textNode2.text = "t";
        textNode2.ensureAttributes();
        boolean boolean11 = textNode2.isBlank();
        textNode2.ensureAttributes();
        java.lang.String str13 = textNode2.text();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "t" + "'", str13, "t");
    }

    @Test
    public void test09435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09435");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean5 = outputSettings4.prettyPrint;
        boolean boolean6 = outputSettings4.forceAllElementAsBlock;
        int int7 = outputSettings4.getindentAmount();
        boolean boolean8 = outputSettings4.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings4.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings4.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings11.encoder();
        boolean boolean16 = outputSettings11.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings11.escapeMode;
        outputSettings4.setescapeMode(escapeMode17);
        outputSettings0.setescapeMode(escapeMode17);
        outputSettings0.setindentAmount((int) (byte) 0);
        boolean boolean22 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings0.getescapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09436");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        org.jsoup.nodes.Node node26 = textNode2.removeAttr("hi!");
        java.lang.StringBuilder stringBuilder27 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.getforceAllElementAsBlock();
        boolean boolean31 = outputSettings29.getprettyPrint();
        outputSettings29.setprettyPrint(false);
        textNode2.outerHtmlTail(stringBuilder27, (-1), outputSettings29);
        org.jsoup.nodes.TextNode textNode36 = textNode2.text("t");
        textNode2.settext("h");
        int int39 = textNode2.siblingIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(textNode36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test09437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09437");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str9 = textNode0.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.forceAllElementAsBlock(false);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings42);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        outputSettings46.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings46.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        int int56 = outputSettings53.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder57 = outputSettings53.charsetEncoder;
        outputSettings46.charsetEncoder = charsetEncoder57;
        boolean boolean59 = textNode0.equals((java.lang.Object) outputSettings46);
        java.lang.String str60 = textNode0.gettext();
        java.lang.String str61 = textNode0.outerHtml();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
    }

    @Test
    public void test09438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09438");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        boolean boolean9 = textNode7.isBlank();
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.TextNode textNode14 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode14.childNodes();
        org.jsoup.nodes.TextNode textNode17 = textNode14.splitText(1);
        org.jsoup.nodes.Node node20 = textNode17.attr("hi!", "t");
        java.lang.String str22 = textNode17.attr("#text");
        java.lang.String str23 = textNode17.getTEXT_KEY();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.encoder();
        outputSettings24.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings24.escapeMode;
        outputSettings24.prettyPrint = false;
        boolean boolean34 = outputSettings24.getforceAllElementAsBlock();
        boolean boolean35 = textNode17.equals((java.lang.Object) outputSettings24);
        textNode7.outerHtmlTail(stringBuilder10, (int) (short) -1, outputSettings24);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings24.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset39 = outputSettings24.charset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "text" + "'", str23, "text");
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNotNull(charset39);
    }

    @Test
    public void test09439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09439");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("ext", "hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("i!");
        boolean boolean6 = textNode5.isBlank();
        org.jsoup.nodes.Node node7 = textNode5.clone();
        org.jsoup.nodes.TextNode textNode8 = new org.jsoup.nodes.TextNode();
        textNode8.setBaseUri("hi!");
        java.lang.String str11 = textNode8.getTEXT_KEY();
        textNode8.text = "hi!";
        boolean boolean15 = textNode8.hasAttr("text");
        org.jsoup.nodes.Node node16 = textNode8.clone();
        org.jsoup.nodes.Attributes attributes17 = textNode8.attributes();
        org.jsoup.nodes.Node node18 = textNode8.parent();
        org.jsoup.nodes.Node node19 = textNode8.clone();
        org.jsoup.nodes.Node node21 = textNode8.removeAttr("#text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node22 = node7.before(node21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test09440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09440");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        java.lang.String str11 = textNode2.text;
        java.lang.String str12 = textNode2.gettext();
        org.jsoup.nodes.Node node13 = textNode2.nextSibling();
        java.lang.String str14 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode2.childNodes();
        textNode2.text = "ext";
        java.lang.String str19 = textNode2.attr("");
        org.jsoup.nodes.TextNode textNode21 = textNode2.text("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node23 = textNode21.after("!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(textNode21);
    }

    @Test
    public void test09441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09441");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("text");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        boolean boolean14 = outputSettings11.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings11.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        outputSettings19.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings19.setcharset(charset25);
        java.nio.charset.Charset charset27 = outputSettings19.getcharset();
        outputSettings18.charset = charset27;
        textNode2.outerHtmlTail(stringBuilder9, 100, outputSettings18);
        org.jsoup.nodes.Node node30 = textNode2.parent();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test09442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09442");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        outputSettings5.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        boolean boolean15 = outputSettings12.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings12.prettyPrint(false);
        java.nio.charset.Charset charset18 = outputSettings12.charset();
        outputSettings5.charset = charset18;
        org.jsoup.nodes.TextNode textNode22 = new org.jsoup.nodes.TextNode("text", "text");
        int int23 = textNode22.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList24 = textNode22.childNodes();
        java.lang.String str25 = textNode22.getWholeText();
        java.lang.String str26 = textNode22.text();
        org.jsoup.nodes.Document document27 = textNode22.ownerDocument();
        org.jsoup.nodes.TextNode textNode29 = textNode22.splitText((int) (short) 0);
        textNode22.settext("t");
        java.lang.StringBuilder stringBuilder32 = null;
        org.jsoup.nodes.TextNode textNode36 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = textNode36.equals((java.lang.Object) outputSettings37);
        int int40 = outputSettings37.getindentAmount();
        outputSettings37.indentAmount = (short) -1;
        boolean boolean43 = outputSettings37.forceAllElementAsBlock();
        textNode22.outerHtmlTail(stringBuilder32, 10, outputSettings37);
        boolean boolean45 = outputSettings37.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings37.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings5.escapeMode(escapeMode46);
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings47.escapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "text" + "'", str25, "text");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "text" + "'", str26, "text");
        org.junit.Assert.assertNull(document27);
        org.junit.Assert.assertNotNull(textNode29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09443");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node13 = textNode2.attr("h", "i!");
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.encoder();
        outputSettings16.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings16.escapeMode;
        outputSettings16.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset28 = outputSettings27.charset();
        outputSettings26.charset = charset28;
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings26.encoder();
        boolean boolean31 = outputSettings26.getprettyPrint();
        int int32 = outputSettings26.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings33.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings33.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings33.getcharsetEncoder();
        outputSettings26.setcharsetEncoder(charsetEncoder37);
        outputSettings16.setcharsetEncoder(charsetEncoder37);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings16.clone();
        java.nio.charset.Charset charset41 = null;
        outputSettings40.setcharset(charset41);
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings40.getescapeMode();
        boolean boolean44 = outputSettings40.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder14, (int) (short) 10, outputSettings40);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings40.escapeMode;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09444");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "ext");
        org.jsoup.nodes.Node node4 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Attributes attributes5 = textNode2.attributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node7 = textNode2.after("ext");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(attributes5);
    }

    @Test
    public void test09445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09445");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset3 = outputSettings0.charset;
        boolean boolean4 = outputSettings0.prettyPrint;
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.clone();
        boolean boolean8 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.indentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09446");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        java.nio.charset.Charset charset16 = outputSettings15.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        int int19 = outputSettings17.indentAmount;
        java.nio.charset.Charset charset20 = outputSettings17.charset;
        boolean boolean21 = outputSettings17.prettyPrint;
        outputSettings17.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings17.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings15.escapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.prettyPrint(false);
        outputSettings25.indentAmount = 35;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings27);
    }

    @Test
    public void test09447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09447");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        outputSettings5.setforceAllElementAsBlock(false);
        outputSettings5.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset15 = outputSettings5.charset;
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings5.prettyPrint(false);
        int int19 = outputSettings18.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings18.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        boolean boolean24 = outputSettings21.getprettyPrint();
        boolean boolean25 = outputSettings21.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings21.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings21.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings21.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings30.encoder();
        outputSettings30.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset35 = outputSettings34.charset();
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings34.encoder();
        boolean boolean37 = outputSettings34.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        outputSettings38.charset = charset40;
        outputSettings38.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings38.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings38.escapeMode(escapeMode45);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset49 = outputSettings48.charset();
        outputSettings47.charset = charset49;
        outputSettings47.indentAmount = (-1);
        java.nio.charset.Charset charset53 = outputSettings47.charset();
        boolean boolean54 = outputSettings47.forceAllElementAsBlock();
        java.nio.charset.Charset charset55 = outputSettings47.getcharset();
        outputSettings46.charset = charset55;
        outputSettings34.setcharset(charset55);
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings34.escapeMode();
        outputSettings30.escapeMode = escapeMode58;
        outputSettings18.escapeMode = escapeMode58;
        textNode2.outerHtmlTail(stringBuilder3, (int) '#', outputSettings18);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode63 = textNode2.splitText((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must be not be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09448");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode2.childNodes();
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(nodeList6);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test09449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09449");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) '4');
        boolean boolean15 = outputSettings14.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings14.encoder();
        outputSettings14.prettyPrint = false;
        boolean boolean19 = outputSettings14.getforceAllElementAsBlock();
        int int20 = outputSettings14.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
    }

    @Test
    public void test09450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09450");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.escapeMode(escapeMode11);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        boolean boolean16 = outputSettings13.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings13.prettyPrint(false);
        java.nio.charset.Charset charset19 = null;
        outputSettings18.setcharset(charset19);
        boolean boolean21 = outputSettings18.getforceAllElementAsBlock();
        boolean boolean22 = outputSettings18.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings18.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings12.escapeMode(escapeMode23);
        outputSettings24.indentAmount = (-1);
        java.nio.charset.Charset charset27 = outputSettings24.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings24.indentAmount((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings24.charset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings29);
    }

    @Test
    public void test09451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09451");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        boolean boolean11 = textNode0.isBlank();
        java.lang.String str12 = textNode0.gettext();
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        int int17 = textNode15.siblingIndex();
        org.jsoup.nodes.Node node18 = textNode15.clone();
        java.lang.String str19 = textNode15.text;
        java.lang.String str20 = textNode15.nodeName();
        org.jsoup.nodes.TextNode textNode22 = textNode15.splitText(0);
        java.lang.String str23 = textNode22.toString();
        org.jsoup.nodes.Node node25 = textNode22.removeAttr("i!");
        boolean boolean26 = textNode0.equals((java.lang.Object) textNode22);
        java.lang.String str27 = textNode0.gettext();
        org.jsoup.nodes.Attributes attributes28 = textNode0.attributes();
        org.jsoup.nodes.Attributes attributes29 = textNode0.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ext" + "'", str12, "ext");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "text" + "'", str23, "text");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ext" + "'", str27, "ext");
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertNotNull(attributes29);
    }

    @Test
    public void test09452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09452");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        java.lang.String str8 = textNode2.text();
        boolean boolean10 = textNode2.hasAttr("i!");
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        textNode2.text = "!";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test09453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09453");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.getprettyPrint();
        int int6 = outputSettings0.indentAmount();
        boolean boolean7 = outputSettings0.prettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("text", "text");
        int int12 = textNode11.siblingIndex();
        int int13 = textNode11.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode11.childNodes();
        java.lang.StringBuilder stringBuilder15 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        int int20 = outputSettings17.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings17.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        outputSettings23.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings23.setcharset(charset29);
        outputSettings22.setcharset(charset29);
        outputSettings17.setcharset(charset29);
        textNode11.outerHtmlTail(stringBuilder15, 10, outputSettings17);
        int int34 = outputSettings17.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings17.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings17.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        outputSettings37.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset48 = outputSettings47.charset();
        outputSettings46.charset = charset48;
        java.nio.charset.CharsetEncoder charsetEncoder50 = outputSettings46.encoder();
        boolean boolean51 = outputSettings46.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings46.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings42.escapeMode(escapeMode52);
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings37.escapeMode(escapeMode52);
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings37.getescapeMode();
        outputSettings17.setescapeMode(escapeMode55);
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset58 = outputSettings17.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings17.indentAmount((int) (byte) 0);
        boolean boolean61 = outputSettings17.forceAllElementAsBlock;
        boolean boolean62 = outputSettings17.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings17.clone();
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings63.charsetEncoder;
        outputSettings0.setcharsetEncoder(charsetEncoder64);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(charsetEncoder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(charsetEncoder64);
    }

    @Test
    public void test09454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09454");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        outputSettings10.charset = charset12;
        outputSettings10.indentAmount = (-1);
        java.nio.charset.Charset charset16 = outputSettings10.charset();
        outputSettings10.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset19 = outputSettings10.getcharset();
        outputSettings0.setcharset(charset19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings21.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings21.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings21.escapeMode();
        outputSettings0.escapeMode = escapeMode25;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings27.charset = charset29;
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.encoder();
        outputSettings27.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings27.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings35.charset = charset37;
        outputSettings35.indentAmount = (-1);
        java.nio.charset.Charset charset41 = outputSettings35.charset();
        outputSettings35.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        boolean boolean47 = outputSettings44.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings44.prettyPrint(false);
        int int50 = outputSettings49.getindentAmount();
        outputSettings49.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings49.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        boolean boolean57 = outputSettings54.getprettyPrint();
        boolean boolean58 = outputSettings54.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings54.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = outputSettings60.escapeMode();
        outputSettings49.setescapeMode(escapeMode61);
        outputSettings35.escapeMode = escapeMode61;
        outputSettings27.setescapeMode(escapeMode61);
        outputSettings0.setescapeMode(escapeMode61);
        java.nio.charset.Charset charset66 = outputSettings0.getcharset();
        boolean boolean67 = outputSettings0.getprettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test09455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09455");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.setprettyPrint(true);
        boolean boolean13 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.indentAmount((int) (byte) 10);
        boolean boolean16 = outputSettings15.getprettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test09456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09456");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("#text");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        outputSettings16.setindentAmount((int) (byte) 0);
        textNode11.outerHtmlTail(stringBuilder12, (int) '#', outputSettings16);
        java.lang.String str21 = textNode11.absUrl("ext");
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings22.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        boolean boolean30 = outputSettings27.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings27.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        int int36 = outputSettings33.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings33.getcharsetEncoder();
        outputSettings32.setcharsetEncoder(charsetEncoder37);
        outputSettings22.charsetEncoder = charsetEncoder37;
        outputSettings22.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset42 = outputSettings22.charset;
        boolean boolean43 = textNode11.equals((java.lang.Object) charset42);
        java.lang.String str44 = textNode11.toString();
        org.jsoup.nodes.TextNode textNode46 = textNode11.text("h");
        org.jsoup.nodes.TextNode textNode48 = textNode46.text("!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node50 = textNode48.after("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "#text" + "'", str44, "#text");
        org.junit.Assert.assertNotNull(textNode46);
        org.junit.Assert.assertNotNull(textNode48);
    }

    @Test
    public void test09457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09457");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setforceAllElementAsBlock(true);
        boolean boolean9 = outputSettings0.getprettyPrint();
        boolean boolean10 = outputSettings0.getprettyPrint();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset("text");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: text");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test09458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09458");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.Document document6 = textNode0.ownerDocument();
        org.jsoup.nodes.Node node7 = textNode0.nextSibling();
        org.jsoup.nodes.TextNode textNode9 = textNode0.text("ext");
        boolean boolean10 = textNode9.isBlank();
        textNode9.text = "i!";
        java.lang.String str14 = textNode9.absUrl("i!");
        boolean boolean15 = textNode9.isBlank();
        org.jsoup.nodes.Node node16 = textNode9.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode9.before("i!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test09459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09459");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        boolean boolean13 = outputSettings9.forceAllElementAsBlock();
        boolean boolean14 = outputSettings9.forceAllElementAsBlock;
        boolean boolean15 = textNode0.equals((java.lang.Object) outputSettings9);
        java.lang.String str16 = textNode0.text;
        org.jsoup.nodes.Node node17 = textNode0.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode0.siblingNodes();
        org.jsoup.nodes.TextNode textNode21 = new org.jsoup.nodes.TextNode("text", "text");
        int int22 = textNode21.siblingIndex();
        textNode21.setBaseUri("text");
        org.jsoup.nodes.Node node25 = textNode21.previousSibling();
        java.lang.String str26 = textNode21.text();
        textNode21.settext("hi!");
        java.lang.String str29 = textNode21.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList30 = textNode21.childNodes();
        // The following exception was thrown during execution in test generation
        try {
            textNode0.replaceWith((org.jsoup.nodes.Node) textNode21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "text" + "'", str26, "text");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(nodeList30);
    }

    @Test
    public void test09460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09460");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        textNode2.setBaseUri("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.childNodes();
        java.lang.String str10 = textNode2.gettext();
        org.jsoup.nodes.Node node12 = textNode2.removeAttr("t");
        textNode2.text = "";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode16 = textNode2.splitText((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test09461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09461");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        java.lang.String str11 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode13.siblingNodes();
        org.jsoup.nodes.Node node15 = textNode13.previousSibling();
        org.jsoup.nodes.TextNode textNode18 = new org.jsoup.nodes.TextNode("text", "text");
        int int19 = textNode18.siblingIndex();
        int int20 = textNode18.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList21 = textNode18.childNodes();
        java.lang.String str22 = textNode18.getWholeText();
        org.jsoup.nodes.TextNode textNode24 = textNode18.splitText(1);
        java.lang.String str25 = textNode18.gettext();
        textNode18.text = "hi!";
        java.lang.String str29 = textNode18.attr("#text");
        java.lang.String str30 = textNode18.getWholeText();
        // The following exception was thrown during execution in test generation
        try {
            textNode13.replaceWith((org.jsoup.nodes.Node) textNode18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
        org.junit.Assert.assertNotNull(textNode24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "t" + "'", str25, "t");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test09462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09462");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean4 = textNode2.hasAttr("");
        boolean boolean5 = textNode2.isBlank();
        java.lang.String str6 = textNode2.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        boolean boolean13 = outputSettings9.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder7, 0, outputSettings9);
        org.jsoup.nodes.Attributes attributes15 = textNode2.attributes();
        java.lang.String str16 = textNode2.text;
        java.lang.String str17 = textNode2.outerHtml();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test09463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09463");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        int int25 = outputSettings8.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings8.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings8.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        outputSettings28.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings37.charset = charset39;
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings37.encoder();
        boolean boolean42 = outputSettings37.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings37.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings33.escapeMode(escapeMode43);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings28.escapeMode(escapeMode43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings28.getescapeMode();
        outputSettings8.setescapeMode(escapeMode46);
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset49 = outputSettings8.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings8.indentAmount((int) (byte) 0);
        outputSettings8.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings8.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings8.escapeMode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09464");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.gettext();
        textNode2.text = "hi!";
        org.jsoup.nodes.Node node12 = textNode2.parent();
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode();
        textNode13.setBaseUri("hi!");
        java.lang.String str16 = textNode13.getTEXT_KEY();
        textNode13.text = "hi!";
        boolean boolean20 = textNode13.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList21 = textNode13.childNodes();
        org.jsoup.nodes.Node node22 = textNode13.nextSibling();
        java.lang.String str23 = textNode13.text;
        java.lang.Class<?> wildcardClass24 = textNode13.getClass();
        boolean boolean25 = textNode2.equals((java.lang.Object) wildcardClass24);
        java.lang.String str26 = textNode2.outerHtml();
        java.lang.Class<?> wildcardClass27 = textNode2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test09465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09465");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.TextNode textNode6 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str7 = textNode6.gettext();
        textNode6.text = "hi!";
        textNode6.setBaseUri("");
        org.jsoup.nodes.Node node12 = textNode6.clone();
        textNode6.settext("#");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.after((org.jsoup.nodes.Node) textNode6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test09466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09466");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("t", "ext");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        int int4 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node8 = textNode2.attr("h", "#text");
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test09467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09467");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.text();
        org.jsoup.nodes.Node node9 = textNode7.clone();
        org.jsoup.nodes.Node node11 = textNode7.removeAttr("ext");
        org.jsoup.nodes.Node node12 = node11.clone();
        org.jsoup.nodes.Node node13 = node12.clone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test09468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09468");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        int int15 = outputSettings14.getindentAmount();
        outputSettings14.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings18.charset = charset20;
        outputSettings18.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        int int27 = outputSettings24.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings30.setcharset(charset36);
        outputSettings29.setcharset(charset36);
        outputSettings24.setcharset(charset36);
        outputSettings18.setcharset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(false);
        int int48 = outputSettings47.getindentAmount();
        outputSettings47.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        boolean boolean56 = outputSettings52.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings52.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        outputSettings47.setescapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings14.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings0.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings64.clone();
        boolean boolean66 = outputSettings65.prettyPrint();
        int int67 = outputSettings65.indentAmount();
        java.nio.charset.Charset charset68 = outputSettings65.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder69 = outputSettings65.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(charsetEncoder69);
    }

    @Test
    public void test09469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09469");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        textNode2.ensureAttributes();
        boolean boolean7 = textNode2.hasAttr("h");
        org.jsoup.nodes.Node node8 = textNode2.clone();
        java.lang.String str9 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        java.lang.String str12 = textNode2.attr("text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = textNode2.before("i");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
    }

    @Test
    public void test09470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09470");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        outputSettings0.prettyPrint = false;
        boolean boolean10 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings11.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings14.setescapeMode(escapeMode17);
        outputSettings14.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = null;
        outputSettings14.setescapeMode(escapeMode21);
        boolean boolean23 = outputSettings14.forceAllElementAsBlock;
        int int24 = outputSettings14.indentAmount;
        java.nio.charset.Charset charset25 = outputSettings14.getcharset();
        outputSettings11.charset = charset25;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings11.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings11.prettyPrint(false);
        boolean boolean30 = outputSettings11.prettyPrint;
        boolean boolean31 = outputSettings11.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings32.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings32.prettyPrint(true);
        boolean boolean37 = outputSettings36.prettyPrint();
        boolean boolean38 = outputSettings36.getforceAllElementAsBlock();
        outputSettings36.prettyPrint = false;
        java.nio.charset.Charset charset41 = outputSettings36.getcharset();
        outputSettings11.setcharset(charset41);
        outputSettings0.charset = charset41;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(charset41);
    }

    @Test
    public void test09471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09471");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.prettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.charsetEncoder;
        boolean boolean12 = outputSettings0.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09472");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings9.encoder();
        boolean boolean14 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings5.escapeMode(escapeMode15);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings0.escapeMode(escapeMode15);
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings0.encoder();
        boolean boolean19 = outputSettings0.prettyPrint;
        outputSettings0.indentAmount = '4';
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test09473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09473");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        org.jsoup.nodes.Node node11 = textNode2.attr("text", "#text");
        org.jsoup.nodes.Node node12 = textNode2.previousSibling();
        org.jsoup.nodes.Node node15 = textNode2.attr("t", "t");
        boolean boolean17 = textNode2.hasAttr("hi!");
        textNode2.ensureAttributes();
        java.lang.String str19 = textNode2.getWholeText();
        java.lang.String str20 = textNode2.text;
        org.jsoup.nodes.Document document21 = textNode2.ownerDocument();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#text" + "'", str19, "#text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "t" + "'", str20, "t");
        org.junit.Assert.assertNull(document21);
    }

    @Test
    public void test09474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09474");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Document document1 = textNode0.ownerDocument();
        boolean boolean2 = textNode0.isBlank();
        java.lang.String str3 = textNode0.gettext();
        textNode0.settext("i!");
        java.lang.String str6 = textNode0.toString();
        java.lang.String str7 = textNode0.getWholeText();
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "i!" + "'", str6, "i!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "i!" + "'", str7, "i!");
    }

    @Test
    public void test09475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09475");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings12.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings23.encoder();
        java.nio.charset.Charset charset25 = outputSettings23.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        boolean boolean29 = outputSettings26.getprettyPrint();
        boolean boolean30 = outputSettings26.forceAllElementAsBlock();
        outputSettings26.forceAllElementAsBlock = false;
        outputSettings26.setindentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings35.charset = charset37;
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings35.encoder();
        boolean boolean40 = outputSettings35.prettyPrint;
        java.nio.charset.Charset charset41 = outputSettings35.charset;
        java.nio.charset.Charset charset42 = outputSettings35.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings35.escapeMode;
        outputSettings26.escapeMode = escapeMode43;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings23.escapeMode(escapeMode43);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings46.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings46.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder50 = outputSettings46.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        outputSettings51.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset57 = outputSettings56.charset();
        outputSettings51.setcharset(charset57);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset60 = outputSettings59.charset();
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings59.encoder();
        outputSettings51.setcharsetEncoder(charsetEncoder61);
        java.nio.charset.Charset charset63 = outputSettings51.getcharset();
        boolean boolean64 = outputSettings51.forceAllElementAsBlock();
        java.nio.charset.Charset charset65 = outputSettings51.charset;
        outputSettings46.setcharset(charset65);
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings46.escapeMode();
        outputSettings23.setescapeMode(escapeMode67);
        outputSettings23.prettyPrint = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09476");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        java.nio.charset.Charset charset12 = outputSettings0.getcharset();
        outputSettings0.indentAmount = 0;
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings0.prettyPrint(false);
        outputSettings18.setforceAllElementAsBlock(false);
        int int21 = outputSettings18.indentAmount();
        java.nio.charset.Charset charset22 = outputSettings18.getcharset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(charset22);
    }

    @Test
    public void test09477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09477");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.baseUri();
        org.jsoup.nodes.Node node11 = textNode0.attr("h", "text");
        java.util.List<org.jsoup.nodes.Node> nodeList12 = node11.childNodes();
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode15.childNodes();
        org.jsoup.nodes.TextNode textNode18 = textNode15.splitText(1);
        org.jsoup.nodes.Node node19 = textNode18.parent();
        org.jsoup.nodes.Attributes attributes20 = textNode18.attributes();
        java.lang.String str21 = textNode18.gettext();
        boolean boolean22 = node11.equals((java.lang.Object) textNode18);
        java.lang.String str23 = textNode18.outerHtml();
        org.jsoup.nodes.Attributes attributes24 = textNode18.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNotNull(textNode18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ext" + "'", str21, "ext");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ext" + "'", str23, "ext");
        org.junit.Assert.assertNotNull(attributes24);
    }

    @Test
    public void test09478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09478");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint;
        outputSettings0.indentAmount = 1;
        outputSettings0.prettyPrint = false;
        org.jsoup.nodes.TextNode textNode10 = new org.jsoup.nodes.TextNode();
        textNode10.setBaseUri("hi!");
        java.lang.String str13 = textNode10.getTEXT_KEY();
        textNode10.text = "hi!";
        boolean boolean17 = textNode10.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode10.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        boolean boolean24 = outputSettings19.forceAllElementAsBlock;
        boolean boolean25 = textNode10.equals((java.lang.Object) outputSettings19);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings19.getcharsetEncoder();
        outputSettings19.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings19.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings19.clone();
        java.nio.charset.Charset charset31 = outputSettings19.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings19.forceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings0.escapeMode(escapeMode34);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
    }

    @Test
    public void test09479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09479");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.Document document6 = textNode0.ownerDocument();
        java.lang.String str7 = textNode0.outerHtml();
        org.jsoup.nodes.TextNode textNode9 = textNode0.text("");
        java.lang.String str11 = textNode0.attr("ext");
        java.lang.String str13 = textNode0.absUrl("text");
        textNode0.ensureAttributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test09480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09480");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        outputSettings6.indentAmount = (short) 10;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings6.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings6.getcharset();
        outputSettings0.charset = charset12;
        int int14 = outputSettings0.indentAmount;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test09481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09481");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        textNode2.text = "#text";
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("h");
        org.jsoup.nodes.Node node8 = textNode2.previousSibling();
        java.lang.String str9 = textNode2.toString();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "h" + "'", str9, "h");
    }

    @Test
    public void test09482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09482");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.getforceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        outputSettings0.setprettyPrint(true);
        org.jsoup.nodes.TextNode textNode5 = new org.jsoup.nodes.TextNode();
        textNode5.setBaseUri("hi!");
        java.lang.String str8 = textNode5.getTEXT_KEY();
        textNode5.settext("text");
        java.lang.String str11 = textNode5.getWholeText();
        java.lang.String str13 = textNode5.absUrl("text");
        boolean boolean14 = textNode5.isBlank();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings15.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings15.getescapeMode();
        int int20 = outputSettings15.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings15.escapeMode();
        boolean boolean22 = textNode5.equals((java.lang.Object) outputSettings15);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        outputSettings23.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings23.indentAmount(1);
        outputSettings23.setprettyPrint(false);
        java.nio.charset.Charset charset32 = outputSettings23.charset;
        outputSettings15.charset = charset32;
        outputSettings0.setcharset(charset32);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(charset32);
    }

    @Test
    public void test09483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09483");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        org.jsoup.nodes.Attributes attributes11 = textNode0.attributes();
        boolean boolean13 = textNode0.hasAttr("hi!");
        java.lang.String str14 = textNode0.text;
        int int15 = textNode0.siblingIndex();
        java.lang.String str16 = textNode0.gettext();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ext" + "'", str14, "ext");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ext" + "'", str16, "ext");
    }

    @Test
    public void test09484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09484");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("h", "i");
        org.jsoup.nodes.Node node3 = textNode2.nextSibling();
        java.lang.String str4 = textNode2.nodeName();
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
    }

    @Test
    public void test09485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09485");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        textNode2.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode2.childNodes();
        java.lang.String str7 = textNode2.text;
        java.lang.String str8 = textNode2.text;
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("text", "text");
        int int12 = textNode11.siblingIndex();
        textNode11.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode16 = textNode11.text("text");
        java.lang.String str17 = textNode16.text();
        java.lang.String str18 = textNode16.getWholeText();
        org.jsoup.nodes.TextNode textNode20 = textNode16.splitText(1);
        boolean boolean21 = textNode20.isBlank();
        java.lang.String str22 = textNode20.toString();
        java.lang.String str24 = textNode20.absUrl("!");
        textNode20.setBaseUri("text");
        boolean boolean28 = textNode20.hasAttr("t");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ext" + "'", str22, "ext");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test09486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09486");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.settext("text");
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.String str8 = textNode0.absUrl("text");
        boolean boolean10 = textNode0.hasAttr("");
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings11.encoder();
        boolean boolean16 = outputSettings11.prettyPrint;
        java.nio.charset.Charset charset17 = outputSettings11.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset24 = outputSettings23.charset();
        outputSettings18.setcharset(charset24);
        outputSettings18.setprettyPrint(true);
        java.nio.charset.Charset charset28 = outputSettings18.getcharset();
        outputSettings18.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings18.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings11.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount(52);
        boolean boolean37 = textNode0.equals((java.lang.Object) 52);
        org.jsoup.nodes.Attributes attributes38 = textNode0.attributes();
        org.jsoup.nodes.Node node40 = textNode0.removeAttr("h");
        org.jsoup.nodes.Node node41 = textNode0.clone();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(attributes38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test09487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09487");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        int int10 = outputSettings6.indentAmount();
        outputSettings6.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings6.prettyPrint(true);
        boolean boolean15 = outputSettings6.getforceAllElementAsBlock();
        int int16 = outputSettings6.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings17.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings17.getcharsetEncoder();
        outputSettings17.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings17.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        outputSettings25.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings25.setcharset(charset31);
        outputSettings25.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings35.charset = charset37;
        outputSettings35.indentAmount = (-1);
        java.nio.charset.Charset charset41 = outputSettings35.charset();
        outputSettings35.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset44 = outputSettings35.getcharset();
        outputSettings25.setcharset(charset44);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings17.charset(charset44);
        org.jsoup.nodes.TextNode textNode47 = new org.jsoup.nodes.TextNode();
        textNode47.setBaseUri("hi!");
        java.lang.String str50 = textNode47.getTEXT_KEY();
        textNode47.text = "hi!";
        boolean boolean54 = textNode47.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList55 = textNode47.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        boolean boolean59 = outputSettings56.getprettyPrint();
        boolean boolean60 = outputSettings56.forceAllElementAsBlock();
        boolean boolean61 = outputSettings56.forceAllElementAsBlock;
        boolean boolean62 = textNode47.equals((java.lang.Object) outputSettings56);
        java.nio.charset.CharsetEncoder charsetEncoder63 = outputSettings56.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings56.getcharsetEncoder();
        outputSettings46.setcharsetEncoder(charsetEncoder64);
        outputSettings6.charsetEncoder = charsetEncoder64;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings6.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings68.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "text" + "'", str50, "text");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charsetEncoder63);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test09488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09488");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.lang.String str9 = textNode0.absUrl("h");
        java.lang.String str10 = textNode0.getTEXT_KEY();
        java.lang.String str11 = textNode0.getWholeText();
        org.jsoup.nodes.Node node13 = textNode0.removeAttr("i!");
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode0.childNodes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(nodeList14);
    }

    @Test
    public void test09489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09489");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        boolean boolean10 = textNode2.isBlank();
        boolean boolean11 = textNode2.isBlank();
        java.lang.String str12 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode2.siblingNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(nodeList13);
    }

    @Test
    public void test09490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09490");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings3.prettyPrint(true);
        java.nio.charset.Charset charset9 = outputSettings8.charset;
        outputSettings8.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder12);
    }

    @Test
    public void test09491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09491");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        java.lang.String str11 = textNode2.getWholeText();
        int int12 = textNode2.siblingIndex();
        java.lang.String str13 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        java.lang.String str15 = textNode2.baseUri();
        org.jsoup.select.NodeVisitor nodeVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node17 = textNode2.traverse(nodeVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
    }

    @Test
    public void test09492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09492");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        outputSettings8.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        outputSettings8.setcharset(charset26);
        outputSettings8.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        int int39 = outputSettings38.getindentAmount();
        outputSettings38.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        outputSettings8.setcharsetEncoder(charsetEncoder42);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings44.charset = charset46;
        outputSettings44.indentAmount = (-1);
        java.nio.charset.Charset charset50 = outputSettings44.charset();
        boolean boolean51 = outputSettings44.forceAllElementAsBlock();
        java.nio.charset.Charset charset52 = outputSettings44.getcharset();
        outputSettings8.setcharset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings7.charset(charset52);
        boolean boolean55 = outputSettings54.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings54.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings57.charsetEncoder;
        int int59 = outputSettings57.indentAmount;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test09493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09493");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        int int6 = outputSettings5.getindentAmount();
        outputSettings5.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        outputSettings9.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings20.setcharset(charset27);
        outputSettings15.setcharset(charset27);
        outputSettings9.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings5.charset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings35.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.clone();
        java.nio.charset.Charset charset38 = outputSettings35.charset();
        outputSettings32.setcharset(charset38);
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings32.escapeMode;
        outputSettings32.setindentAmount((int) 'a');
        boolean boolean43 = outputSettings32.getforceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings32.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings32.forceAllElementAsBlock(false);
        boolean boolean47 = outputSettings46.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test09494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09494");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str4 = textNode2.absUrl("t");
        java.lang.String str5 = textNode2.text;
        java.lang.String str6 = textNode2.text();
        java.lang.String str8 = textNode2.attr("#");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test09495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09495");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("text");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        boolean boolean14 = outputSettings11.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings11.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        outputSettings19.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings19.setcharset(charset25);
        java.nio.charset.Charset charset27 = outputSettings19.getcharset();
        outputSettings18.charset = charset27;
        textNode2.outerHtmlTail(stringBuilder9, 100, outputSettings18);
        textNode2.setBaseUri("h");
        java.lang.String str32 = textNode2.toString();
        boolean boolean34 = textNode2.hasAttr("h");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "text" + "'", str32, "text");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test09496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09496");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        org.jsoup.nodes.Node node7 = textNode2.clone();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        java.lang.String str9 = textNode2.baseUri();
        java.lang.String str11 = textNode2.absUrl("text");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test09497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09497");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.prettyPrint();
        boolean boolean3 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.TextNode textNode7 = new org.jsoup.nodes.TextNode();
        textNode7.setBaseUri("hi!");
        java.lang.String str10 = textNode7.getTEXT_KEY();
        textNode7.text = "hi!";
        java.lang.String str13 = textNode7.getWholeText();
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        outputSettings16.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings16.getcharsetEncoder();
        outputSettings16.prettyPrint = true;
        boolean boolean24 = outputSettings16.forceAllElementAsBlock;
        textNode7.outerHtmlTail(stringBuilder14, (int) (byte) 100, outputSettings16);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings16.encoder();
        int int27 = outputSettings16.indentAmount();
        java.nio.charset.Charset charset28 = outputSettings16.getcharset();
        outputSettings0.setcharset(charset28);
        boolean boolean30 = outputSettings0.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test09498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09498");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        org.jsoup.nodes.Node node8 = textNode5.attr("hi!", "t");
        java.lang.String str10 = textNode5.attr("#text");
        java.lang.String str11 = textNode5.getTEXT_KEY();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings12.charset = charset14;
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings12.encoder();
        outputSettings12.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings12.escapeMode;
        outputSettings12.prettyPrint = false;
        boolean boolean22 = outputSettings12.getforceAllElementAsBlock();
        boolean boolean23 = textNode5.equals((java.lang.Object) outputSettings12);
        textNode5.text = "ext";
        org.jsoup.nodes.TextNode textNode28 = new org.jsoup.nodes.TextNode("text", "text");
        int int29 = textNode28.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList30 = textNode28.childNodes();
        org.jsoup.nodes.TextNode textNode32 = textNode28.text("");
        int int33 = textNode28.siblingIndex();
        org.jsoup.nodes.TextNode textNode35 = textNode28.text("hi!");
        java.lang.String str37 = textNode28.absUrl("text");
        org.jsoup.nodes.TextNode textNode39 = textNode28.splitText(1);
        textNode39.ensureAttributes();
        textNode39.ensureAttributes();
        java.lang.String str42 = textNode39.getTEXT_KEY();
        int int43 = textNode39.siblingIndex();
        org.jsoup.nodes.Node node44 = textNode39.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node45 = textNode5.before(node44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(nodeList30);
        org.junit.Assert.assertNotNull(textNode32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(textNode35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(textNode39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "text" + "'", str42, "text");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(node44);
    }

    @Test
    public void test09499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09499");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings14.setforceAllElementAsBlock(false);
        outputSettings14.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        java.nio.charset.Charset charset25 = outputSettings19.charset();
        outputSettings19.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        boolean boolean31 = outputSettings28.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings28.prettyPrint(false);
        int int34 = outputSettings33.getindentAmount();
        outputSettings33.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings33.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        boolean boolean41 = outputSettings38.getprettyPrint();
        boolean boolean42 = outputSettings38.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings38.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings44.escapeMode();
        outputSettings33.setescapeMode(escapeMode45);
        outputSettings19.escapeMode = escapeMode45;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings14.escapeMode(escapeMode45);
        int int49 = outputSettings48.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
    }

    @Test
    public void test09500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09500");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        java.lang.String str8 = textNode6.getWholeText();
        org.jsoup.nodes.Node node9 = textNode6.nextSibling();
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.setprettyPrint(false);
        outputSettings12.setindentAmount(0);
        outputSettings12.indentAmount = (byte) 1;
        java.nio.charset.Charset charset21 = outputSettings12.getcharset();
        textNode6.outerHtmlTail(stringBuilder10, (int) '4', outputSettings12);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings12.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset25 = outputSettings12.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        outputSettings26.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        boolean boolean34 = outputSettings31.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings35.charset = charset37;
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings35.encoder();
        boolean boolean40 = outputSettings35.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings35.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings31.escapeMode(escapeMode41);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings26.escapeMode(escapeMode41);
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings26.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings26.encoder();
        outputSettings12.setcharsetEncoder(charsetEncoder45);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder45);
    }
}

