import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest29 {

    public static boolean debug = false;

    @Test
    public void test14501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14501");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("ext", "ext");
        java.lang.String str3 = textNode2.text();
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.gettext();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ext" + "'", str3, "ext");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ext" + "'", str4, "ext");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ext" + "'", str5, "ext");
    }

    @Test
    public void test14502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14502");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setforceAllElementAsBlock(true);
        boolean boolean9 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.clone();
        outputSettings0.prettyPrint = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings0.getescapeMode();
        boolean boolean14 = outputSettings0.getprettyPrint();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test14503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14503");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        org.jsoup.nodes.Node node8 = textNode5.attr("hi!", "t");
        java.lang.String str10 = textNode5.attr("#text");
        org.jsoup.nodes.Node node11 = textNode5.previousSibling();
        java.lang.String str12 = textNode5.nodeName();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
    }

    @Test
    public void test14504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14504");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        textNode2.ensureAttributes();
        boolean boolean9 = textNode2.hasAttr("");
        textNode2.ensureAttributes();
        textNode2.text = "hi!";
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14505");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        int int10 = outputSettings6.indentAmount();
        outputSettings6.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings6.prettyPrint(true);
        java.nio.charset.Charset charset15 = outputSettings6.charset;
        boolean boolean16 = outputSettings6.getprettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test14506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14506");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(false);
        outputSettings0.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset10 = outputSettings0.charset;
        boolean boolean11 = outputSettings0.prettyPrint();
        outputSettings0.setindentAmount((int) '#');
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings0.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings0.forceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(outputSettings17);
    }

    @Test
    public void test14507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14507");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean2 = outputSettings1.prettyPrint;
        boolean boolean3 = outputSettings1.forceAllElementAsBlock;
        outputSettings1.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset7 = outputSettings6.charset();
        outputSettings1.setcharset(charset7);
        outputSettings0.setcharset(charset7);
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings0.encoder();
        int int11 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings0.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14508");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder4 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        boolean boolean9 = outputSettings6.getprettyPrint();
        boolean boolean10 = outputSettings6.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings6.indentAmount((int) '4');
        textNode0.outerHtmlTail(stringBuilder4, (int) (short) 100, outputSettings12);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        boolean boolean17 = outputSettings14.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings14.prettyPrint(false);
        outputSettings14.setforceAllElementAsBlock(false);
        outputSettings14.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset24 = outputSettings14.charset;
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings14.getcharsetEncoder();
        outputSettings12.charsetEncoder = charsetEncoder25;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        outputSettings27.setescapeMode(escapeMode30);
        outputSettings27.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings27.setescapeMode(escapeMode34);
        boolean boolean36 = outputSettings27.forceAllElementAsBlock;
        int int37 = outputSettings27.indentAmount;
        java.nio.charset.Charset charset38 = outputSettings27.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        outputSettings39.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset45 = outputSettings44.charset();
        outputSettings39.setcharset(charset45);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset48 = outputSettings47.charset();
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings47.encoder();
        outputSettings39.setcharsetEncoder(charsetEncoder49);
        java.nio.charset.Charset charset51 = outputSettings39.getcharset();
        boolean boolean52 = outputSettings39.forceAllElementAsBlock();
        java.nio.charset.Charset charset53 = outputSettings39.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings27.charset(charset53);
        outputSettings12.charset = charset53;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = null;
        outputSettings56.setescapeMode(escapeMode59);
        boolean boolean61 = outputSettings56.prettyPrint;
        outputSettings56.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings64.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings64.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean68 = outputSettings67.prettyPrint;
        boolean boolean69 = outputSettings67.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode70 = null;
        outputSettings67.setescapeMode(escapeMode70);
        outputSettings67.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode74 = null;
        outputSettings67.setescapeMode(escapeMode74);
        boolean boolean76 = outputSettings67.forceAllElementAsBlock;
        int int77 = outputSettings67.indentAmount;
        java.nio.charset.Charset charset78 = outputSettings67.getcharset();
        outputSettings64.charset = charset78;
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings56.charset(charset78);
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings12.charset(charset78);
        boolean boolean82 = outputSettings12.getprettyPrint();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(charsetEncoder49);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test14509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14509");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = null;
        outputSettings5.setcharset(charset6);
        boolean boolean8 = outputSettings5.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        int int11 = outputSettings5.indentAmount();
        org.jsoup.nodes.TextNode textNode14 = new org.jsoup.nodes.TextNode("text", "text");
        int int15 = textNode14.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode14.childNodes();
        java.lang.StringBuilder stringBuilder17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        outputSettings19.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings19.setcharset(charset25);
        outputSettings19.setprettyPrint(true);
        java.nio.charset.Charset charset29 = outputSettings19.getcharset();
        outputSettings19.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings19.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = null;
        outputSettings34.setescapeMode(escapeMode37);
        outputSettings34.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = null;
        outputSettings34.setescapeMode(escapeMode41);
        boolean boolean43 = outputSettings34.forceAllElementAsBlock;
        int int44 = outputSettings34.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings34.escapeMode(escapeMode45);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean48 = outputSettings47.prettyPrint;
        boolean boolean49 = outputSettings47.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = null;
        outputSettings47.setescapeMode(escapeMode50);
        outputSettings47.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = null;
        outputSettings47.setescapeMode(escapeMode54);
        boolean boolean56 = outputSettings47.forceAllElementAsBlock;
        int int57 = outputSettings47.indentAmount;
        java.nio.charset.Charset charset58 = outputSettings47.getcharset();
        outputSettings46.setcharset(charset58);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings33.charset(charset58);
        int int61 = outputSettings60.getindentAmount();
        textNode14.outerHtmlTail(stringBuilder17, (int) (short) 0, outputSettings60);
        outputSettings60.setprettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder65 = outputSettings60.encoder();
        outputSettings5.setcharsetEncoder(charsetEncoder65);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean68 = outputSettings67.prettyPrint;
        boolean boolean69 = outputSettings67.forceAllElementAsBlock;
        boolean boolean70 = outputSettings67.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings67.prettyPrint(false);
        outputSettings67.setforceAllElementAsBlock(false);
        outputSettings67.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset77 = outputSettings67.charset;
        java.nio.charset.CharsetEncoder charsetEncoder78 = outputSettings67.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings67.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings67.clone();
        java.nio.charset.CharsetEncoder charsetEncoder82 = outputSettings67.charsetEncoder;
        outputSettings5.setcharsetEncoder(charsetEncoder82);
        int int84 = outputSettings5.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(charsetEncoder65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertNotNull(charsetEncoder78);
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertNotNull(charsetEncoder82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test14510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14510");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("h", "ext");
        org.jsoup.nodes.Node node3 = textNode2.parent();
        java.lang.String str4 = textNode2.text();
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "h" + "'", str4, "h");
    }

    @Test
    public void test14511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14511");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "");
        boolean boolean4 = textNode2.hasAttr("text");
        boolean boolean6 = textNode2.hasAttr("text");
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        boolean boolean9 = textNode2.hasAttr("i!");
        java.lang.String str10 = textNode2.getWholeText();
        java.lang.String str11 = textNode2.text;
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test14512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14512");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings3.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.indentAmount(0);
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings12.prettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings16.getcharset();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(charset17);
    }

    @Test
    public void test14513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14513");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Node node6 = textNode2.attr("#text", "t");
        org.jsoup.nodes.Node node7 = textNode2.clone();
        boolean boolean8 = textNode2.isBlank();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test14514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14514");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        boolean boolean13 = outputSettings9.forceAllElementAsBlock();
        boolean boolean14 = outputSettings9.forceAllElementAsBlock;
        boolean boolean15 = textNode0.equals((java.lang.Object) outputSettings9);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings9.getcharsetEncoder();
        boolean boolean17 = outputSettings9.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        boolean boolean21 = outputSettings18.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.prettyPrint(false);
        java.nio.charset.Charset charset24 = outputSettings18.charset;
        outputSettings18.setprettyPrint(false);
        boolean boolean27 = outputSettings18.forceAllElementAsBlock;
        boolean boolean28 = outputSettings18.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings18.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings9.escapeMode(escapeMode29);
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings34.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings35.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings37.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = null;
        outputSettings42.setescapeMode(escapeMode45);
        outputSettings42.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = null;
        outputSettings42.setescapeMode(escapeMode49);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings42.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        outputSettings52.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings52.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean58 = outputSettings57.prettyPrint;
        boolean boolean59 = outputSettings57.forceAllElementAsBlock;
        boolean boolean60 = outputSettings57.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings57.prettyPrint(false);
        java.nio.charset.Charset charset63 = outputSettings57.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings57.getescapeMode();
        outputSettings52.escapeMode = escapeMode64;
        boolean boolean66 = outputSettings52.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean68 = outputSettings67.prettyPrint;
        boolean boolean69 = outputSettings67.forceAllElementAsBlock;
        boolean boolean70 = outputSettings67.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings67.prettyPrint(false);
        java.nio.charset.Charset charset73 = outputSettings67.charset();
        outputSettings52.charset = charset73;
        outputSettings37.setcharset(charset73);
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings36.charset(charset73);
        boolean boolean77 = outputSettings36.forceAllElementAsBlock();
        boolean boolean78 = outputSettings36.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings36.escapeMode();
        outputSettings30.escapeMode = escapeMode79;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertNull(escapeMode53);
        org.junit.Assert.assertNull(escapeMode56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14515");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings14.setforceAllElementAsBlock(false);
        boolean boolean17 = outputSettings14.forceAllElementAsBlock();
        boolean boolean18 = outputSettings14.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings14.getcharsetEncoder();
        boolean boolean20 = outputSettings14.forceAllElementAsBlock;
        int int21 = outputSettings14.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
    }

    @Test
    public void test14516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14516");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "t");
        java.lang.String str3 = textNode2.outerHtml();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "t" + "'", str3, "t");
    }

    @Test
    public void test14517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14517");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.text();
        org.jsoup.nodes.Node node9 = textNode7.clone();
        java.lang.String str10 = textNode7.nodeName();
        java.lang.String str11 = textNode7.nodeName();
        org.jsoup.nodes.Node node12 = textNode7.parent();
        boolean boolean14 = textNode7.hasAttr("text");
        org.jsoup.nodes.Attributes attributes15 = textNode7.attributes();
        java.lang.String str16 = textNode7.getTEXT_KEY();
        org.jsoup.nodes.Node node17 = textNode7.nextSibling();
        java.lang.String str18 = textNode7.text;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node20 = textNode7.after("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
    }

    @Test
    public void test14518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14518");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        org.jsoup.nodes.TextNode textNode13 = textNode2.splitText(1);
        textNode13.ensureAttributes();
        java.lang.String str16 = textNode13.attr("ext");
        org.jsoup.nodes.Node node17 = textNode13.clone();
        java.lang.String str19 = textNode13.absUrl("t");
        java.lang.String str20 = textNode13.outerHtml();
        textNode13.settext("#text");
        org.jsoup.nodes.TextNode textNode25 = new org.jsoup.nodes.TextNode("", "");
        java.util.List<org.jsoup.nodes.Node> nodeList26 = textNode25.siblingNodes();
        boolean boolean27 = textNode25.isBlank();
        java.lang.StringBuilder stringBuilder28 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.setprettyPrint(false);
        java.nio.charset.Charset charset35 = outputSettings30.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings30.indentAmount((int) (byte) 10);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings30.prettyPrint(true);
        textNode25.outerHtmlTail(stringBuilder28, 35, outputSettings39);
        boolean boolean41 = textNode13.equals((java.lang.Object) outputSettings39);
        java.nio.charset.Charset charset42 = outputSettings39.charset;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "i!" + "'", str20, "i!");
        org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charset42);
    }

    @Test
    public void test14519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14519");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("text", "text");
        int int12 = textNode11.siblingIndex();
        int int13 = textNode11.siblingIndex();
        textNode11.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode11.childNodes();
        org.jsoup.nodes.Node node16 = textNode11.nextSibling();
        org.jsoup.nodes.TextNode textNode18 = textNode11.text("i!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node19 = textNode2.after((org.jsoup.nodes.Node) textNode18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(textNode18);
    }

    @Test
    public void test14520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14520");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        java.lang.String str11 = textNode2.getWholeText();
        int int12 = textNode2.siblingIndex();
        java.lang.String str13 = textNode2.nodeName();
        java.lang.String str14 = textNode2.text;
        java.lang.String str16 = textNode2.absUrl("!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test14521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14521");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = null;
        outputSettings6.setescapeMode(escapeMode9);
        outputSettings6.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings6.setescapeMode(escapeMode13);
        boolean boolean15 = outputSettings6.forceAllElementAsBlock;
        int int16 = outputSettings6.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings19.setescapeMode(escapeMode22);
        outputSettings19.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings19.setescapeMode(escapeMode26);
        boolean boolean28 = outputSettings19.forceAllElementAsBlock;
        int int29 = outputSettings19.indentAmount;
        java.nio.charset.Charset charset30 = outputSettings19.getcharset();
        outputSettings18.setcharset(charset30);
        outputSettings0.charset = charset30;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings34.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings34.forceAllElementAsBlock(true);
        outputSettings34.setforceAllElementAsBlock(false);
        boolean boolean40 = outputSettings34.getforceAllElementAsBlock();
        outputSettings34.prettyPrint = true;
        outputSettings34.prettyPrint = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test14522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14522");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.siblingNodes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = textNode13.equals((java.lang.Object) outputSettings14);
        int int17 = outputSettings14.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings14.prettyPrint(true);
        int int20 = outputSettings14.indentAmount;
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) 100, outputSettings14);
        org.jsoup.nodes.Node node22 = textNode2.previousSibling();
        int int23 = textNode2.siblingIndex();
        java.lang.String str24 = textNode2.getWholeText();
        java.lang.String str25 = textNode2.getWholeText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test14523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14523");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("");
        org.jsoup.nodes.Document document9 = textNode2.ownerDocument();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.prettyPrint();
        boolean boolean13 = outputSettings10.forceAllElementAsBlock;
        boolean boolean14 = textNode2.equals((java.lang.Object) boolean13);
        textNode2.setBaseUri("!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(document9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test14524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14524");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "i!");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("t");
        boolean boolean5 = textNode4.isBlank();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test14525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14525");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        textNode2.ensureAttributes();
        boolean boolean7 = textNode2.hasAttr("h");
        org.jsoup.nodes.Node node8 = textNode2.clone();
        org.jsoup.nodes.Attributes attributes9 = textNode2.attributes();
        java.lang.String str10 = textNode2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(attributes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
    }

    @Test
    public void test14526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14526");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.siblingNodes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node11 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(nodeList10);
    }

    @Test
    public void test14527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14527");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        textNode2.setBaseUri("text");
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("text");
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings13.encoder();
        outputSettings13.indentAmount = (short) 10;
        textNode10.outerHtmlTail(stringBuilder11, 10, outputSettings13);
        org.jsoup.nodes.Node node19 = textNode10.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node21 = node19.after("h");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test14528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14528");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.text;
        org.jsoup.nodes.TextNode textNode5 = textNode0.text("");
        java.lang.String str7 = textNode5.absUrl("text");
        java.lang.String str8 = textNode5.gettext();
        org.jsoup.nodes.Node node11 = textNode5.attr("#text", "#");
        java.lang.String str12 = node11.outerHtml();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test14529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14529");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        int int6 = outputSettings5.getindentAmount();
        outputSettings5.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        outputSettings9.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings20.setcharset(charset27);
        outputSettings15.setcharset(charset27);
        outputSettings9.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings5.charset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        int int39 = outputSettings38.getindentAmount();
        outputSettings38.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        boolean boolean47 = outputSettings43.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings43.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings49.escapeMode();
        outputSettings38.setescapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings5.escapeMode(escapeMode50);
        java.nio.charset.Charset charset53 = outputSettings52.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings52.escapeMode;
        boolean boolean55 = outputSettings52.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset58 = outputSettings57.charset();
        outputSettings56.charset = charset58;
        outputSettings56.indentAmount = (-1);
        java.nio.charset.Charset charset62 = outputSettings56.charset();
        boolean boolean63 = outputSettings56.forceAllElementAsBlock();
        java.nio.charset.Charset charset64 = outputSettings56.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings52.charset(charset64);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings52.prettyPrint(false);
        outputSettings67.setindentAmount((int) ' ');
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings67.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings71.escapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14530");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        java.lang.String str8 = textNode2.baseUri();
        textNode2.settext("hi!");
        java.lang.String str11 = textNode2.text;
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode2.childNodes();
        java.lang.String str13 = textNode2.text;
        org.jsoup.nodes.Node node14 = textNode2.previousSibling();
        org.jsoup.nodes.Node node17 = textNode2.attr("i!", "ext");
        java.lang.String str18 = textNode2.toString();
        java.lang.StringBuilder stringBuilder19 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings21.charset = charset23;
        outputSettings21.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings21.prettyPrint(false);
        java.nio.charset.Charset charset29 = outputSettings21.charset;
        outputSettings21.setprettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings21.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings21.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings34.charset = charset36;
        boolean boolean38 = outputSettings34.getforceAllElementAsBlock();
        boolean boolean39 = outputSettings34.forceAllElementAsBlock;
        int int40 = outputSettings34.indentAmount();
        int int41 = outputSettings34.indentAmount;
        boolean boolean42 = outputSettings34.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings43.prettyPrint(false);
        java.nio.charset.Charset charset49 = outputSettings43.charset;
        outputSettings43.setprettyPrint(false);
        boolean boolean52 = outputSettings43.forceAllElementAsBlock;
        boolean boolean53 = outputSettings43.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings43.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings55.escapeMode();
        outputSettings34.escapeMode = escapeMode56;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings21.escapeMode(escapeMode56);
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder19, (int) (byte) 10, outputSettings21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings58);
    }

    @Test
    public void test14531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14531");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.getTEXT_KEY();
        textNode2.settext("t");
        org.jsoup.nodes.Node node13 = textNode2.previousSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test14532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14532");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        java.nio.charset.Charset charset17 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings0.clone();
        java.nio.charset.Charset charset20 = outputSettings19.getcharset();
        int int21 = outputSettings19.indentAmount();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings19.charset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test14533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14533");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings0.getescapeMode();
        boolean boolean13 = outputSettings0.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNull(escapeMode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test14534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14534");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        org.jsoup.nodes.Node node3 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("hi!");
        boolean boolean7 = textNode5.hasAttr("hi!");
        java.lang.String str8 = textNode5.getTEXT_KEY();
        org.jsoup.nodes.Node node9 = textNode5.nextSibling();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test14535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14535");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        boolean boolean7 = textNode2.equals((java.lang.Object) 1L);
        java.lang.String str8 = textNode2.getWholeText();
        java.lang.String str9 = textNode2.text();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node11 = textNode2.childNode(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
    }

    @Test
    public void test14536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14536");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.Node node5 = textNode2.nextSibling();
        int int6 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node9 = textNode2.attr("i!", "text");
        org.jsoup.nodes.TextNode textNode12 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document13 = textNode12.ownerDocument();
        org.jsoup.nodes.TextNode textNode15 = textNode12.text("t");
        java.lang.String str16 = textNode15.baseUri();
        java.lang.String str18 = textNode15.attr("#text");
        org.jsoup.nodes.TextNode textNode20 = textNode15.text("!");
        org.jsoup.nodes.Attributes attributes21 = textNode20.attributes();
        boolean boolean22 = textNode20.isBlank();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node23 = textNode2.before((org.jsoup.nodes.Node) textNode20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNull(document13);
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test14537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14537");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        java.lang.String str9 = textNode0.nodeName();
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings12.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings12.setescapeMode(escapeMode17);
        int int19 = outputSettings12.indentAmount();
        textNode0.outerHtmlTail(stringBuilder10, 10, outputSettings12);
        boolean boolean22 = textNode0.hasAttr("#text");
        org.jsoup.nodes.Attributes attributes23 = textNode0.attributes();
        org.jsoup.nodes.TextNode textNode25 = textNode0.text("!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node27 = textNode0.after("text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(attributes23);
        org.junit.Assert.assertNotNull(textNode25);
    }

    @Test
    public void test14538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14538");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.settext("text");
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.String str8 = textNode0.absUrl("text");
        boolean boolean9 = textNode0.isBlank();
        java.lang.String str10 = textNode0.getWholeText();
        boolean boolean12 = textNode0.hasAttr("h");
        textNode0.settext("");
        java.lang.String str16 = textNode0.absUrl("i!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test14539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14539");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        java.nio.charset.Charset charset12 = outputSettings0.getcharset();
        int int13 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        outputSettings16.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings19.prettyPrint(false);
        int int25 = outputSettings24.getindentAmount();
        outputSettings24.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset30 = outputSettings29.charset();
        outputSettings28.charset = charset30;
        outputSettings28.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        int int37 = outputSettings34.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings34.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        outputSettings40.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings40.setcharset(charset46);
        outputSettings39.setcharset(charset46);
        outputSettings34.setcharset(charset46);
        outputSettings28.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings24.charset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings52.prettyPrint(false);
        int int58 = outputSettings57.getindentAmount();
        outputSettings57.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings57.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean63 = outputSettings62.prettyPrint;
        boolean boolean64 = outputSettings62.forceAllElementAsBlock;
        boolean boolean65 = outputSettings62.getprettyPrint();
        boolean boolean66 = outputSettings62.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings62.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings68.escapeMode();
        outputSettings57.setescapeMode(escapeMode69);
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings24.escapeMode(escapeMode69);
        outputSettings16.setescapeMode(escapeMode69);
        outputSettings0.escapeMode = escapeMode69;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings74.indentAmount((int) (short) 100);
        java.nio.charset.Charset charset77 = outputSettings74.charset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertNotNull(charset77);
    }

    @Test
    public void test14540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14540");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        boolean boolean5 = textNode2.hasAttr("text");
        org.jsoup.nodes.Node node7 = textNode2.removeAttr("i!");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = node7.siblingNodes();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeList8);
    }

    @Test
    public void test14541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14541");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.escapeMode(escapeMode6);
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings5.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings5.escapeMode;
        int int10 = outputSettings5.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings11.setescapeMode(escapeMode14);
        outputSettings11.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings11.setescapeMode(escapeMode18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings11.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        outputSettings21.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        boolean boolean29 = outputSettings26.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings26.prettyPrint(false);
        java.nio.charset.Charset charset32 = outputSettings26.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings26.getescapeMode();
        outputSettings21.escapeMode = escapeMode33;
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings21.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings21.getcharsetEncoder();
        outputSettings5.setcharsetEncoder(charsetEncoder36);
        boolean boolean38 = outputSettings5.getprettyPrint();
        boolean boolean39 = outputSettings5.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNull(escapeMode8);
        org.junit.Assert.assertNull(escapeMode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNull(escapeMode22);
        org.junit.Assert.assertNull(escapeMode25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test14542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14542");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.getTEXT_KEY();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.siblingNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings12.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        int int22 = outputSettings19.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings19.charsetEncoder;
        outputSettings12.charsetEncoder = charsetEncoder23;
        outputSettings12.setprettyPrint(false);
        int int27 = outputSettings12.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings12.escapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings12.escapeMode;
        boolean boolean30 = textNode2.equals((java.lang.Object) outputSettings12);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings12.indentAmount(0);
        java.nio.charset.CharsetEncoder charsetEncoder33 = null;
        outputSettings32.setcharsetEncoder(charsetEncoder33);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings32.forceAllElementAsBlock(true);
        outputSettings32.indentAmount = 35;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings36);
    }

    @Test
    public void test14543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14543");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        textNode2.ensureAttributes();
        boolean boolean6 = textNode2.isBlank();
        org.jsoup.nodes.Node node9 = textNode2.attr("i", "");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test14544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14544");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node11 = textNode2.attr("hi!", "");
        java.lang.String str12 = textNode2.toString();
        textNode2.text = "!";
        java.lang.String str15 = textNode2.getWholeText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test14545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14545");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings0.escapeMode;
        boolean boolean9 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings0.escapeMode();
        outputSettings0.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        outputSettings15.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.setprettyPrint(false);
        outputSettings21.setindentAmount(0);
        outputSettings21.indentAmount = (byte) 1;
        java.nio.charset.Charset charset30 = outputSettings21.getcharset();
        outputSettings15.setcharset(charset30);
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        outputSettings33.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings33.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings39.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings39.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        boolean boolean48 = outputSettings45.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings45.prettyPrint(false);
        int int51 = outputSettings50.getindentAmount();
        outputSettings50.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings50.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        boolean boolean58 = outputSettings55.getprettyPrint();
        boolean boolean59 = outputSettings55.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings55.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode();
        outputSettings50.setescapeMode(escapeMode62);
        outputSettings39.escapeMode = escapeMode62;
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings15.escapeMode(escapeMode62);
        boolean boolean66 = outputSettings15.prettyPrint;
        outputSettings15.forceAllElementAsBlock = true;
        org.jsoup.nodes.TextNode textNode71 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean73 = outputSettings72.prettyPrint;
        boolean boolean74 = textNode71.equals((java.lang.Object) outputSettings72);
        boolean boolean75 = outputSettings72.prettyPrint;
        boolean boolean76 = outputSettings72.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder77 = outputSettings72.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder78 = outputSettings72.encoder();
        outputSettings15.charsetEncoder = charsetEncoder78;
        outputSettings0.setcharsetEncoder(charsetEncoder78);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(charsetEncoder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(charsetEncoder77);
        org.junit.Assert.assertNotNull(charsetEncoder78);
    }

    @Test
    public void test14546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14546");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        outputSettings7.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings7.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        outputSettings22.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings22.setescapeMode(escapeMode29);
        boolean boolean31 = outputSettings22.forceAllElementAsBlock;
        int int32 = outputSettings22.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings22.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings35.setescapeMode(escapeMode38);
        outputSettings35.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings35.setescapeMode(escapeMode42);
        boolean boolean44 = outputSettings35.forceAllElementAsBlock;
        int int45 = outputSettings35.indentAmount;
        java.nio.charset.Charset charset46 = outputSettings35.getcharset();
        outputSettings34.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset46);
        int int49 = outputSettings48.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 0, outputSettings48);
        java.lang.String str52 = textNode2.attr("t");
        org.jsoup.nodes.TextNode textNode54 = textNode2.text("text");
        org.jsoup.nodes.Attributes attributes55 = textNode54.attributes();
        textNode54.ensureAttributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(textNode54);
        org.junit.Assert.assertNotNull(attributes55);
    }

    @Test
    public void test14547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14547");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset3 = outputSettings0.charset;
        boolean boolean4 = outputSettings0.prettyPrint;
        outputSettings0.setforceAllElementAsBlock(true);
        outputSettings0.indentAmount = (short) 100;
        int int9 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings0.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset12 = outputSettings11.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings13.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.prettyPrint(false);
        java.nio.charset.Charset charset23 = outputSettings17.charset;
        outputSettings17.setprettyPrint(false);
        java.nio.charset.Charset charset26 = outputSettings17.getcharset();
        outputSettings13.setcharset(charset26);
        outputSettings11.setcharset(charset26);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings11.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        int int34 = outputSettings31.getindentAmount();
        boolean boolean35 = outputSettings31.forceAllElementAsBlock;
        boolean boolean36 = outputSettings31.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        outputSettings37.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset43 = outputSettings42.charset();
        outputSettings37.setcharset(charset43);
        outputSettings37.setprettyPrint(true);
        java.nio.charset.Charset charset47 = outputSettings37.getcharset();
        outputSettings37.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings37.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset52 = outputSettings51.getcharset();
        outputSettings51.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings55.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        boolean boolean62 = outputSettings59.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings59.prettyPrint(false);
        java.nio.charset.Charset charset65 = outputSettings59.charset;
        outputSettings59.setprettyPrint(false);
        java.nio.charset.Charset charset68 = outputSettings59.getcharset();
        outputSettings55.setcharset(charset68);
        java.nio.charset.CharsetEncoder charsetEncoder70 = outputSettings55.encoder();
        outputSettings51.setcharsetEncoder(charsetEncoder70);
        outputSettings31.charsetEncoder = charsetEncoder70;
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings73.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean78 = outputSettings77.prettyPrint;
        boolean boolean79 = outputSettings77.forceAllElementAsBlock;
        boolean boolean80 = outputSettings77.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings77.prettyPrint(false);
        java.nio.charset.Charset charset83 = outputSettings77.charset;
        outputSettings77.setprettyPrint(false);
        java.nio.charset.Charset charset86 = outputSettings77.getcharset();
        outputSettings73.setcharset(charset86);
        java.nio.charset.CharsetEncoder charsetEncoder88 = outputSettings73.encoder();
        outputSettings31.setcharsetEncoder(charsetEncoder88);
        outputSettings11.charsetEncoder = charsetEncoder88;
        org.jsoup.nodes.Entities.EscapeMode escapeMode91 = outputSettings11.getescapeMode();
        outputSettings11.setprettyPrint(false);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(charsetEncoder70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertNotNull(charset86);
        org.junit.Assert.assertNotNull(charsetEncoder88);
        org.junit.Assert.assertTrue("'" + escapeMode91 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode91.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14548");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        int int2 = outputSettings1.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        int int6 = outputSettings3.getindentAmount();
        boolean boolean7 = outputSettings3.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings3.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings9.setescapeMode(escapeMode12);
        outputSettings9.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings9.setescapeMode(escapeMode16);
        boolean boolean18 = outputSettings9.forceAllElementAsBlock;
        int int19 = outputSettings9.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings9.escapeMode(escapeMode20);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        outputSettings22.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings22.setescapeMode(escapeMode29);
        boolean boolean31 = outputSettings22.forceAllElementAsBlock;
        int int32 = outputSettings22.indentAmount;
        java.nio.charset.Charset charset33 = outputSettings22.getcharset();
        outputSettings21.setcharset(charset33);
        outputSettings3.charset = charset33;
        outputSettings1.charset = charset33;
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings1.encoder();
        outputSettings1.setindentAmount((int) (byte) 100);
        org.jsoup.nodes.TextNode textNode42 = new org.jsoup.nodes.TextNode("text", "text");
        int int43 = textNode42.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList44 = textNode42.siblingNodes();
        textNode42.text = "";
        org.jsoup.nodes.Node node47 = textNode42.parent();
        java.lang.String str48 = textNode42.text();
        boolean boolean49 = textNode42.isBlank();
        boolean boolean50 = textNode42.isBlank();
        int int51 = textNode42.siblingIndex();
        org.jsoup.nodes.Node node52 = textNode42.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        outputSettings53.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings53.indentAmount(1);
        outputSettings53.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder62 = outputSettings53.encoder();
        boolean boolean63 = textNode42.equals((java.lang.Object) outputSettings53);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean65 = outputSettings64.prettyPrint;
        boolean boolean66 = outputSettings64.forceAllElementAsBlock;
        boolean boolean67 = outputSettings64.getprettyPrint();
        boolean boolean68 = outputSettings64.forceAllElementAsBlock();
        outputSettings64.forceAllElementAsBlock = false;
        outputSettings64.setindentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset75 = outputSettings74.charset();
        outputSettings73.charset = charset75;
        outputSettings73.indentAmount = (-1);
        java.nio.charset.Charset charset79 = outputSettings73.charset();
        outputSettings64.charset = charset79;
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings53.charset(charset79);
        org.jsoup.nodes.Entities.EscapeMode escapeMode82 = outputSettings81.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings1.escapeMode(escapeMode82);
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charsetEncoder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertNotNull(charset79);
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertTrue("'" + escapeMode82 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode82.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings83);
    }

    @Test
    public void test14549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14549");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.Document document6 = textNode0.ownerDocument();
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode("text", "text");
        int int10 = textNode9.siblingIndex();
        int int11 = textNode9.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode9.childNodes();
        org.jsoup.nodes.Node node13 = textNode9.parent();
        java.lang.String str14 = textNode9.toString();
        boolean boolean15 = textNode0.equals((java.lang.Object) str14);
        java.lang.String str17 = textNode0.attr("t");
        textNode0.settext("#");
        textNode0.setBaseUri("t");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test14550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14550");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        int int7 = textNode2.siblingIndex();
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings10.setescapeMode(escapeMode13);
        boolean boolean15 = outputSettings10.prettyPrint;
        outputSettings10.indentAmount = 1;
        boolean boolean18 = outputSettings10.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder8, (int) (byte) 1, outputSettings10);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset22 = outputSettings21.charset();
        outputSettings20.charset = charset22;
        outputSettings20.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings20.prettyPrint(false);
        java.nio.charset.Charset charset28 = outputSettings20.charset;
        outputSettings20.setprettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings20.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings20.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings20.escapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings20.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings10.escapeMode(escapeMode34);
        outputSettings35.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        outputSettings38.charset = charset40;
        outputSettings35.setcharset(charset40);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(charset40);
    }

    @Test
    public void test14551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14551");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("i!");
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings9.encoder();
        outputSettings9.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings9.escapeMode;
        outputSettings9.prettyPrint = false;
        java.nio.charset.Charset charset19 = outputSettings9.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings9.clone();
        textNode2.outerHtmlTail(stringBuilder7, (int) (short) 0, outputSettings20);
        outputSettings20.prettyPrint = false;
        outputSettings20.setindentAmount((int) (byte) 0);
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings20);
    }

    @Test
    public void test14552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14552");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        java.nio.charset.Charset charset17 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        java.nio.charset.Charset charset25 = outputSettings19.charset();
        boolean boolean26 = outputSettings19.forceAllElementAsBlock();
        java.nio.charset.Charset charset27 = outputSettings19.getcharset();
        boolean boolean28 = outputSettings19.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        int int32 = outputSettings29.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings29.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        outputSettings35.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset41 = outputSettings40.charset();
        outputSettings35.setcharset(charset41);
        outputSettings34.setcharset(charset41);
        outputSettings29.setcharset(charset41);
        int int45 = outputSettings29.getindentAmount();
        outputSettings29.indentAmount = 'a';
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings29.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings19.escapeMode(escapeMode48);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings0.escapeMode(escapeMode48);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.forceAllElementAsBlock(true);
        outputSettings52.forceAllElementAsBlock = false;
        outputSettings52.setprettyPrint(true);
        outputSettings52.prettyPrint = false;
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertNotNull(outputSettings52);
    }

    @Test
    public void test14553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14553");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset7 = outputSettings0.getcharset();
        int int8 = outputSettings0.indentAmount();
        int int9 = outputSettings0.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test14554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14554");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("h", "!");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder4 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = null;
        outputSettings6.setescapeMode(escapeMode9);
        outputSettings6.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings6.setescapeMode(escapeMode13);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings6.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        boolean boolean18 = outputSettings16.prettyPrint;
        org.jsoup.nodes.TextNode textNode21 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = textNode21.equals((java.lang.Object) outputSettings22);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings22.escapeMode;
        java.nio.charset.Charset charset26 = outputSettings22.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings27.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings27.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings27.escapeMode();
        outputSettings22.setescapeMode(escapeMode31);
        outputSettings16.escapeMode = escapeMode31;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        outputSettings34.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings34.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings40.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings40.escapeMode = escapeMode42;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        int int47 = outputSettings44.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings44.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        outputSettings50.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset56 = outputSettings55.charset();
        outputSettings50.setcharset(charset56);
        outputSettings49.setcharset(charset56);
        outputSettings44.setcharset(charset56);
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings44.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean62 = outputSettings61.prettyPrint;
        boolean boolean63 = outputSettings61.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = null;
        outputSettings61.setescapeMode(escapeMode64);
        outputSettings61.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = null;
        outputSettings61.setescapeMode(escapeMode68);
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings61.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings71.escapeMode;
        outputSettings71.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode75 = outputSettings71.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean77 = outputSettings76.prettyPrint;
        boolean boolean78 = outputSettings76.forceAllElementAsBlock;
        boolean boolean79 = outputSettings76.getprettyPrint();
        boolean boolean80 = outputSettings76.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings76.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode83 = outputSettings82.escapeMode();
        outputSettings71.setescapeMode(escapeMode83);
        outputSettings44.escapeMode = escapeMode83;
        outputSettings40.setescapeMode(escapeMode83);
        org.jsoup.nodes.Entities.EscapeMode escapeMode87 = outputSettings40.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings16.escapeMode(escapeMode87);
        outputSettings88.setindentAmount((int) (byte) -1);
        outputSettings88.prettyPrint = false;
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder4, (int) '#', outputSettings88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNull(escapeMode17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertNull(escapeMode72);
        org.junit.Assert.assertNull(escapeMode75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertTrue("'" + escapeMode83 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode83.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode87 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode87.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings88);
    }

    @Test
    public void test14555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14555");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings3.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings3.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings3.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings9.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings9.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings12.encoder();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charsetEncoder13);
    }

    @Test
    public void test14556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14556");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.lang.String str8 = textNode2.text();
        boolean boolean10 = textNode2.hasAttr("ext");
        textNode2.ensureAttributes();
        java.lang.String str12 = textNode2.getTEXT_KEY();
        java.lang.String str13 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
    }

    @Test
    public void test14557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14557");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.siblingNodes();
        java.lang.String str7 = textNode2.absUrl("i!");
        java.lang.String str8 = textNode2.gettext();
        org.jsoup.nodes.Node node10 = textNode2.removeAttr("t");
        java.lang.String str12 = textNode2.absUrl("#text");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test14558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14558");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.getprettyPrint();
        int int6 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings7.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder11);
        int int13 = outputSettings0.indentAmount;
        outputSettings0.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings0.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.prettyPrint(true);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(outputSettings19);
    }

    @Test
    public void test14559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14559");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        outputSettings10.setindentAmount(0);
        java.nio.charset.Charset charset14 = outputSettings10.charset;
        boolean boolean15 = outputSettings10.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings16.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings16.prettyPrint(true);
        outputSettings16.indentAmount = (short) -1;
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings16.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        outputSettings24.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings24.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings30.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings30.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings30.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        boolean boolean38 = outputSettings35.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings35.prettyPrint(false);
        java.nio.charset.Charset charset41 = null;
        outputSettings40.setcharset(charset41);
        boolean boolean43 = outputSettings40.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings40.prettyPrint(false);
        int int46 = outputSettings40.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset49 = outputSettings48.charset();
        outputSettings47.charset = charset49;
        outputSettings47.indentAmount = (-1);
        java.nio.charset.Charset charset53 = outputSettings47.charset();
        outputSettings47.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        boolean boolean59 = outputSettings56.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings56.prettyPrint(false);
        int int62 = outputSettings61.getindentAmount();
        outputSettings61.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder65 = outputSettings61.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean67 = outputSettings66.prettyPrint;
        boolean boolean68 = outputSettings66.forceAllElementAsBlock;
        boolean boolean69 = outputSettings66.getprettyPrint();
        boolean boolean70 = outputSettings66.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings66.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings72.escapeMode();
        outputSettings61.setescapeMode(escapeMode73);
        outputSettings47.escapeMode = escapeMode73;
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings40.escapeMode(escapeMode73);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings30.escapeMode(escapeMode73);
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings16.escapeMode(escapeMode73);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings16.indentAmount(0);
        boolean boolean81 = outputSettings16.prettyPrint();
        java.nio.charset.Charset charset82 = outputSettings16.charset;
        outputSettings10.charset = charset82;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNull(escapeMode11);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(charset82);
    }

    @Test
    public void test14560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14560");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.settext("text");
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.String str8 = textNode0.absUrl("text");
        boolean boolean9 = textNode0.isBlank();
        java.lang.String str10 = textNode0.getWholeText();
        org.jsoup.nodes.Node node11 = textNode0.previousSibling();
        org.jsoup.nodes.TextNode textNode13 = textNode0.splitText((int) (byte) 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(textNode13);
    }

    @Test
    public void test14561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14561");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings6.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings6.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings6.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings6.escapeMode();
        java.nio.charset.Charset charset13 = outputSettings6.charset;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset13);
    }

    @Test
    public void test14562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14562");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.lang.String str8 = textNode2.text();
        java.lang.String str9 = textNode2.text();
        int int10 = textNode2.siblingIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test14563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14563");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText((int) (short) 1);
        org.jsoup.nodes.Node node11 = textNode8.attr("i!", "ext");
        java.lang.String str12 = textNode8.baseUri();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
    }

    @Test
    public void test14564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14564");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings14.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings31.clone();
        int int33 = outputSettings32.getindentAmount();
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        outputSettings14.setcharset(charset34);
        outputSettings0.setcharset(charset34);
        boolean boolean37 = outputSettings0.prettyPrint();
        int int38 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        int int41 = outputSettings39.indentAmount;
        java.nio.charset.Charset charset42 = outputSettings39.charset;
        boolean boolean43 = outputSettings39.prettyPrint;
        outputSettings39.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings39.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings0.escapeMode(escapeMode46);
        org.jsoup.nodes.TextNode textNode48 = new org.jsoup.nodes.TextNode();
        textNode48.setBaseUri("hi!");
        java.lang.String str51 = textNode48.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder52 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        boolean boolean57 = outputSettings54.getprettyPrint();
        boolean boolean58 = outputSettings54.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings54.indentAmount((int) '4');
        textNode48.outerHtmlTail(stringBuilder52, (int) (short) 100, outputSettings60);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean63 = outputSettings62.prettyPrint;
        boolean boolean64 = outputSettings62.forceAllElementAsBlock;
        boolean boolean65 = outputSettings62.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings62.prettyPrint(false);
        outputSettings62.setforceAllElementAsBlock(false);
        outputSettings62.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset72 = outputSettings62.charset;
        java.nio.charset.CharsetEncoder charsetEncoder73 = outputSettings62.getcharsetEncoder();
        outputSettings60.charsetEncoder = charsetEncoder73;
        outputSettings47.charsetEncoder = charsetEncoder73;
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings47.indentAmount((int) (short) 100);
        boolean boolean78 = outputSettings77.prettyPrint();
        outputSettings77.setforceAllElementAsBlock(true);
        outputSettings77.indentAmount = 52;
        outputSettings77.setforceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "text" + "'", str51, "text");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(charsetEncoder73);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test14565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14565");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        java.lang.String str7 = textNode2.baseUri();
        textNode2.setBaseUri("");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        boolean boolean16 = outputSettings13.getprettyPrint();
        boolean boolean17 = outputSettings13.forceAllElementAsBlock();
        java.nio.charset.Charset charset18 = outputSettings13.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings13.clone();
        textNode2.outerHtmlTail(stringBuilder11, 1, outputSettings19);
        java.lang.String str21 = textNode2.gettext();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test14566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14566");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("text");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        boolean boolean14 = outputSettings11.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings11.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        outputSettings19.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings19.setcharset(charset25);
        java.nio.charset.Charset charset27 = outputSettings19.getcharset();
        outputSettings18.charset = charset27;
        textNode2.outerHtmlTail(stringBuilder9, 100, outputSettings18);
        textNode2.setBaseUri("h");
        textNode2.text = "";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charset27);
    }

    @Test
    public void test14567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14567");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str3 = textNode2.gettext();
        textNode2.text = "hi!";
        textNode2.setBaseUri("");
        org.jsoup.nodes.Node node8 = textNode2.clone();
        boolean boolean10 = textNode2.hasAttr("text");
        textNode2.settext("!");
        java.lang.String str13 = textNode2.text();
        java.lang.Class<?> wildcardClass14 = textNode2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test14568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14568");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.getTEXT_KEY();
        java.lang.String str11 = textNode2.absUrl("ext");
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode2.siblingNodes();
        org.jsoup.nodes.Attributes attributes13 = textNode2.attributes();
        org.jsoup.nodes.Node node14 = textNode2.previousSibling();
        org.jsoup.nodes.TextNode textNode17 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "t");
        org.jsoup.nodes.TextNode textNode19 = textNode17.text("t");
        textNode17.settext("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node22 = textNode2.after((org.jsoup.nodes.Node) textNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertNotNull(textNode19);
    }

    @Test
    public void test14569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14569");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        java.lang.String str11 = textNode2.getWholeText();
        int int12 = textNode2.siblingIndex();
        java.lang.String str13 = textNode2.toString();
        java.lang.String str14 = textNode2.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings15.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings15.setescapeMode(escapeMode18);
        boolean boolean20 = textNode2.equals((java.lang.Object) escapeMode18);
        java.lang.String str21 = textNode2.outerHtml();
        java.lang.String str22 = textNode2.nodeName();
        java.lang.StringBuilder stringBuilder23 = null;
        org.jsoup.nodes.TextNode textNode25 = new org.jsoup.nodes.TextNode();
        textNode25.setBaseUri("hi!");
        java.lang.String str28 = textNode25.getTEXT_KEY();
        textNode25.text = "hi!";
        boolean boolean32 = textNode25.hasAttr("");
        java.lang.String str33 = textNode25.toString();
        java.lang.String str34 = textNode25.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        boolean boolean38 = outputSettings35.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings35.prettyPrint(false);
        int int41 = outputSettings40.getindentAmount();
        outputSettings40.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings44.charset = charset46;
        outputSettings44.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        int int53 = outputSettings50.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings50.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        outputSettings56.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset62 = outputSettings61.charset();
        outputSettings56.setcharset(charset62);
        outputSettings55.setcharset(charset62);
        outputSettings50.setcharset(charset62);
        outputSettings44.setcharset(charset62);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings40.charset(charset62);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings67.forceAllElementAsBlock(false);
        boolean boolean70 = textNode25.equals((java.lang.Object) outputSettings67);
        boolean boolean71 = outputSettings67.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings67.forceAllElementAsBlock(false);
        boolean boolean74 = outputSettings73.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean76 = outputSettings75.prettyPrint;
        boolean boolean77 = outputSettings75.forceAllElementAsBlock;
        outputSettings75.indentAmount = (short) 10;
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = outputSettings75.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings73.escapeMode(escapeMode80);
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder23, (int) '4', outputSettings73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#text" + "'", str22, "#text");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "text" + "'", str28, "text");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + escapeMode80 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode80.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings81);
    }

    @Test
    public void test14570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14570");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        outputSettings7.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings7.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        outputSettings22.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings22.setescapeMode(escapeMode29);
        boolean boolean31 = outputSettings22.forceAllElementAsBlock;
        int int32 = outputSettings22.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings22.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings35.setescapeMode(escapeMode38);
        outputSettings35.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings35.setescapeMode(escapeMode42);
        boolean boolean44 = outputSettings35.forceAllElementAsBlock;
        int int45 = outputSettings35.indentAmount;
        java.nio.charset.Charset charset46 = outputSettings35.getcharset();
        outputSettings34.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset46);
        int int49 = outputSettings48.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 0, outputSettings48);
        java.lang.String str52 = textNode2.attr("t");
        org.jsoup.nodes.TextNode textNode54 = textNode2.text("text");
        textNode54.setBaseUri("i");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(textNode54);
    }

    @Test
    public void test14571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14571");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str10 = textNode9.outerHtml();
        java.lang.String str11 = textNode9.outerHtml();
        org.jsoup.nodes.Document document12 = textNode9.ownerDocument();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(document12);
    }

    @Test
    public void test14572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14572");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.gettext();
        boolean boolean11 = textNode2.hasAttr("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode2.childNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeList12);
    }

    @Test
    public void test14573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14573");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("i!", "#text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.siblingNodes();
        java.lang.String str4 = textNode2.getWholeText();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "i!" + "'", str4, "i!");
    }

    @Test
    public void test14574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14574");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        int int6 = outputSettings5.getindentAmount();
        outputSettings5.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        outputSettings9.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings20.setcharset(charset27);
        outputSettings15.setcharset(charset27);
        outputSettings9.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings5.charset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings35.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.clone();
        java.nio.charset.Charset charset38 = outputSettings35.charset();
        outputSettings32.setcharset(charset38);
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings32.escapeMode;
        outputSettings32.setindentAmount((int) 'a');
        boolean boolean43 = outputSettings32.getforceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings32.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings32.forceAllElementAsBlock(false);
        outputSettings46.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings46.forceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(outputSettings50);
    }

    @Test
    public void test14575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14575");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        org.jsoup.nodes.Node node7 = textNode2.clone();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("text", "text");
        int int12 = textNode11.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode11.childNodes();
        textNode11.settext("");
        textNode11.setBaseUri("hi!");
        java.lang.StringBuilder stringBuilder18 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = null;
        outputSettings20.setescapeMode(escapeMode23);
        outputSettings20.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings20.setescapeMode(escapeMode27);
        boolean boolean29 = outputSettings20.forceAllElementAsBlock;
        int int30 = outputSettings20.indentAmount;
        java.nio.charset.Charset charset31 = outputSettings20.getcharset();
        textNode11.outerHtmlTail(stringBuilder18, (int) (short) 1, outputSettings20);
        java.lang.String str33 = textNode11.text;
        org.jsoup.nodes.Node node34 = textNode11.clone();
        java.lang.StringBuilder stringBuilder35 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        boolean boolean40 = outputSettings37.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings37.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.escapeMode(escapeMode43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings42.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings42.escapeMode;
        int int47 = outputSettings42.indentAmount();
        textNode11.outerHtmlTail(stringBuilder35, 100, outputSettings42);
        boolean boolean49 = textNode2.equals((java.lang.Object) 100);
        java.lang.String str50 = textNode2.text;
        java.util.List<org.jsoup.nodes.Node> nodeList51 = textNode2.siblingNodes();
        java.lang.String str52 = textNode2.gettext();
        java.lang.String str53 = textNode2.text;
        java.lang.String str54 = textNode2.gettext();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNull(escapeMode45);
        org.junit.Assert.assertNull(escapeMode46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test14576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14576");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset3 = outputSettings0.charset;
        boolean boolean4 = outputSettings0.prettyPrint;
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.clone();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.getcharsetEncoder();
        java.nio.charset.Charset charset9 = outputSettings0.charset();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(charset9);
    }

    @Test
    public void test14577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14577");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.prettyPrint(true);
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        int int17 = textNode15.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode15.childNodes();
        java.lang.StringBuilder stringBuilder19 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        int int24 = outputSettings21.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings21.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        outputSettings27.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset33 = outputSettings32.charset();
        outputSettings27.setcharset(charset33);
        outputSettings26.setcharset(charset33);
        outputSettings21.setcharset(charset33);
        textNode15.outerHtmlTail(stringBuilder19, 10, outputSettings21);
        int int38 = outputSettings21.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings21.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings21.indentAmount((int) (short) 100);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings21.indentAmount(10);
        int int44 = outputSettings21.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        outputSettings45.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset51 = outputSettings50.charset();
        outputSettings45.setcharset(charset51);
        outputSettings45.setprettyPrint(true);
        java.nio.charset.Charset charset55 = outputSettings45.getcharset();
        outputSettings45.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings45.forceAllElementAsBlock(false);
        outputSettings59.setforceAllElementAsBlock(false);
        outputSettings59.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset66 = outputSettings65.charset();
        outputSettings64.charset = charset66;
        outputSettings64.indentAmount = (-1);
        java.nio.charset.Charset charset70 = outputSettings64.charset();
        outputSettings64.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        boolean boolean76 = outputSettings73.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings73.prettyPrint(false);
        int int79 = outputSettings78.getindentAmount();
        outputSettings78.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder82 = outputSettings78.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean84 = outputSettings83.prettyPrint;
        boolean boolean85 = outputSettings83.forceAllElementAsBlock;
        boolean boolean86 = outputSettings83.getprettyPrint();
        boolean boolean87 = outputSettings83.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings89 = outputSettings83.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode90 = outputSettings89.escapeMode();
        outputSettings78.setescapeMode(escapeMode90);
        outputSettings64.escapeMode = escapeMode90;
        org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings59.escapeMode(escapeMode90);
        org.jsoup.nodes.Document.OutputSettings outputSettings94 = outputSettings21.escapeMode(escapeMode90);
        outputSettings0.escapeMode = escapeMode90;
        java.lang.Class<?> wildcardClass96 = escapeMode90.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(outputSettings89);
        org.junit.Assert.assertTrue("'" + escapeMode90 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode90.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings93);
        org.junit.Assert.assertNotNull(outputSettings94);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test14578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14578");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        org.jsoup.nodes.Node node11 = textNode2.attr("text", "");
        org.jsoup.nodes.Attributes attributes12 = textNode2.attributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(attributes12);
    }

    @Test
    public void test14579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14579");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.nextSibling();
        textNode0.settext("t");
        org.jsoup.nodes.Node node11 = textNode0.parent();
        org.jsoup.nodes.Node node12 = textNode0.previousSibling();
        java.lang.String str13 = textNode0.text();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test14580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14580");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        textNode2.settext("hi!");
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Node node12 = textNode2.attr("h", "hi!");
        java.lang.StringBuilder stringBuilder13 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings15.escapeMode;
        int int19 = outputSettings15.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder13, 0, outputSettings15);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test14581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14581");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        outputSettings6.setprettyPrint(false);
        boolean boolean9 = outputSettings6.prettyPrint();
        int int10 = outputSettings6.indentAmount;
        outputSettings6.indentAmount = (byte) 10;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test14582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14582");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        java.lang.String str11 = textNode2.text;
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        textNode2.outerHtmlTail(stringBuilder12, 0, outputSettings14);
        java.util.List<org.jsoup.nodes.Node> nodeList31 = textNode2.siblingNodes();
        java.lang.String str32 = textNode2.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset35 = outputSettings34.charset();
        outputSettings33.charset = charset35;
        boolean boolean37 = outputSettings33.getforceAllElementAsBlock();
        boolean boolean38 = outputSettings33.forceAllElementAsBlock;
        int int39 = outputSettings33.indentAmount();
        java.nio.charset.Charset charset40 = outputSettings33.charset;
        boolean boolean41 = outputSettings33.prettyPrint;
        boolean boolean42 = textNode2.equals((java.lang.Object) outputSettings33);
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings33.escapeMode();
        boolean boolean44 = outputSettings33.prettyPrint;
        boolean boolean45 = outputSettings33.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset48 = outputSettings47.charset();
        outputSettings46.charset = charset48;
        java.nio.charset.CharsetEncoder charsetEncoder50 = outputSettings46.encoder();
        boolean boolean51 = outputSettings46.prettyPrint;
        java.nio.charset.Charset charset52 = outputSettings46.charset;
        boolean boolean53 = outputSettings46.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset56 = outputSettings55.charset();
        outputSettings54.charset = charset56;
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings54.encoder();
        boolean boolean59 = outputSettings54.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings54.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings46.escapeMode(escapeMode60);
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings46.forceAllElementAsBlock(false);
        outputSettings63.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings63.escapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings63.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings33.escapeMode(escapeMode67);
        boolean boolean69 = outputSettings33.prettyPrint();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(charsetEncoder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test14583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14583");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        int int15 = outputSettings14.getindentAmount();
        outputSettings14.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings18.charset = charset20;
        outputSettings18.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        int int27 = outputSettings24.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings30.setcharset(charset36);
        outputSettings29.setcharset(charset36);
        outputSettings24.setcharset(charset36);
        outputSettings18.setcharset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(false);
        int int48 = outputSettings47.getindentAmount();
        outputSettings47.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        boolean boolean56 = outputSettings52.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings52.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        outputSettings47.setescapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings14.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings0.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean66 = outputSettings65.prettyPrint;
        boolean boolean67 = outputSettings65.forceAllElementAsBlock;
        int int68 = outputSettings65.getindentAmount();
        boolean boolean69 = outputSettings65.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder70 = outputSettings65.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings65.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset74 = outputSettings73.charset();
        outputSettings72.charset = charset74;
        java.nio.charset.CharsetEncoder charsetEncoder76 = outputSettings72.encoder();
        boolean boolean77 = outputSettings72.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings72.escapeMode;
        outputSettings65.setescapeMode(escapeMode78);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings64.escapeMode(escapeMode78);
        outputSettings64.indentAmount = (byte) -1;
        boolean boolean83 = outputSettings64.prettyPrint;
        boolean boolean84 = outputSettings64.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings64.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode87 = null;
        outputSettings86.setescapeMode(escapeMode87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(charsetEncoder70);
        org.junit.Assert.assertNotNull(charsetEncoder71);
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertNotNull(charsetEncoder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(outputSettings86);
    }

    @Test
    public void test14584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14584");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings12.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings23.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings23.escapeMode = escapeMode25;
        outputSettings23.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        outputSettings29.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings29.indentAmount(1);
        outputSettings29.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings38.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = null;
        outputSettings41.setescapeMode(escapeMode44);
        outputSettings41.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = null;
        outputSettings41.setescapeMode(escapeMode48);
        outputSettings41.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings41.getcharsetEncoder();
        outputSettings38.charsetEncoder = charsetEncoder52;
        outputSettings29.charsetEncoder = charsetEncoder52;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings29.clone();
        boolean boolean56 = outputSettings29.prettyPrint();
        outputSettings29.setindentAmount((int) 'a');
        boolean boolean59 = outputSettings29.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings29.clone();
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings60.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings60.escapeMode();
        outputSettings23.escapeMode = escapeMode62;
        int int64 = outputSettings23.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
    }

    @Test
    public void test14585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14585");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        java.nio.charset.Charset charset8 = outputSettings0.getcharset();
        boolean boolean9 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        int int13 = outputSettings10.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings10.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        outputSettings16.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset22 = outputSettings21.charset();
        outputSettings16.setcharset(charset22);
        outputSettings15.setcharset(charset22);
        outputSettings10.setcharset(charset22);
        int int26 = outputSettings10.getindentAmount();
        outputSettings10.indentAmount = 'a';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings10.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings0.escapeMode(escapeMode29);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        int int39 = outputSettings38.getindentAmount();
        outputSettings38.indentAmount = 52;
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings38.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        outputSettings44.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset50 = outputSettings49.charset();
        outputSettings44.setcharset(charset50);
        outputSettings44.setprettyPrint(true);
        java.nio.charset.Charset charset54 = outputSettings44.getcharset();
        outputSettings44.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings44.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = null;
        outputSettings60.setescapeMode(escapeMode63);
        outputSettings60.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = null;
        outputSettings60.setescapeMode(escapeMode67);
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings60.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings70.escapeMode;
        outputSettings70.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode74 = outputSettings70.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean76 = outputSettings75.prettyPrint;
        boolean boolean77 = outputSettings75.forceAllElementAsBlock;
        boolean boolean78 = outputSettings75.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings75.prettyPrint(false);
        java.nio.charset.Charset charset81 = outputSettings75.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode82 = outputSettings75.getescapeMode();
        outputSettings70.escapeMode = escapeMode82;
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings70.escapeMode();
        outputSettings58.setescapeMode(escapeMode84);
        outputSettings38.setescapeMode(escapeMode84);
        outputSettings30.setescapeMode(escapeMode84);
        boolean boolean88 = outputSettings30.getforceAllElementAsBlock();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertNull(escapeMode71);
        org.junit.Assert.assertNull(escapeMode74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertNotNull(charset81);
        org.junit.Assert.assertTrue("'" + escapeMode82 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode82.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test14586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14586");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("t");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.Attributes attributes13 = textNode2.attributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(attributes13);
    }

    @Test
    public void test14587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14587");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("i!");
        org.jsoup.nodes.Document document6 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node9 = textNode2.attr("#text", "text");
        java.lang.String str10 = textNode2.outerHtml();
        java.lang.String str11 = textNode2.text();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "i!" + "'", str10, "i!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "i!" + "'", str11, "i!");
    }

    @Test
    public void test14588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14588");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        java.lang.String str8 = textNode7.nodeName();
        java.lang.String str9 = textNode7.text;
        textNode7.ensureAttributes();
        textNode7.ensureAttributes();
        java.lang.String str12 = textNode7.nodeName();
        textNode7.setBaseUri("text");
        org.jsoup.nodes.Document document15 = textNode7.ownerDocument();
        java.lang.String str17 = textNode7.attr("i");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertNull(document15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test14589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14589");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("#text");
        int int9 = textNode2.siblingIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test14590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14590");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(false);
        outputSettings0.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings12.charsetEncoder;
        outputSettings10.charsetEncoder = charsetEncoder16;
        outputSettings0.charsetEncoder = charsetEncoder16;
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings0.encoder();
        boolean boolean20 = outputSettings0.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test14591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14591");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        boolean boolean6 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.indentAmount = (byte) -1;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings9.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings15.encoder();
        int int17 = outputSettings15.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings15.getcharsetEncoder();
        java.nio.charset.Charset charset19 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings0.charset(charset19);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings0.getescapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14592");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        boolean boolean10 = outputSettings0.prettyPrint();
        int int11 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings12.charset = charset14;
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings12.encoder();
        boolean boolean17 = outputSettings12.prettyPrint;
        java.nio.charset.Charset charset18 = outputSettings12.charset;
        boolean boolean19 = outputSettings12.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset22 = outputSettings21.charset();
        outputSettings20.charset = charset22;
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings20.encoder();
        boolean boolean25 = outputSettings20.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings20.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings12.escapeMode(escapeMode26);
        boolean boolean28 = outputSettings27.forceAllElementAsBlock();
        boolean boolean29 = outputSettings27.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings30.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        boolean boolean37 = outputSettings34.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings34.prettyPrint(false);
        java.nio.charset.Charset charset40 = outputSettings34.charset;
        outputSettings34.setprettyPrint(false);
        java.nio.charset.Charset charset43 = outputSettings34.getcharset();
        outputSettings30.setcharset(charset43);
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings30.encoder();
        outputSettings27.charsetEncoder = charsetEncoder45;
        java.nio.charset.Charset charset47 = outputSettings27.getcharset();
        outputSettings0.setcharset(charset47);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertNotNull(charset47);
    }

    @Test
    public void test14593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14593");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Node node5 = textNode2.removeAttr("text");
        boolean boolean6 = textNode2.isBlank();
        org.jsoup.nodes.Node node8 = textNode2.removeAttr("!");
        org.jsoup.nodes.Node node11 = textNode2.attr("hi!", "#text");
        java.lang.String str12 = textNode2.text;
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test14594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14594");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("t");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode();
        textNode11.setBaseUri("hi!");
        java.lang.String str14 = textNode11.text;
        java.lang.String str15 = textNode11.nodeName();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode11.siblingNodes();
        boolean boolean17 = textNode2.equals((java.lang.Object) nodeList16);
        java.lang.String str18 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Attributes attributes19 = textNode2.attributes();
        int int20 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode22 = textNode2.text("i");
        // The following exception was thrown during execution in test generation
        try {
            textNode22.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(textNode22);
    }

    @Test
    public void test14595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14595");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        boolean boolean7 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.encoder();
        boolean boolean13 = outputSettings8.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings8.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.escapeMode(escapeMode14);
        boolean boolean16 = outputSettings15.forceAllElementAsBlock();
        boolean boolean17 = outputSettings15.getforceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings15.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings15.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset24 = outputSettings23.charset();
        outputSettings22.charset = charset24;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings22.encoder();
        outputSettings22.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings22.escapeMode;
        outputSettings22.prettyPrint = false;
        java.nio.charset.Charset charset32 = outputSettings22.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings22.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings34.charset = charset36;
        outputSettings34.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings34.getcharsetEncoder();
        outputSettings34.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings34.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings22.escapeMode(escapeMode43);
        outputSettings21.escapeMode = escapeMode43;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings44);
    }

    @Test
    public void test14596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14596");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str3 = textNode2.gettext();
        textNode2.text = "hi!";
        textNode2.setBaseUri("");
        org.jsoup.nodes.Node node8 = textNode2.clone();
        boolean boolean10 = textNode2.hasAttr("text");
        textNode2.settext("!");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("ext");
        org.jsoup.nodes.Node node15 = textNode14.previousSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test14597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14597");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("ext", "ext");
        java.lang.String str3 = textNode2.text();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        textNode2.settext("t");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode2.siblingNodes();
        java.lang.String str8 = textNode2.baseUri();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ext" + "'", str3, "ext");
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ext" + "'", str8, "ext");
    }

    @Test
    public void test14598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14598");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        java.nio.charset.Charset charset12 = outputSettings0.getcharset();
        int int13 = outputSettings0.getindentAmount();
        outputSettings0.prettyPrint = true;
        java.nio.charset.Charset charset16 = outputSettings0.getcharset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(charset16);
    }

    @Test
    public void test14599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14599");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean2 = outputSettings0.getprettyPrint();
        outputSettings0.setprettyPrint(false);
        int int5 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.forceAllElementAsBlock(true);
        int int8 = outputSettings7.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings9.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings9.prettyPrint(true);
        outputSettings9.indentAmount = (short) -1;
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings9.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        outputSettings17.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings17.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings23.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings23.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings23.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        boolean boolean31 = outputSettings28.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings28.prettyPrint(false);
        java.nio.charset.Charset charset34 = null;
        outputSettings33.setcharset(charset34);
        boolean boolean36 = outputSettings33.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        int int39 = outputSettings33.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset42 = outputSettings41.charset();
        outputSettings40.charset = charset42;
        outputSettings40.indentAmount = (-1);
        java.nio.charset.Charset charset46 = outputSettings40.charset();
        outputSettings40.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        boolean boolean52 = outputSettings49.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings49.prettyPrint(false);
        int int55 = outputSettings54.getindentAmount();
        outputSettings54.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings54.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        boolean boolean62 = outputSettings59.getprettyPrint();
        boolean boolean63 = outputSettings59.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings59.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.escapeMode();
        outputSettings54.setescapeMode(escapeMode66);
        outputSettings40.escapeMode = escapeMode66;
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings33.escapeMode(escapeMode66);
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings23.escapeMode(escapeMode66);
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings9.escapeMode(escapeMode66);
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings71.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        outputSettings73.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean79 = outputSettings78.prettyPrint;
        boolean boolean80 = outputSettings78.forceAllElementAsBlock;
        boolean boolean81 = outputSettings78.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset84 = outputSettings83.charset();
        outputSettings82.charset = charset84;
        java.nio.charset.CharsetEncoder charsetEncoder86 = outputSettings82.encoder();
        boolean boolean87 = outputSettings82.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode88 = outputSettings82.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings89 = outputSettings78.escapeMode(escapeMode88);
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings73.escapeMode(escapeMode88);
        org.jsoup.nodes.Entities.EscapeMode escapeMode91 = outputSettings73.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings92 = outputSettings71.escapeMode(escapeMode91);
        outputSettings7.escapeMode = escapeMode91;
        org.jsoup.nodes.Document.OutputSettings outputSettings95 = outputSettings7.prettyPrint(true);
        java.nio.charset.Charset charset96 = outputSettings7.getcharset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(charset84);
        org.junit.Assert.assertNotNull(charsetEncoder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + escapeMode88 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode88.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings89);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertTrue("'" + escapeMode91 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode91.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings92);
        org.junit.Assert.assertNotNull(outputSettings95);
        org.junit.Assert.assertNotNull(charset96);
    }

    @Test
    public void test14600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14600");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        java.lang.String str9 = textNode0.nodeName();
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings12.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings12.setescapeMode(escapeMode17);
        int int19 = outputSettings12.indentAmount();
        textNode0.outerHtmlTail(stringBuilder10, 10, outputSettings12);
        boolean boolean22 = textNode0.hasAttr("#text");
        org.jsoup.nodes.TextNode textNode25 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.String str26 = textNode25.nodeName();
        org.jsoup.nodes.Node node28 = textNode25.removeAttr("hi!");
        boolean boolean29 = textNode0.equals((java.lang.Object) "hi!");
        boolean boolean30 = textNode0.isBlank();
        org.jsoup.nodes.Node node31 = textNode0.nextSibling();
        boolean boolean32 = textNode0.isBlank();
        java.lang.String str34 = textNode0.attr("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#text" + "'", str26, "#text");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test14601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14601");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("h", "h");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node4 = textNode2.after("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
    }

    @Test
    public void test14602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14602");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        boolean boolean7 = textNode2.isBlank();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        java.lang.String str9 = textNode2.gettext();
        java.lang.String str10 = textNode2.nodeName();
        org.jsoup.nodes.Node node11 = textNode2.parent();
        org.jsoup.nodes.Node node13 = textNode2.removeAttr("hi!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test14603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14603");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        java.lang.String str4 = textNode2.attr("");
        org.jsoup.nodes.Document document5 = textNode2.ownerDocument();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.hasAttr("t");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test14604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14604");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        int int2 = outputSettings1.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        int int6 = outputSettings3.getindentAmount();
        boolean boolean7 = outputSettings3.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings3.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings9.setescapeMode(escapeMode12);
        outputSettings9.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings9.setescapeMode(escapeMode16);
        boolean boolean18 = outputSettings9.forceAllElementAsBlock;
        int int19 = outputSettings9.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings9.escapeMode(escapeMode20);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        outputSettings22.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings22.setescapeMode(escapeMode29);
        boolean boolean31 = outputSettings22.forceAllElementAsBlock;
        int int32 = outputSettings22.indentAmount;
        java.nio.charset.Charset charset33 = outputSettings22.getcharset();
        outputSettings21.setcharset(charset33);
        outputSettings3.charset = charset33;
        outputSettings1.charset = charset33;
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings1.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        outputSettings38.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset44 = outputSettings43.charset();
        outputSettings38.setcharset(charset44);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset47 = outputSettings46.charset();
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings46.encoder();
        outputSettings38.setcharsetEncoder(charsetEncoder48);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        int int53 = outputSettings50.getindentAmount();
        boolean boolean54 = outputSettings50.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder55 = outputSettings50.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder56 = outputSettings50.getcharsetEncoder();
        outputSettings38.setcharsetEncoder(charsetEncoder56);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings38.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings59.prettyPrint(false);
        int int62 = outputSettings61.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings61.indentAmount((int) (short) 100);
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = outputSettings61.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings1.escapeMode(escapeMode65);
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(charsetEncoder55);
        org.junit.Assert.assertNotNull(charsetEncoder56);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings66);
    }

    @Test
    public void test14605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14605");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings0.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        java.nio.charset.Charset charset7 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount(35);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings13);
    }

    @Test
    public void test14606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14606");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.getcharsetEncoder();
        boolean boolean12 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings14.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charsetEncoder15);
    }

    @Test
    public void test14607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14607");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode6 = new org.jsoup.nodes.TextNode();
        textNode6.setBaseUri("hi!");
        java.lang.String str9 = textNode6.getTEXT_KEY();
        textNode6.text = "hi!";
        org.jsoup.nodes.TextNode textNode13 = textNode6.splitText((int) (byte) 0);
        org.jsoup.nodes.Node node16 = textNode13.attr("#text", "");
        boolean boolean17 = textNode2.equals((java.lang.Object) node16);
        java.lang.String str18 = textNode2.text;
        java.lang.String str20 = textNode2.attr("t");
        java.lang.String str21 = textNode2.toString();
        org.jsoup.nodes.Attributes attributes22 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode25 = new org.jsoup.nodes.TextNode("text", "text");
        int int26 = textNode25.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList27 = textNode25.childNodes();
        org.jsoup.nodes.TextNode textNode29 = textNode25.text("");
        int int30 = textNode25.siblingIndex();
        org.jsoup.nodes.TextNode textNode32 = textNode25.text("hi!");
        java.lang.String str34 = textNode25.absUrl("text");
        boolean boolean35 = textNode25.isBlank();
        textNode25.text = "";
        java.lang.String str38 = textNode25.baseUri();
        org.jsoup.nodes.Document document39 = textNode25.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) document39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertNotNull(attributes22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertNotNull(textNode29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(textNode32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "text" + "'", str38, "text");
        org.junit.Assert.assertNull(document39);
    }

    @Test
    public void test14608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14608");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.TextNode textNode4 = textNode2.splitText((int) (short) 0);
        org.jsoup.nodes.Node node6 = textNode2.removeAttr("#text");
        java.lang.String str7 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
    }

    @Test
    public void test14609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14609");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings0.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings25.charset = charset27;
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.encoder();
        outputSettings0.charsetEncoder = charsetEncoder29;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings0.forceAllElementAsBlock(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings0.indentAmount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNotNull(outputSettings32);
    }

    @Test
    public void test14610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14610");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.encoder();
        outputSettings0.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings0.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder10);
    }

    @Test
    public void test14611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14611");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.charsetEncoder;
        outputSettings0.charsetEncoder = charsetEncoder11;
        outputSettings0.setprettyPrint(false);
        int int15 = outputSettings0.indentAmount;
        outputSettings0.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset20 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        boolean boolean24 = outputSettings21.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings21.prettyPrint(false);
        java.nio.charset.Charset charset27 = null;
        outputSettings26.setcharset(charset27);
        boolean boolean29 = outputSettings26.getforceAllElementAsBlock();
        boolean boolean30 = outputSettings26.getprettyPrint();
        boolean boolean31 = outputSettings26.getforceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings26.getescapeMode();
        outputSettings0.escapeMode = escapeMode32;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14612");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str9 = textNode0.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.forceAllElementAsBlock(false);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings42);
        org.jsoup.nodes.Node node46 = textNode0.previousSibling();
        java.lang.String str47 = textNode0.getTEXT_KEY();
        textNode0.ensureAttributes();
        java.lang.String str49 = textNode0.getWholeText();
        org.jsoup.nodes.TextNode textNode51 = textNode0.text("!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "text" + "'", str47, "text");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(textNode51);
    }

    @Test
    public void test14613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14613");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "t");
        org.jsoup.nodes.Node node3 = textNode2.parent();
        org.jsoup.nodes.Node node4 = textNode2.previousSibling();
        java.lang.String str6 = textNode2.absUrl("hi!");
        org.jsoup.nodes.Node node7 = textNode2.parent();
        org.jsoup.nodes.Node node10 = textNode2.attr("h", "!");
        java.lang.String str11 = textNode2.baseUri();
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "t" + "'", str11, "t");
    }

    @Test
    public void test14614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14614");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("#text");
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("ext");
        java.lang.String str15 = textNode2.attr("#");
        textNode2.settext("");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test14615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14615");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.getWholeText();
        java.lang.String str6 = textNode2.text();
        org.jsoup.nodes.Document document7 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode9 = textNode2.splitText((int) (short) 0);
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.siblingNodes();
        java.lang.String str11 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        java.lang.String str13 = textNode2.text();
        textNode2.ensureAttributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNull(document7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test14616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14616");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        boolean boolean7 = textNode2.equals((java.lang.Object) 1L);
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        boolean boolean9 = textNode2.isBlank();
        org.jsoup.nodes.Node node10 = textNode2.parent();
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(attributes11);
    }

    @Test
    public void test14617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14617");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.String str3 = textNode2.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
    }

    @Test
    public void test14618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14618");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.absUrl("text");
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("ext");
        java.lang.String str10 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings14.getcharsetEncoder();
        outputSettings14.setforceAllElementAsBlock(true);
        textNode2.outerHtmlTail(stringBuilder12, (int) '4', outputSettings14);
        org.jsoup.nodes.Document document23 = textNode2.ownerDocument();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertNull(document23);
    }

    @Test
    public void test14619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14619");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        outputSettings5.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings5.forceAllElementAsBlock(true);
        int int12 = outputSettings5.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings5.clone();
        textNode2.outerHtmlTail(stringBuilder3, (int) (short) 1, outputSettings5);
        java.lang.String str15 = textNode2.gettext();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
    }

    @Test
    public void test14620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14620");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        org.jsoup.nodes.Node node11 = textNode2.attr("text", "#text");
        java.lang.String str12 = node11.baseUri();
        org.jsoup.nodes.Node node13 = node11.nextSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test14621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14621");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean3 = outputSettings2.prettyPrint;
        boolean boolean4 = outputSettings2.forceAllElementAsBlock;
        int int5 = outputSettings2.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings2.charsetEncoder;
        outputSettings0.charsetEncoder = charsetEncoder6;
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.charsetEncoder;
        java.nio.charset.Charset charset9 = outputSettings0.charset();
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.forceAllElementAsBlock(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(outputSettings12);
    }

    @Test
    public void test14622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14622");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setforceAllElementAsBlock(true);
        boolean boolean9 = outputSettings0.getprettyPrint();
        boolean boolean10 = outputSettings0.getprettyPrint();
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        boolean boolean14 = outputSettings0.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test14623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14623");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings9.getcharsetEncoder();
        outputSettings9.prettyPrint = true;
        boolean boolean17 = outputSettings9.forceAllElementAsBlock;
        textNode0.outerHtmlTail(stringBuilder7, (int) (byte) 100, outputSettings9);
        boolean boolean19 = outputSettings9.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings9.getescapeMode();
        java.nio.charset.Charset charset21 = outputSettings9.getcharset();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
    }

    @Test
    public void test14624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14624");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder5 = null;
        outputSettings4.charsetEncoder = charsetEncoder5;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings4.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings4.forceAllElementAsBlock(false);
        boolean boolean11 = outputSettings4.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings4.forceAllElementAsBlock(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
    }

    @Test
    public void test14625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14625");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        int int6 = outputSettings0.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.getcharsetEncoder();
        java.nio.charset.Charset charset8 = outputSettings0.charset;
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode();
        textNode9.setBaseUri("hi!");
        java.lang.String str12 = textNode9.getTEXT_KEY();
        textNode9.text = "hi!";
        boolean boolean16 = textNode9.hasAttr("");
        java.lang.String str17 = textNode9.toString();
        java.lang.String str18 = textNode9.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings19.prettyPrint(false);
        int int25 = outputSettings24.getindentAmount();
        outputSettings24.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset30 = outputSettings29.charset();
        outputSettings28.charset = charset30;
        outputSettings28.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        int int37 = outputSettings34.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings34.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        outputSettings40.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings40.setcharset(charset46);
        outputSettings39.setcharset(charset46);
        outputSettings34.setcharset(charset46);
        outputSettings28.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings24.charset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.forceAllElementAsBlock(false);
        boolean boolean54 = textNode9.equals((java.lang.Object) outputSettings51);
        boolean boolean55 = outputSettings51.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings51.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode;
        boolean boolean59 = outputSettings57.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings57.escapeMode;
        outputSettings0.escapeMode = escapeMode60;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14626");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        int int25 = textNode2.siblingIndex();
        textNode2.text = "";
        boolean boolean28 = textNode2.isBlank();
        java.lang.String str29 = textNode2.getWholeText();
        org.jsoup.nodes.Node node30 = textNode2.previousSibling();
        org.jsoup.nodes.Node node31 = textNode2.clone();
        boolean boolean33 = textNode2.hasAttr("i");
        org.jsoup.nodes.TextNode textNode36 = new org.jsoup.nodes.TextNode("text", "text");
        int int37 = textNode36.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList38 = textNode36.siblingNodes();
        textNode36.text = "";
        java.lang.String str41 = textNode36.getWholeText();
        java.lang.String str43 = textNode36.absUrl("#text");
        java.lang.String str44 = textNode36.text;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node45 = textNode2.after((org.jsoup.nodes.Node) textNode36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test14627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14627");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        org.jsoup.nodes.Node node8 = textNode5.attr("hi!", "t");
        java.lang.String str10 = textNode5.attr("#text");
        org.jsoup.nodes.Node node12 = textNode5.removeAttr("i!");
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test14628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14628");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.absUrl("text");
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = node6.siblingIndex();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test14629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14629");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings10.setprettyPrint(true);
        boolean boolean13 = outputSettings10.getforceAllElementAsBlock();
        boolean boolean14 = outputSettings10.getprettyPrint();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test14630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14630");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean4 = textNode2.hasAttr("");
        boolean boolean5 = textNode2.isBlank();
        java.lang.String str6 = textNode2.getTEXT_KEY();
        java.lang.String str7 = textNode2.text;
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings10.setprettyPrint(true);
        java.nio.charset.Charset charset20 = outputSettings10.getcharset();
        outputSettings10.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings10.forceAllElementAsBlock(false);
        outputSettings24.setforceAllElementAsBlock(false);
        boolean boolean27 = outputSettings24.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        outputSettings28.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings28.indentAmount(1);
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings24.escapeMode(escapeMode35);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings36.charsetEncoder;
        outputSettings36.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings36.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        outputSettings41.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset47 = outputSettings46.charset();
        outputSettings41.setcharset(charset47);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset50 = outputSettings49.charset();
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings49.encoder();
        outputSettings41.setcharsetEncoder(charsetEncoder51);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        int int56 = outputSettings53.getindentAmount();
        boolean boolean57 = outputSettings53.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings53.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder59 = outputSettings53.getcharsetEncoder();
        outputSettings41.setcharsetEncoder(charsetEncoder59);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings41.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings62.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder65 = outputSettings64.encoder();
        java.nio.charset.Charset charset66 = outputSettings64.getcharset();
        java.nio.charset.Charset charset67 = outputSettings64.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings36.charset(charset67);
        textNode2.outerHtmlTail(stringBuilder8, (int) (short) 100, outputSettings36);
        textNode2.setBaseUri("!");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertNotNull(charsetEncoder59);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(charsetEncoder65);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertNotNull(outputSettings68);
    }

    @Test
    public void test14631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14631");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.gettext();
        textNode2.text = "hi!";
        org.jsoup.nodes.Node node12 = textNode2.parent();
        java.lang.String str13 = textNode2.getWholeText();
        org.jsoup.nodes.Attributes attributes14 = textNode2.attributes();
        boolean boolean16 = textNode2.hasAttr("!");
        java.lang.String str18 = textNode2.absUrl("#");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test14632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14632");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        boolean boolean10 = textNode8.hasAttr("");
        java.lang.String str11 = textNode8.toString();
        org.jsoup.nodes.Node node14 = textNode8.attr("h", "");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = node14.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ext" + "'", str11, "ext");
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test14633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14633");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        boolean boolean10 = textNode2.isBlank();
        java.lang.String str11 = textNode2.baseUri();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
    }

    @Test
    public void test14634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14634");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        org.jsoup.nodes.Node node6 = textNode2.clone();
        org.jsoup.nodes.Node node7 = textNode2.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        outputSettings11.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        int int20 = outputSettings17.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings17.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        outputSettings23.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings23.setcharset(charset29);
        outputSettings22.setcharset(charset29);
        outputSettings17.setcharset(charset29);
        outputSettings11.setcharset(charset29);
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder9, 0, outputSettings11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset29);
    }

    @Test
    public void test14635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14635");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Document document1 = textNode0.ownerDocument();
        boolean boolean2 = textNode0.isBlank();
        java.lang.String str3 = textNode0.gettext();
        java.lang.String str4 = textNode0.text;
        boolean boolean5 = textNode0.isBlank();
        int int6 = textNode0.siblingIndex();
        java.lang.String str7 = textNode0.text;
        org.jsoup.nodes.TextNode textNode9 = textNode0.text("hi!");
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(textNode9);
    }

    @Test
    public void test14636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14636");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.escapeMode(escapeMode11);
        int int13 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings16.clone();
        java.nio.charset.Charset charset18 = outputSettings17.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings0.charset(charset18);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode();
        outputSettings19.forceAllElementAsBlock = true;
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.prettyPrint(false);
        int int26 = outputSettings19.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings19.getescapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNull(escapeMode20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNull(escapeMode27);
    }

    @Test
    public void test14637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14637");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node4 = textNode2.clone();
        org.jsoup.nodes.Document document5 = node4.ownerDocument();
        org.jsoup.nodes.Node node6 = node4.previousSibling();
        int int7 = node4.siblingIndex();
        java.lang.String str8 = node4.baseUri();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
    }

    @Test
    public void test14638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14638");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset3 = outputSettings0.charset;
        boolean boolean4 = outputSettings0.prettyPrint;
        outputSettings0.setforceAllElementAsBlock(true);
        outputSettings0.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings9.setcharset(charset15);
        outputSettings9.setprettyPrint(true);
        java.nio.charset.Charset charset19 = outputSettings9.getcharset();
        outputSettings9.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings9.forceAllElementAsBlock(false);
        boolean boolean24 = outputSettings9.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings25.charset = charset27;
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.encoder();
        boolean boolean30 = outputSettings25.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings25.escapeMode;
        outputSettings9.escapeMode = escapeMode31;
        outputSettings0.setescapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings0.prettyPrint(false);
        int int36 = outputSettings0.indentAmount;
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test14639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14639");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        outputSettings7.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings7.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings0.escapeMode(escapeMode22);
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings23.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings23.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings23.charsetEncoder;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(charsetEncoder26);
    }

    @Test
    public void test14640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14640");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        outputSettings10.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings10.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        boolean boolean18 = outputSettings15.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings15.prettyPrint(false);
        java.nio.charset.Charset charset21 = outputSettings15.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings15.getescapeMode();
        outputSettings10.escapeMode = escapeMode22;
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings10.escapeMode;
        org.jsoup.nodes.TextNode textNode27 = org.jsoup.nodes.TextNode.createFromEncoded("text", "text");
        java.lang.StringBuilder stringBuilder28 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings30.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings36.encoder();
        int int38 = outputSettings36.indentAmount;
        outputSettings36.setforceAllElementAsBlock(false);
        textNode27.outerHtmlTail(stringBuilder28, 0, outputSettings36);
        boolean boolean42 = outputSettings36.prettyPrint;
        java.nio.charset.Charset charset43 = outputSettings36.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        outputSettings44.setprettyPrint(false);
        java.nio.charset.Charset charset49 = outputSettings44.charset;
        outputSettings44.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings44.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings44.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings36.escapeMode(escapeMode53);
        outputSettings10.escapeMode = escapeMode53;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNull(escapeMode11);
        org.junit.Assert.assertNull(escapeMode14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(textNode27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings54);
    }

    @Test
    public void test14641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14641");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        int int9 = textNode2.siblingIndex();
        boolean boolean11 = textNode2.hasAttr("t");
        textNode2.text = "#text";
        textNode2.ensureAttributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14642");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        java.lang.String str4 = textNode0.baseUri();
        java.lang.String str5 = textNode0.text;
        org.jsoup.nodes.TextNode textNode8 = new org.jsoup.nodes.TextNode("text", "text");
        int int9 = textNode8.siblingIndex();
        int int10 = textNode8.siblingIndex();
        org.jsoup.nodes.Node node11 = textNode8.clone();
        boolean boolean12 = textNode0.equals((java.lang.Object) textNode8);
        org.jsoup.nodes.Node node13 = textNode8.nextSibling();
        textNode8.text = "t";
        org.jsoup.nodes.TextNode textNode17 = textNode8.text("");
        org.jsoup.nodes.TextNode textNode20 = new org.jsoup.nodes.TextNode("text", "text");
        int int21 = textNode20.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList22 = textNode20.childNodes();
        org.jsoup.nodes.TextNode textNode24 = textNode20.text("");
        int int25 = textNode20.siblingIndex();
        org.jsoup.nodes.TextNode textNode27 = textNode20.text("hi!");
        org.jsoup.nodes.TextNode textNode29 = textNode20.text("#text");
        java.lang.StringBuilder stringBuilder30 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings32.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.clone();
        outputSettings34.setindentAmount((int) (byte) 0);
        textNode29.outerHtmlTail(stringBuilder30, (int) '#', outputSettings34);
        boolean boolean38 = outputSettings34.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings34.encoder();
        boolean boolean40 = textNode17.equals((java.lang.Object) charsetEncoder39);
        org.jsoup.nodes.TextNode textNode42 = textNode17.text("#text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node44 = textNode17.wrap("text");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(nodeList22);
        org.junit.Assert.assertNotNull(textNode24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(textNode27);
        org.junit.Assert.assertNotNull(textNode29);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(textNode42);
    }

    @Test
    public void test14643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14643");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        boolean boolean23 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode26 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = textNode26.equals((java.lang.Object) outputSettings27);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings27.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings0.escapeMode(escapeMode30);
        boolean boolean32 = outputSettings0.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings0.encoder();
        java.nio.charset.Charset charset34 = outputSettings0.charset;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(charset34);
    }

    @Test
    public void test14644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14644");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.Document document6 = textNode0.ownerDocument();
        java.lang.String str7 = textNode0.outerHtml();
        java.lang.String str8 = textNode0.text();
        org.jsoup.nodes.Node node10 = textNode0.removeAttr("#text");
        textNode0.setBaseUri("#text");
        java.lang.String str13 = textNode0.text();
        java.lang.String str14 = textNode0.nodeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
    }

    @Test
    public void test14645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14645");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        textNode2.setBaseUri("text");
        java.lang.String str12 = textNode2.text;
        int int13 = textNode2.siblingIndex();
        java.lang.String str14 = textNode2.getWholeText();
        org.jsoup.nodes.Node node15 = textNode2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        boolean boolean19 = outputSettings16.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings16.prettyPrint(false);
        int int22 = outputSettings21.getindentAmount();
        outputSettings21.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings25.charset = charset27;
        outputSettings25.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        int int34 = outputSettings31.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings31.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        outputSettings37.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset43 = outputSettings42.charset();
        outputSettings37.setcharset(charset43);
        outputSettings36.setcharset(charset43);
        outputSettings31.setcharset(charset43);
        outputSettings25.setcharset(charset43);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset43);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        boolean boolean52 = outputSettings49.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings49.prettyPrint(false);
        int int55 = outputSettings54.getindentAmount();
        outputSettings54.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings54.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        boolean boolean62 = outputSettings59.getprettyPrint();
        boolean boolean63 = outputSettings59.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings59.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.escapeMode();
        outputSettings54.setescapeMode(escapeMode66);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings21.escapeMode(escapeMode66);
        outputSettings68.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings68.prettyPrint(true);
        boolean boolean73 = textNode2.equals((java.lang.Object) true);
        java.lang.StringBuilder stringBuilder74 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset77 = outputSettings76.charset();
        java.nio.charset.CharsetEncoder charsetEncoder78 = outputSettings76.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = null;
        outputSettings76.setescapeMode(escapeMode79);
        boolean boolean81 = outputSettings76.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset84 = outputSettings83.charset();
        outputSettings82.charset = charset84;
        outputSettings82.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder88 = outputSettings82.getcharsetEncoder();
        outputSettings76.charsetEncoder = charsetEncoder88;
        org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings76.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode92 = outputSettings76.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode93 = outputSettings76.getescapeMode();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder74, (int) 'a', outputSettings76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertNotNull(charsetEncoder78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(charset84);
        org.junit.Assert.assertNotNull(charsetEncoder88);
        org.junit.Assert.assertNotNull(outputSettings91);
        org.junit.Assert.assertNull(escapeMode92);
        org.junit.Assert.assertNull(escapeMode93);
    }

    @Test
    public void test14646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14646");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean2 = outputSettings1.prettyPrint;
        boolean boolean3 = outputSettings1.forceAllElementAsBlock;
        outputSettings1.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset7 = outputSettings6.charset();
        outputSettings1.setcharset(charset7);
        outputSettings0.setcharset(charset7);
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.indentAmount((int) (short) 1);
        int int13 = outputSettings0.getindentAmount();
        outputSettings0.setindentAmount(100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test14647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14647");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Node node9 = textNode0.nextSibling();
        java.lang.String str11 = textNode0.attr("text");
        textNode0.ensureAttributes();
        org.jsoup.nodes.Node node13 = textNode0.previousSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test14648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14648");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(false);
        outputSettings0.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset10 = outputSettings0.charset;
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings0.prettyPrint(false);
        int int14 = outputSettings13.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings13.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        boolean boolean19 = outputSettings16.getprettyPrint();
        boolean boolean20 = outputSettings16.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings16.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings16.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings16.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings25.encoder();
        outputSettings25.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset30 = outputSettings29.charset();
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings29.encoder();
        boolean boolean32 = outputSettings29.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset35 = outputSettings34.charset();
        outputSettings33.charset = charset35;
        outputSettings33.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings33.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings33.escapeMode(escapeMode40);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset44 = outputSettings43.charset();
        outputSettings42.charset = charset44;
        outputSettings42.indentAmount = (-1);
        java.nio.charset.Charset charset48 = outputSettings42.charset();
        boolean boolean49 = outputSettings42.forceAllElementAsBlock();
        java.nio.charset.Charset charset50 = outputSettings42.getcharset();
        outputSettings41.charset = charset50;
        outputSettings29.setcharset(charset50);
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings29.escapeMode();
        outputSettings25.escapeMode = escapeMode53;
        outputSettings13.escapeMode = escapeMode53;
        outputSettings13.prettyPrint = true;
        int int58 = outputSettings13.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test14649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14649");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        org.jsoup.nodes.Node node8 = textNode0.parent();
        java.lang.String str9 = textNode0.toString();
        textNode0.settext("hi!");
        org.jsoup.nodes.Node node12 = textNode0.clone();
        java.lang.String str14 = textNode0.attr("h");
        java.lang.String str15 = textNode0.text();
        java.lang.Class<?> wildcardClass16 = textNode0.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test14650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14650");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        int int10 = outputSettings6.indentAmount();
        outputSettings6.forceAllElementAsBlock = false;
        outputSettings6.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings15.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings15.prettyPrint(true);
        outputSettings15.indentAmount = (short) -1;
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        outputSettings23.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings23.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings29.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings29.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings29.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        boolean boolean37 = outputSettings34.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings34.prettyPrint(false);
        java.nio.charset.Charset charset40 = null;
        outputSettings39.setcharset(charset40);
        boolean boolean42 = outputSettings39.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings39.prettyPrint(false);
        int int45 = outputSettings39.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset48 = outputSettings47.charset();
        outputSettings46.charset = charset48;
        outputSettings46.indentAmount = (-1);
        java.nio.charset.Charset charset52 = outputSettings46.charset();
        outputSettings46.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        boolean boolean58 = outputSettings55.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings55.prettyPrint(false);
        int int61 = outputSettings60.getindentAmount();
        outputSettings60.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings60.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean66 = outputSettings65.prettyPrint;
        boolean boolean67 = outputSettings65.forceAllElementAsBlock;
        boolean boolean68 = outputSettings65.getprettyPrint();
        boolean boolean69 = outputSettings65.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings65.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings71.escapeMode();
        outputSettings60.setescapeMode(escapeMode72);
        outputSettings46.escapeMode = escapeMode72;
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings39.escapeMode(escapeMode72);
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings29.escapeMode(escapeMode72);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings15.escapeMode(escapeMode72);
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings77.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean80 = outputSettings79.prettyPrint;
        boolean boolean81 = outputSettings79.forceAllElementAsBlock;
        outputSettings79.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean85 = outputSettings84.prettyPrint;
        boolean boolean86 = outputSettings84.forceAllElementAsBlock;
        boolean boolean87 = outputSettings84.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings89 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset90 = outputSettings89.charset();
        outputSettings88.charset = charset90;
        java.nio.charset.CharsetEncoder charsetEncoder92 = outputSettings88.encoder();
        boolean boolean93 = outputSettings88.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode94 = outputSettings88.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings95 = outputSettings84.escapeMode(escapeMode94);
        org.jsoup.nodes.Document.OutputSettings outputSettings96 = outputSettings79.escapeMode(escapeMode94);
        org.jsoup.nodes.Entities.EscapeMode escapeMode97 = outputSettings79.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings98 = outputSettings77.escapeMode(escapeMode97);
        outputSettings6.setescapeMode(escapeMode97);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(charset90);
        org.junit.Assert.assertNotNull(charsetEncoder92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + escapeMode94 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode94.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings95);
        org.junit.Assert.assertNotNull(outputSettings96);
        org.junit.Assert.assertTrue("'" + escapeMode97 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode97.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings98);
    }

    @Test
    public void test14651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14651");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.toString();
        java.lang.String str8 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("h");
        java.lang.String str12 = textNode2.attr("");
        int int13 = textNode2.siblingIndex();
        java.lang.String str14 = textNode2.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node16 = textNode2.after("#text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
    }

    @Test
    public void test14652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14652");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings15.setescapeMode(escapeMode18);
        outputSettings15.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings15.setescapeMode(escapeMode22);
        boolean boolean24 = outputSettings15.forceAllElementAsBlock;
        int int25 = outputSettings15.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings15.escapeMode(escapeMode26);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings28.setescapeMode(escapeMode31);
        outputSettings28.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        outputSettings28.setescapeMode(escapeMode35);
        boolean boolean37 = outputSettings28.forceAllElementAsBlock;
        int int38 = outputSettings28.indentAmount;
        java.nio.charset.Charset charset39 = outputSettings28.getcharset();
        outputSettings27.setcharset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset39);
        outputSettings14.setindentAmount(100);
        outputSettings14.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = null;
        outputSettings46.setescapeMode(escapeMode49);
        outputSettings46.indentAmount = '4';
        java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings46.getcharsetEncoder();
        outputSettings14.setcharsetEncoder(charsetEncoder53);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings14.clone();
        java.nio.charset.CharsetEncoder charsetEncoder56 = outputSettings55.getcharsetEncoder();
        boolean boolean57 = outputSettings55.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings55.prettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charsetEncoder53);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(charsetEncoder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(outputSettings59);
    }

    @Test
    public void test14653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14653");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        boolean boolean9 = textNode2.hasAttr("text");
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        java.nio.charset.Charset charset16 = outputSettings10.charset;
        outputSettings10.setprettyPrint(false);
        java.nio.charset.Charset charset19 = outputSettings10.getcharset();
        boolean boolean20 = textNode2.equals((java.lang.Object) charset19);
        org.jsoup.nodes.Node node21 = textNode2.nextSibling();
        textNode2.settext("i!");
        org.jsoup.nodes.Attributes attributes24 = textNode2.attributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node26 = textNode2.after("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(attributes24);
    }

    @Test
    public void test14654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14654");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        org.jsoup.nodes.Node node11 = textNode2.clone();
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("text");
        boolean boolean15 = textNode13.hasAttr("ext");
        java.lang.Object obj16 = null;
        boolean boolean17 = textNode13.equals(obj16);
        java.lang.StringBuilder stringBuilder18 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        int int23 = outputSettings20.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings20.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        outputSettings26.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset32 = outputSettings31.charset();
        outputSettings26.setcharset(charset32);
        outputSettings25.setcharset(charset32);
        outputSettings20.setcharset(charset32);
        int int36 = outputSettings20.getindentAmount();
        outputSettings20.indentAmount = 'a';
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings20.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings20.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset43 = outputSettings42.charset();
        outputSettings41.charset = charset43;
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings41.encoder();
        boolean boolean46 = outputSettings41.prettyPrint;
        java.nio.charset.Charset charset47 = outputSettings41.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        outputSettings48.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset54 = outputSettings53.charset();
        outputSettings48.setcharset(charset54);
        outputSettings48.setprettyPrint(true);
        java.nio.charset.Charset charset58 = outputSettings48.getcharset();
        outputSettings48.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings48.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings62.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings41.escapeMode(escapeMode63);
        outputSettings40.setescapeMode(escapeMode63);
        textNode13.outerHtmlTail(stringBuilder18, (int) (byte) 0, outputSettings40);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings64);
    }

    @Test
    public void test14655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14655");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Node node12 = textNode2.attr("ext", "#text");
        org.jsoup.nodes.Document document13 = textNode2.ownerDocument();
        java.lang.String str14 = textNode2.getWholeText();
        java.lang.String str15 = textNode2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test14656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14656");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings12.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(true);
        org.jsoup.nodes.TextNode textNode26 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = textNode26.equals((java.lang.Object) outputSettings27);
        int int30 = outputSettings27.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings31.charsetEncoder;
        outputSettings27.setcharsetEncoder(charsetEncoder34);
        outputSettings23.charsetEncoder = charsetEncoder34;
        outputSettings23.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings23.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        outputSettings41.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset47 = outputSettings46.charset();
        outputSettings41.setcharset(charset47);
        outputSettings41.setprettyPrint(true);
        boolean boolean51 = outputSettings41.prettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings41.escapeMode;
        outputSettings40.setescapeMode(escapeMode52);
        outputSettings40.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings40.indentAmount((int) (short) 10);
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings40.getescapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14657");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("");
        textNode2.text = "h";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode9);
    }

    @Test
    public void test14658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14658");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        boolean boolean15 = outputSettings12.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings12.prettyPrint(false);
        int int18 = outputSettings17.getindentAmount();
        outputSettings17.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings21.charset = charset23;
        outputSettings21.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        int int30 = outputSettings27.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        outputSettings33.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings33.setcharset(charset39);
        outputSettings32.setcharset(charset39);
        outputSettings27.setcharset(charset39);
        outputSettings21.setcharset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings17.charset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        boolean boolean48 = outputSettings45.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings45.prettyPrint(false);
        int int51 = outputSettings50.getindentAmount();
        outputSettings50.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings50.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        boolean boolean58 = outputSettings55.getprettyPrint();
        boolean boolean59 = outputSettings55.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings55.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode();
        outputSettings50.setescapeMode(escapeMode62);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings17.escapeMode(escapeMode62);
        java.nio.charset.Charset charset65 = outputSettings64.charset();
        outputSettings0.setcharset(charset65);
        java.nio.charset.CharsetEncoder charsetEncoder67 = outputSettings0.encoder();
        org.jsoup.nodes.TextNode textNode68 = new org.jsoup.nodes.TextNode();
        textNode68.setBaseUri("hi!");
        java.lang.String str71 = textNode68.getTEXT_KEY();
        textNode68.text = "hi!";
        boolean boolean75 = textNode68.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList76 = textNode68.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean78 = outputSettings77.prettyPrint;
        boolean boolean79 = outputSettings77.forceAllElementAsBlock;
        boolean boolean80 = outputSettings77.getprettyPrint();
        boolean boolean81 = outputSettings77.forceAllElementAsBlock();
        boolean boolean82 = outputSettings77.forceAllElementAsBlock;
        boolean boolean83 = textNode68.equals((java.lang.Object) outputSettings77);
        java.nio.charset.CharsetEncoder charsetEncoder84 = outputSettings77.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder84);
        outputSettings0.indentAmount = 0;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(charsetEncoder67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "text" + "'", str71, "text");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(nodeList76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(charsetEncoder84);
    }

    @Test
    public void test14659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14659");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.prettyPrint(true);
        boolean boolean10 = outputSettings9.getforceAllElementAsBlock();
        boolean boolean11 = outputSettings9.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test14660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14660");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.absUrl("text");
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("ext");
        java.lang.String str10 = textNode2.toString();
        java.lang.String str12 = textNode2.attr("text");
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode();
        textNode13.setBaseUri("hi!");
        java.lang.String str16 = textNode13.getTEXT_KEY();
        textNode13.text = "hi!";
        boolean boolean20 = textNode13.hasAttr("text");
        org.jsoup.nodes.Node node21 = textNode13.clone();
        org.jsoup.nodes.Attributes attributes22 = textNode13.attributes();
        java.lang.String str23 = textNode13.nodeName();
        java.lang.StringBuilder stringBuilder24 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = null;
        textNode13.outerHtmlTail(stringBuilder24, (int) (byte) 10, outputSettings26);
        textNode13.settext("t");
        org.jsoup.nodes.Document document30 = textNode13.ownerDocument();
        boolean boolean31 = textNode2.equals((java.lang.Object) textNode13);
        org.jsoup.nodes.Document document32 = textNode13.ownerDocument();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(attributes22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#text" + "'", str23, "#text");
        org.junit.Assert.assertNull(document30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(document32);
    }

    @Test
    public void test14661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14661");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        java.lang.String str11 = textNode10.gettext();
        textNode10.ensureAttributes();
        java.lang.String str13 = textNode10.nodeName();
        org.jsoup.nodes.Attributes attributes14 = textNode10.attributes();
        org.jsoup.nodes.Node node17 = textNode10.attr("i!", "text");
        org.jsoup.nodes.TextNode textNode20 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str21 = textNode20.gettext();
        textNode20.text = "hi!";
        org.jsoup.nodes.Node node24 = textNode20.parent();
        java.lang.StringBuilder stringBuilder25 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        outputSettings27.setescapeMode(escapeMode30);
        outputSettings27.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings27.setescapeMode(escapeMode34);
        boolean boolean36 = outputSettings27.forceAllElementAsBlock;
        int int37 = outputSettings27.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings27.escapeMode(escapeMode38);
        int int40 = outputSettings27.getindentAmount();
        outputSettings27.indentAmount = 10;
        outputSettings27.indentAmount = (byte) 1;
        textNode20.outerHtmlTail(stringBuilder25, 97, outputSettings27);
        org.jsoup.nodes.Node node47 = textNode20.removeAttr("hi!");
        org.jsoup.nodes.Node node48 = node47.clone();
        org.jsoup.nodes.Document document49 = node47.ownerDocument();
        org.jsoup.nodes.TextNode textNode52 = new org.jsoup.nodes.TextNode("text", "text");
        int int53 = textNode52.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList54 = textNode52.siblingNodes();
        textNode52.text = "";
        java.lang.String str57 = textNode52.baseUri();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean59 = outputSettings58.prettyPrint;
        boolean boolean60 = outputSettings58.forceAllElementAsBlock;
        outputSettings58.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings58.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder65 = outputSettings64.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings64.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder68 = outputSettings64.getcharsetEncoder();
        boolean boolean69 = textNode52.equals((java.lang.Object) outputSettings64);
        org.jsoup.nodes.TextNode textNode70 = new org.jsoup.nodes.TextNode();
        textNode70.setBaseUri("hi!");
        java.lang.String str73 = textNode70.getTEXT_KEY();
        textNode70.text = "hi!";
        boolean boolean77 = textNode70.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList78 = textNode70.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean80 = outputSettings79.prettyPrint;
        boolean boolean81 = outputSettings79.forceAllElementAsBlock;
        boolean boolean82 = outputSettings79.getprettyPrint();
        boolean boolean83 = outputSettings79.forceAllElementAsBlock();
        boolean boolean84 = outputSettings79.forceAllElementAsBlock;
        boolean boolean85 = textNode70.equals((java.lang.Object) outputSettings79);
        java.nio.charset.CharsetEncoder charsetEncoder86 = outputSettings79.getcharsetEncoder();
        outputSettings79.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset89 = outputSettings79.charset();
        outputSettings64.setcharset(charset89);
        boolean boolean91 = outputSettings64.getforceAllElementAsBlock();
        int int92 = outputSettings64.getindentAmount();
        boolean boolean93 = outputSettings64.prettyPrint();
        boolean boolean94 = outputSettings64.forceAllElementAsBlock;
        boolean boolean95 = node47.equals((java.lang.Object) outputSettings64);
        // The following exception was thrown during execution in test generation
        try {
            textNode10.replaceWith(node47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ext" + "'", str11, "ext");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(document49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(nodeList54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "text" + "'", str57, "text");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(charsetEncoder65);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertNotNull(charsetEncoder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "text" + "'", str73, "text");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(nodeList78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(charsetEncoder86);
        org.junit.Assert.assertNotNull(charset89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test14662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14662");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "text");
        java.lang.String str3 = textNode2.getWholeText();
        java.lang.String str4 = textNode2.text();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.siblingNodes();
        org.jsoup.nodes.Node node8 = textNode2.attr("#", "i");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "t" + "'", str3, "t");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "t" + "'", str4, "t");
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test14663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14663");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("hi!");
        textNode2.settext("t");
        org.jsoup.nodes.Node node15 = textNode2.parent();
        // The following exception was thrown during execution in test generation
        try {
            node15.setBaseUri("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test14664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14664");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        org.jsoup.nodes.Node node3 = textNode2.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node4 = node3.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test14665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14665");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        outputSettings0.indentAmount = 'a';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        java.nio.charset.Charset charset11 = outputSettings5.charset;
        outputSettings5.setprettyPrint(false);
        java.nio.charset.Charset charset14 = outputSettings5.getcharset();
        boolean boolean15 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings16.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.clone();
        outputSettings18.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        boolean boolean24 = outputSettings21.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings21.prettyPrint(false);
        int int27 = outputSettings26.getindentAmount();
        outputSettings26.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset32 = outputSettings31.charset();
        outputSettings30.charset = charset32;
        outputSettings30.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        int int39 = outputSettings36.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings36.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        outputSettings42.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset48 = outputSettings47.charset();
        outputSettings42.setcharset(charset48);
        outputSettings41.setcharset(charset48);
        outputSettings36.setcharset(charset48);
        outputSettings30.setcharset(charset48);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings26.charset(charset48);
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        boolean boolean57 = outputSettings54.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings54.prettyPrint(false);
        int int60 = outputSettings59.getindentAmount();
        outputSettings59.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder63 = outputSettings59.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean65 = outputSettings64.prettyPrint;
        boolean boolean66 = outputSettings64.forceAllElementAsBlock;
        boolean boolean67 = outputSettings64.getprettyPrint();
        boolean boolean68 = outputSettings64.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings64.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings70.escapeMode();
        outputSettings59.setescapeMode(escapeMode71);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings26.escapeMode(escapeMode71);
        outputSettings18.setescapeMode(escapeMode71);
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings5.escapeMode(escapeMode71);
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings0.escapeMode(escapeMode71);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean78 = outputSettings77.prettyPrint;
        boolean boolean79 = outputSettings77.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = null;
        outputSettings77.setescapeMode(escapeMode80);
        outputSettings77.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = null;
        outputSettings77.setescapeMode(escapeMode84);
        outputSettings77.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder88 = outputSettings77.getcharsetEncoder();
        java.nio.charset.Charset charset89 = outputSettings77.charset;
        outputSettings76.setcharset(charset89);
        boolean boolean91 = outputSettings76.getforceAllElementAsBlock();
        outputSettings76.setprettyPrint(false);
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(charsetEncoder88);
        org.junit.Assert.assertNotNull(charset89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test14666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14666");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Document document1 = textNode0.ownerDocument();
        boolean boolean2 = textNode0.isBlank();
        textNode0.settext("text");
        org.jsoup.nodes.Node node6 = textNode0.removeAttr("#text");
        org.jsoup.nodes.Attributes attributes7 = textNode0.attributes();
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings10.setprettyPrint(true);
        java.nio.charset.Charset charset20 = outputSettings10.getcharset();
        outputSettings10.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings10.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset25 = outputSettings24.getcharset();
        outputSettings24.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings28.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        boolean boolean35 = outputSettings32.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings32.prettyPrint(false);
        java.nio.charset.Charset charset38 = outputSettings32.charset;
        outputSettings32.setprettyPrint(false);
        java.nio.charset.Charset charset41 = outputSettings32.getcharset();
        outputSettings28.setcharset(charset41);
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings28.encoder();
        outputSettings24.setcharsetEncoder(charsetEncoder43);
        int int45 = outputSettings24.indentAmount;
        textNode0.outerHtmlTail(stringBuilder8, 1, outputSettings24);
        outputSettings24.setprettyPrint(true);
        boolean boolean49 = outputSettings24.forceAllElementAsBlock();
        int int50 = outputSettings24.indentAmount;
        java.nio.charset.Charset charset51 = outputSettings24.getcharset();
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(charset51);
    }

    @Test
    public void test14667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14667");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        boolean boolean7 = textNode2.equals((java.lang.Object) 1L);
        org.jsoup.nodes.Node node10 = textNode2.attr("#text", "t");
        org.jsoup.nodes.Node node13 = textNode2.attr("text", "");
        org.jsoup.nodes.Node node14 = textNode2.clone();
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("text", "text");
        int int18 = textNode17.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList19 = textNode17.childNodes();
        org.jsoup.nodes.TextNode textNode21 = textNode17.text("");
        java.lang.String str22 = textNode21.toString();
        org.jsoup.nodes.Node node25 = textNode21.attr("text", "text");
        org.jsoup.nodes.Node node26 = textNode21.clone();
        org.jsoup.nodes.TextNode textNode29 = new org.jsoup.nodes.TextNode("text", "text");
        int int30 = textNode29.siblingIndex();
        int int31 = textNode29.siblingIndex();
        textNode29.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList33 = textNode29.childNodes();
        org.jsoup.nodes.Node node34 = textNode29.nextSibling();
        org.jsoup.nodes.TextNode textNode36 = textNode29.text("i!");
        java.lang.String str37 = textNode29.text();
        java.lang.String str38 = textNode29.text();
        boolean boolean39 = node26.equals((java.lang.Object) textNode29);
        int int40 = node26.siblingIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node41 = node14.after(node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertNotNull(textNode21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(textNode36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "i!" + "'", str37, "i!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "i!" + "'", str38, "i!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test14668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14668");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings9.getcharsetEncoder();
        outputSettings9.prettyPrint = true;
        boolean boolean17 = outputSettings9.forceAllElementAsBlock;
        textNode0.outerHtmlTail(stringBuilder7, (int) (byte) 100, outputSettings9);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings9.encoder();
        int int20 = outputSettings9.indentAmount();
        boolean boolean21 = outputSettings9.prettyPrint();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings9.charset("!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: !");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test14669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14669");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        org.jsoup.nodes.Node node8 = textNode0.parent();
        java.lang.String str9 = textNode0.baseUri();
        java.lang.String str10 = textNode0.getWholeText();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test14670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14670");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        textNode2.setBaseUri("ext");
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = null;
        textNode2.outerHtmlTail(stringBuilder6, (int) (short) 100, outputSettings8);
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("t");
        org.jsoup.nodes.TextNode textNode14 = new org.jsoup.nodes.TextNode("text", "text");
        int int15 = textNode14.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode14.childNodes();
        org.jsoup.nodes.Node node17 = textNode14.nextSibling();
        int int18 = textNode14.siblingIndex();
        org.jsoup.nodes.Node node21 = textNode14.attr("i!", "text");
        boolean boolean22 = node11.equals((java.lang.Object) textNode14);
        textNode14.settext("h");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test14671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14671");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        boolean boolean13 = outputSettings9.forceAllElementAsBlock();
        boolean boolean14 = outputSettings9.forceAllElementAsBlock;
        boolean boolean15 = textNode0.equals((java.lang.Object) outputSettings9);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings9.getcharsetEncoder();
        outputSettings9.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset19 = outputSettings9.charset();
        outputSettings9.setindentAmount((int) (byte) 10);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings9.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings23.setescapeMode(escapeMode26);
        outputSettings23.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        outputSettings23.setescapeMode(escapeMode30);
        boolean boolean32 = outputSettings23.forceAllElementAsBlock;
        int int33 = outputSettings23.indentAmount;
        java.nio.charset.Charset charset34 = outputSettings23.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        outputSettings35.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset41 = outputSettings40.charset();
        outputSettings35.setcharset(charset41);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset44 = outputSettings43.charset();
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings43.encoder();
        outputSettings35.setcharsetEncoder(charsetEncoder45);
        java.nio.charset.Charset charset47 = outputSettings35.getcharset();
        boolean boolean48 = outputSettings35.forceAllElementAsBlock();
        java.nio.charset.Charset charset49 = outputSettings35.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings23.charset(charset49);
        outputSettings50.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        boolean boolean56 = outputSettings53.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings53.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        int int62 = outputSettings59.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder63 = outputSettings59.getcharsetEncoder();
        outputSettings58.setcharsetEncoder(charsetEncoder63);
        outputSettings50.setcharsetEncoder(charsetEncoder63);
        outputSettings9.charsetEncoder = charsetEncoder63;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder63);
    }

    @Test
    public void test14672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14672");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.escapeMode(escapeMode6);
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings5.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings5.escapeMode;
        int int10 = outputSettings5.indentAmount();
        outputSettings5.indentAmount = (byte) 100;
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode();
        int int14 = textNode13.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings15.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = null;
        outputSettings18.setescapeMode(escapeMode21);
        outputSettings18.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings18.setescapeMode(escapeMode25);
        boolean boolean27 = outputSettings18.forceAllElementAsBlock;
        int int28 = outputSettings18.indentAmount;
        java.nio.charset.Charset charset29 = outputSettings18.getcharset();
        outputSettings15.charset = charset29;
        boolean boolean31 = textNode13.equals((java.lang.Object) outputSettings15);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        boolean boolean35 = outputSettings32.getprettyPrint();
        boolean boolean36 = outputSettings32.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings32.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.escapeMode();
        outputSettings38.setprettyPrint(true);
        boolean boolean42 = textNode13.equals((java.lang.Object) outputSettings38);
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings38.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        int int47 = outputSettings44.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings44.getcharsetEncoder();
        outputSettings38.setcharsetEncoder(charsetEncoder48);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        outputSettings50.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings50.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder57 = outputSettings56.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = null;
        outputSettings56.escapeMode = escapeMode58;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        outputSettings60.setprettyPrint(false);
        java.nio.charset.Charset charset65 = outputSettings60.charset;
        java.nio.charset.Charset charset66 = outputSettings60.charset;
        outputSettings56.setcharset(charset66);
        outputSettings38.setcharset(charset66);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings5.charset(charset66);
        java.nio.charset.Charset charset70 = null;
        outputSettings5.setcharset(charset70);
        boolean boolean72 = outputSettings5.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNull(escapeMode8);
        org.junit.Assert.assertNull(escapeMode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(charsetEncoder57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test14673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14673");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.Charset charset9 = outputSettings0.getcharset();
        boolean boolean10 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings11.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.clone();
        outputSettings13.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        boolean boolean19 = outputSettings16.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings16.prettyPrint(false);
        int int22 = outputSettings21.getindentAmount();
        outputSettings21.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings25.charset = charset27;
        outputSettings25.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        int int34 = outputSettings31.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings31.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        outputSettings37.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset43 = outputSettings42.charset();
        outputSettings37.setcharset(charset43);
        outputSettings36.setcharset(charset43);
        outputSettings31.setcharset(charset43);
        outputSettings25.setcharset(charset43);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset43);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        boolean boolean52 = outputSettings49.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings49.prettyPrint(false);
        int int55 = outputSettings54.getindentAmount();
        outputSettings54.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings54.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        boolean boolean62 = outputSettings59.getprettyPrint();
        boolean boolean63 = outputSettings59.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings59.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.escapeMode();
        outputSettings54.setescapeMode(escapeMode66);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings21.escapeMode(escapeMode66);
        outputSettings13.setescapeMode(escapeMode66);
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings0.escapeMode(escapeMode66);
        boolean boolean71 = outputSettings0.forceAllElementAsBlock;
        boolean boolean72 = outputSettings0.prettyPrint();
        boolean boolean73 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings0.prettyPrint(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(outputSettings75);
    }

    @Test
    public void test14674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14674");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.text;
        org.jsoup.nodes.TextNode textNode5 = textNode0.text("");
        java.lang.String str6 = textNode0.text;
        java.lang.String str8 = textNode0.attr("#text");
        java.lang.String str10 = textNode0.absUrl("t");
        java.lang.String str11 = textNode0.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode13 = textNode0.text("hi!");
        textNode0.text = "#";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNotNull(textNode13);
    }

    @Test
    public void test14675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14675");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        textNode2.setBaseUri("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.childNodes();
        org.jsoup.nodes.Node node10 = textNode2.clone();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test14676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14676");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        boolean boolean9 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        java.lang.String str11 = textNode2.text;
        org.jsoup.nodes.Node node14 = textNode2.attr("i!", "#text");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test14677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14677");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "");
        org.jsoup.nodes.Attributes attributes3 = textNode2.attributes();
        textNode2.ensureAttributes();
        boolean boolean6 = textNode2.hasAttr("ext");
        textNode2.text = "t";
        boolean boolean9 = textNode2.isBlank();
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(document10);
    }

    @Test
    public void test14678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14678");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings0.escapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings0.setescapeMode(escapeMode13);
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode();
        textNode15.setBaseUri("hi!");
        java.lang.String str18 = textNode15.getTEXT_KEY();
        textNode15.text = "hi!";
        boolean boolean22 = textNode15.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList23 = textNode15.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        boolean boolean27 = outputSettings24.getprettyPrint();
        boolean boolean28 = outputSettings24.forceAllElementAsBlock();
        boolean boolean29 = outputSettings24.forceAllElementAsBlock;
        boolean boolean30 = textNode15.equals((java.lang.Object) outputSettings24);
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings24.getcharsetEncoder();
        outputSettings24.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        outputSettings34.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        outputSettings34.setcharset(charset40);
        outputSettings34.setprettyPrint(true);
        java.nio.charset.Charset charset44 = outputSettings34.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings34.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings34.escapeMode();
        boolean boolean47 = outputSettings34.getprettyPrint();
        boolean boolean48 = outputSettings34.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings34.getescapeMode();
        outputSettings34.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings34.getescapeMode();
        outputSettings24.escapeMode = escapeMode52;
        outputSettings0.escapeMode = escapeMode52;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14679");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        java.nio.charset.Charset charset16 = outputSettings5.getcharset();
        textNode2.outerHtmlTail(stringBuilder3, (int) (short) -1, outputSettings5);
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings5.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings5.prettyPrint(true);
        boolean boolean21 = outputSettings5.prettyPrint();
        boolean boolean22 = outputSettings5.prettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings5.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(escapeMode23);
    }

    @Test
    public void test14680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14680");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings13.setescapeMode(escapeMode16);
        outputSettings13.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        outputSettings13.setescapeMode(escapeMode20);
        boolean boolean22 = outputSettings13.forceAllElementAsBlock;
        int int23 = outputSettings13.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings13.escapeMode(escapeMode24);
        int int26 = outputSettings13.getindentAmount();
        outputSettings13.indentAmount = 10;
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings13.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder29);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings31.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder39);
        boolean boolean41 = outputSettings0.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test14681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14681");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        outputSettings0.prettyPrint = false;
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings0.charsetEncoder;
        boolean boolean14 = outputSettings0.forceAllElementAsBlock;
        boolean boolean15 = outputSettings0.prettyPrint;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test14682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14682");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.nodeName();
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.childNodes();
        boolean boolean11 = textNode2.hasAttr("!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14683");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        boolean boolean7 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("t");
        java.lang.String str10 = textNode2.toString();
        java.lang.String str11 = textNode2.getTEXT_KEY();
        textNode2.settext("");
        java.lang.String str14 = textNode2.getWholeText();
        org.jsoup.nodes.Attributes attributes15 = textNode2.attributes();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        outputSettings17.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings17.setcharset(charset23);
        outputSettings16.setcharset(charset23);
        boolean boolean26 = textNode2.equals((java.lang.Object) charset23);
        java.lang.String str28 = textNode2.attr("i");
        org.jsoup.nodes.TextNode textNode31 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str32 = textNode31.gettext();
        textNode31.text = "hi!";
        org.jsoup.nodes.Node node35 = textNode31.parent();
        java.lang.StringBuilder stringBuilder36 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = null;
        outputSettings38.setescapeMode(escapeMode41);
        outputSettings38.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = null;
        outputSettings38.setescapeMode(escapeMode45);
        boolean boolean47 = outputSettings38.forceAllElementAsBlock;
        int int48 = outputSettings38.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings38.escapeMode(escapeMode49);
        int int51 = outputSettings38.getindentAmount();
        outputSettings38.indentAmount = 10;
        outputSettings38.indentAmount = (byte) 1;
        textNode31.outerHtmlTail(stringBuilder36, 97, outputSettings38);
        org.jsoup.nodes.Node node58 = textNode31.removeAttr("hi!");
        org.jsoup.nodes.Node node60 = textNode31.removeAttr("ext");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith(node60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "t" + "'", str10, "t");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "t" + "'", str14, "t");
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "text" + "'", str32, "text");
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test14684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14684");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        java.lang.String str7 = textNode2.baseUri();
        textNode2.text = "t";
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings20.encoder();
        outputSettings12.setcharsetEncoder(charsetEncoder22);
        textNode2.outerHtmlTail(stringBuilder10, 0, outputSettings12);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings12.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.indentAmount((int) (short) 100);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings26.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        int int33 = outputSettings30.getindentAmount();
        boolean boolean34 = outputSettings30.forceAllElementAsBlock;
        java.nio.charset.Charset charset35 = outputSettings30.getcharset();
        outputSettings30.setforceAllElementAsBlock(true);
        outputSettings30.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset40 = outputSettings30.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings29.charset(charset40);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(outputSettings41);
    }

    @Test
    public void test14685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14685");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        textNode2.setBaseUri("text");
        java.lang.String str8 = textNode2.getWholeText();
        java.lang.String str9 = textNode2.text();
        java.lang.String str11 = textNode2.attr("hi!");
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("ext");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode13);
    }

    @Test
    public void test14686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14686");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings0.escapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings0.charsetEncoder;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder9);
    }

    @Test
    public void test14687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14687");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = null;
        outputSettings6.setescapeMode(escapeMode9);
        outputSettings6.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings6.setescapeMode(escapeMode13);
        boolean boolean15 = outputSettings6.forceAllElementAsBlock;
        int int16 = outputSettings6.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings19.setescapeMode(escapeMode22);
        outputSettings19.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings19.setescapeMode(escapeMode26);
        boolean boolean28 = outputSettings19.forceAllElementAsBlock;
        int int29 = outputSettings19.indentAmount;
        java.nio.charset.Charset charset30 = outputSettings19.getcharset();
        outputSettings18.setcharset(charset30);
        outputSettings0.charset = charset30;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings34.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings34.forceAllElementAsBlock(true);
        outputSettings37.setindentAmount(10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(outputSettings37);
    }

    @Test
    public void test14688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14688");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        int int11 = outputSettings9.indentAmount;
        java.nio.charset.Charset charset12 = outputSettings9.charset;
        outputSettings0.charset = charset12;
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings0.getcharsetEncoder();
        outputSettings0.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings0.escapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings0.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14689");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        outputSettings11.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings11.getcharsetEncoder();
        outputSettings5.setcharsetEncoder(charsetEncoder16);
        outputSettings0.charsetEncoder = charsetEncoder16;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings19.encoder();
        boolean boolean22 = outputSettings19.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings23.charset = charset25;
        outputSettings23.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings23.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings23.escapeMode(escapeMode30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings32.charset = charset34;
        outputSettings32.indentAmount = (-1);
        java.nio.charset.Charset charset38 = outputSettings32.charset();
        boolean boolean39 = outputSettings32.forceAllElementAsBlock();
        java.nio.charset.Charset charset40 = outputSettings32.getcharset();
        outputSettings31.charset = charset40;
        outputSettings19.setcharset(charset40);
        outputSettings0.setcharset(charset40);
        java.nio.charset.Charset charset44 = outputSettings0.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        outputSettings45.setprettyPrint(false);
        int int50 = outputSettings45.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        boolean boolean54 = outputSettings51.getprettyPrint();
        boolean boolean55 = outputSettings51.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings51.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode();
        int int59 = outputSettings57.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        outputSettings60.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset66 = outputSettings65.charset();
        outputSettings60.setcharset(charset66);
        outputSettings60.setprettyPrint(true);
        java.nio.charset.Charset charset70 = outputSettings60.getcharset();
        outputSettings60.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings60.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset75 = outputSettings74.getcharset();
        outputSettings57.charset = charset75;
        outputSettings45.setcharset(charset75);
        java.nio.charset.Charset charset78 = outputSettings45.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings0.charset(charset78);
        boolean boolean80 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.indentAmount = '#';
        java.nio.charset.CharsetEncoder charsetEncoder83 = outputSettings0.getcharsetEncoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(charsetEncoder83);
    }

    @Test
    public void test14690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14690");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode6 = new org.jsoup.nodes.TextNode();
        textNode6.setBaseUri("hi!");
        java.lang.String str9 = textNode6.getTEXT_KEY();
        textNode6.text = "hi!";
        org.jsoup.nodes.TextNode textNode13 = textNode6.splitText((int) (byte) 0);
        org.jsoup.nodes.Node node16 = textNode13.attr("#text", "");
        boolean boolean17 = textNode2.equals((java.lang.Object) node16);
        java.lang.String str18 = textNode2.text;
        java.lang.String str20 = textNode2.attr("t");
        java.lang.String str21 = textNode2.toString();
        org.jsoup.nodes.Node node24 = textNode2.attr("#", "#text");
        java.lang.String str25 = textNode2.gettext();
        textNode2.settext("i!");
        org.jsoup.select.NodeVisitor nodeVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node29 = textNode2.traverse(nodeVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "text" + "'", str25, "text");
    }

    @Test
    public void test14691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14691");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.getTEXT_KEY();
        java.lang.String str11 = textNode2.absUrl("ext");
        java.lang.String str12 = textNode2.text;
        org.jsoup.nodes.Node node13 = textNode2.parent();
        textNode2.ensureAttributes();
        java.lang.String str15 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "t" + "'", str12, "t");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
    }

    @Test
    public void test14692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14692");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        outputSettings10.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings10.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        boolean boolean18 = outputSettings15.getprettyPrint();
        boolean boolean19 = outputSettings15.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings15.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode();
        outputSettings10.setescapeMode(escapeMode22);
        boolean boolean24 = outputSettings10.getforceAllElementAsBlock();
        int int25 = outputSettings10.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings10.prettyPrint(true);
        boolean boolean28 = outputSettings27.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNull(escapeMode11);
        org.junit.Assert.assertNull(escapeMode14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test14693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14693");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.text();
        org.jsoup.nodes.Node node9 = textNode7.nextSibling();
        org.jsoup.nodes.Attributes attributes10 = textNode7.attributes();
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode();
        textNode11.setBaseUri("hi!");
        java.lang.String str14 = textNode11.getTEXT_KEY();
        textNode11.text = "hi!";
        boolean boolean18 = textNode11.hasAttr("text");
        org.jsoup.nodes.Node node19 = textNode11.clone();
        org.jsoup.nodes.TextNode textNode21 = textNode11.text("ext");
        java.lang.String str22 = textNode21.gettext();
        textNode21.ensureAttributes();
        java.lang.String str24 = textNode21.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node25 = textNode7.before((org.jsoup.nodes.Node) textNode21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(textNode21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ext" + "'", str22, "ext");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#text" + "'", str24, "#text");
    }

    @Test
    public void test14694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14694");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        outputSettings1.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode4 = outputSettings1.escapeMode();
        outputSettings1.forceAllElementAsBlock = true;
        outputSettings1.prettyPrint = true;
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertTrue("'" + escapeMode4 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode4.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14695");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.String str3 = textNode2.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings4.charset = charset6;
        outputSettings4.indentAmount = (-1);
        java.nio.charset.Charset charset10 = outputSettings4.charset();
        boolean boolean11 = outputSettings4.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings4.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings4.getescapeMode();
        boolean boolean14 = textNode2.equals((java.lang.Object) escapeMode13);
        java.lang.String str16 = textNode2.absUrl("hi!");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        java.lang.StringBuilder stringBuilder18 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        boolean boolean23 = outputSettings20.getprettyPrint();
        boolean boolean24 = outputSettings20.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings20.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode();
        int int28 = outputSettings26.getindentAmount();
        java.nio.charset.Charset charset29 = outputSettings26.charset;
        outputSettings26.setindentAmount(35);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings32.charset = charset34;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings32.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings32.escapeMode();
        outputSettings26.escapeMode = escapeMode38;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings26.indentAmount((int) (byte) 10);
        textNode2.outerHtmlTail(stringBuilder18, 1, outputSettings26);
        java.lang.String str43 = textNode2.text;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test14696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14696");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        java.lang.String str4 = textNode2.attr("");
        textNode2.text = "ext";
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("t");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.String str13 = textNode12.nodeName();
        java.lang.String str15 = textNode12.absUrl("t");
        org.jsoup.nodes.Attributes attributes16 = textNode12.attributes();
        java.lang.StringBuilder stringBuilder17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        outputSettings19.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings19.setcharset(charset25);
        outputSettings19.setprettyPrint(true);
        java.nio.charset.Charset charset29 = outputSettings19.getcharset();
        outputSettings19.setprettyPrint(true);
        boolean boolean32 = outputSettings19.prettyPrint;
        boolean boolean33 = outputSettings19.forceAllElementAsBlock();
        textNode12.outerHtmlTail(stringBuilder17, 1, outputSettings19);
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test14697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14697");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        int int1 = textNode0.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        java.nio.charset.Charset charset16 = outputSettings5.getcharset();
        outputSettings2.charset = charset16;
        boolean boolean18 = textNode0.equals((java.lang.Object) outputSettings2);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode();
        outputSettings25.setprettyPrint(true);
        boolean boolean29 = textNode0.equals((java.lang.Object) outputSettings25);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings25.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings30.setescapeMode(escapeMode31);
        int int33 = outputSettings30.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings30.encoder();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder34);
    }

    @Test
    public void test14698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14698");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        java.lang.String str6 = textNode2.getTEXT_KEY();
        java.lang.String str7 = textNode2.toString();
        boolean boolean9 = textNode2.equals((java.lang.Object) (short) 0);
        java.lang.String str10 = textNode2.text;
        java.lang.String str11 = textNode2.outerHtml();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "t" + "'", str7, "t");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "t" + "'", str10, "t");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "t" + "'", str11, "t");
    }

    @Test
    public void test14699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14699");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        outputSettings0.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        boolean boolean28 = outputSettings25.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings25.prettyPrint(false);
        int int31 = outputSettings30.getindentAmount();
        outputSettings30.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings30.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder34);
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings0.encoder();
        outputSettings0.prettyPrint = true;
        int int39 = outputSettings0.indentAmount();
        int int40 = outputSettings0.indentAmount();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test14700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14700");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        int int8 = outputSettings0.getindentAmount();
        boolean boolean9 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings0.escapeMode;
        int int11 = outputSettings0.indentAmount;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test14701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14701");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder5 = null;
        outputSettings4.charsetEncoder = charsetEncoder5;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings4.prettyPrint(true);
        boolean boolean9 = outputSettings8.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test14702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14702");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("ext", "h");
        org.jsoup.nodes.Node node3 = textNode2.previousSibling();
        boolean boolean4 = textNode2.isBlank();
        int int5 = textNode2.siblingIndex();
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test14703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14703");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.gettext();
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.siblingNodes();
        org.jsoup.nodes.Node node13 = textNode2.attr("i", "ext");
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("text", "text");
        int int17 = textNode16.siblingIndex();
        textNode16.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode21 = textNode16.text("text");
        org.jsoup.nodes.Node node22 = textNode21.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList23 = textNode21.childNodes();
        org.jsoup.nodes.Node node24 = textNode21.nextSibling();
        java.util.List<org.jsoup.nodes.Node> nodeList25 = textNode21.siblingNodes();
        boolean boolean26 = node13.equals((java.lang.Object) textNode21);
        boolean boolean28 = textNode21.hasAttr("ext");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(textNode21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test14704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14704");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        java.lang.String str9 = textNode0.nodeName();
        org.jsoup.nodes.Node node10 = textNode0.clone();
        java.lang.String str11 = textNode0.gettext();
        org.jsoup.nodes.Node node12 = textNode0.clone();
        java.lang.StringBuilder stringBuilder13 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset17 = outputSettings16.charset();
        outputSettings15.charset = charset17;
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.encoder();
        boolean boolean20 = outputSettings15.prettyPrint;
        java.nio.charset.Charset charset21 = outputSettings15.charset;
        java.nio.charset.Charset charset22 = outputSettings15.getcharset();
        outputSettings15.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings25.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder30 = null;
        outputSettings29.charsetEncoder = charsetEncoder30;
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings29.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings15.escapeMode(escapeMode32);
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings15.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings15.clone();
        textNode0.outerHtmlTail(stringBuilder13, (int) (byte) 10, outputSettings15);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
    }

    @Test
    public void test14705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14705");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        org.jsoup.nodes.TextNode textNode18 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = textNode18.equals((java.lang.Object) outputSettings19);
        int int22 = outputSettings19.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings19.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.indentAmount(0);
        org.jsoup.nodes.TextNode textNode29 = new org.jsoup.nodes.TextNode();
        int int30 = textNode29.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings31.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = null;
        outputSettings34.setescapeMode(escapeMode37);
        outputSettings34.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = null;
        outputSettings34.setescapeMode(escapeMode41);
        boolean boolean43 = outputSettings34.forceAllElementAsBlock;
        int int44 = outputSettings34.indentAmount;
        java.nio.charset.Charset charset45 = outputSettings34.getcharset();
        outputSettings31.charset = charset45;
        boolean boolean47 = textNode29.equals((java.lang.Object) outputSettings31);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        boolean boolean51 = outputSettings48.getprettyPrint();
        boolean boolean52 = outputSettings48.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings48.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings54.escapeMode();
        outputSettings54.setprettyPrint(true);
        boolean boolean58 = textNode29.equals((java.lang.Object) outputSettings54);
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings54.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = null;
        outputSettings54.escapeMode = escapeMode60;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean63 = outputSettings62.prettyPrint;
        boolean boolean64 = outputSettings62.forceAllElementAsBlock;
        outputSettings62.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings62.forceAllElementAsBlock(true);
        int int69 = outputSettings62.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings62.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset72 = outputSettings71.charset();
        int int73 = outputSettings71.indentAmount;
        java.nio.charset.Charset charset74 = outputSettings71.charset;
        outputSettings62.charset = charset74;
        java.nio.charset.CharsetEncoder charsetEncoder76 = outputSettings62.getcharsetEncoder();
        outputSettings54.setcharsetEncoder(charsetEncoder76);
        outputSettings26.setcharsetEncoder(charsetEncoder76);
        java.nio.charset.Charset charset79 = outputSettings26.charset;
        outputSettings15.setcharset(charset79);
        outputSettings8.charset = charset79;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertNotNull(charsetEncoder76);
        org.junit.Assert.assertNotNull(charset79);
    }

    @Test
    public void test14706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14706");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.getWholeText();
        java.lang.String str6 = textNode2.text();
        org.jsoup.nodes.Document document7 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode9 = textNode2.splitText((int) (short) 0);
        textNode2.settext("t");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = textNode16.equals((java.lang.Object) outputSettings17);
        int int20 = outputSettings17.getindentAmount();
        outputSettings17.indentAmount = (short) -1;
        boolean boolean23 = outputSettings17.forceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder12, 10, outputSettings17);
        textNode2.setBaseUri("t");
        textNode2.text = "ext";
        org.jsoup.nodes.Node node29 = textNode2.parent();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node31 = node29.before("t");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNull(document7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node29);
    }

    @Test
    public void test14707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14707");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        boolean boolean7 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("t");
        org.jsoup.nodes.Node node10 = textNode2.clone();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("text");
        boolean boolean14 = textNode12.hasAttr("h");
        boolean boolean16 = textNode12.hasAttr("i");
        org.jsoup.nodes.Document document17 = textNode12.ownerDocument();
        java.lang.String str18 = textNode12.getTEXT_KEY();
        java.util.List<org.jsoup.nodes.Node> nodeList19 = textNode12.childNodes();
        textNode12.text = "";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertNotNull(nodeList19);
    }

    @Test
    public void test14708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14708");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        java.lang.String str8 = textNode0.getWholeText();
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = textNode11.equals((java.lang.Object) outputSettings12);
        int int15 = outputSettings12.getindentAmount();
        int int16 = outputSettings12.getindentAmount();
        boolean boolean17 = textNode0.equals((java.lang.Object) int16);
        java.lang.String str18 = textNode0.toString();
        java.lang.String str19 = textNode0.gettext();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test14709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14709");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        outputSettings14.setcharsetEncoder(charsetEncoder19);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings14.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings14.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings0.escapeMode(escapeMode22);
        outputSettings0.setprettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
    }

    @Test
    public void test14710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14710");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.indentAmount((int) '#');
        boolean boolean13 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean14 = outputSettings0.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder15 = null;
        outputSettings0.charsetEncoder = charsetEncoder15;
        int int17 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings0.prettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(outputSettings19);
    }

    @Test
    public void test14711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14711");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "t");
        textNode2.setBaseUri("ext");
        int int5 = textNode2.siblingIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node8 = textNode2.attr("", "!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test14712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14712");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        outputSettings6.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings9.setcharset(charset15);
        outputSettings9.setprettyPrint(true);
        java.nio.charset.Charset charset19 = outputSettings9.getcharset();
        outputSettings6.setcharset(charset19);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings6.escapeMode();
        int int22 = outputSettings6.getindentAmount();
        outputSettings6.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset25 = outputSettings6.charset();
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings6.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings6.forceAllElementAsBlock(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(outputSettings28);
    }

    @Test
    public void test14713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14713");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        textNode2.text = "i!";
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        java.lang.String str11 = textNode2.text();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode2.childNodes();
        org.jsoup.nodes.Node node14 = textNode2.removeAttr("h");
        textNode2.text = "#";
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test14714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14714");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.String str8 = textNode2.absUrl("ext");
        textNode2.settext("hi!");
        int int11 = textNode2.siblingIndex();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test14715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14715");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.baseUri();
        org.jsoup.nodes.Node node6 = textNode2.clone();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings9.setcharset(charset15);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings17.encoder();
        outputSettings9.setcharsetEncoder(charsetEncoder19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        int int24 = outputSettings21.getindentAmount();
        boolean boolean25 = outputSettings21.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings21.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings21.getcharsetEncoder();
        outputSettings9.setcharsetEncoder(charsetEncoder27);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings9.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.prettyPrint(true);
        boolean boolean33 = outputSettings30.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings30.indentAmount((int) (short) 100);
        int int36 = outputSettings35.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder7, (int) (short) 100, outputSettings35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
    }

    @Test
    public void test14716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14716");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings9.setcharset(charset15);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings17.encoder();
        outputSettings9.setcharsetEncoder(charsetEncoder19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        int int24 = outputSettings21.getindentAmount();
        boolean boolean25 = outputSettings21.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings21.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings21.getcharsetEncoder();
        outputSettings9.setcharsetEncoder(charsetEncoder27);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings9.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings32.encoder();
        textNode2.outerHtmlTail(stringBuilder7, (-1), outputSettings32);
        textNode2.settext("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node38 = textNode2.wrap("i");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNotNull(nodeList6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
    }

    @Test
    public void test14717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14717");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        java.lang.String str8 = textNode2.baseUri();
        textNode2.settext("hi!");
        java.lang.String str11 = textNode2.text;
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode2.childNodes();
        java.lang.String str13 = textNode2.outerHtml();
        java.lang.String str14 = textNode2.text();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        outputSettings15.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings15.setcharset(charset21);
        outputSettings15.setprettyPrint(true);
        java.nio.charset.Charset charset25 = outputSettings15.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings15.charsetEncoder;
        int int27 = outputSettings15.indentAmount();
        int int28 = outputSettings15.getindentAmount();
        boolean boolean29 = textNode2.equals((java.lang.Object) outputSettings15);
        java.nio.charset.Charset charset30 = outputSettings15.charset();
        outputSettings15.indentAmount = 97;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charset30);
    }

    @Test
    public void test14718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14718");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node6 = textNode2.attr("#text", "text");
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings9.setcharset(charset16);
        textNode2.outerHtmlTail(stringBuilder7, 0, outputSettings9);
        org.jsoup.nodes.Node node20 = textNode2.parent();
        boolean boolean22 = textNode2.hasAttr("#");
        java.lang.String str23 = textNode2.text;
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test14719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14719");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        java.lang.String str3 = textNode2.toString();
        textNode2.settext("");
        org.jsoup.nodes.Attributes attributes6 = textNode2.attributes();
        org.jsoup.nodes.Node node7 = textNode2.clone();
        org.jsoup.nodes.Node node8 = node7.nextSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test14720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14720");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        boolean boolean13 = outputSettings9.forceAllElementAsBlock();
        boolean boolean14 = outputSettings9.forceAllElementAsBlock;
        boolean boolean15 = textNode0.equals((java.lang.Object) outputSettings9);
        org.jsoup.nodes.Attributes attributes16 = textNode0.attributes();
        java.lang.String str17 = textNode0.outerHtml();
        java.lang.String str18 = textNode0.nodeName();
        org.jsoup.nodes.TextNode textNode20 = textNode0.text("i!");
        java.lang.String str22 = textNode20.attr("i!");
        org.jsoup.nodes.Node node23 = textNode20.parent();
        java.lang.String str24 = textNode20.nodeName();
        org.jsoup.nodes.TextNode textNode27 = new org.jsoup.nodes.TextNode("text", "text");
        int int28 = textNode27.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList29 = textNode27.childNodes();
        org.jsoup.nodes.TextNode textNode31 = textNode27.text("");
        int int32 = textNode27.siblingIndex();
        org.jsoup.nodes.TextNode textNode34 = textNode27.text("hi!");
        java.lang.String str36 = textNode27.absUrl("text");
        textNode27.text = "#text";
        java.lang.String str39 = textNode27.baseUri();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node40 = textNode20.after((org.jsoup.nodes.Node) textNode27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#text" + "'", str18, "#text");
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#text" + "'", str24, "#text");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertNotNull(textNode31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(textNode34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "text" + "'", str39, "text");
    }

    @Test
    public void test14721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14721");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setforceAllElementAsBlock(true);
        boolean boolean9 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.clone();
        java.nio.charset.Charset charset11 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings0.prettyPrint(false);
        boolean boolean14 = outputSettings0.prettyPrint();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test14722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14722");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        boolean boolean15 = outputSettings11.getforceAllElementAsBlock();
        outputSettings11.setprettyPrint(false);
        textNode6.outerHtmlTail(stringBuilder9, (int) '#', outputSettings11);
        textNode6.settext("ext");
        java.lang.StringBuilder stringBuilder21 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings23.setescapeMode(escapeMode26);
        outputSettings23.indentAmount = '4';
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings23.prettyPrint(false);
        boolean boolean32 = outputSettings23.forceAllElementAsBlock();
        textNode6.outerHtmlTail(stringBuilder21, (int) (short) 100, outputSettings23);
        org.jsoup.nodes.TextNode textNode35 = textNode6.text("hi!");
        org.jsoup.nodes.Node node37 = textNode35.removeAttr("!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(textNode35);
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test14723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14723");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        java.lang.String str7 = textNode2.gettext();
        java.lang.String str8 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode10 = textNode2.splitText((int) (byte) 1);
        org.jsoup.select.NodeVisitor nodeVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = textNode10.traverse(nodeVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(textNode10);
    }

    @Test
    public void test14724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14724");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode4 = outputSettings0.escapeMode;
        outputSettings0.forceAllElementAsBlock = false;
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + escapeMode4 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode4.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14725");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        outputSettings8.setprettyPrint(false);
        java.nio.charset.Charset charset27 = outputSettings8.charset;
        java.nio.charset.Charset charset28 = outputSettings8.charset;
        java.nio.charset.Charset charset29 = outputSettings8.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings8.clone();
        boolean boolean31 = outputSettings8.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test14726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14726");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        outputSettings0.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings20.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings23.charset = charset25;
        outputSettings23.indentAmount = (-1);
        java.nio.charset.Charset charset29 = outputSettings23.charset();
        outputSettings23.setforceAllElementAsBlock(true);
        boolean boolean32 = outputSettings23.getprettyPrint();
        outputSettings23.setforceAllElementAsBlock(true);
        int int35 = outputSettings23.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        outputSettings36.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings36.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings42.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings42.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        outputSettings46.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset52 = outputSettings51.charset();
        outputSettings46.setcharset(charset52);
        outputSettings42.charset = charset52;
        outputSettings23.setcharset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings20.charset(charset52);
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings56);
    }

    @Test
    public void test14727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14727");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        outputSettings0.indentAmount = 'a';
        outputSettings0.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings10.setescapeMode(escapeMode13);
        outputSettings10.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings10.setescapeMode(escapeMode17);
        boolean boolean19 = outputSettings10.forceAllElementAsBlock;
        int int20 = outputSettings10.indentAmount;
        java.nio.charset.Charset charset21 = outputSettings10.getcharset();
        outputSettings7.charset = charset21;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings7.escapeMode();
        java.nio.charset.Charset charset24 = outputSettings7.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings7.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder25);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings27.charset = charset29;
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.encoder();
        outputSettings27.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset34 = outputSettings27.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings0.charset(charset34);
        outputSettings0.indentAmount = '4';
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings0.indentAmount(35);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        outputSettings41.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings41.indentAmount(1);
        outputSettings41.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings50.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = null;
        outputSettings53.setescapeMode(escapeMode56);
        outputSettings53.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = null;
        outputSettings53.setescapeMode(escapeMode60);
        outputSettings53.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings53.getcharsetEncoder();
        outputSettings50.charsetEncoder = charsetEncoder64;
        outputSettings41.charsetEncoder = charsetEncoder64;
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings41.clone();
        boolean boolean68 = outputSettings67.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings67.getescapeMode();
        outputSettings0.escapeMode = escapeMode69;
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14728");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.splitText((int) (short) 0);
        textNode6.settext("h");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertNotNull(textNode6);
    }

    @Test
    public void test14729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14729");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.forceAllElementAsBlock(true);
        outputSettings6.indentAmount = 0;
        int int9 = outputSettings6.getindentAmount();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test14730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14730");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("ext", "h");
        org.jsoup.nodes.Node node3 = textNode2.previousSibling();
        boolean boolean4 = textNode2.isBlank();
        org.jsoup.nodes.TextNode textNode6 = textNode2.splitText(1);
        boolean boolean8 = textNode2.hasAttr("hi!");
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test14731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14731");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        textNode2.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode2.childNodes();
        org.jsoup.nodes.Node node8 = textNode2.removeAttr("text");
        org.jsoup.nodes.Node node9 = node8.clone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test14732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14732");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode2.siblingNodes();
        boolean boolean8 = textNode2.hasAttr("h");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.siblingNodes();
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("t");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNotNull(nodeList6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test14733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14733");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.getWholeText();
        textNode2.settext("h");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        org.jsoup.nodes.Node node11 = textNode2.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode2.siblingNodes();
        java.lang.String str13 = textNode2.gettext();
        org.jsoup.nodes.Node node16 = textNode2.attr("h", "i!");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "h" + "'", str13, "h");
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test14734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14734");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.escapeMode(escapeMode6);
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings5.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings5.escapeMode;
        int int10 = outputSettings5.indentAmount();
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = textNode13.equals((java.lang.Object) outputSettings14);
        int int17 = outputSettings14.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset24 = outputSettings23.charset();
        outputSettings18.setcharset(charset24);
        outputSettings18.setprettyPrint(true);
        java.nio.charset.Charset charset28 = outputSettings18.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings18.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings18.escapeMode();
        boolean boolean31 = outputSettings18.getprettyPrint();
        boolean boolean32 = outputSettings18.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings18.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings14.escapeMode(escapeMode33);
        outputSettings5.escapeMode = escapeMode33;
        int int36 = outputSettings5.indentAmount;
        outputSettings5.prettyPrint = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNull(escapeMode8);
        org.junit.Assert.assertNull(escapeMode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test14735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14735");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings14.setindentAmount((int) (short) -1);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings14.indentAmount((int) (short) 1);
        boolean boolean19 = outputSettings14.getforceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings14.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings14.forceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertNotNull(outputSettings22);
    }

    @Test
    public void test14736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14736");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str9 = textNode0.attr("text");
        java.lang.String str10 = textNode0.nodeName();
        org.jsoup.nodes.Node node11 = textNode0.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = node11.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test14737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14737");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.prettyPrint(false);
        outputSettings8.forceAllElementAsBlock = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings8);
    }

    @Test
    public void test14738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14738");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        boolean boolean7 = outputSettings3.getforceAllElementAsBlock();
        boolean boolean8 = outputSettings3.forceAllElementAsBlock();
        outputSettings3.prettyPrint = false;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test14739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14739");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings6.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings6.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings6.prettyPrint(false);
        outputSettings11.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings11.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(charsetEncoder14);
    }

    @Test
    public void test14740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14740");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.absUrl("text");
        textNode2.setBaseUri("#text");
        textNode2.setBaseUri("i!");
        java.lang.String str10 = textNode2.baseUri();
        java.lang.String str11 = textNode2.nodeName();
        org.jsoup.nodes.Node node12 = textNode2.nextSibling();
        java.lang.String str14 = textNode2.absUrl("i!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "i!" + "'", str10, "i!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test14741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14741");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings9.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        outputSettings15.setprettyPrint(false);
        outputSettings15.setindentAmount(0);
        outputSettings15.indentAmount = (byte) 1;
        java.nio.charset.Charset charset24 = outputSettings15.getcharset();
        outputSettings9.setcharset(charset24);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        boolean boolean32 = outputSettings29.getprettyPrint();
        boolean boolean33 = outputSettings29.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings29.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings29.getescapeMode();
        outputSettings28.setescapeMode(escapeMode36);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings28.indentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        outputSettings40.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings40.setcharset(charset46);
        outputSettings40.setprettyPrint(true);
        java.nio.charset.Charset charset50 = outputSettings40.getcharset();
        outputSettings40.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings40.forceAllElementAsBlock(false);
        boolean boolean55 = outputSettings40.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings56.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = null;
        outputSettings59.setescapeMode(escapeMode62);
        outputSettings59.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = null;
        outputSettings59.setescapeMode(escapeMode66);
        boolean boolean68 = outputSettings59.forceAllElementAsBlock;
        int int69 = outputSettings59.indentAmount;
        java.nio.charset.Charset charset70 = outputSettings59.getcharset();
        outputSettings56.charset = charset70;
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings56.escapeMode();
        outputSettings40.escapeMode = escapeMode72;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings39.escapeMode(escapeMode72);
        java.nio.charset.CharsetEncoder charsetEncoder75 = outputSettings39.charsetEncoder;
        outputSettings9.charsetEncoder = charsetEncoder75;
        outputSettings0.charsetEncoder = charsetEncoder75;
        outputSettings0.setforceAllElementAsBlock(true);
        outputSettings0.forceAllElementAsBlock = false;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(charsetEncoder75);
    }

    @Test
    public void test14742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14742");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        boolean boolean7 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.encoder();
        boolean boolean13 = outputSettings8.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings8.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.escapeMode(escapeMode14);
        boolean boolean16 = outputSettings15.forceAllElementAsBlock();
        boolean boolean17 = outputSettings15.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode18 = new org.jsoup.nodes.TextNode();
        textNode18.setBaseUri("hi!");
        java.lang.String str21 = textNode18.getTEXT_KEY();
        textNode18.text = "hi!";
        java.lang.String str24 = textNode18.getWholeText();
        java.lang.StringBuilder stringBuilder25 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        outputSettings27.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings27.getcharsetEncoder();
        outputSettings27.prettyPrint = true;
        boolean boolean35 = outputSettings27.forceAllElementAsBlock;
        textNode18.outerHtmlTail(stringBuilder25, (int) (byte) 100, outputSettings27);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        boolean boolean40 = outputSettings37.getprettyPrint();
        boolean boolean41 = outputSettings37.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings37.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings43.escapeMode();
        outputSettings43.setprettyPrint(true);
        int int47 = outputSettings43.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings43.encoder();
        outputSettings27.setcharsetEncoder(charsetEncoder48);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings50.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings50.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder55 = outputSettings50.getcharsetEncoder();
        outputSettings27.setcharsetEncoder(charsetEncoder55);
        outputSettings15.setcharsetEncoder(charsetEncoder55);
        boolean boolean58 = outputSettings15.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings15.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = outputSettings60.getescapeMode();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charsetEncoder32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertNotNull(charsetEncoder55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14743");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        boolean boolean7 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.encoder();
        boolean boolean13 = outputSettings8.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings8.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.escapeMode(escapeMode14);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings17.setforceAllElementAsBlock(false);
        outputSettings17.setprettyPrint(false);
        java.nio.charset.Charset charset22 = outputSettings17.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings17.prettyPrint(false);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings24);
    }

    @Test
    public void test14744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14744");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        textNode2.setBaseUri("text");
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("t");
        org.jsoup.nodes.Attributes attributes13 = textNode2.attributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(attributes13);
    }

    @Test
    public void test14745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14745");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        boolean boolean9 = outputSettings0.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings11.setescapeMode(escapeMode14);
        outputSettings11.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings11.setescapeMode(escapeMode18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings11.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        outputSettings21.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        boolean boolean29 = outputSettings26.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings26.prettyPrint(false);
        java.nio.charset.Charset charset32 = outputSettings26.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings26.getescapeMode();
        outputSettings21.escapeMode = escapeMode33;
        boolean boolean35 = outputSettings21.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        boolean boolean39 = outputSettings36.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings36.prettyPrint(false);
        java.nio.charset.Charset charset42 = outputSettings36.charset();
        outputSettings21.charset = charset42;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings0.charset(charset42);
        boolean boolean45 = outputSettings44.prettyPrint();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNull(escapeMode22);
        org.junit.Assert.assertNull(escapeMode25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test14746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14746");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("t", "t");
        textNode2.ensureAttributes();
        java.lang.String str4 = textNode2.getTEXT_KEY();
        java.lang.String str5 = textNode2.text();
        java.lang.String str6 = textNode2.baseUri();
        org.jsoup.nodes.Node node9 = textNode2.attr("text", "ext");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "text" + "'", str4, "text");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "t" + "'", str5, "t");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "t" + "'", str6, "t");
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test14747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14747");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        int int6 = outputSettings5.getindentAmount();
        outputSettings5.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        outputSettings9.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings20.setcharset(charset27);
        outputSettings15.setcharset(charset27);
        outputSettings9.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings5.charset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        int int39 = outputSettings38.getindentAmount();
        outputSettings38.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        boolean boolean47 = outputSettings43.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings43.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings49.escapeMode();
        outputSettings38.setescapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings5.escapeMode(escapeMode50);
        java.nio.charset.Charset charset53 = outputSettings52.getcharset();
        outputSettings52.prettyPrint = false;
        int int56 = outputSettings52.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
    }

    @Test
    public void test14748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14748");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.String str3 = textNode2.nodeName();
        java.lang.String str5 = textNode2.absUrl("t");
        textNode2.ensureAttributes();
        java.lang.String str7 = textNode2.getWholeText();
        java.lang.String str8 = textNode2.baseUri();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "t" + "'", str8, "t");
    }

    @Test
    public void test14749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14749");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str9 = textNode0.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.forceAllElementAsBlock(false);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings42);
        boolean boolean46 = outputSettings42.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings42.forceAllElementAsBlock(false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(outputSettings48);
    }

    @Test
    public void test14750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14750");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        java.lang.String str7 = textNode2.gettext();
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("!");
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        boolean boolean15 = outputSettings12.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings12.prettyPrint(false);
        java.nio.charset.Charset charset18 = null;
        outputSettings17.setcharset(charset18);
        java.nio.charset.Charset charset20 = outputSettings17.getcharset();
        textNode2.outerHtmlTail(stringBuilder10, 1, outputSettings17);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNull(charset20);
    }

    @Test
    public void test14751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14751");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "hi!");
        org.jsoup.nodes.Attributes attributes3 = textNode2.attributes();
        java.lang.String str4 = textNode2.getWholeText();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test14752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14752");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        java.lang.String str8 = textNode2.baseUri();
        textNode2.settext("hi!");
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("#");
        textNode12.settext("!");
        java.lang.String str15 = textNode12.outerHtml();
        java.lang.StringBuilder stringBuilder16 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings18.forceAllElementAsBlock(true);
        int int25 = outputSettings18.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings18.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.forceAllElementAsBlock(true);
        outputSettings28.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        boolean boolean34 = outputSettings31.getprettyPrint();
        boolean boolean35 = outputSettings31.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings31.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings31.getescapeMode();
        outputSettings28.escapeMode = escapeMode38;
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings28.escapeMode();
        textNode12.outerHtmlTail(stringBuilder16, (int) 'a', outputSettings28);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "!" + "'", str15, "!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14753");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        java.lang.String str11 = textNode2.getWholeText();
        int int12 = textNode2.siblingIndex();
        java.lang.String str13 = textNode2.toString();
        boolean boolean15 = textNode2.hasAttr("i");
        java.lang.Class<?> wildcardClass16 = textNode2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test14754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14754");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "#text");
        org.jsoup.nodes.Node node4 = textNode2.removeAttr("i");
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test14755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14755");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.gettext();
        textNode2.text = "#text";
        java.lang.String str8 = textNode2.outerHtml();
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode();
        textNode9.setBaseUri("hi!");
        java.lang.String str12 = textNode9.getTEXT_KEY();
        textNode9.text = "hi!";
        boolean boolean16 = textNode9.hasAttr("text");
        org.jsoup.nodes.Node node17 = textNode9.clone();
        org.jsoup.nodes.TextNode textNode19 = textNode9.text("ext");
        java.lang.String str20 = textNode19.gettext();
        java.lang.String str22 = textNode19.attr("i");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node23 = textNode2.before((org.jsoup.nodes.Node) textNode19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(textNode19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ext" + "'", str20, "ext");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test14756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14756");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.escapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        boolean boolean14 = outputSettings11.getprettyPrint();
        boolean boolean15 = outputSettings11.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings11.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings11.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings11.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        boolean boolean24 = outputSettings21.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings21.prettyPrint(false);
        java.nio.charset.Charset charset27 = outputSettings21.charset();
        outputSettings20.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings0.charset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings30.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings36.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings36.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings36.getcharsetEncoder();
        outputSettings29.charsetEncoder = charsetEncoder40;
        boolean boolean42 = outputSettings29.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings29.indentAmount(52);
        boolean boolean45 = outputSettings44.getforceAllElementAsBlock();
        int int46 = outputSettings44.indentAmount();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
    }

    @Test
    public void test14757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14757");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        boolean boolean10 = outputSettings0.prettyPrint();
        outputSettings0.setindentAmount(0);
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings0.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        outputSettings17.setescapeMode(escapeMode20);
        outputSettings17.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = null;
        outputSettings17.setescapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings17.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.escapeMode;
        outputSettings27.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings27.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        boolean boolean35 = outputSettings32.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings32.prettyPrint(false);
        java.nio.charset.Charset charset38 = outputSettings32.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings32.getescapeMode();
        outputSettings27.escapeMode = escapeMode39;
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings27.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings27.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings27.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings44.escapeMode();
        outputSettings27.escapeMode = escapeMode46;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings16.escapeMode(escapeMode46);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        outputSettings49.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset55 = outputSettings54.charset();
        outputSettings49.setcharset(charset55);
        outputSettings49.setprettyPrint(true);
        java.nio.charset.Charset charset59 = outputSettings49.getcharset();
        outputSettings49.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings49.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean65 = outputSettings64.prettyPrint;
        boolean boolean66 = outputSettings64.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = null;
        outputSettings64.setescapeMode(escapeMode67);
        outputSettings64.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = null;
        outputSettings64.setescapeMode(escapeMode71);
        boolean boolean73 = outputSettings64.forceAllElementAsBlock;
        int int74 = outputSettings64.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode75 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings64.escapeMode(escapeMode75);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean78 = outputSettings77.prettyPrint;
        boolean boolean79 = outputSettings77.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = null;
        outputSettings77.setescapeMode(escapeMode80);
        outputSettings77.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = null;
        outputSettings77.setescapeMode(escapeMode84);
        boolean boolean86 = outputSettings77.forceAllElementAsBlock;
        int int87 = outputSettings77.indentAmount;
        java.nio.charset.Charset charset88 = outputSettings77.getcharset();
        outputSettings76.setcharset(charset88);
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings63.charset(charset88);
        boolean boolean91 = outputSettings90.forceAllElementAsBlock;
        java.nio.charset.Charset charset92 = outputSettings90.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings48.charset(charset92);
        java.nio.charset.CharsetEncoder charsetEncoder94 = null;
        outputSettings93.setcharsetEncoder(charsetEncoder94);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNull(escapeMode28);
        org.junit.Assert.assertNull(escapeMode31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertNotNull(charset88);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(charset92);
        org.junit.Assert.assertNotNull(outputSettings93);
    }

    @Test
    public void test14758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14758");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        org.jsoup.nodes.Node node7 = textNode2.clone();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        java.lang.String str10 = textNode2.attr("hi!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test14759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14759");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset19 = outputSettings0.charset;
        int int20 = outputSettings0.indentAmount();
        int int21 = outputSettings0.getindentAmount();
        outputSettings0.setprettyPrint(true);
        outputSettings0.indentAmount = '#';
        java.nio.charset.Charset charset26 = outputSettings0.charset;
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charset26);
    }

    @Test
    public void test14760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14760");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        outputSettings7.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings7.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        outputSettings22.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings22.setescapeMode(escapeMode29);
        boolean boolean31 = outputSettings22.forceAllElementAsBlock;
        int int32 = outputSettings22.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings22.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings35.setescapeMode(escapeMode38);
        outputSettings35.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings35.setescapeMode(escapeMode42);
        boolean boolean44 = outputSettings35.forceAllElementAsBlock;
        int int45 = outputSettings35.indentAmount;
        java.nio.charset.Charset charset46 = outputSettings35.getcharset();
        outputSettings34.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset46);
        int int49 = outputSettings48.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 0, outputSettings48);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        boolean boolean54 = outputSettings51.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings51.prettyPrint(false);
        boolean boolean57 = outputSettings56.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean59 = outputSettings58.prettyPrint;
        boolean boolean60 = outputSettings58.forceAllElementAsBlock;
        boolean boolean61 = outputSettings58.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings58.prettyPrint(false);
        int int64 = outputSettings63.getindentAmount();
        outputSettings63.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset69 = outputSettings68.charset();
        outputSettings67.charset = charset69;
        outputSettings67.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        int int76 = outputSettings73.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder77 = outputSettings73.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean80 = outputSettings79.prettyPrint;
        boolean boolean81 = outputSettings79.forceAllElementAsBlock;
        outputSettings79.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset85 = outputSettings84.charset();
        outputSettings79.setcharset(charset85);
        outputSettings78.setcharset(charset85);
        outputSettings73.setcharset(charset85);
        outputSettings67.setcharset(charset85);
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings63.charset(charset85);
        java.nio.charset.CharsetEncoder charsetEncoder91 = outputSettings63.getcharsetEncoder();
        outputSettings56.charsetEncoder = charsetEncoder91;
        outputSettings48.setcharsetEncoder(charsetEncoder91);
        java.nio.charset.CharsetEncoder charsetEncoder94 = outputSettings48.encoder();
        outputSettings48.setforceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charset85);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertNotNull(charsetEncoder91);
        org.junit.Assert.assertNotNull(charsetEncoder94);
    }

    @Test
    public void test14761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14761");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        textNode2.setBaseUri("ext");
        textNode2.settext("text");
        java.lang.String str8 = textNode2.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode10 = textNode2.splitText((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
    }

    @Test
    public void test14762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14762");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        org.jsoup.nodes.Node node9 = textNode7.previousSibling();
        org.jsoup.nodes.Node node12 = textNode7.attr("text", "text");
        java.lang.String str14 = textNode7.attr("#text");
        java.lang.String str15 = textNode7.text;
        org.jsoup.nodes.Node node16 = textNode7.parent();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document17 = node16.ownerDocument();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test14763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14763");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        outputSettings0.setprettyPrint(false);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        boolean boolean10 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings12.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings18.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings0.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        int int27 = outputSettings24.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings30.setcharset(charset36);
        outputSettings29.setcharset(charset36);
        outputSettings24.setcharset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        boolean boolean43 = outputSettings40.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings40.prettyPrint(false);
        java.nio.charset.Charset charset46 = outputSettings40.charset;
        outputSettings40.setprettyPrint(false);
        boolean boolean49 = outputSettings40.forceAllElementAsBlock;
        boolean boolean50 = outputSettings40.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings40.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings24.escapeMode(escapeMode51);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings0.escapeMode(escapeMode51);
        outputSettings53.setindentAmount((int) (short) 100);
        boolean boolean56 = outputSettings53.getprettyPrint();
        java.nio.charset.Charset charset57 = outputSettings53.charset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charset57);
    }

    @Test
    public void test14764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14764");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setforceAllElementAsBlock(true);
        boolean boolean9 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.clone();
        java.nio.charset.Charset charset11 = outputSettings0.charset;
        java.nio.charset.Charset charset12 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = (short) 10;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings13.escapeMode;
        boolean boolean19 = outputSettings13.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings20.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        outputSettings23.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings23.setcharset(charset29);
        outputSettings23.setprettyPrint(true);
        boolean boolean33 = outputSettings23.prettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings23.escapeMode;
        outputSettings20.escapeMode = escapeMode34;
        java.nio.charset.Charset charset36 = outputSettings20.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings13.charset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings0.charset(charset36);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(outputSettings38);
    }

    @Test
    public void test14765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14765");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.getWholeText();
        boolean boolean7 = textNode2.hasAttr("");
        java.lang.String str8 = textNode2.getWholeText();
        java.lang.String str9 = textNode2.text;
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("h");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test14766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14766");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        boolean boolean7 = outputSettings3.getforceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings3.getcharsetEncoder();
        outputSettings3.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings3.clone();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(outputSettings11);
    }

    @Test
    public void test14767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14767");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("#text");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        outputSettings16.setindentAmount((int) (byte) 0);
        textNode11.outerHtmlTail(stringBuilder12, (int) '#', outputSettings16);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings16.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset22 = outputSettings16.charset();
        outputSettings16.indentAmount = (byte) 100;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        boolean boolean28 = outputSettings25.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings25.prettyPrint(false);
        int int31 = outputSettings30.getindentAmount();
        outputSettings30.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings30.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        boolean boolean38 = outputSettings35.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings35.prettyPrint(false);
        java.nio.charset.Charset charset41 = outputSettings35.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings30.charset(charset41);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings16.charset(charset41);
        outputSettings16.setprettyPrint(true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings43);
    }

    @Test
    public void test14768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14768");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.charsetEncoder;
        outputSettings0.setprettyPrint(false);
        int int7 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.clone();
        outputSettings0.setforceAllElementAsBlock(true);
        outputSettings0.prettyPrint = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(outputSettings9);
    }

    @Test
    public void test14769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14769");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("ext", "text");
        java.lang.String str4 = textNode2.attr("#text");
        org.jsoup.nodes.Node node6 = textNode2.removeAttr("ext");
        org.jsoup.nodes.Node node7 = textNode2.clone();
        java.lang.String str8 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("text", "text");
        int int12 = textNode11.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode11.childNodes();
        org.jsoup.nodes.TextNode textNode15 = textNode11.text("");
        java.lang.String str16 = textNode15.toString();
        java.lang.String str17 = textNode15.getWholeText();
        org.jsoup.nodes.Node node18 = textNode15.nextSibling();
        java.lang.Class<?> wildcardClass19 = textNode15.getClass();
        boolean boolean20 = textNode2.equals((java.lang.Object) wildcardClass19);
        java.lang.String str21 = textNode2.getTEXT_KEY();
        java.lang.String str22 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList23 = textNode2.childNodes();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ext" + "'", str8, "ext");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
        org.junit.Assert.assertNotNull(nodeList23);
    }

    @Test
    public void test14770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14770");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings14.setforceAllElementAsBlock(false);
        outputSettings14.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        java.nio.charset.Charset charset25 = outputSettings19.charset();
        outputSettings19.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        boolean boolean31 = outputSettings28.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings28.prettyPrint(false);
        int int34 = outputSettings33.getindentAmount();
        outputSettings33.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings33.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        boolean boolean41 = outputSettings38.getprettyPrint();
        boolean boolean42 = outputSettings38.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings38.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings44.escapeMode();
        outputSettings33.setescapeMode(escapeMode45);
        outputSettings19.escapeMode = escapeMode45;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings14.escapeMode(escapeMode45);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings48.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        outputSettings51.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset58 = outputSettings57.charset();
        outputSettings56.charset = charset58;
        java.nio.charset.CharsetEncoder charsetEncoder60 = outputSettings56.encoder();
        boolean boolean61 = outputSettings56.prettyPrint;
        java.nio.charset.Charset charset62 = outputSettings56.charset;
        java.nio.charset.Charset charset63 = outputSettings56.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings56.getescapeMode();
        outputSettings51.escapeMode = escapeMode64;
        outputSettings50.setescapeMode(escapeMode64);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(charsetEncoder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14771");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        boolean boolean23 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode26 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = textNode26.equals((java.lang.Object) outputSettings27);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings27.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings0.escapeMode(escapeMode30);
        java.nio.charset.Charset charset32 = outputSettings0.charset;
        boolean boolean33 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings0.prettyPrint(false);
        java.lang.Class<?> wildcardClass36 = outputSettings0.getClass();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test14772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14772");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings4.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings4.prettyPrint(true);
        boolean boolean9 = outputSettings8.prettyPrint();
        boolean boolean10 = outputSettings8.getforceAllElementAsBlock();
        boolean boolean11 = textNode2.equals((java.lang.Object) outputSettings8);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.prettyPrint();
        java.nio.charset.Charset charset15 = outputSettings12.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings8.charset(charset15);
        java.nio.charset.Charset charset17 = outputSettings16.charset;
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(charset17);
    }

    @Test
    public void test14773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14773");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        textNode6.ensureAttributes();
        org.jsoup.nodes.Node node9 = textNode6.previousSibling();
        java.lang.String str10 = textNode6.text;
        org.jsoup.nodes.Node node11 = textNode6.parent();
        java.lang.String str12 = textNode6.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test14774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14774");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.getcharsetEncoder();
        int int6 = outputSettings0.indentAmount;
        outputSettings0.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.clone();
        boolean boolean11 = outputSettings10.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14775");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.forceAllElementAsBlock(false);
        boolean boolean13 = outputSettings12.prettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings12.escapeMode;
        int int15 = outputSettings12.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test14776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14776");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        java.nio.charset.Charset charset16 = outputSettings15.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        int int19 = outputSettings17.indentAmount;
        java.nio.charset.Charset charset20 = outputSettings17.charset;
        boolean boolean21 = outputSettings17.prettyPrint;
        outputSettings17.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings17.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings15.escapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings15.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings15.forceAllElementAsBlock(true);
        outputSettings15.setforceAllElementAsBlock(true);
        int int32 = outputSettings15.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
    }

    @Test
    public void test14777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14777");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str9 = textNode0.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.forceAllElementAsBlock(false);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings42);
        java.lang.String str47 = textNode0.absUrl("#text");
        java.lang.String str48 = textNode0.gettext();
        org.jsoup.nodes.Node node49 = textNode0.parent();
        java.lang.String str51 = textNode0.attr("t");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test14778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14778");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings6.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) (short) 0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.getescapeMode();
        outputSettings13.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone();
        int int19 = outputSettings18.getindentAmount();
        int int20 = outputSettings18.indentAmount;
        outputSettings18.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings23.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder28 = null;
        outputSettings27.charsetEncoder = charsetEncoder28;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings27.getescapeMode();
        outputSettings18.escapeMode = escapeMode30;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings13.escapeMode(escapeMode30);
        boolean boolean33 = outputSettings32.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test14779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14779");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings0.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNull(escapeMode8);
    }

    @Test
    public void test14780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14780");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str9 = textNode0.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.forceAllElementAsBlock(false);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings42);
        java.lang.String str47 = textNode0.absUrl("#text");
        org.jsoup.nodes.Document document48 = textNode0.ownerDocument();
        textNode0.setBaseUri("!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(document48);
    }

    @Test
    public void test14781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14781");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("text");
        java.lang.String str9 = textNode2.text();
        textNode2.ensureAttributes();
        java.lang.String str11 = textNode2.text;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
    }

    @Test
    public void test14782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14782");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.String str3 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("ext");
        org.jsoup.nodes.Node node6 = textNode5.parent();
        org.jsoup.select.NodeVisitor nodeVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node8 = textNode5.traverse(nodeVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test14783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14783");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("#text");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        outputSettings16.setindentAmount((int) (byte) 0);
        textNode11.outerHtmlTail(stringBuilder12, (int) '#', outputSettings16);
        java.util.List<org.jsoup.nodes.Node> nodeList20 = textNode11.siblingNodes();
        org.jsoup.nodes.TextNode textNode22 = textNode11.text("");
        org.jsoup.nodes.Node node23 = textNode11.previousSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test14784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14784");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.siblingNodes();
        java.lang.String str7 = textNode2.absUrl("i!");
        java.lang.String str8 = textNode2.gettext();
        java.lang.String str9 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node12 = textNode2.attr("i", "ext");
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode();
        textNode13.setBaseUri("hi!");
        java.lang.String str16 = textNode13.text;
        org.jsoup.nodes.TextNode textNode18 = textNode13.text("");
        java.lang.String str19 = textNode13.text;
        java.lang.String str21 = textNode13.attr("#text");
        java.lang.String str23 = textNode13.absUrl("t");
        java.lang.String str24 = textNode13.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode26 = textNode13.text("hi!");
        java.lang.StringBuilder stringBuilder27 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings29.charset = charset31;
        boolean boolean33 = outputSettings29.getforceAllElementAsBlock();
        boolean boolean34 = outputSettings29.forceAllElementAsBlock;
        int int35 = outputSettings29.indentAmount();
        java.nio.charset.Charset charset36 = outputSettings29.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        outputSettings37.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings37.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        outputSettings43.setprettyPrint(false);
        outputSettings43.setindentAmount(0);
        outputSettings43.indentAmount = (byte) 1;
        java.nio.charset.Charset charset52 = outputSettings43.getcharset();
        outputSettings37.setcharset(charset52);
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings37.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        outputSettings55.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings55.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder62 = outputSettings61.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings61.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings61.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean68 = outputSettings67.prettyPrint;
        boolean boolean69 = outputSettings67.forceAllElementAsBlock;
        boolean boolean70 = outputSettings67.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings67.prettyPrint(false);
        int int73 = outputSettings72.getindentAmount();
        outputSettings72.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder76 = outputSettings72.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean78 = outputSettings77.prettyPrint;
        boolean boolean79 = outputSettings77.forceAllElementAsBlock;
        boolean boolean80 = outputSettings77.getprettyPrint();
        boolean boolean81 = outputSettings77.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings77.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings83.escapeMode();
        outputSettings72.setescapeMode(escapeMode84);
        outputSettings61.escapeMode = escapeMode84;
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings37.escapeMode(escapeMode84);
        outputSettings29.setescapeMode(escapeMode84);
        textNode13.outerHtmlTail(stringBuilder27, (int) (short) -1, outputSettings29);
        java.util.List<org.jsoup.nodes.Node> nodeList90 = textNode13.childNodes();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(textNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "text" + "'", str24, "text");
        org.junit.Assert.assertNotNull(textNode26);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(charsetEncoder62);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(outputSettings83);
        org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings87);
        org.junit.Assert.assertNotNull(nodeList90);
    }

    @Test
    public void test14785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14785");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings6.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.encoder();
        outputSettings8.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings8.escapeMode;
        outputSettings6.escapeMode = escapeMode15;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.prettyPrint(false);
        outputSettings6.indentAmount = '4';
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings6.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(charsetEncoder21);
    }

    @Test
    public void test14786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14786");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("");
        java.lang.String str9 = textNode2.text;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test14787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14787");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        boolean boolean15 = outputSettings11.getforceAllElementAsBlock();
        outputSettings11.setprettyPrint(false);
        textNode6.outerHtmlTail(stringBuilder9, (int) '#', outputSettings11);
        textNode6.ensureAttributes();
        java.lang.String str20 = textNode6.getWholeText();
        org.jsoup.nodes.TextNode textNode22 = textNode6.text("hi!");
        java.lang.String str23 = textNode6.toString();
        java.lang.String str24 = textNode6.text;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test14788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14788");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("");
        org.jsoup.nodes.Node node12 = textNode2.attr("h", "h");
        textNode2.setBaseUri("h");
        org.jsoup.nodes.Document document15 = textNode2.ownerDocument();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(document15);
    }

    @Test
    public void test14789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14789");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.text;
        java.lang.String str10 = textNode2.getWholeText();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "t" + "'", str10, "t");
    }

    @Test
    public void test14790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14790");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        org.jsoup.nodes.Node node26 = textNode2.removeAttr("hi!");
        java.lang.StringBuilder stringBuilder27 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.getforceAllElementAsBlock();
        boolean boolean31 = outputSettings29.getprettyPrint();
        outputSettings29.setprettyPrint(false);
        textNode2.outerHtmlTail(stringBuilder27, (-1), outputSettings29);
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node36 = textNode2.parent();
        boolean boolean38 = textNode2.hasAttr("!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test14791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14791");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings7.getescapeMode();
        outputSettings0.setescapeMode(escapeMode10);
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings0.getcharsetEncoder();
        java.nio.charset.Charset charset13 = outputSettings0.charset;
        outputSettings0.indentAmount = 100;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings0.clone();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(outputSettings16);
    }

    @Test
    public void test14792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14792");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Document document1 = textNode0.ownerDocument();
        boolean boolean2 = textNode0.isBlank();
        boolean boolean3 = textNode0.isBlank();
        java.lang.String str4 = textNode0.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.clone();
        outputSettings9.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        boolean boolean15 = outputSettings12.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings12.prettyPrint(false);
        int int18 = outputSettings17.getindentAmount();
        outputSettings17.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings21.charset = charset23;
        outputSettings21.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        int int30 = outputSettings27.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        outputSettings33.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings33.setcharset(charset39);
        outputSettings32.setcharset(charset39);
        outputSettings27.setcharset(charset39);
        outputSettings21.setcharset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings17.charset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        boolean boolean48 = outputSettings45.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings45.prettyPrint(false);
        int int51 = outputSettings50.getindentAmount();
        outputSettings50.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings50.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        boolean boolean58 = outputSettings55.getprettyPrint();
        boolean boolean59 = outputSettings55.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings55.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode();
        outputSettings50.setescapeMode(escapeMode62);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings17.escapeMode(escapeMode62);
        outputSettings9.setescapeMode(escapeMode62);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings9.clone();
        textNode0.outerHtmlTail(stringBuilder5, (int) (short) 10, outputSettings9);
        java.lang.String str68 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder69 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean72 = outputSettings71.prettyPrint;
        boolean boolean73 = outputSettings71.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode74 = null;
        outputSettings71.setescapeMode(escapeMode74);
        outputSettings71.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = null;
        outputSettings71.setescapeMode(escapeMode78);
        outputSettings71.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder82 = outputSettings71.getcharsetEncoder();
        boolean boolean83 = outputSettings71.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings71.forceAllElementAsBlock(false);
        boolean boolean86 = outputSettings71.prettyPrint;
        textNode0.outerHtmlTail(stringBuilder69, (int) (byte) 0, outputSettings71);
        textNode0.setBaseUri("");
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean91 = outputSettings90.prettyPrint;
        boolean boolean92 = outputSettings90.forceAllElementAsBlock;
        boolean boolean93 = outputSettings90.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode94 = outputSettings90.escapeMode;
        boolean boolean95 = textNode0.equals((java.lang.Object) escapeMode94);
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "text" + "'", str4, "text");
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(charsetEncoder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(outputSettings85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + escapeMode94 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode94.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test14793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14793");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.text();
        java.lang.String str9 = textNode2.getTEXT_KEY();
        java.lang.String str10 = textNode2.text;
        boolean boolean12 = textNode2.hasAttr("t");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14794");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = null;
        outputSettings5.setcharset(charset6);
        boolean boolean8 = outputSettings5.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        outputSettings5.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings13.setcharset(charset19);
        outputSettings13.setprettyPrint(true);
        java.nio.charset.Charset charset23 = outputSettings13.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings13.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        boolean boolean28 = outputSettings25.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings25.prettyPrint(false);
        int int31 = outputSettings30.getindentAmount();
        outputSettings30.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings34.charset = charset36;
        outputSettings34.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        int int43 = outputSettings40.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings40.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        outputSettings46.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset52 = outputSettings51.charset();
        outputSettings46.setcharset(charset52);
        outputSettings45.setcharset(charset52);
        outputSettings40.setcharset(charset52);
        outputSettings34.setcharset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings30.charset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean59 = outputSettings58.prettyPrint;
        boolean boolean60 = outputSettings58.forceAllElementAsBlock;
        boolean boolean61 = outputSettings58.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings58.prettyPrint(false);
        int int64 = outputSettings63.getindentAmount();
        outputSettings63.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder67 = outputSettings63.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean69 = outputSettings68.prettyPrint;
        boolean boolean70 = outputSettings68.forceAllElementAsBlock;
        boolean boolean71 = outputSettings68.getprettyPrint();
        boolean boolean72 = outputSettings68.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings68.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode75 = outputSettings74.escapeMode();
        outputSettings63.setescapeMode(escapeMode75);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings30.escapeMode(escapeMode75);
        java.nio.charset.Charset charset78 = outputSettings77.charset();
        outputSettings13.setcharset(charset78);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset82 = outputSettings81.charset();
        outputSettings80.charset = charset82;
        java.nio.charset.CharsetEncoder charsetEncoder84 = outputSettings80.encoder();
        boolean boolean85 = outputSettings80.prettyPrint;
        java.nio.charset.Charset charset86 = outputSettings80.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings13.charset(charset86);
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings5.charset(charset86);
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings5.indentAmount((int) (short) 100);
        boolean boolean91 = outputSettings5.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertTrue("'" + escapeMode75 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode75.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(charset82);
        org.junit.Assert.assertNotNull(charsetEncoder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(charset86);
        org.junit.Assert.assertNotNull(outputSettings87);
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test14795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14795");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        boolean boolean10 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        outputSettings11.indentAmount = (-1);
        java.nio.charset.Charset charset17 = outputSettings11.charset();
        outputSettings11.setforceAllElementAsBlock(true);
        boolean boolean20 = outputSettings11.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings11.clone();
        java.nio.charset.Charset charset22 = outputSettings11.charset;
        outputSettings0.setcharset(charset22);
        boolean boolean24 = outputSettings0.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test14796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14796");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("i!", "i!");
        java.lang.String str3 = textNode2.gettext();
        java.lang.String str4 = textNode2.nodeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "i!" + "'", str3, "i!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
    }

    @Test
    public void test14797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14797");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.prettyPrint(true);
        java.nio.charset.Charset charset5 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings4.prettyPrint(true);
        org.jsoup.nodes.TextNode textNode10 = new org.jsoup.nodes.TextNode("text", "text");
        int int11 = textNode10.siblingIndex();
        int int12 = textNode10.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode10.childNodes();
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        int int19 = outputSettings16.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        outputSettings22.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset28 = outputSettings27.charset();
        outputSettings22.setcharset(charset28);
        outputSettings21.setcharset(charset28);
        outputSettings16.setcharset(charset28);
        textNode10.outerHtmlTail(stringBuilder14, 10, outputSettings16);
        int int33 = outputSettings16.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings16.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings16.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        outputSettings36.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        boolean boolean44 = outputSettings41.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset47 = outputSettings46.charset();
        outputSettings45.charset = charset47;
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings45.encoder();
        boolean boolean50 = outputSettings45.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings45.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings41.escapeMode(escapeMode51);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings36.escapeMode(escapeMode51);
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings36.getescapeMode();
        outputSettings16.setescapeMode(escapeMode54);
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset57 = outputSettings16.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings16.indentAmount((int) (byte) 0);
        outputSettings16.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings7.escapeMode(escapeMode62);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean65 = outputSettings64.prettyPrint;
        boolean boolean66 = outputSettings64.forceAllElementAsBlock;
        boolean boolean67 = outputSettings64.getprettyPrint();
        boolean boolean68 = outputSettings64.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings64.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings70.escapeMode();
        outputSettings70.setprettyPrint(true);
        int int74 = outputSettings70.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder75 = outputSettings70.encoder();
        outputSettings7.charsetEncoder = charsetEncoder75;
        boolean boolean77 = outputSettings7.getforceAllElementAsBlock();
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(charsetEncoder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test14798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14798");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        java.lang.String str11 = textNode0.nodeName();
        java.lang.String str12 = textNode0.toString();
        textNode0.text = "";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ext" + "'", str12, "ext");
    }

    @Test
    public void test14799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14799");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings3.escapeMode;
        outputSettings3.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings3.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings10.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings10.indentAmount((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings14);
    }

    @Test
    public void test14800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14800");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.childNodes();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode2.siblingNodes();
        org.jsoup.nodes.Attributes attributes13 = textNode2.attributes();
        textNode2.settext("");
        java.lang.String str17 = textNode2.absUrl("#text");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test14801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14801");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node6 = textNode2.attr("#text", "text");
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings13.setcharset(charset19);
        outputSettings12.setcharset(charset19);
        outputSettings7.setcharset(charset19);
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings7.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings24.setescapeMode(escapeMode27);
        outputSettings24.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings24.setescapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings24.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode;
        outputSettings34.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings34.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        boolean boolean42 = outputSettings39.getprettyPrint();
        boolean boolean43 = outputSettings39.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings39.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode();
        outputSettings34.setescapeMode(escapeMode46);
        outputSettings7.escapeMode = escapeMode46;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset51 = outputSettings50.charset();
        outputSettings49.charset = charset51;
        outputSettings49.indentAmount = (-1);
        java.nio.charset.Charset charset55 = outputSettings49.charset();
        boolean boolean56 = outputSettings49.forceAllElementAsBlock();
        java.nio.charset.Charset charset57 = outputSettings49.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings7.charset(charset57);
        boolean boolean59 = node6.equals((java.lang.Object) outputSettings7);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings7.prettyPrint(true);
        boolean boolean62 = outputSettings7.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings7.forceAllElementAsBlock(true);
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNull(escapeMode35);
        org.junit.Assert.assertNull(escapeMode38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(outputSettings64);
    }

    @Test
    public void test14802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14802");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean5 = outputSettings4.prettyPrint;
        boolean boolean6 = outputSettings4.forceAllElementAsBlock;
        boolean boolean7 = outputSettings4.getprettyPrint();
        boolean boolean8 = outputSettings4.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings4.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings12.charset = charset14;
        outputSettings12.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        int int21 = outputSettings18.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings18.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        outputSettings24.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset30 = outputSettings29.charset();
        outputSettings24.setcharset(charset30);
        outputSettings23.setcharset(charset30);
        outputSettings18.setcharset(charset30);
        outputSettings12.setcharset(charset30);
        outputSettings10.setcharset(charset30);
        outputSettings0.setcharset(charset30);
        int int37 = outputSettings0.getindentAmount();
        boolean boolean38 = outputSettings0.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test14803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14803");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings6.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings9.setescapeMode(escapeMode12);
        outputSettings9.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings9.setescapeMode(escapeMode16);
        boolean boolean18 = outputSettings9.forceAllElementAsBlock;
        int int19 = outputSettings9.indentAmount;
        java.nio.charset.Charset charset20 = outputSettings9.getcharset();
        outputSettings6.charset = charset20;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings6.escapeMode();
        outputSettings0.escapeMode = escapeMode22;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings24.setescapeMode(escapeMode27);
        outputSettings24.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings24.setescapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings24.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode;
        outputSettings34.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings34.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        boolean boolean42 = outputSettings39.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings39.prettyPrint(false);
        java.nio.charset.Charset charset45 = outputSettings39.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings39.getescapeMode();
        outputSettings34.escapeMode = escapeMode46;
        boolean boolean48 = outputSettings34.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        boolean boolean52 = outputSettings49.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings49.prettyPrint(false);
        java.nio.charset.Charset charset55 = outputSettings49.charset();
        outputSettings34.charset = charset55;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings0.charset(charset55);
        boolean boolean58 = outputSettings57.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder59 = outputSettings57.charsetEncoder;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNull(escapeMode35);
        org.junit.Assert.assertNull(escapeMode38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charsetEncoder59);
    }

    @Test
    public void test14804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14804");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        org.jsoup.nodes.Node node7 = textNode2.clone();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("text", "text");
        int int12 = textNode11.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode11.childNodes();
        textNode11.settext("");
        textNode11.setBaseUri("hi!");
        java.lang.StringBuilder stringBuilder18 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = null;
        outputSettings20.setescapeMode(escapeMode23);
        outputSettings20.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings20.setescapeMode(escapeMode27);
        boolean boolean29 = outputSettings20.forceAllElementAsBlock;
        int int30 = outputSettings20.indentAmount;
        java.nio.charset.Charset charset31 = outputSettings20.getcharset();
        textNode11.outerHtmlTail(stringBuilder18, (int) (short) 1, outputSettings20);
        java.lang.String str33 = textNode11.text;
        org.jsoup.nodes.Node node34 = textNode11.clone();
        java.lang.StringBuilder stringBuilder35 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        boolean boolean40 = outputSettings37.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings37.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.escapeMode(escapeMode43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings42.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings42.escapeMode;
        int int47 = outputSettings42.indentAmount();
        textNode11.outerHtmlTail(stringBuilder35, 100, outputSettings42);
        boolean boolean49 = textNode2.equals((java.lang.Object) 100);
        java.lang.String str50 = textNode2.text;
        java.util.List<org.jsoup.nodes.Node> nodeList51 = textNode2.siblingNodes();
        java.lang.String str52 = textNode2.outerHtml();
        boolean boolean54 = textNode2.hasAttr("i");
        org.jsoup.nodes.Node node56 = textNode2.removeAttr("h");
        org.jsoup.nodes.Node node57 = textNode2.parent();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNull(escapeMode45);
        org.junit.Assert.assertNull(escapeMode46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
    }

    @Test
    public void test14805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14805");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node6 = textNode2.attr("#text", "text");
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings13.setcharset(charset19);
        outputSettings12.setcharset(charset19);
        outputSettings7.setcharset(charset19);
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings7.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings24.setescapeMode(escapeMode27);
        outputSettings24.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings24.setescapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings24.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode;
        outputSettings34.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings34.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        boolean boolean42 = outputSettings39.getprettyPrint();
        boolean boolean43 = outputSettings39.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings39.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode();
        outputSettings34.setescapeMode(escapeMode46);
        outputSettings7.escapeMode = escapeMode46;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset51 = outputSettings50.charset();
        outputSettings49.charset = charset51;
        outputSettings49.indentAmount = (-1);
        java.nio.charset.Charset charset55 = outputSettings49.charset();
        boolean boolean56 = outputSettings49.forceAllElementAsBlock();
        java.nio.charset.Charset charset57 = outputSettings49.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings7.charset(charset57);
        boolean boolean59 = node6.equals((java.lang.Object) outputSettings7);
        org.jsoup.nodes.TextNode textNode62 = new org.jsoup.nodes.TextNode("text", "text");
        int int63 = textNode62.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList64 = textNode62.siblingNodes();
        textNode62.text = "";
        java.lang.String str67 = textNode62.baseUri();
        java.lang.String str69 = textNode62.attr("");
        org.jsoup.nodes.Node node72 = textNode62.attr("ext", "#text");
        int int73 = textNode62.siblingIndex();
        org.jsoup.nodes.Node node75 = textNode62.removeAttr("i!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node76 = node6.after(node75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNull(escapeMode35);
        org.junit.Assert.assertNull(escapeMode38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "text" + "'", str67, "text");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test14806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14806");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        textNode2.text = "";
        textNode2.text = "text";
        org.jsoup.nodes.Node node15 = textNode2.attr("#", "");
        int int16 = textNode2.siblingIndex();
        java.lang.StringBuilder stringBuilder17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings19.setescapeMode(escapeMode22);
        outputSettings19.indentAmount = '4';
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings19.prettyPrint(false);
        boolean boolean28 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings19.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) (byte) 10);
        boolean boolean33 = outputSettings32.forceAllElementAsBlock;
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder17, (int) (short) -1, outputSettings32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test14807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14807");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        boolean boolean7 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("t");
        java.lang.String str10 = textNode2.toString();
        java.lang.String str11 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node12 = textNode2.nextSibling();
        java.lang.String str14 = textNode2.attr("h");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node16 = textNode2.before("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "t" + "'", str10, "t");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test14808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14808");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("i!", "#text");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode4.childNodes();
        org.jsoup.nodes.Node node6 = textNode4.clone();
        int int7 = node6.siblingIndex();
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test14809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14809");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        org.jsoup.nodes.Node node8 = textNode5.attr("hi!", "t");
        org.jsoup.nodes.Node node9 = node8.previousSibling();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test14810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14810");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings3.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings5.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings10.setescapeMode(escapeMode13);
        outputSettings10.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings10.setescapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings10.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        outputSettings20.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings20.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        boolean boolean28 = outputSettings25.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings25.prettyPrint(false);
        java.nio.charset.Charset charset31 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings25.getescapeMode();
        outputSettings20.escapeMode = escapeMode32;
        boolean boolean34 = outputSettings20.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        boolean boolean38 = outputSettings35.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings35.prettyPrint(false);
        java.nio.charset.Charset charset41 = outputSettings35.charset();
        outputSettings20.charset = charset41;
        outputSettings5.setcharset(charset41);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings4.charset(charset41);
        int int45 = outputSettings44.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.indentAmount(32);
        int int48 = outputSettings47.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNull(escapeMode21);
        org.junit.Assert.assertNull(escapeMode24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
    }

    @Test
    public void test14811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14811");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings6.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings14.charset = charset16;
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.encoder();
        outputSettings14.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings14.escapeMode;
        outputSettings14.prettyPrint = false;
        java.nio.charset.Charset charset24 = outputSettings14.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset28 = outputSettings27.charset();
        outputSettings26.charset = charset28;
        outputSettings26.indentAmount = (-1);
        java.nio.charset.Charset charset32 = outputSettings26.charset();
        boolean boolean33 = outputSettings26.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings26.charsetEncoder;
        java.nio.charset.Charset charset35 = outputSettings26.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings14.charset(charset35);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings14.indentAmount(100);
        java.nio.charset.Charset charset39 = outputSettings38.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings11.charset(charset39);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings40);
    }

    @Test
    public void test14812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14812");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.gettext();
        boolean boolean11 = textNode2.hasAttr("hi!");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = textNode16.equals((java.lang.Object) outputSettings17);
        int int20 = outputSettings17.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings21.setprettyPrint(true);
        java.nio.charset.Charset charset31 = outputSettings21.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings21.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings21.escapeMode();
        boolean boolean34 = outputSettings21.getprettyPrint();
        boolean boolean35 = outputSettings21.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings21.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings17.escapeMode(escapeMode36);
        java.nio.charset.Charset charset38 = outputSettings37.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings37.escapeMode();
        textNode2.outerHtmlTail(stringBuilder12, (int) (short) 1, outputSettings37);
        java.lang.String str41 = textNode2.getTEXT_KEY();
        java.lang.String str42 = textNode2.gettext();
        textNode2.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList44 = textNode2.childNodes();
        boolean boolean45 = textNode2.isBlank();
        java.lang.StringBuilder stringBuilder46 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        boolean boolean51 = outputSettings48.getprettyPrint();
        boolean boolean52 = outputSettings48.forceAllElementAsBlock();
        outputSettings48.setprettyPrint(true);
        int int55 = outputSettings48.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings48.prettyPrint(true);
        java.nio.charset.Charset charset58 = outputSettings48.charset();
        textNode2.outerHtmlTail(stringBuilder46, (int) ' ', outputSettings48);
        org.jsoup.nodes.Node node60 = textNode2.nextSibling();
        java.lang.String str61 = textNode2.getWholeText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charsetEncoder32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "text" + "'", str41, "text");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "t" + "'", str42, "t");
        org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "t" + "'", str61, "t");
    }

    @Test
    public void test14813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14813");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.getTEXT_KEY();
        java.lang.String str11 = textNode2.absUrl("ext");
        java.lang.String str13 = textNode2.absUrl("i!");
        java.lang.String str15 = textNode2.attr("ext");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test14814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14814");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        textNode2.ensureAttributes();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        java.nio.charset.Charset charset15 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings9.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings9.escapeMode;
        boolean boolean18 = outputSettings9.forceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder7, (int) (byte) 100, outputSettings9);
        org.jsoup.nodes.Node node20 = textNode2.previousSibling();
        textNode2.ensureAttributes();
        java.lang.StringBuilder stringBuilder22 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings24.setescapeMode(escapeMode27);
        outputSettings24.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings24.setescapeMode(escapeMode31);
        boolean boolean33 = outputSettings24.forceAllElementAsBlock;
        int int34 = outputSettings24.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings24.escapeMode(escapeMode35);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = null;
        outputSettings37.setescapeMode(escapeMode40);
        outputSettings37.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = null;
        outputSettings37.setescapeMode(escapeMode44);
        boolean boolean46 = outputSettings37.forceAllElementAsBlock;
        int int47 = outputSettings37.indentAmount;
        java.nio.charset.Charset charset48 = outputSettings37.getcharset();
        outputSettings36.setcharset(charset48);
        int int50 = outputSettings36.indentAmount();
        boolean boolean51 = outputSettings36.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        int int55 = outputSettings52.getindentAmount();
        outputSettings52.setprettyPrint(false);
        java.nio.charset.Charset charset58 = outputSettings52.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings36.charset(charset58);
        java.nio.charset.CharsetEncoder charsetEncoder60 = outputSettings59.charsetEncoder;
        textNode2.outerHtmlTail(stringBuilder22, (int) (byte) 1, outputSettings59);
        org.jsoup.nodes.TextNode textNode64 = new org.jsoup.nodes.TextNode("text", "text");
        int int65 = textNode64.siblingIndex();
        int int66 = textNode64.siblingIndex();
        org.jsoup.nodes.Node node67 = textNode64.clone();
        java.lang.String str68 = textNode64.text;
        java.lang.String str69 = textNode64.nodeName();
        java.lang.String str70 = textNode64.nodeName();
        textNode64.text = "hi!";
        org.jsoup.nodes.Node node74 = textNode64.removeAttr("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node75 = textNode2.after(node74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charsetEncoder60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "text" + "'", str68, "text");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "#text" + "'", str69, "#text");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "#text" + "'", str70, "#text");
        org.junit.Assert.assertNotNull(node74);
    }

    @Test
    public void test14815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14815");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node7 = textNode2.attr("#text", "");
        java.lang.String str8 = textNode2.gettext();
        org.jsoup.nodes.Attributes attributes9 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("");
        textNode11.settext("ext");
        java.lang.String str14 = textNode11.text;
        java.lang.String str15 = textNode11.gettext();
        org.jsoup.nodes.Document document16 = textNode11.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = document16.siblingIndex();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(attributes9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ext" + "'", str14, "ext");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ext" + "'", str15, "ext");
        org.junit.Assert.assertNull(document16);
    }

    @Test
    public void test14816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14816");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        boolean boolean11 = textNode0.isBlank();
        java.lang.String str12 = textNode0.gettext();
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        int int17 = textNode15.siblingIndex();
        org.jsoup.nodes.Node node18 = textNode15.clone();
        java.lang.String str19 = textNode15.text;
        java.lang.String str20 = textNode15.nodeName();
        org.jsoup.nodes.TextNode textNode22 = textNode15.splitText(0);
        java.lang.String str23 = textNode22.toString();
        org.jsoup.nodes.Node node25 = textNode22.removeAttr("i!");
        boolean boolean26 = textNode0.equals((java.lang.Object) textNode22);
        textNode22.text = "";
        org.jsoup.nodes.TextNode textNode30 = textNode22.text("#text");
        java.lang.String str31 = textNode22.text;
        java.util.List<org.jsoup.nodes.Node> nodeList32 = textNode22.childNodes();
        java.lang.String str33 = textNode22.gettext();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ext" + "'", str12, "ext");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "text" + "'", str23, "text");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(textNode30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "#text" + "'", str31, "#text");
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "#text" + "'", str33, "#text");
    }

    @Test
    public void test14817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14817");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("!", "hi!");
        textNode2.settext("ext");
    }

    @Test
    public void test14818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14818");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        java.nio.charset.Charset charset12 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = (short) 10;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings13.escapeMode;
        outputSettings0.escapeMode = escapeMode18;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings0.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset24 = outputSettings23.getcharset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset24);
    }

    @Test
    public void test14819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14819");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("");
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings12.setprettyPrint(true);
        java.nio.charset.Charset charset22 = outputSettings12.getcharset();
        outputSettings12.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings12.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings28.setescapeMode(escapeMode31);
        outputSettings28.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        outputSettings28.setescapeMode(escapeMode35);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings28.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.escapeMode;
        outputSettings38.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings38.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings43.prettyPrint(false);
        java.nio.charset.Charset charset49 = outputSettings43.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings43.getescapeMode();
        outputSettings38.escapeMode = escapeMode50;
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings38.escapeMode();
        outputSettings26.setescapeMode(escapeMode52);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings26.forceAllElementAsBlock(false);
        textNode2.outerHtmlTail(stringBuilder10, (int) (byte) -1, outputSettings55);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings55.prettyPrint(false);
        org.jsoup.nodes.TextNode textNode61 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document62 = textNode61.ownerDocument();
        org.jsoup.nodes.TextNode textNode64 = textNode61.text("i!");
        org.jsoup.nodes.Document document65 = textNode61.ownerDocument();
        org.jsoup.nodes.Node node68 = textNode61.attr("#text", "text");
        org.jsoup.nodes.TextNode textNode69 = new org.jsoup.nodes.TextNode();
        textNode69.setBaseUri("hi!");
        java.lang.String str72 = textNode69.getTEXT_KEY();
        textNode69.text = "hi!";
        boolean boolean76 = textNode69.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList77 = textNode69.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean79 = outputSettings78.prettyPrint;
        boolean boolean80 = outputSettings78.forceAllElementAsBlock;
        boolean boolean81 = outputSettings78.getprettyPrint();
        boolean boolean82 = outputSettings78.forceAllElementAsBlock();
        boolean boolean83 = outputSettings78.forceAllElementAsBlock;
        boolean boolean84 = textNode69.equals((java.lang.Object) outputSettings78);
        java.nio.charset.CharsetEncoder charsetEncoder85 = outputSettings78.getcharsetEncoder();
        outputSettings78.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings78.clone();
        java.nio.charset.Charset charset89 = outputSettings78.getcharset();
        boolean boolean90 = node68.equals((java.lang.Object) charset89);
        outputSettings58.setcharset(charset89);
        outputSettings58.setindentAmount((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNull(escapeMode39);
        org.junit.Assert.assertNull(escapeMode42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNotNull(textNode61);
        org.junit.Assert.assertNull(document62);
        org.junit.Assert.assertNotNull(textNode64);
        org.junit.Assert.assertNull(document65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "text" + "'", str72, "text");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(charsetEncoder85);
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertNotNull(charset89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test14820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14820");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "");
        org.jsoup.nodes.Attributes attributes3 = textNode2.attributes();
        java.lang.String str4 = textNode2.getWholeText();
        java.lang.String str5 = textNode2.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node7 = textNode2.removeAttr("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#text" + "'", str5, "#text");
    }

    @Test
    public void test14821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14821");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        outputSettings6.setprettyPrint(false);
        int int9 = outputSettings6.indentAmount;
        org.jsoup.nodes.TextNode textNode10 = new org.jsoup.nodes.TextNode();
        textNode10.setBaseUri("hi!");
        java.lang.String str13 = textNode10.getTEXT_KEY();
        textNode10.text = "hi!";
        boolean boolean17 = textNode10.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode10.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        boolean boolean24 = outputSettings19.forceAllElementAsBlock;
        boolean boolean25 = textNode10.equals((java.lang.Object) outputSettings19);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings19.getcharsetEncoder();
        boolean boolean27 = outputSettings19.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        boolean boolean31 = outputSettings28.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings28.prettyPrint(false);
        java.nio.charset.Charset charset34 = outputSettings28.charset;
        outputSettings28.setprettyPrint(false);
        boolean boolean37 = outputSettings28.forceAllElementAsBlock;
        boolean boolean38 = outputSettings28.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings28.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings19.escapeMode(escapeMode39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings6.escapeMode(escapeMode39);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(outputSettings41);
    }

    @Test
    public void test14822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14822");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.String str3 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode4 = new org.jsoup.nodes.TextNode();
        textNode4.setBaseUri("hi!");
        java.lang.String str7 = textNode4.getTEXT_KEY();
        java.lang.String str8 = textNode4.baseUri();
        java.lang.String str9 = textNode4.text;
        boolean boolean10 = textNode4.isBlank();
        textNode4.text = "#text";
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings13.setescapeMode(escapeMode16);
        outputSettings13.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        outputSettings13.setescapeMode(escapeMode20);
        boolean boolean22 = outputSettings13.forceAllElementAsBlock;
        int int23 = outputSettings13.indentAmount;
        java.nio.charset.Charset charset24 = outputSettings13.getcharset();
        outputSettings13.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        int int30 = outputSettings27.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        outputSettings33.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings33.setcharset(charset39);
        outputSettings32.setcharset(charset39);
        outputSettings27.setcharset(charset39);
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings27.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings44.clone();
        int int46 = outputSettings45.getindentAmount();
        java.nio.charset.Charset charset47 = outputSettings45.charset();
        outputSettings27.setcharset(charset47);
        outputSettings13.setcharset(charset47);
        boolean boolean50 = textNode4.equals((java.lang.Object) charset47);
        boolean boolean51 = textNode2.equals((java.lang.Object) boolean50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset54 = outputSettings53.charset();
        outputSettings52.charset = charset54;
        java.nio.charset.CharsetEncoder charsetEncoder56 = outputSettings52.encoder();
        outputSettings52.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings52.escapeMode;
        outputSettings52.prettyPrint = false;
        boolean boolean62 = outputSettings52.getforceAllElementAsBlock();
        boolean boolean63 = textNode2.equals((java.lang.Object) boolean62);
        org.jsoup.nodes.Node node66 = textNode2.attr("ext", "text");
        org.jsoup.nodes.Node node67 = node66.nextSibling();
        org.jsoup.nodes.Node node68 = node66.previousSibling();
        org.jsoup.nodes.TextNode textNode71 = new org.jsoup.nodes.TextNode("text", "text");
        int int72 = textNode71.siblingIndex();
        int int73 = textNode71.siblingIndex();
        org.jsoup.nodes.Node node76 = textNode71.attr("#text", "");
        java.lang.String str77 = textNode71.gettext();
        org.jsoup.nodes.Attributes attributes78 = textNode71.attributes();
        org.jsoup.nodes.TextNode textNode80 = textNode71.text("");
        textNode80.settext("ext");
        java.lang.String str83 = textNode80.text;
        org.jsoup.nodes.Document document84 = textNode80.ownerDocument();
        org.jsoup.nodes.Node node85 = textNode80.clone();
        boolean boolean86 = textNode80.isBlank();
        org.jsoup.nodes.TextNode textNode88 = textNode80.text("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node89 = node68.before((org.jsoup.nodes.Node) textNode88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(charsetEncoder56);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "text" + "'", str77, "text");
        org.junit.Assert.assertNotNull(attributes78);
        org.junit.Assert.assertNotNull(textNode80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ext" + "'", str83, "ext");
        org.junit.Assert.assertNull(document84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(textNode88);
    }

    @Test
    public void test14823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14823");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.indentAmount((int) '#');
        boolean boolean13 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean14 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset17 = outputSettings16.charset();
        outputSettings15.charset = charset17;
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.encoder();
        boolean boolean20 = outputSettings15.prettyPrint;
        java.nio.charset.Charset charset21 = outputSettings15.charset;
        boolean boolean22 = outputSettings15.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings23.charset = charset25;
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings23.encoder();
        boolean boolean28 = outputSettings23.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings23.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings15.escapeMode(escapeMode29);
        boolean boolean31 = outputSettings30.forceAllElementAsBlock();
        boolean boolean32 = outputSettings30.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings33.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        boolean boolean40 = outputSettings37.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings37.prettyPrint(false);
        java.nio.charset.Charset charset43 = outputSettings37.charset;
        outputSettings37.setprettyPrint(false);
        java.nio.charset.Charset charset46 = outputSettings37.getcharset();
        outputSettings33.setcharset(charset46);
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings33.encoder();
        outputSettings30.charsetEncoder = charsetEncoder48;
        outputSettings0.setcharsetEncoder(charsetEncoder48);
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = null;
        outputSettings0.setescapeMode(escapeMode51);
        boolean boolean53 = outputSettings0.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test14824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14824");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("hi!");
        java.lang.String str13 = textNode12.getTEXT_KEY();
        java.lang.String str14 = textNode12.getWholeText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test14825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14825");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode9 = textNode2.splitText(0);
        java.lang.String str10 = textNode9.toString();
        textNode9.setBaseUri("#text");
        org.jsoup.nodes.Node node13 = textNode9.clone();
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        outputSettings16.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings16.forceAllElementAsBlock(true);
        int int23 = outputSettings16.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings16.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = null;
        outputSettings25.setescapeMode(escapeMode28);
        outputSettings25.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = null;
        outputSettings25.setescapeMode(escapeMode32);
        boolean boolean34 = outputSettings25.forceAllElementAsBlock;
        int int35 = outputSettings25.indentAmount;
        java.nio.charset.Charset charset36 = outputSettings25.getcharset();
        outputSettings25.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        int int42 = outputSettings39.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings39.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        outputSettings45.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset51 = outputSettings50.charset();
        outputSettings45.setcharset(charset51);
        outputSettings44.setcharset(charset51);
        outputSettings39.setcharset(charset51);
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings39.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings56.clone();
        int int58 = outputSettings57.getindentAmount();
        java.nio.charset.Charset charset59 = outputSettings57.charset();
        outputSettings39.setcharset(charset59);
        outputSettings25.setcharset(charset59);
        boolean boolean62 = outputSettings25.prettyPrint();
        int int63 = outputSettings25.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset65 = outputSettings64.charset();
        int int66 = outputSettings64.indentAmount;
        java.nio.charset.Charset charset67 = outputSettings64.charset;
        boolean boolean68 = outputSettings64.prettyPrint;
        outputSettings64.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings64.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings25.escapeMode(escapeMode71);
        outputSettings16.setescapeMode(escapeMode71);
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings16.forceAllElementAsBlock(true);
        int int76 = outputSettings16.getindentAmount();
        // The following exception was thrown during execution in test generation
        try {
            textNode9.outerHtmlHead(stringBuilder14, 100, outputSettings16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
    }

    @Test
    public void test14826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14826");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.settext("text");
        org.jsoup.nodes.Node node6 = textNode0.nextSibling();
        org.jsoup.nodes.Node node9 = textNode0.attr("ext", "");
        java.lang.String str11 = textNode0.attr("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test14827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14827");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.clone();
        boolean boolean8 = outputSettings7.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test14828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14828");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "");
        org.jsoup.nodes.Node node3 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("hi!");
        textNode2.setBaseUri("i");
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        org.jsoup.select.NodeVisitor nodeVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode2.traverse(nodeVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(attributes8);
    }

    @Test
    public void test14829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14829");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("i");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode0.childNodes();
        org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test14830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14830");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        boolean boolean13 = outputSettings9.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings9.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings17.charset = charset19;
        outputSettings17.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        int int26 = outputSettings23.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings23.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        outputSettings29.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset35 = outputSettings34.charset();
        outputSettings29.setcharset(charset35);
        outputSettings28.setcharset(charset35);
        outputSettings23.setcharset(charset35);
        outputSettings17.setcharset(charset35);
        outputSettings15.setcharset(charset35);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings0.charset(charset35);
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings0.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings44.charset = charset46;
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings44.encoder();
        boolean boolean49 = outputSettings44.prettyPrint;
        java.nio.charset.Charset charset50 = outputSettings44.charset;
        java.nio.charset.Charset charset51 = outputSettings44.getcharset();
        outputSettings44.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings54.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder59 = null;
        outputSettings58.charsetEncoder = charsetEncoder59;
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = outputSettings58.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings44.escapeMode(escapeMode61);
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings44.getescapeMode();
        outputSettings0.setescapeMode(escapeMode63);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14831");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        org.jsoup.nodes.Node node3 = textNode2.clone();
        org.jsoup.nodes.Node node4 = node3.clone();
        java.lang.String str5 = node3.baseUri();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node7 = node3.after("t");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test14832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14832");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        textNode6.ensureAttributes();
        java.lang.String str9 = textNode6.text;
        boolean boolean10 = textNode6.isBlank();
        boolean boolean11 = textNode6.isBlank();
        org.jsoup.nodes.Document document12 = textNode6.ownerDocument();
        java.lang.String str13 = textNode6.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode6.after("text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test14833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14833");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        java.nio.charset.Charset charset8 = outputSettings0.getcharset();
        boolean boolean9 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        int int13 = outputSettings10.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings10.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        outputSettings16.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset22 = outputSettings21.charset();
        outputSettings16.setcharset(charset22);
        outputSettings15.setcharset(charset22);
        outputSettings10.setcharset(charset22);
        int int26 = outputSettings10.getindentAmount();
        outputSettings10.indentAmount = 'a';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings10.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings0.escapeMode(escapeMode29);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        int int39 = outputSettings38.getindentAmount();
        outputSettings38.indentAmount = 52;
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings38.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        outputSettings44.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset50 = outputSettings49.charset();
        outputSettings44.setcharset(charset50);
        outputSettings44.setprettyPrint(true);
        java.nio.charset.Charset charset54 = outputSettings44.getcharset();
        outputSettings44.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings44.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = null;
        outputSettings60.setescapeMode(escapeMode63);
        outputSettings60.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = null;
        outputSettings60.setescapeMode(escapeMode67);
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings60.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings70.escapeMode;
        outputSettings70.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode74 = outputSettings70.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean76 = outputSettings75.prettyPrint;
        boolean boolean77 = outputSettings75.forceAllElementAsBlock;
        boolean boolean78 = outputSettings75.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings75.prettyPrint(false);
        java.nio.charset.Charset charset81 = outputSettings75.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode82 = outputSettings75.getescapeMode();
        outputSettings70.escapeMode = escapeMode82;
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings70.escapeMode();
        outputSettings58.setescapeMode(escapeMode84);
        outputSettings38.setescapeMode(escapeMode84);
        outputSettings30.setescapeMode(escapeMode84);
        java.nio.charset.CharsetEncoder charsetEncoder88 = outputSettings30.charsetEncoder;
        int int89 = outputSettings30.indentAmount();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertNull(escapeMode71);
        org.junit.Assert.assertNull(escapeMode74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertNotNull(charset81);
        org.junit.Assert.assertTrue("'" + escapeMode82 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode82.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test14834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14834");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings14.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings14.forceAllElementAsBlock(true);
        boolean boolean19 = outputSettings14.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test14835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14835");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.baseUri();
        org.jsoup.nodes.Node node12 = textNode2.removeAttr("text");
        org.jsoup.nodes.Attributes attributes13 = textNode2.attributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(attributes13);
    }

    @Test
    public void test14836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14836");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode9 = textNode2.splitText(0);
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode9.childNodes();
        org.jsoup.nodes.Node node11 = textNode9.previousSibling();
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        int int30 = outputSettings14.getindentAmount();
        outputSettings14.indentAmount = 'a';
        textNode9.outerHtmlTail(stringBuilder12, (int) (byte) 10, outputSettings14);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node35 = textNode9.childNode(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test14837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14837");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        org.jsoup.nodes.Node node12 = textNode2.attr("text", "hi!");
        org.jsoup.nodes.Node node13 = node12.nextSibling();
        org.jsoup.nodes.TextNode textNode16 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str17 = textNode16.text;
        org.jsoup.nodes.Node node20 = textNode16.attr("#text", "text");
        java.lang.StringBuilder stringBuilder21 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        outputSettings24.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset30 = outputSettings29.charset();
        outputSettings24.setcharset(charset30);
        outputSettings23.setcharset(charset30);
        textNode16.outerHtmlTail(stringBuilder21, 0, outputSettings23);
        org.jsoup.nodes.Node node34 = textNode16.parent();
        boolean boolean36 = textNode16.hasAttr("#");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node37 = node12.after((org.jsoup.nodes.Node) textNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test14838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14838");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.text();
        org.jsoup.nodes.Node node9 = textNode7.clone();
        org.jsoup.nodes.Node node10 = textNode7.nextSibling();
        textNode7.ensureAttributes();
        org.jsoup.nodes.TextNode textNode14 = new org.jsoup.nodes.TextNode("text", "text");
        int int15 = textNode14.siblingIndex();
        int int16 = textNode14.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode14.childNodes();
        java.lang.String str18 = textNode14.getWholeText();
        java.lang.String str19 = textNode14.toString();
        org.jsoup.nodes.Node node21 = textNode14.removeAttr("t");
        org.jsoup.nodes.Node node22 = textNode14.nextSibling();
        org.jsoup.nodes.TextNode textNode23 = new org.jsoup.nodes.TextNode();
        textNode23.setBaseUri("hi!");
        java.lang.String str26 = textNode23.text;
        java.lang.String str27 = textNode23.nodeName();
        java.util.List<org.jsoup.nodes.Node> nodeList28 = textNode23.siblingNodes();
        boolean boolean29 = textNode14.equals((java.lang.Object) nodeList28);
        org.jsoup.nodes.Node node30 = textNode14.clone();
        java.lang.String str31 = textNode14.getTEXT_KEY();
        java.util.List<org.jsoup.nodes.Node> nodeList32 = textNode14.childNodes();
        textNode14.settext("i!");
        org.jsoup.nodes.Node node35 = textNode14.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            textNode7.replaceWith(node35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "#text" + "'", str27, "#text");
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "text" + "'", str31, "text");
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test14839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14839");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.siblingNodes();
        textNode0.ensureAttributes();
        org.jsoup.nodes.Node node10 = textNode0.clone();
        java.lang.String str11 = textNode0.toString();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings12.charset = charset14;
        outputSettings12.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings12.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings12.escapeMode(escapeMode19);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings12.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        boolean boolean26 = outputSettings23.getprettyPrint();
        boolean boolean27 = outputSettings23.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings23.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings23.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings23.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        java.nio.charset.Charset charset39 = outputSettings33.charset();
        outputSettings32.setcharset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings12.charset(charset39);
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings12.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings12.getcharsetEncoder();
        int int44 = outputSettings12.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings12.getcharsetEncoder();
        java.nio.charset.Charset charset46 = outputSettings12.charset;
        boolean boolean47 = textNode0.equals((java.lang.Object) charset46);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNull(escapeMode42);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test14840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14840");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.getWholeText();
        textNode2.settext("h");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        java.lang.String str11 = textNode2.text;
        int int12 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        textNode15.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode20 = textNode15.text("text");
        java.util.List<org.jsoup.nodes.Node> nodeList21 = textNode20.childNodes();
        boolean boolean22 = textNode2.equals((java.lang.Object) nodeList21);
        java.lang.String str23 = textNode2.outerHtml();
        java.lang.String str24 = textNode2.gettext();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "h" + "'", str11, "h");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "h" + "'", str24, "h");
    }

    @Test
    public void test14841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14841");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.Document document6 = textNode0.ownerDocument();
        org.jsoup.nodes.Node node7 = textNode0.nextSibling();
        textNode0.setBaseUri("i");
        textNode0.settext("i!");
        org.jsoup.nodes.Document document12 = textNode0.ownerDocument();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(document12);
    }

    @Test
    public void test14842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14842");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#");
        java.lang.String str3 = textNode2.getTEXT_KEY();
        java.lang.String str4 = textNode2.nodeName();
        java.lang.String str6 = textNode2.absUrl("#text");
        org.jsoup.nodes.Node node7 = textNode2.clone();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test14843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14843");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("#text");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        outputSettings16.setindentAmount((int) (byte) 0);
        textNode11.outerHtmlTail(stringBuilder12, (int) '#', outputSettings16);
        boolean boolean20 = outputSettings16.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings16.encoder();
        java.nio.charset.Charset charset22 = outputSettings16.charset;
        int int23 = outputSettings16.indentAmount;
        boolean boolean24 = outputSettings16.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings27.clone();
        boolean boolean29 = outputSettings28.forceAllElementAsBlock();
        java.nio.charset.Charset charset30 = outputSettings28.charset();
        outputSettings16.charset = charset30;
        outputSettings16.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings16.clone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(outputSettings34);
    }

    @Test
    public void test14844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14844");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings9.getcharsetEncoder();
        outputSettings9.prettyPrint = true;
        boolean boolean17 = outputSettings9.forceAllElementAsBlock;
        textNode0.outerHtmlTail(stringBuilder7, (int) (byte) 100, outputSettings9);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode();
        outputSettings25.setprettyPrint(true);
        int int29 = outputSettings25.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings25.encoder();
        outputSettings9.setcharsetEncoder(charsetEncoder30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings32.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings32.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings32.getcharsetEncoder();
        outputSettings9.setcharsetEncoder(charsetEncoder37);
        java.nio.charset.Charset charset39 = outputSettings9.charset();
        outputSettings9.setforceAllElementAsBlock(true);
        outputSettings9.forceAllElementAsBlock = false;
        outputSettings9.indentAmount = (byte) -1;
        int int46 = outputSettings9.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset49 = outputSettings48.charset();
        outputSettings47.charset = charset49;
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.encoder();
        outputSettings47.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings47.escapeMode;
        outputSettings47.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder57 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset59 = outputSettings58.charset();
        java.nio.charset.CharsetEncoder charsetEncoder60 = outputSettings58.encoder();
        outputSettings58.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean64 = outputSettings63.prettyPrint;
        boolean boolean65 = outputSettings63.forceAllElementAsBlock;
        boolean boolean66 = outputSettings63.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset69 = outputSettings68.charset();
        outputSettings67.charset = charset69;
        java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings67.encoder();
        boolean boolean72 = outputSettings67.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings67.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings63.escapeMode(escapeMode73);
        outputSettings58.escapeMode = escapeMode73;
        outputSettings47.setescapeMode(escapeMode73);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings9.escapeMode(escapeMode73);
        java.nio.charset.CharsetEncoder charsetEncoder78 = outputSettings9.getcharsetEncoder();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder57);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(charsetEncoder60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(charsetEncoder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(charsetEncoder78);
    }

    @Test
    public void test14845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14845");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        boolean boolean7 = outputSettings0.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings13.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.prettyPrint();
        java.nio.charset.Charset charset18 = outputSettings15.charset();
        outputSettings14.charset = charset18;
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings14.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings14.getcharsetEncoder();
        outputSettings10.setcharsetEncoder(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
    }

    @Test
    public void test14846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14846");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        boolean boolean12 = outputSettings10.prettyPrint;
        boolean boolean13 = outputSettings10.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings10.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings18.charset = charset20;
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings18.encoder();
        boolean boolean23 = outputSettings18.getprettyPrint();
        int int24 = outputSettings18.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings25.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        outputSettings18.setcharsetEncoder(charsetEncoder29);
        int int31 = outputSettings18.getindentAmount();
        java.nio.charset.Charset charset32 = outputSettings18.charset();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings18.getcharsetEncoder();
        outputSettings10.setcharsetEncoder(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNull(escapeMode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
    }

    @Test
    public void test14847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14847");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str10 = textNode0.attr("t");
        org.jsoup.nodes.Node node11 = textNode0.clone();
        java.lang.String str12 = textNode0.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = textNode0.before("ext");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test14848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14848");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.gettext();
        textNode2.text = "hi!";
        java.lang.String str12 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node13 = textNode2.clone();
        textNode2.ensureAttributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test14849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14849");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings6.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings6.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings6.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings6.escapeMode();
        outputSettings6.setindentAmount((int) '4');
        int int15 = outputSettings6.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings6.prettyPrint(false);
        outputSettings6.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings6.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset22 = outputSettings21.charset();
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings21.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        outputSettings24.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset30 = outputSettings29.charset();
        outputSettings24.setcharset(charset30);
        outputSettings24.setprettyPrint(true);
        boolean boolean34 = outputSettings24.prettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings24.escapeMode;
        outputSettings21.escapeMode = escapeMode35;
        java.nio.charset.Charset charset37 = outputSettings21.charset;
        outputSettings6.charset = charset37;
        outputSettings6.indentAmount = 32;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset37);
    }

    @Test
    public void test14850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14850");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = null;
        outputSettings6.setescapeMode(escapeMode9);
        outputSettings6.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings6.setescapeMode(escapeMode13);
        boolean boolean15 = outputSettings6.forceAllElementAsBlock;
        int int16 = outputSettings6.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings19.setescapeMode(escapeMode22);
        outputSettings19.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings19.setescapeMode(escapeMode26);
        boolean boolean28 = outputSettings19.forceAllElementAsBlock;
        int int29 = outputSettings19.indentAmount;
        java.nio.charset.Charset charset30 = outputSettings19.getcharset();
        outputSettings18.setcharset(charset30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings0.charset(charset30);
        boolean boolean33 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings34.charset = charset36;
        outputSettings34.indentAmount = (-1);
        java.nio.charset.Charset charset40 = outputSettings34.charset();
        outputSettings34.setforceAllElementAsBlock(true);
        boolean boolean43 = outputSettings34.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings34.clone();
        java.nio.charset.Charset charset45 = outputSettings34.charset;
        java.nio.charset.Charset charset46 = outputSettings34.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings34.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings0.escapeMode(escapeMode47);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings49.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings49.escapeMode;
        outputSettings0.setescapeMode(escapeMode53);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14851");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setforceAllElementAsBlock(true);
        boolean boolean9 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.clone();
        java.nio.charset.Charset charset11 = outputSettings0.charset;
        java.nio.charset.Charset charset12 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings0.encoder();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetEncoder13);
    }

    @Test
    public void test14852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14852");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "ext");
        java.lang.String str3 = textNode2.toString();
        java.lang.String str4 = textNode2.nodeName();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
    }

    @Test
    public void test14853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14853");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node11 = textNode2.attr("hi!", "");
        textNode2.settext("t");
        org.jsoup.nodes.Node node14 = textNode2.nextSibling();
        java.lang.String str16 = textNode2.attr("");
        java.lang.String str17 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
    }

    @Test
    public void test14854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14854");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        textNode2.setBaseUri("ext");
        org.jsoup.nodes.TextNode textNode8 = new org.jsoup.nodes.TextNode("text", "text");
        int int9 = textNode8.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode8.childNodes();
        org.jsoup.nodes.TextNode textNode12 = textNode8.text("");
        int int13 = textNode8.siblingIndex();
        org.jsoup.nodes.TextNode textNode15 = textNode8.text("hi!");
        java.lang.String str17 = textNode8.absUrl("text");
        org.jsoup.nodes.TextNode textNode19 = textNode8.splitText(1);
        textNode19.ensureAttributes();
        java.lang.String str22 = textNode19.attr("ext");
        org.jsoup.nodes.Node node23 = textNode19.clone();
        boolean boolean24 = textNode19.isBlank();
        java.lang.String str25 = textNode19.getWholeText();
        org.jsoup.nodes.Attributes attributes26 = textNode19.attributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node27 = textNode2.before((org.jsoup.nodes.Node) textNode19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(textNode19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "i!" + "'", str25, "i!");
        org.junit.Assert.assertNotNull(attributes26);
    }

    @Test
    public void test14855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14855");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        java.nio.charset.Charset charset7 = outputSettings0.getcharset();
        outputSettings0.setforceAllElementAsBlock(true);
        boolean boolean10 = outputSettings0.getprettyPrint();
        java.nio.charset.Charset charset11 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings14.getcharsetEncoder();
        outputSettings14.prettyPrint = true;
        outputSettings14.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        boolean boolean27 = outputSettings24.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings24.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        int int33 = outputSettings30.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings30.getcharsetEncoder();
        outputSettings29.setcharsetEncoder(charsetEncoder34);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        boolean boolean39 = outputSettings36.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings36.prettyPrint(false);
        java.nio.charset.Charset charset42 = outputSettings36.charset();
        outputSettings29.charset = charset42;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings14.charset(charset42);
        java.nio.charset.Charset charset45 = outputSettings44.getcharset();
        outputSettings13.charset = charset45;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(charset45);
    }

    @Test
    public void test14856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14856");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        boolean boolean12 = textNode2.isBlank();
        textNode2.text = "";
        java.lang.String str15 = textNode2.baseUri();
        org.jsoup.nodes.Document document16 = textNode2.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
        org.junit.Assert.assertNull(document16);
    }

    @Test
    public void test14857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14857");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings14.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings31.clone();
        int int33 = outputSettings32.getindentAmount();
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        outputSettings14.setcharset(charset34);
        outputSettings0.setcharset(charset34);
        boolean boolean37 = outputSettings0.prettyPrint();
        int int38 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        int int41 = outputSettings39.indentAmount;
        java.nio.charset.Charset charset42 = outputSettings39.charset;
        boolean boolean43 = outputSettings39.prettyPrint;
        outputSettings39.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings39.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings0.escapeMode(escapeMode46);
        org.jsoup.nodes.TextNode textNode48 = new org.jsoup.nodes.TextNode();
        textNode48.setBaseUri("hi!");
        java.lang.String str51 = textNode48.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder52 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        boolean boolean57 = outputSettings54.getprettyPrint();
        boolean boolean58 = outputSettings54.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings54.indentAmount((int) '4');
        textNode48.outerHtmlTail(stringBuilder52, (int) (short) 100, outputSettings60);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean63 = outputSettings62.prettyPrint;
        boolean boolean64 = outputSettings62.forceAllElementAsBlock;
        boolean boolean65 = outputSettings62.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings62.prettyPrint(false);
        outputSettings62.setforceAllElementAsBlock(false);
        outputSettings62.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset72 = outputSettings62.charset;
        java.nio.charset.CharsetEncoder charsetEncoder73 = outputSettings62.getcharsetEncoder();
        outputSettings60.charsetEncoder = charsetEncoder73;
        outputSettings47.charsetEncoder = charsetEncoder73;
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings47.indentAmount((int) (short) 100);
        boolean boolean78 = outputSettings77.getprettyPrint();
        outputSettings77.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings77.forceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "text" + "'", str51, "text");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(charsetEncoder73);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(outputSettings82);
    }

    @Test
    public void test14858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14858");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        java.lang.String str11 = textNode2.getWholeText();
        int int12 = textNode2.siblingIndex();
        java.lang.String str13 = textNode2.toString();
        org.jsoup.nodes.Node node15 = textNode2.removeAttr("i!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test14859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14859");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        java.lang.String str7 = textNode2.gettext();
        textNode2.setBaseUri("t");
        java.lang.String str11 = textNode2.attr("ext");
        org.jsoup.nodes.TextNode textNode14 = new org.jsoup.nodes.TextNode("t", "t");
        java.lang.String str15 = textNode14.text();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "t" + "'", str15, "t");
    }

    @Test
    public void test14860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14860");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean3 = textNode2.isBlank();
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.setBaseUri("#text");
        java.lang.String str7 = textNode2.baseUri();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
    }

    @Test
    public void test14861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14861");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        outputSettings8.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings8.setcharset(charset14);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.prettyPrint(false);
        int int23 = outputSettings22.getindentAmount();
        outputSettings22.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset28 = outputSettings27.charset();
        outputSettings26.charset = charset28;
        outputSettings26.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        int int35 = outputSettings32.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings32.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        outputSettings38.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset44 = outputSettings43.charset();
        outputSettings38.setcharset(charset44);
        outputSettings37.setcharset(charset44);
        outputSettings32.setcharset(charset44);
        outputSettings26.setcharset(charset44);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings22.charset(charset44);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        boolean boolean53 = outputSettings50.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings50.prettyPrint(false);
        int int56 = outputSettings55.getindentAmount();
        outputSettings55.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder59 = outputSettings55.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        boolean boolean63 = outputSettings60.getprettyPrint();
        boolean boolean64 = outputSettings60.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings60.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings66.escapeMode();
        outputSettings55.setescapeMode(escapeMode67);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings22.escapeMode(escapeMode67);
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings8.escapeMode(escapeMode67);
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings8.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        int int76 = outputSettings73.getindentAmount();
        boolean boolean77 = outputSettings73.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder78 = outputSettings73.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings73.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset82 = outputSettings81.charset();
        outputSettings80.charset = charset82;
        java.nio.charset.CharsetEncoder charsetEncoder84 = outputSettings80.encoder();
        boolean boolean85 = outputSettings80.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode86 = outputSettings80.escapeMode;
        outputSettings73.setescapeMode(escapeMode86);
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings72.escapeMode(escapeMode86);
        org.jsoup.nodes.Entities.EscapeMode escapeMode89 = outputSettings88.escapeMode();
        outputSettings6.setescapeMode(escapeMode89);
        outputSettings6.setindentAmount((int) (byte) 0);
        java.nio.charset.CharsetEncoder charsetEncoder93 = outputSettings6.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(charsetEncoder78);
        org.junit.Assert.assertNotNull(charsetEncoder79);
        org.junit.Assert.assertNotNull(charset82);
        org.junit.Assert.assertNotNull(charsetEncoder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + escapeMode86 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode86.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertTrue("'" + escapeMode89 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode89.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder93);
    }

    @Test
    public void test14862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14862");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        java.nio.charset.Charset charset11 = null;
        outputSettings10.setcharset(charset11);
        boolean boolean13 = outputSettings10.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings10.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings17.charset = charset19;
        outputSettings17.indentAmount = (-1);
        java.nio.charset.Charset charset23 = outputSettings17.charset();
        outputSettings17.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        boolean boolean29 = outputSettings26.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings26.prettyPrint(false);
        int int32 = outputSettings31.getindentAmount();
        outputSettings31.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings31.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        boolean boolean39 = outputSettings36.getprettyPrint();
        boolean boolean40 = outputSettings36.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings36.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings42.escapeMode();
        outputSettings31.setescapeMode(escapeMode43);
        outputSettings17.escapeMode = escapeMode43;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings10.escapeMode(escapeMode43);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings0.escapeMode(escapeMode43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings0.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings0.charsetEncoder;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder49);
    }

    @Test
    public void test14863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14863");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "i!");
        java.lang.String str4 = textNode2.attr("t");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node6 = textNode2.childNode((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test14864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14864");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        textNode6.ensureAttributes();
        java.lang.String str9 = textNode6.text;
        boolean boolean10 = textNode6.isBlank();
        org.jsoup.nodes.Node node11 = textNode6.nextSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test14865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14865");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        textNode2.setBaseUri("hi!");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings11.setescapeMode(escapeMode14);
        outputSettings11.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings11.setescapeMode(escapeMode18);
        boolean boolean20 = outputSettings11.forceAllElementAsBlock;
        int int21 = outputSettings11.indentAmount;
        java.nio.charset.Charset charset22 = outputSettings11.getcharset();
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) 1, outputSettings11);
        java.lang.String str24 = textNode2.text;
        org.jsoup.nodes.Node node25 = textNode2.clone();
        org.jsoup.nodes.Node node27 = textNode2.removeAttr("!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test14866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14866");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.Node node6 = textNode2.previousSibling();
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode2.childNodes();
        boolean boolean9 = textNode2.hasAttr("h");
        int int10 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        java.lang.String str12 = textNode2.outerHtml();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
    }

    @Test
    public void test14867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14867");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        boolean boolean7 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("t");
        java.lang.String str10 = textNode2.toString();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("#text");
        java.lang.String str13 = textNode2.nodeName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "t" + "'", str10, "t");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
    }

    @Test
    public void test14868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14868");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings6.encoder();
        int int8 = outputSettings6.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings6.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.forceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.getescapeMode();
        java.nio.charset.Charset charset20 = outputSettings18.getcharset();
        java.nio.charset.Charset charset21 = outputSettings18.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings6.charset(charset21);
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings6.charsetEncoder;
        boolean boolean24 = outputSettings6.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test14869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14869");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings4.clone();
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(outputSettings5);
    }

    @Test
    public void test14870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14870");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Document document1 = textNode0.ownerDocument();
        org.jsoup.nodes.TextNode textNode3 = textNode0.text("h");
        java.lang.String str4 = textNode0.baseUri();
        org.jsoup.nodes.TextNode textNode6 = textNode0.splitText(0);
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertNotNull(textNode3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(textNode6);
    }

    @Test
    public void test14871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14871");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.Charset charset5 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.indentAmount((int) (byte) 10);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings7.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
    }

    @Test
    public void test14872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14872");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        int int7 = textNode2.siblingIndex();
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings10.setescapeMode(escapeMode13);
        boolean boolean15 = outputSettings10.prettyPrint;
        outputSettings10.indentAmount = 1;
        boolean boolean18 = outputSettings10.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder8, (int) (byte) 1, outputSettings10);
        outputSettings10.forceAllElementAsBlock = true;
        boolean boolean22 = outputSettings10.getprettyPrint();
        boolean boolean23 = outputSettings10.prettyPrint;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test14873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14873");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        outputSettings2.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        int int11 = outputSettings10.getindentAmount();
        outputSettings10.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings14.charset = charset16;
        outputSettings14.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        int int23 = outputSettings20.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings20.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        outputSettings26.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset32 = outputSettings31.charset();
        outputSettings26.setcharset(charset32);
        outputSettings25.setcharset(charset32);
        outputSettings20.setcharset(charset32);
        outputSettings14.setcharset(charset32);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings10.charset(charset32);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        boolean boolean41 = outputSettings38.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings38.prettyPrint(false);
        int int44 = outputSettings43.getindentAmount();
        outputSettings43.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings43.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        boolean boolean51 = outputSettings48.getprettyPrint();
        boolean boolean52 = outputSettings48.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings48.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings54.escapeMode();
        outputSettings43.setescapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings10.escapeMode(escapeMode55);
        outputSettings2.setescapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings2.clone();
        java.nio.charset.Charset charset60 = outputSettings59.getcharset();
        boolean boolean61 = outputSettings59.getprettyPrint();
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test14874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14874");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        java.lang.String str4 = textNode2.attr("");
        org.jsoup.nodes.Node node5 = textNode2.previousSibling();
        java.lang.String str6 = textNode2.toString();
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node8 = textNode2.previousSibling();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test14875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14875");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "");
        org.jsoup.nodes.Attributes attributes3 = textNode2.attributes();
        textNode2.text = "h";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node7 = textNode2.before("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(attributes3);
    }

    @Test
    public void test14876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14876");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        org.jsoup.nodes.Node node3 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("hi!");
        int int6 = textNode5.siblingIndex();
        org.jsoup.nodes.Node node7 = textNode5.previousSibling();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test14877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14877");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        int int25 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node28 = textNode2.attr("#text", "#text");
        org.jsoup.nodes.TextNode textNode30 = textNode2.text("");
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings31.setprettyPrint(true);
        java.nio.charset.Charset charset41 = outputSettings31.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings31.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings31.escapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings31.charsetEncoder;
        boolean boolean45 = textNode2.equals((java.lang.Object) outputSettings31);
        java.util.List<org.jsoup.nodes.Node> nodeList46 = textNode2.siblingNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(textNode30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeList46);
    }

    @Test
    public void test14878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14878");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        java.nio.charset.Charset charset17 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        java.nio.charset.Charset charset25 = outputSettings19.charset();
        boolean boolean26 = outputSettings19.forceAllElementAsBlock();
        java.nio.charset.Charset charset27 = outputSettings19.getcharset();
        boolean boolean28 = outputSettings19.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        int int32 = outputSettings29.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings29.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        outputSettings35.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset41 = outputSettings40.charset();
        outputSettings35.setcharset(charset41);
        outputSettings34.setcharset(charset41);
        outputSettings29.setcharset(charset41);
        int int45 = outputSettings29.getindentAmount();
        outputSettings29.indentAmount = 'a';
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings29.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings19.escapeMode(escapeMode48);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings0.escapeMode(escapeMode48);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.forceAllElementAsBlock(true);
        outputSettings52.forceAllElementAsBlock = false;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings52.charset("text");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: text");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertNotNull(outputSettings52);
    }

    @Test
    public void test14879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14879");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("ext", "hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        boolean boolean11 = outputSettings7.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings7.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings13.setescapeMode(escapeMode16);
        outputSettings13.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        outputSettings13.setescapeMode(escapeMode20);
        boolean boolean22 = outputSettings13.forceAllElementAsBlock;
        int int23 = outputSettings13.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings13.escapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings26.setescapeMode(escapeMode29);
        outputSettings26.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        outputSettings26.setescapeMode(escapeMode33);
        boolean boolean35 = outputSettings26.forceAllElementAsBlock;
        int int36 = outputSettings26.indentAmount;
        java.nio.charset.Charset charset37 = outputSettings26.getcharset();
        outputSettings25.setcharset(charset37);
        outputSettings7.charset = charset37;
        org.jsoup.nodes.TextNode textNode42 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = textNode42.equals((java.lang.Object) outputSettings43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings43.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings43.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings7.charset(charset47);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        outputSettings49.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings49.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder56 = outputSettings49.encoder();
        outputSettings49.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset61 = outputSettings60.charset();
        outputSettings59.charset = charset61;
        outputSettings59.indentAmount = (-1);
        java.nio.charset.Charset charset65 = outputSettings59.charset();
        outputSettings59.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean69 = outputSettings68.prettyPrint;
        boolean boolean70 = outputSettings68.forceAllElementAsBlock;
        boolean boolean71 = outputSettings68.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings68.prettyPrint(false);
        int int74 = outputSettings73.getindentAmount();
        outputSettings73.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder77 = outputSettings73.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean79 = outputSettings78.prettyPrint;
        boolean boolean80 = outputSettings78.forceAllElementAsBlock;
        boolean boolean81 = outputSettings78.getprettyPrint();
        boolean boolean82 = outputSettings78.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings78.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode85 = outputSettings84.escapeMode();
        outputSettings73.setescapeMode(escapeMode85);
        outputSettings59.escapeMode = escapeMode85;
        outputSettings49.setescapeMode(escapeMode85);
        outputSettings48.escapeMode = escapeMode85;
        textNode2.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings48);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node92 = textNode2.childNode((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(charsetEncoder56);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertTrue("'" + escapeMode85 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode85.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14880");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = null;
        outputSettings5.setcharset(charset6);
        boolean boolean8 = outputSettings5.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        int int11 = outputSettings5.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings14.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        outputSettings17.setescapeMode(escapeMode20);
        outputSettings17.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = null;
        outputSettings17.setescapeMode(escapeMode24);
        boolean boolean26 = outputSettings17.forceAllElementAsBlock;
        int int27 = outputSettings17.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings17.escapeMode(escapeMode28);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        outputSettings30.setescapeMode(escapeMode33);
        outputSettings30.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = null;
        outputSettings30.setescapeMode(escapeMode37);
        boolean boolean39 = outputSettings30.forceAllElementAsBlock;
        int int40 = outputSettings30.indentAmount;
        java.nio.charset.Charset charset41 = outputSettings30.getcharset();
        outputSettings29.setcharset(charset41);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings14.charset(charset41);
        outputSettings5.charset = charset41;
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings5.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings5.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean48 = outputSettings47.getforceAllElementAsBlock();
        boolean boolean49 = outputSettings47.getprettyPrint();
        outputSettings47.setprettyPrint(false);
        int int52 = outputSettings47.getindentAmount();
        outputSettings47.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        outputSettings55.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings55.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder62 = outputSettings61.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings61.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean66 = outputSettings65.prettyPrint;
        boolean boolean67 = outputSettings65.forceAllElementAsBlock;
        outputSettings65.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset71 = outputSettings70.charset();
        outputSettings65.setcharset(charset71);
        outputSettings61.charset = charset71;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings47.charset(charset71);
        outputSettings46.charset = charset71;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(charsetEncoder62);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(charset71);
        org.junit.Assert.assertNotNull(outputSettings74);
    }

    @Test
    public void test14881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14881");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.getTEXT_KEY();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.siblingNodes();
        java.lang.String str13 = textNode2.absUrl("#");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test14882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14882");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("ext", "ext");
        java.lang.String str3 = textNode2.toString();
        textNode2.text = "#";
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ext" + "'", str3, "ext");
    }

    @Test
    public void test14883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14883");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "ext");
        org.jsoup.nodes.Node node4 = textNode2.removeAttr("#");
        org.jsoup.nodes.Node node5 = textNode2.clone();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test14884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14884");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        org.jsoup.nodes.Node node9 = textNode7.previousSibling();
        org.jsoup.nodes.Node node12 = textNode7.attr("text", "text");
        java.lang.String str14 = textNode7.attr("#text");
        textNode7.text = "h";
        java.lang.String str17 = textNode7.outerHtml();
        org.jsoup.nodes.TextNode textNode20 = new org.jsoup.nodes.TextNode("text", "text");
        int int21 = textNode20.siblingIndex();
        int int22 = textNode20.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList23 = textNode20.childNodes();
        java.lang.String str24 = textNode20.gettext();
        textNode20.settext("#text");
        java.lang.String str27 = textNode20.text;
        textNode20.settext("t");
        textNode20.ensureAttributes();
        java.lang.String str31 = textNode20.gettext();
        java.lang.String str32 = textNode20.getTEXT_KEY();
        boolean boolean34 = textNode20.hasAttr("i!");
        boolean boolean36 = textNode20.hasAttr("!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node37 = textNode7.before((org.jsoup.nodes.Node) textNode20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "text" + "'", str24, "text");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "#text" + "'", str27, "#text");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "t" + "'", str31, "t");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "text" + "'", str32, "text");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test14885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14885");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str10 = textNode2.absUrl("hi!");
        java.lang.String str11 = textNode2.text();
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings14.encoder();
        boolean boolean17 = outputSettings14.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings14.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = (short) 10;
        java.nio.charset.Charset charset25 = outputSettings20.charset;
        org.jsoup.nodes.TextNode textNode28 = new org.jsoup.nodes.TextNode("text", "text");
        int int29 = textNode28.siblingIndex();
        int int30 = textNode28.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList31 = textNode28.childNodes();
        java.lang.StringBuilder stringBuilder32 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        int int37 = outputSettings34.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings34.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        outputSettings40.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings40.setcharset(charset46);
        outputSettings39.setcharset(charset46);
        outputSettings34.setcharset(charset46);
        textNode28.outerHtmlTail(stringBuilder32, 10, outputSettings34);
        int int51 = outputSettings34.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings34.encoder();
        outputSettings20.charsetEncoder = charsetEncoder52;
        outputSettings19.setcharsetEncoder(charsetEncoder52);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean59 = outputSettings58.prettyPrint;
        boolean boolean60 = outputSettings58.forceAllElementAsBlock;
        boolean boolean61 = outputSettings58.getprettyPrint();
        boolean boolean62 = outputSettings58.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings58.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = outputSettings58.getescapeMode();
        outputSettings57.setescapeMode(escapeMode65);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings19.escapeMode(escapeMode65);
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder12, (int) '4', outputSettings19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings67);
    }

    @Test
    public void test14886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14886");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "");
        textNode2.ensureAttributes();
        java.lang.StringBuilder stringBuilder4 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset8 = outputSettings7.charset();
        outputSettings6.charset = charset8;
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.encoder();
        boolean boolean11 = outputSettings6.prettyPrint;
        java.nio.charset.Charset charset12 = outputSettings6.charset;
        outputSettings6.setforceAllElementAsBlock(false);
        textNode2.outerHtmlTail(stringBuilder4, 52, outputSettings6);
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode2.childNodes();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(nodeList16);
    }

    @Test
    public void test14887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14887");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.encoder();
        boolean boolean8 = outputSettings0.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test14888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14888");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset7 = outputSettings0.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        boolean boolean11 = outputSettings8.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings8.prettyPrint(false);
        java.nio.charset.Charset charset14 = outputSettings8.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings8.getescapeMode();
        outputSettings0.escapeMode = escapeMode15;
        boolean boolean17 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings18.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings24.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings24.escapeMode = escapeMode26;
        java.nio.charset.Charset charset28 = outputSettings24.getcharset();
        outputSettings0.charset = charset28;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(charset28);
    }

    @Test
    public void test14889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14889");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("h", "h");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset7 = outputSettings6.charset();
        outputSettings5.charset = charset7;
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings5.encoder();
        outputSettings5.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings5.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings13.charset = charset15;
        outputSettings13.indentAmount = (-1);
        java.nio.charset.Charset charset19 = outputSettings13.charset();
        outputSettings13.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        boolean boolean25 = outputSettings22.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings22.prettyPrint(false);
        int int28 = outputSettings27.getindentAmount();
        outputSettings27.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        boolean boolean35 = outputSettings32.getprettyPrint();
        boolean boolean36 = outputSettings32.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings32.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.escapeMode();
        outputSettings27.setescapeMode(escapeMode39);
        outputSettings13.escapeMode = escapeMode39;
        outputSettings5.setescapeMode(escapeMode39);
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings5.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings5.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings44.clone();
        java.nio.charset.Charset charset46 = null;
        outputSettings44.charset = charset46;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        outputSettings48.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset54 = outputSettings53.charset();
        outputSettings48.setcharset(charset54);
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset57 = outputSettings56.charset();
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings56.encoder();
        outputSettings48.setcharsetEncoder(charsetEncoder58);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        int int63 = outputSettings60.getindentAmount();
        boolean boolean64 = outputSettings60.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder65 = outputSettings60.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder66 = outputSettings60.getcharsetEncoder();
        outputSettings48.setcharsetEncoder(charsetEncoder66);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings48.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings69.prettyPrint(true);
        org.jsoup.nodes.TextNode textNode74 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean76 = outputSettings75.prettyPrint;
        boolean boolean77 = textNode74.equals((java.lang.Object) outputSettings75);
        int int78 = outputSettings75.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean80 = outputSettings79.prettyPrint;
        boolean boolean81 = outputSettings79.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder82 = outputSettings79.charsetEncoder;
        outputSettings75.setcharsetEncoder(charsetEncoder82);
        outputSettings71.charsetEncoder = charsetEncoder82;
        outputSettings71.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings71.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings88.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode91 = outputSettings88.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings92 = outputSettings44.escapeMode(escapeMode91);
        textNode2.outerHtmlTail(stringBuilder3, (int) (short) 0, outputSettings92);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode95 = textNode2.splitText((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charsetEncoder65);
        org.junit.Assert.assertNotNull(charsetEncoder66);
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charsetEncoder82);
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertTrue("'" + escapeMode91 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode91.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings92);
    }

    @Test
    public void test14890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14890");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        java.lang.String str7 = textNode2.gettext();
        textNode2.ensureAttributes();
        textNode2.ensureAttributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
    }

    @Test
    public void test14891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14891");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        java.lang.String str5 = textNode2.text();
        org.jsoup.nodes.Node node7 = textNode2.removeAttr("t");
        org.jsoup.nodes.TextNode textNode8 = new org.jsoup.nodes.TextNode();
        textNode8.setBaseUri("hi!");
        java.lang.String str11 = textNode8.getTEXT_KEY();
        textNode8.text = "hi!";
        org.jsoup.nodes.TextNode textNode15 = textNode8.text("h");
        textNode15.ensureAttributes();
        java.lang.String str17 = textNode15.nodeName();
        java.lang.String str19 = textNode15.attr("");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#text" + "'", str17, "#text");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test14892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14892");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        java.lang.String str7 = textNode2.gettext();
        org.jsoup.nodes.Node node8 = textNode2.parent();
        boolean boolean9 = textNode2.isBlank();
        java.lang.String str10 = textNode2.text();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test14893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14893");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        outputSettings8.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings8.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings14.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings14.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        boolean boolean19 = textNode2.equals((java.lang.Object) outputSettings14);
        outputSettings14.setindentAmount((int) '4');
        outputSettings14.indentAmount = 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        outputSettings24.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.setprettyPrint(false);
        outputSettings30.setindentAmount(0);
        outputSettings30.indentAmount = (byte) 1;
        java.nio.charset.Charset charset39 = outputSettings30.getcharset();
        outputSettings24.setcharset(charset39);
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings24.getescapeMode();
        org.jsoup.nodes.TextNode textNode44 = new org.jsoup.nodes.TextNode("text", "text");
        int int45 = textNode44.siblingIndex();
        int int46 = textNode44.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList47 = textNode44.childNodes();
        java.lang.StringBuilder stringBuilder48 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        int int53 = outputSettings50.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings50.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        outputSettings56.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset62 = outputSettings61.charset();
        outputSettings56.setcharset(charset62);
        outputSettings55.setcharset(charset62);
        outputSettings50.setcharset(charset62);
        textNode44.outerHtmlTail(stringBuilder48, 10, outputSettings50);
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings50.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings24.escapeMode(escapeMode67);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings14.escapeMode(escapeMode67);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNotNull(outputSettings69);
    }

    @Test
    public void test14894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14894");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        int int2 = outputSettings1.getindentAmount();
        int int3 = outputSettings1.indentAmount;
        outputSettings1.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        outputSettings6.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        outputSettings6.setcharset(charset12);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings14.encoder();
        outputSettings6.setcharsetEncoder(charsetEncoder16);
        java.nio.charset.Charset charset18 = outputSettings6.getcharset();
        int int19 = outputSettings6.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings6.escapeMode();
        boolean boolean21 = outputSettings6.forceAllElementAsBlock();
        java.nio.charset.Charset charset22 = outputSettings6.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings1.charset(charset22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings1.clone();
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings24);
    }

    @Test
    public void test14895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14895");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings4.charset = charset6;
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings4.encoder();
        boolean boolean9 = outputSettings4.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings4.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings0.escapeMode(escapeMode10);
        outputSettings11.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings14.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        outputSettings14.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings14.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        outputSettings22.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset28 = outputSettings27.charset();
        outputSettings22.setcharset(charset28);
        outputSettings22.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings32.charset = charset34;
        outputSettings32.indentAmount = (-1);
        java.nio.charset.Charset charset38 = outputSettings32.charset();
        outputSettings32.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset41 = outputSettings32.getcharset();
        outputSettings22.setcharset(charset41);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings14.charset(charset41);
        org.jsoup.nodes.TextNode textNode44 = new org.jsoup.nodes.TextNode();
        textNode44.setBaseUri("hi!");
        java.lang.String str47 = textNode44.getTEXT_KEY();
        textNode44.text = "hi!";
        boolean boolean51 = textNode44.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList52 = textNode44.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        boolean boolean56 = outputSettings53.getprettyPrint();
        boolean boolean57 = outputSettings53.forceAllElementAsBlock();
        boolean boolean58 = outputSettings53.forceAllElementAsBlock;
        boolean boolean59 = textNode44.equals((java.lang.Object) outputSettings53);
        java.nio.charset.CharsetEncoder charsetEncoder60 = outputSettings53.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings53.getcharsetEncoder();
        outputSettings43.setcharsetEncoder(charsetEncoder61);
        outputSettings11.charsetEncoder = charsetEncoder61;
        org.jsoup.nodes.TextNode textNode66 = new org.jsoup.nodes.TextNode("text", "text");
        int int67 = textNode66.siblingIndex();
        textNode66.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode71 = textNode66.text("text");
        java.lang.String str72 = textNode71.baseUri();
        boolean boolean73 = textNode71.isBlank();
        java.lang.String str74 = textNode71.text;
        java.lang.StringBuilder stringBuilder75 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean78 = outputSettings77.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings77.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings79.clone();
        outputSettings79.prettyPrint = true;
        textNode71.outerHtmlTail(stringBuilder75, (int) (short) 0, outputSettings79);
        outputSettings79.setprettyPrint(false);
        java.nio.charset.Charset charset86 = outputSettings79.charset();
        outputSettings11.charset = charset86;
        java.nio.charset.Charset charset88 = outputSettings11.getcharset();
        int int89 = outputSettings11.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "text" + "'", str47, "text");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charsetEncoder60);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(textNode71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "text" + "'", str72, "text");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "text" + "'", str74, "text");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertNotNull(charset86);
        org.junit.Assert.assertNotNull(charset88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test14896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14896");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.Attributes attributes9 = textNode0.attributes();
        java.lang.String str10 = textNode0.getWholeText();
        org.jsoup.nodes.Node node13 = textNode0.attr("ext", "text");
        org.jsoup.nodes.Attributes attributes14 = textNode0.attributes();
        java.lang.String str15 = textNode0.gettext();
        java.lang.String str17 = textNode0.attr("t");
        textNode0.setBaseUri("!");
        java.lang.String str20 = textNode0.nodeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(attributes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
    }

    @Test
    public void test14897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14897");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        textNode2.settext("#");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(attributes8);
    }

    @Test
    public void test14898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14898");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        outputSettings0.indentAmount = 'a';
        outputSettings0.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings10.setescapeMode(escapeMode13);
        outputSettings10.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings10.setescapeMode(escapeMode17);
        boolean boolean19 = outputSettings10.forceAllElementAsBlock;
        int int20 = outputSettings10.indentAmount;
        java.nio.charset.Charset charset21 = outputSettings10.getcharset();
        outputSettings7.charset = charset21;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings7.escapeMode();
        java.nio.charset.Charset charset24 = outputSettings7.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings7.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder25);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings27.charset = charset29;
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.encoder();
        outputSettings27.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset34 = outputSettings27.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings0.charset(charset34);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        outputSettings36.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings36.getcharsetEncoder();
        outputSettings36.prettyPrint = true;
        boolean boolean44 = outputSettings36.forceAllElementAsBlock;
        int int45 = outputSettings36.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings36.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings36.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        int int51 = outputSettings48.getindentAmount();
        boolean boolean52 = outputSettings48.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        boolean boolean56 = outputSettings53.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings53.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        outputSettings59.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings59.getcharsetEncoder();
        outputSettings53.setcharsetEncoder(charsetEncoder64);
        outputSettings48.charsetEncoder = charsetEncoder64;
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset68 = outputSettings67.charset();
        java.nio.charset.CharsetEncoder charsetEncoder69 = outputSettings67.encoder();
        boolean boolean70 = outputSettings67.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset73 = outputSettings72.charset();
        outputSettings71.charset = charset73;
        outputSettings71.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder77 = outputSettings71.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings71.escapeMode(escapeMode78);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset82 = outputSettings81.charset();
        outputSettings80.charset = charset82;
        outputSettings80.indentAmount = (-1);
        java.nio.charset.Charset charset86 = outputSettings80.charset();
        boolean boolean87 = outputSettings80.forceAllElementAsBlock();
        java.nio.charset.Charset charset88 = outputSettings80.getcharset();
        outputSettings79.charset = charset88;
        outputSettings67.setcharset(charset88);
        outputSettings48.setcharset(charset88);
        java.nio.charset.Charset charset92 = outputSettings48.charset();
        outputSettings36.charset = charset92;
        org.jsoup.nodes.Document.OutputSettings outputSettings94 = outputSettings35.charset(charset92);
        int int95 = outputSettings94.indentAmount();
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(charsetEncoder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(charsetEncoder77);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertNotNull(charset82);
        org.junit.Assert.assertNotNull(charset86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(charset88);
        org.junit.Assert.assertNotNull(charset92);
        org.junit.Assert.assertNotNull(outputSettings94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 97 + "'", int95 == 97);
    }

    @Test
    public void test14899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14899");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        int int25 = outputSettings8.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings8.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings8.indentAmount((int) (short) 100);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings8.indentAmount(10);
        int int31 = outputSettings8.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        outputSettings32.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset38 = outputSettings37.charset();
        outputSettings32.setcharset(charset38);
        outputSettings32.setprettyPrint(true);
        java.nio.charset.Charset charset42 = outputSettings32.getcharset();
        outputSettings32.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings32.forceAllElementAsBlock(false);
        outputSettings46.setforceAllElementAsBlock(false);
        outputSettings46.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset53 = outputSettings52.charset();
        outputSettings51.charset = charset53;
        outputSettings51.indentAmount = (-1);
        java.nio.charset.Charset charset57 = outputSettings51.charset();
        outputSettings51.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        boolean boolean63 = outputSettings60.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings60.prettyPrint(false);
        int int66 = outputSettings65.getindentAmount();
        outputSettings65.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder69 = outputSettings65.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean71 = outputSettings70.prettyPrint;
        boolean boolean72 = outputSettings70.forceAllElementAsBlock;
        boolean boolean73 = outputSettings70.getprettyPrint();
        boolean boolean74 = outputSettings70.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings70.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode77 = outputSettings76.escapeMode();
        outputSettings65.setescapeMode(escapeMode77);
        outputSettings51.escapeMode = escapeMode77;
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings46.escapeMode(escapeMode77);
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings8.escapeMode(escapeMode77);
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean83 = outputSettings82.prettyPrint;
        boolean boolean84 = outputSettings82.forceAllElementAsBlock;
        int int85 = outputSettings82.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder86 = outputSettings82.charsetEncoder;
        outputSettings8.setcharsetEncoder(charsetEncoder86);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + escapeMode77 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode77.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder86);
    }

    @Test
    public void test14900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14900");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        outputSettings0.prettyPrint = false;
        java.nio.charset.Charset charset25 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings0.forceAllElementAsBlock(true);
        outputSettings0.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset30 = outputSettings0.getcharset();
        int int31 = outputSettings0.indentAmount;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test14901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14901");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        boolean boolean9 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        boolean boolean11 = textNode2.isBlank();
        java.lang.String str12 = textNode2.text();
        org.jsoup.nodes.Node node14 = textNode2.removeAttr("hi!");
        org.jsoup.select.NodeVisitor nodeVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node16 = textNode2.traverse(nodeVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test14902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14902");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings0.escapeMode;
        boolean boolean9 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings0.escapeMode();
        boolean boolean13 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.setindentAmount(10);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        outputSettings16.indentAmount = (-1);
        java.nio.charset.Charset charset22 = outputSettings16.charset();
        boolean boolean23 = outputSettings16.forceAllElementAsBlock();
        outputSettings16.prettyPrint = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings16.escapeMode;
        outputSettings0.setescapeMode(escapeMode26);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14903");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        org.jsoup.nodes.TextNode textNode9 = textNode7.text("");
        java.lang.String str10 = textNode9.text();
        org.jsoup.nodes.Node node11 = null;
        // The following exception was thrown during execution in test generation
        try {
            textNode9.replaceWith(node11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test14904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14904");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("i!", "i");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("i");
        org.jsoup.nodes.Node node5 = textNode4.previousSibling();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test14905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14905");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        outputSettings6.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        outputSettings6.setcharset(charset12);
        outputSettings5.setcharset(charset12);
        outputSettings0.setcharset(charset12);
        int int16 = outputSettings0.getindentAmount();
        outputSettings0.indentAmount = 'a';
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings0.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings0.getescapeMode();
        java.nio.charset.Charset charset22 = outputSettings0.getcharset();
        boolean boolean23 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        int int27 = outputSettings24.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings30.setcharset(charset36);
        outputSettings29.setcharset(charset36);
        outputSettings24.setcharset(charset36);
        int int40 = outputSettings24.getindentAmount();
        boolean boolean41 = outputSettings24.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset44 = outputSettings43.charset();
        outputSettings42.charset = charset44;
        outputSettings42.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings42.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings42.escapeMode(escapeMode49);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset53 = outputSettings52.charset();
        outputSettings51.charset = charset53;
        outputSettings51.indentAmount = (-1);
        java.nio.charset.Charset charset57 = outputSettings51.charset();
        boolean boolean58 = outputSettings51.forceAllElementAsBlock();
        java.nio.charset.Charset charset59 = outputSettings51.getcharset();
        outputSettings50.charset = charset59;
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings24.charset(charset59);
        boolean boolean62 = outputSettings61.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings61.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = outputSettings64.getescapeMode();
        outputSettings0.escapeMode = escapeMode65;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14906");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings12.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset22 = outputSettings21.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings21.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings21.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode();
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test14907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14907");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        outputSettings0.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings0.encoder();
        java.nio.charset.Charset charset26 = outputSettings0.getcharset();
        boolean boolean27 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings0.clone();
        int int29 = outputSettings28.indentAmount();
        boolean boolean30 = outputSettings28.prettyPrint;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test14908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14908");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        java.lang.String str8 = textNode6.getWholeText();
        org.jsoup.nodes.Node node9 = textNode6.nextSibling();
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.setprettyPrint(false);
        outputSettings12.setindentAmount(0);
        outputSettings12.indentAmount = (byte) 1;
        java.nio.charset.Charset charset21 = outputSettings12.getcharset();
        textNode6.outerHtmlTail(stringBuilder10, (int) '4', outputSettings12);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings12.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset25 = outputSettings12.getcharset();
        outputSettings12.setprettyPrint(true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset25);
    }

    @Test
    public void test14909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14909");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str9 = textNode0.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.forceAllElementAsBlock(false);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings42);
        java.lang.String str47 = textNode0.absUrl("#text");
        java.lang.String str48 = textNode0.text();
        org.jsoup.nodes.Node node49 = textNode0.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList50 = textNode0.childNodes();
        java.lang.String str51 = textNode0.nodeName();
        java.lang.String str52 = textNode0.getTEXT_KEY();
        org.jsoup.nodes.Node node53 = textNode0.nextSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "#text" + "'", str51, "#text");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "text" + "'", str52, "text");
        org.junit.Assert.assertNull(node53);
    }

    @Test
    public void test14910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14910");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings11.setescapeMode(escapeMode14);
        outputSettings11.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings11.setescapeMode(escapeMode18);
        boolean boolean20 = outputSettings11.forceAllElementAsBlock;
        int int21 = outputSettings11.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings11.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings24.setescapeMode(escapeMode27);
        outputSettings24.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings24.setescapeMode(escapeMode31);
        boolean boolean33 = outputSettings24.forceAllElementAsBlock;
        int int34 = outputSettings24.indentAmount;
        java.nio.charset.Charset charset35 = outputSettings24.getcharset();
        outputSettings23.setcharset(charset35);
        outputSettings23.setforceAllElementAsBlock(false);
        textNode8.outerHtmlTail(stringBuilder9, (int) (short) 0, outputSettings23);
        textNode8.ensureAttributes();
        org.jsoup.nodes.TextNode textNode42 = textNode8.text("ext");
        java.util.List<org.jsoup.nodes.Node> nodeList43 = textNode8.siblingNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(textNode42);
        org.junit.Assert.assertNotNull(nodeList43);
    }

    @Test
    public void test14911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14911");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str9 = textNode0.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.forceAllElementAsBlock(false);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings42);
        org.jsoup.nodes.Node node46 = textNode0.previousSibling();
        java.lang.String str47 = textNode0.toString();
        org.jsoup.nodes.TextNode textNode49 = textNode0.text("#text");
        java.lang.String str51 = textNode0.attr("t");
        org.jsoup.nodes.TextNode textNode53 = textNode0.splitText((int) (byte) 1);
        textNode0.setBaseUri("text");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(textNode49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(textNode53);
    }

    @Test
    public void test14912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14912");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        org.jsoup.nodes.Node node9 = textNode7.previousSibling();
        org.jsoup.nodes.Node node12 = textNode7.attr("text", "text");
        java.lang.String str14 = textNode7.attr("#text");
        textNode7.text = "h";
        java.lang.String str17 = textNode7.outerHtml();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode7.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
    }

    @Test
    public void test14913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14913");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings14.setforceAllElementAsBlock(false);
        boolean boolean17 = outputSettings14.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings18.indentAmount(1);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings14.escapeMode(escapeMode25);
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings26.charsetEncoder;
        outputSettings26.setprettyPrint(false);
        java.lang.Class<?> wildcardClass30 = outputSettings26.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test14914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14914");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        int int6 = outputSettings5.getindentAmount();
        outputSettings5.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        outputSettings9.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings20.setcharset(charset27);
        outputSettings15.setcharset(charset27);
        outputSettings9.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings5.charset(charset27);
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        int int37 = outputSettings34.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings34.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        outputSettings40.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings40.setcharset(charset46);
        outputSettings39.setcharset(charset46);
        outputSettings34.setcharset(charset46);
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings34.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings51.clone();
        int int53 = outputSettings52.getindentAmount();
        java.nio.charset.Charset charset54 = outputSettings52.charset();
        outputSettings34.setcharset(charset54);
        outputSettings5.charset = charset54;
        boolean boolean57 = outputSettings5.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings5.clone();
        java.nio.charset.Charset charset59 = null;
        outputSettings58.charset = charset59;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
    }

    @Test
    public void test14915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14915");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings0.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        boolean boolean11 = outputSettings7.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings7.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings13.setescapeMode(escapeMode16);
        outputSettings13.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null;
        outputSettings13.setescapeMode(escapeMode20);
        boolean boolean22 = outputSettings13.forceAllElementAsBlock;
        int int23 = outputSettings13.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings13.escapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings26.setescapeMode(escapeMode29);
        outputSettings26.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        outputSettings26.setescapeMode(escapeMode33);
        boolean boolean35 = outputSettings26.forceAllElementAsBlock;
        int int36 = outputSettings26.indentAmount;
        java.nio.charset.Charset charset37 = outputSettings26.getcharset();
        outputSettings25.setcharset(charset37);
        outputSettings7.charset = charset37;
        org.jsoup.nodes.TextNode textNode42 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = textNode42.equals((java.lang.Object) outputSettings43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings43.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings43.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings7.charset(charset47);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        outputSettings49.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings49.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder56 = outputSettings49.encoder();
        outputSettings49.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset61 = outputSettings60.charset();
        outputSettings59.charset = charset61;
        outputSettings59.indentAmount = (-1);
        java.nio.charset.Charset charset65 = outputSettings59.charset();
        outputSettings59.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean69 = outputSettings68.prettyPrint;
        boolean boolean70 = outputSettings68.forceAllElementAsBlock;
        boolean boolean71 = outputSettings68.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings68.prettyPrint(false);
        int int74 = outputSettings73.getindentAmount();
        outputSettings73.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder77 = outputSettings73.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean79 = outputSettings78.prettyPrint;
        boolean boolean80 = outputSettings78.forceAllElementAsBlock;
        boolean boolean81 = outputSettings78.getprettyPrint();
        boolean boolean82 = outputSettings78.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings78.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode85 = outputSettings84.escapeMode();
        outputSettings73.setescapeMode(escapeMode85);
        outputSettings59.escapeMode = escapeMode85;
        outputSettings49.setescapeMode(escapeMode85);
        outputSettings48.escapeMode = escapeMode85;
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings0.escapeMode(escapeMode85);
        org.jsoup.nodes.Document.OutputSettings outputSettings92 = outputSettings90.prettyPrint(false);
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(charsetEncoder56);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertTrue("'" + escapeMode85 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode85.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertNotNull(outputSettings92);
    }

    @Test
    public void test14916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14916");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.escapeMode(escapeMode6);
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings5.escapeMode;
        boolean boolean9 = outputSettings5.prettyPrint();
        boolean boolean10 = outputSettings5.getforceAllElementAsBlock();
        boolean boolean11 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings5.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings13.charsetEncoder;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNull(escapeMode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charsetEncoder14);
    }

    @Test
    public void test14917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14917");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        boolean boolean5 = textNode2.hasAttr("#text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("text", "text");
        int int12 = textNode11.siblingIndex();
        int int13 = textNode11.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode11.childNodes();
        boolean boolean16 = textNode11.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode18 = textNode11.text("t");
        boolean boolean20 = textNode11.hasAttr("ext");
        java.lang.String str22 = textNode11.attr("t");
        java.lang.StringBuilder stringBuilder23 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        boolean boolean44 = outputSettings41.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings41.prettyPrint(false);
        java.nio.charset.Charset charset47 = outputSettings41.charset;
        outputSettings41.setprettyPrint(false);
        boolean boolean50 = outputSettings41.forceAllElementAsBlock;
        boolean boolean51 = outputSettings41.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings41.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings25.escapeMode(escapeMode52);
        textNode11.outerHtmlTail(stringBuilder23, (int) (short) 1, outputSettings25);
        textNode2.outerHtmlTail(stringBuilder7, (int) (short) 1, outputSettings25);
        org.jsoup.nodes.TextNode textNode56 = new org.jsoup.nodes.TextNode();
        textNode56.setBaseUri("hi!");
        java.lang.String str59 = textNode56.getTEXT_KEY();
        textNode56.text = "hi!";
        boolean boolean63 = textNode56.hasAttr("text");
        java.lang.String str64 = textNode56.baseUri();
        java.lang.String str65 = textNode56.text;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node66 = textNode2.before((org.jsoup.nodes.Node) textNode56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(textNode18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "text" + "'", str59, "text");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
    }

    @Test
    public void test14918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14918");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = null;
        outputSettings6.setescapeMode(escapeMode9);
        outputSettings6.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings6.setescapeMode(escapeMode13);
        boolean boolean15 = outputSettings6.forceAllElementAsBlock;
        int int16 = outputSettings6.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings19.setescapeMode(escapeMode22);
        outputSettings19.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings19.setescapeMode(escapeMode26);
        boolean boolean28 = outputSettings19.forceAllElementAsBlock;
        int int29 = outputSettings19.indentAmount;
        java.nio.charset.Charset charset30 = outputSettings19.getcharset();
        outputSettings18.setcharset(charset30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings0.charset(charset30);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        outputSettings33.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset39 = outputSettings38.charset();
        outputSettings33.setcharset(charset39);
        outputSettings33.setprettyPrint(true);
        java.nio.charset.Charset charset43 = outputSettings33.getcharset();
        outputSettings33.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings33.forceAllElementAsBlock(false);
        boolean boolean48 = outputSettings33.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset51 = outputSettings50.charset();
        outputSettings49.charset = charset51;
        java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings49.encoder();
        boolean boolean54 = outputSettings49.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings49.escapeMode;
        outputSettings33.escapeMode = escapeMode55;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings0.escapeMode(escapeMode55);
        boolean boolean58 = outputSettings57.getprettyPrint();
        int int59 = outputSettings57.getindentAmount();
        boolean boolean60 = outputSettings57.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(charsetEncoder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test14919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14919");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings0.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings0.getcharset();
        int int7 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset8 = outputSettings0.charset();
        outputSettings0.setprettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(charset8);
    }

    @Test
    public void test14920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14920");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean2 = outputSettings0.getprettyPrint();
        outputSettings0.setprettyPrint(false);
        int int5 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.forceAllElementAsBlock(true);
        boolean boolean8 = outputSettings7.getforceAllElementAsBlock();
        int int9 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings7.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings7.indentAmount(32);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(outputSettings12);
    }

    @Test
    public void test14921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14921");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.nextSibling();
        java.lang.String str10 = textNode2.outerHtml();
        java.lang.String str12 = textNode2.attr("#text");
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = textNode15.equals((java.lang.Object) outputSettings16);
        boolean boolean19 = outputSettings16.prettyPrint;
        int int20 = outputSettings16.indentAmount();
        boolean boolean21 = textNode2.equals((java.lang.Object) outputSettings16);
        outputSettings16.indentAmount = 0;
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings16.escapeMode(escapeMode24);
        outputSettings16.forceAllElementAsBlock = false;
        outputSettings16.setindentAmount((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
    }

    @Test
    public void test14922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14922");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("i!");
        org.jsoup.nodes.Node node6 = textNode5.clone();
        org.jsoup.nodes.Node node7 = node6.parent();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test14923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14923");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.settext("text");
        java.lang.String str6 = textNode0.gettext();
        java.lang.String str7 = textNode0.getWholeText();
        java.lang.String str8 = textNode0.baseUri();
        int int9 = textNode0.siblingIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test14924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14924");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset10 = outputSettings9.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings11.encoder();
        boolean boolean14 = outputSettings11.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset17 = outputSettings16.charset();
        outputSettings15.charset = charset17;
        outputSettings15.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings15.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        outputSettings24.indentAmount = (-1);
        java.nio.charset.Charset charset30 = outputSettings24.charset();
        boolean boolean31 = outputSettings24.forceAllElementAsBlock();
        java.nio.charset.Charset charset32 = outputSettings24.getcharset();
        outputSettings23.charset = charset32;
        outputSettings11.setcharset(charset32);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings9.charset(charset32);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        outputSettings36.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings36.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        outputSettings42.setprettyPrint(false);
        outputSettings42.setindentAmount(0);
        outputSettings42.indentAmount = (byte) 1;
        java.nio.charset.Charset charset51 = outputSettings42.getcharset();
        outputSettings36.setcharset(charset51);
        java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings36.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        outputSettings54.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings54.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings60.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings60.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings60.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean67 = outputSettings66.prettyPrint;
        boolean boolean68 = outputSettings66.forceAllElementAsBlock;
        boolean boolean69 = outputSettings66.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings66.prettyPrint(false);
        int int72 = outputSettings71.getindentAmount();
        outputSettings71.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder75 = outputSettings71.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean77 = outputSettings76.prettyPrint;
        boolean boolean78 = outputSettings76.forceAllElementAsBlock;
        boolean boolean79 = outputSettings76.getprettyPrint();
        boolean boolean80 = outputSettings76.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings76.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode83 = outputSettings82.escapeMode();
        outputSettings71.setescapeMode(escapeMode83);
        outputSettings60.escapeMode = escapeMode83;
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings36.escapeMode(escapeMode83);
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings35.escapeMode(escapeMode83);
        java.nio.charset.Charset charset88 = outputSettings35.getcharset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(charsetEncoder53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertTrue("'" + escapeMode83 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode83.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings86);
        org.junit.Assert.assertNotNull(outputSettings87);
        org.junit.Assert.assertNotNull(charset88);
    }

    @Test
    public void test14925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14925");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = null;
        outputSettings5.setcharset(charset6);
        boolean boolean8 = outputSettings5.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        int int11 = outputSettings5.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings12.charset = charset14;
        outputSettings12.indentAmount = (-1);
        java.nio.charset.Charset charset18 = outputSettings12.charset();
        outputSettings12.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        boolean boolean24 = outputSettings21.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings21.prettyPrint(false);
        int int27 = outputSettings26.getindentAmount();
        outputSettings26.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings26.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        boolean boolean34 = outputSettings31.getprettyPrint();
        boolean boolean35 = outputSettings31.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings31.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings37.escapeMode();
        outputSettings26.setescapeMode(escapeMode38);
        outputSettings12.escapeMode = escapeMode38;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings5.escapeMode(escapeMode38);
        boolean boolean42 = outputSettings41.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        outputSettings43.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset49 = outputSettings48.charset();
        outputSettings43.setcharset(charset49);
        outputSettings43.setprettyPrint(true);
        java.nio.charset.Charset charset53 = outputSettings43.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings43.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings43.escapeMode();
        boolean boolean56 = outputSettings43.getprettyPrint();
        boolean boolean57 = outputSettings43.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings43.getescapeMode();
        outputSettings41.setescapeMode(escapeMode58);
        java.nio.charset.Charset charset60 = outputSettings41.charset;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass61 = charset60.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNull(charset60);
    }

    @Test
    public void test14926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14926");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = null;
        outputSettings5.setcharset(charset6);
        boolean boolean8 = outputSettings5.getprettyPrint();
        int int9 = outputSettings5.indentAmount();
        outputSettings5.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings5.escapeMode(escapeMode12);
        java.nio.charset.Charset charset14 = outputSettings5.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        outputSettings15.setprettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings15.escapeMode();
        java.nio.charset.Charset charset22 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings5.charset(charset22);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings23);
    }

    @Test
    public void test14927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14927");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        outputSettings8.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings8.getcharsetEncoder();
        outputSettings8.forceAllElementAsBlock = false;
        boolean boolean14 = outputSettings8.forceAllElementAsBlock();
        boolean boolean15 = outputSettings8.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings8.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        boolean boolean21 = outputSettings18.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset24 = outputSettings23.charset();
        outputSettings22.charset = charset24;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings22.encoder();
        boolean boolean27 = outputSettings22.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings22.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings18.escapeMode(escapeMode28);
        outputSettings29.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings32.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings32.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings32.getcharsetEncoder();
        outputSettings32.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        outputSettings40.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings40.setcharset(charset46);
        outputSettings40.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset52 = outputSettings51.charset();
        outputSettings50.charset = charset52;
        outputSettings50.indentAmount = (-1);
        java.nio.charset.Charset charset56 = outputSettings50.charset();
        outputSettings50.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset59 = outputSettings50.getcharset();
        outputSettings40.setcharset(charset59);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings32.charset(charset59);
        org.jsoup.nodes.TextNode textNode62 = new org.jsoup.nodes.TextNode();
        textNode62.setBaseUri("hi!");
        java.lang.String str65 = textNode62.getTEXT_KEY();
        textNode62.text = "hi!";
        boolean boolean69 = textNode62.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList70 = textNode62.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean72 = outputSettings71.prettyPrint;
        boolean boolean73 = outputSettings71.forceAllElementAsBlock;
        boolean boolean74 = outputSettings71.getprettyPrint();
        boolean boolean75 = outputSettings71.forceAllElementAsBlock();
        boolean boolean76 = outputSettings71.forceAllElementAsBlock;
        boolean boolean77 = textNode62.equals((java.lang.Object) outputSettings71);
        java.nio.charset.CharsetEncoder charsetEncoder78 = outputSettings71.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings71.getcharsetEncoder();
        outputSettings61.setcharsetEncoder(charsetEncoder79);
        outputSettings29.charsetEncoder = charsetEncoder79;
        outputSettings17.charsetEncoder = charsetEncoder79;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "text" + "'", str65, "text");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(nodeList70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(charsetEncoder78);
        org.junit.Assert.assertNotNull(charsetEncoder79);
    }

    @Test
    public void test14928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14928");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        int int10 = outputSettings6.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings6.encoder();
        java.nio.charset.Charset charset12 = outputSettings6.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings6.escapeMode();
        java.nio.charset.Charset charset14 = outputSettings6.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder15 = null;
        outputSettings6.charsetEncoder = charsetEncoder15;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset14);
    }

    @Test
    public void test14929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14929");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.settext("text");
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.String str8 = textNode0.absUrl("text");
        boolean boolean9 = textNode0.isBlank();
        java.lang.String str10 = textNode0.getWholeText();
        org.jsoup.nodes.Node node11 = textNode0.previousSibling();
        java.lang.String str12 = textNode0.nodeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
    }

    @Test
    public void test14930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14930");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        java.lang.String str11 = textNode10.gettext();
        textNode10.ensureAttributes();
        java.lang.String str13 = textNode10.nodeName();
        org.jsoup.nodes.Attributes attributes14 = textNode10.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode10.childNodes();
        java.lang.String str16 = textNode10.outerHtml();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ext" + "'", str11, "ext");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ext" + "'", str16, "ext");
    }

    @Test
    public void test14931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14931");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        boolean boolean9 = textNode7.isBlank();
        java.lang.String str10 = textNode7.text;
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings15.clone();
        outputSettings15.prettyPrint = true;
        textNode7.outerHtmlTail(stringBuilder11, (int) (short) 0, outputSettings15);
        java.lang.String str20 = textNode7.toString();
        java.lang.String str22 = textNode7.absUrl("ext");
        java.lang.String str24 = textNode7.absUrl("hi!");
        org.jsoup.nodes.Node node27 = textNode7.attr("text", "i!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node29 = node27.childNode((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test14932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14932");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "text");
        textNode2.ensureAttributes();
        java.lang.String str4 = textNode2.gettext();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
    }

    @Test
    public void test14933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14933");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.text;
        org.jsoup.nodes.TextNode textNode5 = textNode0.text("");
        java.lang.String str7 = textNode5.absUrl("text");
        java.lang.String str8 = textNode5.gettext();
        org.jsoup.nodes.Node node11 = textNode5.attr("#text", "#");
        java.lang.String str12 = textNode5.outerHtml();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test14934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14934");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        outputSettings2.setindentAmount((int) (byte) 0);
        boolean boolean5 = outputSettings2.getforceAllElementAsBlock();
        java.nio.charset.Charset charset6 = outputSettings2.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14935");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.escapeMode(escapeMode6);
        org.jsoup.nodes.TextNode textNode8 = new org.jsoup.nodes.TextNode();
        textNode8.setBaseUri("hi!");
        java.lang.String str11 = textNode8.getTEXT_KEY();
        textNode8.text = "hi!";
        boolean boolean15 = textNode8.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode8.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        boolean boolean21 = outputSettings17.forceAllElementAsBlock();
        boolean boolean22 = outputSettings17.forceAllElementAsBlock;
        boolean boolean23 = textNode8.equals((java.lang.Object) outputSettings17);
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings17.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings17.getcharsetEncoder();
        outputSettings7.charsetEncoder = charsetEncoder25;
        boolean boolean27 = outputSettings7.getforceAllElementAsBlock();
        int int28 = outputSettings7.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        boolean boolean32 = outputSettings29.getprettyPrint();
        boolean boolean33 = outputSettings29.forceAllElementAsBlock();
        outputSettings29.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings36.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings36.getescapeMode();
        outputSettings29.setescapeMode(escapeMode39);
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings29.getcharsetEncoder();
        outputSettings7.setcharsetEncoder(charsetEncoder41);
        int int43 = outputSettings7.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings7.prettyPrint(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(outputSettings45);
    }

    @Test
    public void test14936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14936");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        org.jsoup.nodes.Node node7 = textNode2.clone();
        textNode2.text = "t";
        textNode2.ensureAttributes();
        textNode2.ensureAttributes();
        java.lang.String str12 = textNode2.toString();
        org.jsoup.nodes.Node node15 = textNode2.attr("i!", "!");
        org.jsoup.nodes.Node node16 = textNode2.nextSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "t" + "'", str12, "t");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test14937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14937");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        org.jsoup.nodes.Node node6 = textNode5.parent();
        java.lang.String str7 = textNode5.text();
        org.jsoup.nodes.Attributes attributes8 = textNode5.attributes();
        java.lang.String str9 = textNode5.toString();
        org.jsoup.nodes.Node node11 = textNode5.removeAttr("h");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = textNode5.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ext" + "'", str7, "ext");
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ext" + "'", str9, "ext");
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test14938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14938");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = null;
        outputSettings5.setcharset(charset6);
        outputSettings5.setprettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings5.getcharsetEncoder();
        outputSettings5.setindentAmount((int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charsetEncoder10);
    }

    @Test
    public void test14939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14939");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        textNode2.text = "hi!";
        org.jsoup.nodes.Node node11 = textNode2.clone();
        org.jsoup.nodes.Node node12 = node11.nextSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test14940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14940");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.text;
        org.jsoup.nodes.TextNode textNode5 = textNode0.text("");
        java.lang.String str6 = textNode5.gettext();
        org.jsoup.nodes.TextNode textNode8 = textNode5.text("t");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(textNode8);
    }

    @Test
    public void test14941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14941");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "text");
        org.jsoup.nodes.Node node5 = textNode2.attr("hi!", "t");
        java.lang.String str6 = textNode2.text();
        java.lang.String str7 = textNode2.baseUri();
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        outputSettings10.setforceAllElementAsBlock(false);
        outputSettings10.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset20 = outputSettings10.charset;
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings10.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings10.prettyPrint(false);
        outputSettings23.indentAmount = (-1);
        textNode2.outerHtmlTail(stringBuilder8, (int) (byte) 1, outputSettings23);
        java.nio.charset.Charset charset27 = outputSettings23.getcharset();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings23.charset("t");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: t");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset27);
    }

    @Test
    public void test14942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14942");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("t");
        org.jsoup.nodes.Document document6 = textNode2.ownerDocument();
        java.lang.String str7 = textNode2.getWholeText();
        java.lang.String str8 = textNode2.text;
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "t" + "'", str7, "t");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "t" + "'", str8, "t");
    }

    @Test
    public void test14943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14943");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.getprettyPrint();
        int int6 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings7.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder11);
        int int13 = outputSettings0.indentAmount;
        outputSettings0.setprettyPrint(false);
        boolean boolean16 = outputSettings0.prettyPrint;
        outputSettings0.setindentAmount((int) ' ');
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test14944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14944");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        boolean boolean7 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("t");
        org.jsoup.nodes.Node node10 = textNode2.clone();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("text");
        boolean boolean14 = textNode12.hasAttr("h");
        textNode12.text = "h";
        java.lang.String str17 = textNode12.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode12.childNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertNotNull(nodeList18);
    }

    @Test
    public void test14945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14945");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Document document1 = textNode0.ownerDocument();
        boolean boolean2 = textNode0.isBlank();
        boolean boolean3 = textNode0.isBlank();
        org.jsoup.nodes.Document document4 = textNode0.ownerDocument();
        java.lang.String str5 = textNode0.getWholeText();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node8 = textNode0.attr("text", "i!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test14946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14946");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        boolean boolean23 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings26.clone();
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        outputSettings0.setcharset(charset28);
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings0.encoder();
        boolean boolean31 = outputSettings0.prettyPrint();
        java.nio.charset.Charset charset32 = outputSettings0.charset;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charset32);
    }

    @Test
    public void test14947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14947");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("i!", "ext");
        textNode2.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        java.lang.String str5 = textNode2.text();
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "i!" + "'", str5, "i!");
    }

    @Test
    public void test14948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14948");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = null;
        outputSettings5.setcharset(charset6);
        boolean boolean8 = outputSettings5.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        int int11 = outputSettings5.indentAmount();
        boolean boolean12 = outputSettings5.forceAllElementAsBlock;
        java.nio.charset.Charset charset13 = outputSettings5.getcharset();
        outputSettings5.indentAmount = 97;
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings5.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charset13);
        org.junit.Assert.assertNotNull(charsetEncoder16);
    }

    @Test
    public void test14949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14949");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings3.prettyPrint(true);
        boolean boolean9 = outputSettings8.prettyPrint;
        outputSettings8.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings8.escapeMode = escapeMode12;
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("text", "text");
        int int17 = textNode16.siblingIndex();
        int int18 = textNode16.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList19 = textNode16.childNodes();
        java.lang.StringBuilder stringBuilder20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        int int25 = outputSettings22.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings22.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        outputSettings28.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings28.setcharset(charset34);
        outputSettings27.setcharset(charset34);
        outputSettings22.setcharset(charset34);
        textNode16.outerHtmlTail(stringBuilder20, 10, outputSettings22);
        int int39 = outputSettings22.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings22.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings22.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        outputSettings42.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean48 = outputSettings47.prettyPrint;
        boolean boolean49 = outputSettings47.forceAllElementAsBlock;
        boolean boolean50 = outputSettings47.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset53 = outputSettings52.charset();
        outputSettings51.charset = charset53;
        java.nio.charset.CharsetEncoder charsetEncoder55 = outputSettings51.encoder();
        boolean boolean56 = outputSettings51.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings51.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings47.escapeMode(escapeMode57);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings42.escapeMode(escapeMode57);
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings42.getescapeMode();
        outputSettings22.setescapeMode(escapeMode60);
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings22.escapeMode;
        java.nio.charset.Charset charset63 = outputSettings22.charset;
        java.nio.charset.Charset charset64 = outputSettings22.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = outputSettings22.getescapeMode();
        outputSettings8.escapeMode = escapeMode65;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(charsetEncoder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14950");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        boolean boolean23 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode26 = new org.jsoup.nodes.TextNode("text", "text");
        int int27 = textNode26.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList28 = textNode26.siblingNodes();
        textNode26.text = "";
        java.lang.String str31 = textNode26.baseUri();
        java.lang.String str33 = textNode26.attr("");
        org.jsoup.nodes.Document document34 = textNode26.ownerDocument();
        java.lang.String str35 = textNode26.text;
        java.lang.StringBuilder stringBuilder36 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        int int41 = outputSettings38.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        outputSettings44.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset50 = outputSettings49.charset();
        outputSettings44.setcharset(charset50);
        outputSettings43.setcharset(charset50);
        outputSettings38.setcharset(charset50);
        textNode26.outerHtmlTail(stringBuilder36, 0, outputSettings38);
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings38.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings0.escapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings56.prettyPrint(true);
        outputSettings56.forceAllElementAsBlock = true;
        java.nio.charset.Charset charset63 = outputSettings56.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings56.escapeMode();
        outputSettings56.forceAllElementAsBlock = true;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "text" + "'", str31, "text");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(document34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14951");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str10 = textNode0.attr("t");
        org.jsoup.nodes.Node node11 = textNode0.clone();
        org.jsoup.nodes.Node node12 = node11.nextSibling();
        org.jsoup.nodes.Node node13 = node11.clone();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test14952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14952");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        org.jsoup.nodes.Node node3 = textNode2.clone();
        boolean boolean4 = textNode2.isBlank();
        org.jsoup.nodes.Node node7 = textNode2.attr("t", "");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = node7.childNodes();
        org.jsoup.nodes.Document document9 = node7.ownerDocument();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(document9);
    }

    @Test
    public void test14953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14953");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.siblingNodes();
        java.lang.String str7 = textNode2.absUrl("i!");
        java.lang.String str8 = textNode2.gettext();
        java.lang.String str9 = textNode2.getTEXT_KEY();
        java.lang.String str10 = textNode2.toString();
        textNode2.setBaseUri("hi!");
        java.lang.StringBuilder stringBuilder13 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        boolean boolean18 = outputSettings15.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings15.prettyPrint(false);
        int int21 = outputSettings20.getindentAmount();
        outputSettings20.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        outputSettings24.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        int int33 = outputSettings30.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings30.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        outputSettings36.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset42 = outputSettings41.charset();
        outputSettings36.setcharset(charset42);
        outputSettings35.setcharset(charset42);
        outputSettings30.setcharset(charset42);
        outputSettings24.setcharset(charset42);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings20.charset(charset42);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings50.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.clone();
        java.nio.charset.Charset charset53 = outputSettings50.charset();
        outputSettings47.setcharset(charset53);
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings47.indentAmount(0);
        textNode2.outerHtmlTail(stringBuilder13, (int) (byte) 10, outputSettings47);
        org.jsoup.nodes.TextNode textNode60 = new org.jsoup.nodes.TextNode("ext", "t");
        org.jsoup.nodes.Node node61 = textNode60.clone();
        java.lang.String str62 = textNode60.getWholeText();
        boolean boolean63 = textNode2.equals((java.lang.Object) textNode60);
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ext" + "'", str62, "ext");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test14954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14954");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset15 = outputSettings14.getcharset();
        outputSettings14.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        boolean boolean25 = outputSettings22.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings22.prettyPrint(false);
        java.nio.charset.Charset charset28 = outputSettings22.charset;
        outputSettings22.setprettyPrint(false);
        java.nio.charset.Charset charset31 = outputSettings22.getcharset();
        outputSettings18.setcharset(charset31);
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings18.encoder();
        outputSettings14.setcharsetEncoder(charsetEncoder33);
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings14.getescapeMode();
        int int36 = outputSettings14.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
    }

    @Test
    public void test14955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14955");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        outputSettings0.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        outputSettings9.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings9.getcharsetEncoder();
        outputSettings0.charsetEncoder = charsetEncoder15;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        outputSettings17.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings17.indentAmount(1);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings26.indentAmount((int) (short) 0);
        outputSettings26.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings26.encoder();
        outputSettings25.setcharsetEncoder(charsetEncoder32);
        outputSettings0.charsetEncoder = charsetEncoder32;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(charsetEncoder32);
    }

    @Test
    public void test14956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14956");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("text");
        boolean boolean9 = textNode8.isBlank();
        java.lang.String str10 = textNode8.getWholeText();
        java.lang.String str11 = textNode8.baseUri();
        java.lang.String str12 = textNode8.getTEXT_KEY();
        java.lang.String str14 = textNode8.attr("#text");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test14957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14957");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.settext("text");
        org.jsoup.nodes.Node node6 = textNode0.nextSibling();
        java.lang.String str7 = textNode0.gettext();
        java.lang.String str8 = textNode0.baseUri();
        org.jsoup.nodes.TextNode textNode10 = textNode0.splitText(1);
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings13.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.clone();
        outputSettings15.setindentAmount((int) (byte) 0);
        boolean boolean18 = outputSettings15.getforceAllElementAsBlock();
        textNode10.outerHtmlTail(stringBuilder11, (int) (short) 1, outputSettings15);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test14958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14958");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("hi!");
        int int13 = textNode12.siblingIndex();
        org.jsoup.nodes.TextNode textNode15 = textNode12.text("t");
        java.lang.StringBuilder stringBuilder16 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = null;
        outputSettings18.setescapeMode(escapeMode21);
        outputSettings18.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings18.setescapeMode(escapeMode25);
        boolean boolean27 = outputSettings18.forceAllElementAsBlock;
        int int28 = outputSettings18.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings18.escapeMode(escapeMode29);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings31.setescapeMode(escapeMode34);
        outputSettings31.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings31.setescapeMode(escapeMode38);
        boolean boolean40 = outputSettings31.forceAllElementAsBlock;
        int int41 = outputSettings31.indentAmount;
        java.nio.charset.Charset charset42 = outputSettings31.getcharset();
        outputSettings30.setcharset(charset42);
        int int44 = outputSettings30.indentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings30.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings30.escapeMode(escapeMode46);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.prettyPrint(false);
        textNode15.outerHtmlTail(stringBuilder16, (int) (byte) 1, outputSettings49);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNull(escapeMode45);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings49);
    }

    @Test
    public void test14959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14959");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.escapeMode(escapeMode11);
        int int13 = outputSettings0.getindentAmount();
        outputSettings0.indentAmount = 10;
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings0.indentAmount((int) (short) 10);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings18.encoder();
        int int20 = outputSettings18.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test14960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14960");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "");
        java.lang.String str3 = textNode2.nodeName();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean5 = outputSettings4.prettyPrint;
        boolean boolean6 = outputSettings4.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings4.setescapeMode(escapeMode7);
        outputSettings4.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        outputSettings4.setescapeMode(escapeMode11);
        boolean boolean13 = outputSettings4.forceAllElementAsBlock;
        int int14 = outputSettings4.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings4.indentAmount((int) '#');
        boolean boolean17 = outputSettings4.getforceAllElementAsBlock();
        boolean boolean18 = outputSettings4.forceAllElementAsBlock;
        boolean boolean19 = outputSettings4.forceAllElementAsBlock();
        boolean boolean20 = textNode2.equals((java.lang.Object) outputSettings4);
        outputSettings4.indentAmount = (-1);
        outputSettings4.setindentAmount((int) (short) 100);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings4.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings4.indentAmount(10);
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(escapeMode25);
        org.junit.Assert.assertNotNull(outputSettings27);
    }

    @Test
    public void test14961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14961");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.Node node6 = textNode2.previousSibling();
        java.lang.String str7 = textNode2.text();
        textNode2.settext("hi!");
        java.lang.String str10 = textNode2.toString();
        org.jsoup.nodes.TextNode textNode12 = textNode2.splitText((int) (short) 0);
        java.lang.String str13 = textNode12.toString();
        org.jsoup.nodes.Node node14 = textNode12.nextSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test14962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14962");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        boolean boolean7 = textNode2.equals((java.lang.Object) 1L);
        org.jsoup.nodes.Node node10 = textNode2.attr("#text", "t");
        org.jsoup.nodes.Node node13 = textNode2.attr("text", "");
        java.lang.String str14 = textNode2.baseUri();
        java.lang.String str15 = textNode2.toString();
        org.jsoup.nodes.TextNode textNode17 = textNode2.text("i");
        org.jsoup.nodes.Node node18 = textNode17.previousSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test14963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14963");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("ext", "text");
        java.lang.String str3 = textNode2.nodeName();
        java.lang.String str4 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode7 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode7.childNodes();
        org.jsoup.nodes.TextNode textNode10 = textNode7.text("hi!");
        java.lang.String str11 = textNode10.getTEXT_KEY();
        textNode10.ensureAttributes();
        boolean boolean13 = textNode2.equals((java.lang.Object) textNode10);
        org.jsoup.nodes.Attributes attributes14 = textNode10.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ext" + "'", str4, "ext");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(attributes14);
    }

    @Test
    public void test14964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14964");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.String str7 = textNode2.toString();
        java.lang.String str9 = textNode2.attr("hi!");
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings12.charset = charset14;
        outputSettings12.indentAmount = (-1);
        java.nio.charset.Charset charset18 = outputSettings12.charset();
        outputSettings12.setforceAllElementAsBlock(true);
        textNode2.outerHtmlTail(stringBuilder10, (int) (byte) 100, outputSettings12);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings12.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings12.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings12.clone();
        outputSettings12.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings12.clone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(outputSettings27);
    }

    @Test
    public void test14965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14965");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        java.lang.String str7 = textNode2.gettext();
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("i!");
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode13 = textNode2.splitText((int) (short) 1);
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(nodeList14);
    }

    @Test
    public void test14966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14966");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings9.getcharsetEncoder();
        outputSettings9.prettyPrint = true;
        boolean boolean17 = outputSettings9.forceAllElementAsBlock;
        textNode0.outerHtmlTail(stringBuilder7, (int) (byte) 100, outputSettings9);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode();
        outputSettings25.setprettyPrint(true);
        int int29 = outputSettings25.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings25.encoder();
        outputSettings9.setcharsetEncoder(charsetEncoder30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings32.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings32.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings32.getcharsetEncoder();
        outputSettings9.setcharsetEncoder(charsetEncoder37);
        java.nio.charset.Charset charset39 = outputSettings9.charset();
        outputSettings9.setforceAllElementAsBlock(true);
        outputSettings9.indentAmount = 10;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(charset39);
    }

    @Test
    public void test14967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14967");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("h", "text");
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        textNode2.settext("#");
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings9.setescapeMode(escapeMode12);
        outputSettings9.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        outputSettings9.setescapeMode(escapeMode16);
        outputSettings9.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings9.getcharsetEncoder();
        boolean boolean21 = outputSettings9.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings9.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        outputSettings24.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset30 = outputSettings29.charset();
        outputSettings24.setcharset(charset30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset33 = outputSettings32.charset();
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings32.encoder();
        outputSettings24.setcharsetEncoder(charsetEncoder34);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        int int39 = outputSettings36.getindentAmount();
        boolean boolean40 = outputSettings36.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings36.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings36.getcharsetEncoder();
        outputSettings24.setcharsetEncoder(charsetEncoder42);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings24.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        boolean boolean51 = outputSettings48.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings48.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        outputSettings54.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder59 = outputSettings54.getcharsetEncoder();
        outputSettings48.setcharsetEncoder(charsetEncoder59);
        outputSettings45.charsetEncoder = charsetEncoder59;
        outputSettings23.charsetEncoder = charsetEncoder59;
        boolean boolean63 = outputSettings23.forceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder7, (int) (short) -1, outputSettings23);
        java.lang.String str65 = textNode2.text();
        java.lang.String str66 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charsetEncoder59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "h" + "'", str65, "h");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "text" + "'", str66, "text");
    }

    @Test
    public void test14968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14968");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        int int25 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node28 = textNode2.attr("#text", "#text");
        org.jsoup.nodes.TextNode textNode30 = textNode2.text("");
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings31.setprettyPrint(true);
        java.nio.charset.Charset charset41 = outputSettings31.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings31.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings31.escapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings31.charsetEncoder;
        boolean boolean45 = textNode2.equals((java.lang.Object) outputSettings31);
        org.jsoup.nodes.Node node47 = textNode2.removeAttr("i!");
        java.lang.StringBuilder stringBuilder48 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = null;
        outputSettings50.setescapeMode(escapeMode53);
        boolean boolean55 = outputSettings50.prettyPrint;
        outputSettings50.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings58.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings58.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean62 = outputSettings61.prettyPrint;
        boolean boolean63 = outputSettings61.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = null;
        outputSettings61.setescapeMode(escapeMode64);
        outputSettings61.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = null;
        outputSettings61.setescapeMode(escapeMode68);
        boolean boolean70 = outputSettings61.forceAllElementAsBlock;
        int int71 = outputSettings61.indentAmount;
        java.nio.charset.Charset charset72 = outputSettings61.getcharset();
        outputSettings58.charset = charset72;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings50.charset(charset72);
        outputSettings74.forceAllElementAsBlock = false;
        boolean boolean77 = outputSettings74.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean79 = outputSettings78.prettyPrint;
        boolean boolean80 = outputSettings78.forceAllElementAsBlock;
        outputSettings78.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset84 = outputSettings83.charset();
        outputSettings78.setcharset(charset84);
        outputSettings78.setprettyPrint(true);
        outputSettings78.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings78.prettyPrint(true);
        java.nio.charset.Charset charset92 = outputSettings91.charset();
        outputSettings74.setcharset(charset92);
        outputSettings74.indentAmount = 32;
        textNode2.outerHtmlTail(stringBuilder48, (int) (byte) -1, outputSettings74);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(textNode30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(charset84);
        org.junit.Assert.assertNotNull(outputSettings91);
        org.junit.Assert.assertNotNull(charset92);
    }

    @Test
    public void test14969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14969");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("h");
        java.lang.String str10 = textNode2.baseUri();
        org.jsoup.nodes.Node node13 = textNode2.attr("hi!", "#text");
        org.jsoup.nodes.Node node14 = node13.previousSibling();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test14970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14970");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings3.escapeMode(escapeMode14);
        int int16 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings19.clone();
        java.nio.charset.Charset charset21 = outputSettings20.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings3.charset(charset21);
        outputSettings0.charset = charset21;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.encoder();
        boolean boolean29 = outputSettings24.prettyPrint;
        java.nio.charset.Charset charset30 = outputSettings24.charset;
        boolean boolean31 = outputSettings24.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings32.charset = charset34;
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings32.encoder();
        boolean boolean37 = outputSettings32.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings24.escapeMode(escapeMode38);
        boolean boolean40 = outputSettings39.forceAllElementAsBlock();
        boolean boolean41 = outputSettings39.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode42 = new org.jsoup.nodes.TextNode();
        textNode42.setBaseUri("hi!");
        java.lang.String str45 = textNode42.getTEXT_KEY();
        textNode42.text = "hi!";
        java.lang.String str48 = textNode42.getWholeText();
        java.lang.StringBuilder stringBuilder49 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        outputSettings51.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder56 = outputSettings51.getcharsetEncoder();
        outputSettings51.prettyPrint = true;
        boolean boolean59 = outputSettings51.forceAllElementAsBlock;
        textNode42.outerHtmlTail(stringBuilder49, (int) (byte) 100, outputSettings51);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean62 = outputSettings61.prettyPrint;
        boolean boolean63 = outputSettings61.forceAllElementAsBlock;
        boolean boolean64 = outputSettings61.getprettyPrint();
        boolean boolean65 = outputSettings61.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings61.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings67.escapeMode();
        outputSettings67.setprettyPrint(true);
        int int71 = outputSettings67.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder72 = outputSettings67.encoder();
        outputSettings51.setcharsetEncoder(charsetEncoder72);
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings74.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings74.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings74.getcharsetEncoder();
        outputSettings51.setcharsetEncoder(charsetEncoder79);
        outputSettings39.setcharsetEncoder(charsetEncoder79);
        outputSettings0.charsetEncoder = charsetEncoder79;
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings84.indentAmount((int) (byte) 100);
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings84.prettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "text" + "'", str45, "text");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charsetEncoder56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder72);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertNotNull(charsetEncoder79);
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertNotNull(outputSettings86);
        org.junit.Assert.assertNotNull(outputSettings88);
    }

    @Test
    public void test14971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14971");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "#");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.siblingNodes();
        org.jsoup.nodes.Node node4 = textNode2.clone();
        org.jsoup.nodes.TextNode textNode7 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "#text");
        org.jsoup.nodes.TextNode textNode9 = textNode7.text("i!");
        java.lang.String str10 = textNode9.gettext();
        java.lang.String str11 = textNode9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = textNode2.after((org.jsoup.nodes.Node) textNode9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "i!" + "'", str10, "i!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "i!" + "'", str11, "i!");
    }

    @Test
    public void test14972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14972");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.lang.String str8 = textNode2.toString();
        org.jsoup.select.NodeVisitor nodeVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode2.traverse(nodeVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
    }

    @Test
    public void test14973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14973");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "text");
        java.lang.String str3 = textNode2.getWholeText();
        java.lang.String str4 = textNode2.text();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.siblingNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        outputSettings8.setprettyPrint(false);
        java.nio.charset.Charset charset13 = outputSettings8.charset;
        java.nio.charset.Charset charset14 = outputSettings8.charset;
        java.nio.charset.Charset charset15 = outputSettings8.charset();
        textNode2.outerHtmlTail(stringBuilder6, (int) (short) 1, outputSettings8);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings8.forceAllElementAsBlock(true);
        org.jsoup.nodes.TextNode textNode19 = new org.jsoup.nodes.TextNode();
        textNode19.setBaseUri("hi!");
        java.lang.String str22 = textNode19.getTEXT_KEY();
        textNode19.text = "hi!";
        boolean boolean26 = textNode19.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList27 = textNode19.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        boolean boolean31 = outputSettings28.getprettyPrint();
        boolean boolean32 = outputSettings28.forceAllElementAsBlock();
        boolean boolean33 = outputSettings28.forceAllElementAsBlock;
        boolean boolean34 = textNode19.equals((java.lang.Object) outputSettings28);
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings28.getcharsetEncoder();
        outputSettings28.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset38 = outputSettings28.charset();
        outputSettings28.setindentAmount((int) (byte) 10);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = null;
        outputSettings41.setescapeMode(escapeMode44);
        outputSettings41.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = null;
        outputSettings41.setescapeMode(escapeMode48);
        boolean boolean50 = outputSettings41.forceAllElementAsBlock;
        int int51 = outputSettings41.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings41.escapeMode(escapeMode52);
        int int54 = outputSettings41.getindentAmount();
        outputSettings41.indentAmount = 10;
        java.nio.charset.CharsetEncoder charsetEncoder57 = outputSettings41.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings41.indentAmount((int) (short) 10);
        java.nio.charset.Charset charset60 = outputSettings59.getcharset();
        java.nio.charset.Charset charset61 = outputSettings59.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset64 = outputSettings63.charset();
        outputSettings62.charset = charset64;
        java.nio.charset.CharsetEncoder charsetEncoder66 = outputSettings62.encoder();
        boolean boolean67 = outputSettings62.prettyPrint;
        java.nio.charset.Charset charset68 = outputSettings62.charset;
        boolean boolean69 = outputSettings62.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset72 = outputSettings71.charset();
        outputSettings70.charset = charset72;
        java.nio.charset.CharsetEncoder charsetEncoder74 = outputSettings70.encoder();
        boolean boolean75 = outputSettings70.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings70.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings62.escapeMode(escapeMode76);
        boolean boolean78 = outputSettings62.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean80 = outputSettings79.prettyPrint;
        boolean boolean81 = outputSettings79.forceAllElementAsBlock;
        boolean boolean82 = outputSettings79.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings79.prettyPrint(false);
        outputSettings79.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings87.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings89 = outputSettings87.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode90 = outputSettings87.getescapeMode();
        outputSettings79.setescapeMode(escapeMode90);
        outputSettings62.setescapeMode(escapeMode90);
        org.jsoup.nodes.Entities.EscapeMode escapeMode93 = outputSettings62.getescapeMode();
        outputSettings59.setescapeMode(escapeMode93);
        outputSettings28.escapeMode = escapeMode93;
        org.jsoup.nodes.Document.OutputSettings outputSettings96 = outputSettings18.escapeMode(escapeMode93);
        java.nio.charset.CharsetEncoder charsetEncoder97 = outputSettings96.encoder();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "t" + "'", str3, "t");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "t" + "'", str4, "t");
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder57);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(charsetEncoder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(charsetEncoder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertNotNull(outputSettings89);
        org.junit.Assert.assertTrue("'" + escapeMode90 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode90.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode93 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode93.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings96);
        org.junit.Assert.assertNotNull(charsetEncoder97);
    }

    @Test
    public void test14974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14974");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint;
        outputSettings0.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        outputSettings8.setescapeMode(escapeMode11);
        outputSettings8.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = null;
        outputSettings8.setescapeMode(escapeMode15);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings8.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode;
        outputSettings18.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings18.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        boolean boolean26 = outputSettings23.getprettyPrint();
        boolean boolean27 = outputSettings23.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings23.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings29.escapeMode();
        outputSettings18.setescapeMode(escapeMode30);
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings18.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings0.escapeMode(escapeMode32);
        boolean boolean34 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings35.charset = charset37;
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings35.encoder();
        outputSettings35.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings35.escapeMode;
        outputSettings35.prettyPrint = false;
        java.nio.charset.Charset charset45 = outputSettings35.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings35.encoder();
        boolean boolean47 = outputSettings35.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings35.getescapeMode();
        outputSettings0.setescapeMode(escapeMode48);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        boolean boolean53 = outputSettings50.getprettyPrint();
        boolean boolean54 = outputSettings50.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings50.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings50.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings50.prettyPrint(true);
        boolean boolean60 = outputSettings59.forceAllElementAsBlock;
        java.nio.charset.Charset charset61 = outputSettings59.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean63 = outputSettings62.prettyPrint;
        boolean boolean64 = outputSettings62.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean66 = outputSettings65.prettyPrint;
        boolean boolean67 = outputSettings65.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = null;
        outputSettings65.setescapeMode(escapeMode68);
        outputSettings65.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = null;
        outputSettings65.setescapeMode(escapeMode72);
        boolean boolean74 = outputSettings65.forceAllElementAsBlock;
        int int75 = outputSettings65.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings65.escapeMode(escapeMode76);
        int int78 = outputSettings65.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean80 = outputSettings79.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings79.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings81.clone();
        java.nio.charset.Charset charset83 = outputSettings82.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings65.charset(charset83);
        outputSettings62.charset = charset83;
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings59.charset(charset83);
        outputSettings0.charset = charset83;
        org.jsoup.nodes.Document.OutputSettings outputSettings89 = outputSettings0.indentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings91.prettyPrint(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings95 = outputSettings93.charset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNull(escapeMode19);
        org.junit.Assert.assertNull(escapeMode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(charsetEncoder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertNotNull(outputSettings86);
        org.junit.Assert.assertNotNull(outputSettings89);
        org.junit.Assert.assertNotNull(outputSettings91);
        org.junit.Assert.assertNotNull(outputSettings93);
    }

    @Test
    public void test14975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14975");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        java.lang.String str5 = textNode2.toString();
        java.lang.String str7 = textNode2.absUrl("#text");
        java.lang.String str8 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Attributes attributes9 = textNode2.attributes();
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("hi!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(attributes9);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test14976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14976");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node4 = textNode2.parent();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str8 = textNode2.attr("h");
        textNode2.settext("h");
        int int11 = textNode2.siblingIndex();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test14977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14977");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        textNode0.text = "text";
        java.lang.String str8 = textNode0.getTEXT_KEY();
        boolean boolean9 = textNode0.isBlank();
        java.lang.String str11 = textNode0.absUrl("h");
        org.jsoup.nodes.Document document12 = textNode0.ownerDocument();
        textNode0.text = "#";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(document12);
    }

    @Test
    public void test14978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14978");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.siblingNodes();
        org.jsoup.nodes.Node node7 = textNode2.removeAttr("ext");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = node7.childNodes();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeList8);
    }

    @Test
    public void test14979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14979");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.escapeMode(escapeMode6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        outputSettings8.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings8.setcharset(charset14);
        java.nio.charset.Charset charset16 = outputSettings8.getcharset();
        outputSettings7.charset = charset16;
        int int18 = outputSettings7.indentAmount;
        boolean boolean19 = outputSettings7.prettyPrint();
        java.nio.charset.Charset charset20 = outputSettings7.getcharset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset20);
    }

    @Test
    public void test14980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14980");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        textNode0.text = "text";
        java.lang.String str8 = textNode0.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        outputSettings11.indentAmount = (-1);
        java.nio.charset.Charset charset17 = outputSettings11.charset();
        outputSettings11.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings22.clone();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings22.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = null;
        outputSettings25.setescapeMode(escapeMode28);
        outputSettings25.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = null;
        outputSettings25.setescapeMode(escapeMode32);
        boolean boolean34 = outputSettings25.forceAllElementAsBlock;
        int int35 = outputSettings25.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings25.escapeMode(escapeMode36);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = null;
        outputSettings38.setescapeMode(escapeMode41);
        outputSettings38.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = null;
        outputSettings38.setescapeMode(escapeMode45);
        boolean boolean47 = outputSettings38.forceAllElementAsBlock;
        int int48 = outputSettings38.indentAmount;
        java.nio.charset.Charset charset49 = outputSettings38.getcharset();
        outputSettings37.setcharset(charset49);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings22.charset(charset49);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings11.charset(charset49);
        boolean boolean53 = outputSettings52.prettyPrint;
        java.nio.charset.Charset charset54 = outputSettings52.getcharset();
        textNode0.outerHtmlTail(stringBuilder9, 52, outputSettings52);
        textNode0.setBaseUri("#");
        java.lang.StringBuilder stringBuilder58 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        outputSettings60.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset66 = outputSettings65.charset();
        outputSettings60.setcharset(charset66);
        outputSettings60.setprettyPrint(true);
        java.nio.charset.Charset charset70 = outputSettings60.getcharset();
        outputSettings60.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings60.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings74.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings74.indentAmount((int) '4');
        java.nio.charset.Charset charset78 = outputSettings77.getcharset();
        outputSettings77.forceAllElementAsBlock = true;
        textNode0.outerHtmlTail(stringBuilder58, (int) '#', outputSettings77);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(charset78);
    }

    @Test
    public void test14981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14981");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        outputSettings7.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings7.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        outputSettings22.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings22.setescapeMode(escapeMode29);
        boolean boolean31 = outputSettings22.forceAllElementAsBlock;
        int int32 = outputSettings22.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings22.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings35.setescapeMode(escapeMode38);
        outputSettings35.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings35.setescapeMode(escapeMode42);
        boolean boolean44 = outputSettings35.forceAllElementAsBlock;
        int int45 = outputSettings35.indentAmount;
        java.nio.charset.Charset charset46 = outputSettings35.getcharset();
        outputSettings34.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset46);
        int int49 = outputSettings48.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 0, outputSettings48);
        java.lang.String str52 = textNode2.attr("t");
        org.jsoup.nodes.TextNode textNode54 = textNode2.text("");
        java.lang.String str55 = textNode2.baseUri();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(textNode54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "text" + "'", str55, "text");
    }

    @Test
    public void test14982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14982");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        org.jsoup.nodes.Node node11 = textNode2.attr("text", "#text");
        textNode2.setBaseUri("h");
        boolean boolean14 = textNode2.isBlank();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test14983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14983");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        int int15 = outputSettings14.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        int int21 = outputSettings18.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings18.charsetEncoder;
        outputSettings16.charsetEncoder = charsetEncoder22;
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings16.charsetEncoder;
        outputSettings14.charsetEncoder = charsetEncoder24;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings14.prettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertNotNull(outputSettings27);
    }

    @Test
    public void test14984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14984");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("t");
        org.jsoup.nodes.TextNode textNode5 = new org.jsoup.nodes.TextNode();
        textNode5.setBaseUri("hi!");
        java.lang.String str8 = textNode5.getTEXT_KEY();
        textNode5.text = "hi!";
        boolean boolean12 = textNode5.hasAttr("text");
        org.jsoup.nodes.Node node13 = textNode5.clone();
        org.jsoup.nodes.TextNode textNode15 = textNode5.text("ext");
        java.lang.String str16 = textNode15.gettext();
        org.jsoup.nodes.TextNode textNode18 = textNode15.text("ext");
        boolean boolean19 = textNode2.equals((java.lang.Object) textNode18);
        int int20 = textNode2.siblingIndex();
        textNode2.ensureAttributes();
        java.lang.String str22 = textNode2.getTEXT_KEY();
        java.lang.String str23 = textNode2.nodeName();
        boolean boolean24 = textNode2.isBlank();
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ext" + "'", str16, "ext");
        org.junit.Assert.assertNotNull(textNode18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#text" + "'", str23, "#text");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test14985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14985");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.Document document6 = textNode0.ownerDocument();
        org.jsoup.nodes.Node node7 = textNode0.nextSibling();
        org.jsoup.nodes.TextNode textNode9 = textNode0.text("ext");
        java.lang.String str10 = textNode0.toString();
        int int11 = textNode0.siblingIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ext" + "'", str10, "ext");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test14986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14986");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str8 = textNode2.getTEXT_KEY();
        textNode2.text = "#text";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
    }

    @Test
    public void test14987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14987");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.prettyPrint = false;
        int int10 = outputSettings0.indentAmount();
        outputSettings0.setprettyPrint(false);
        java.lang.Class<?> wildcardClass13 = outputSettings0.getClass();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test14988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14988");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        outputSettings0.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings9.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = null;
        outputSettings12.setescapeMode(escapeMode15);
        outputSettings12.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null;
        outputSettings12.setescapeMode(escapeMode19);
        outputSettings12.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings12.getcharsetEncoder();
        outputSettings9.charsetEncoder = charsetEncoder23;
        outputSettings0.charsetEncoder = charsetEncoder23;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings0.clone();
        boolean boolean27 = outputSettings0.prettyPrint();
        outputSettings0.setindentAmount((int) 'a');
        boolean boolean30 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings0.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test14989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14989");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        outputSettings7.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings7.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        outputSettings22.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings22.setescapeMode(escapeMode29);
        boolean boolean31 = outputSettings22.forceAllElementAsBlock;
        int int32 = outputSettings22.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings22.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings35.setescapeMode(escapeMode38);
        outputSettings35.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings35.setescapeMode(escapeMode42);
        boolean boolean44 = outputSettings35.forceAllElementAsBlock;
        int int45 = outputSettings35.indentAmount;
        java.nio.charset.Charset charset46 = outputSettings35.getcharset();
        outputSettings34.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset46);
        int int49 = outputSettings48.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 0, outputSettings48);
        java.lang.String str52 = textNode2.attr("t");
        org.jsoup.nodes.TextNode textNode54 = textNode2.text("");
        java.lang.StringBuilder stringBuilder55 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean58 = outputSettings57.prettyPrint;
        boolean boolean59 = outputSettings57.forceAllElementAsBlock;
        boolean boolean60 = outputSettings57.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings57.prettyPrint(false);
        int int63 = outputSettings62.indentAmount;
        textNode2.outerHtmlTail(stringBuilder55, (int) (byte) 10, outputSettings62);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings62.forceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(textNode54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(outputSettings66);
    }

    @Test
    public void test14990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14990");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("h", "i");
        org.jsoup.nodes.TextNode textNode5 = org.jsoup.nodes.TextNode.createFromEncoded("#", "#");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node6 = textNode2.before((org.jsoup.nodes.Node) textNode5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(textNode5);
    }

    @Test
    public void test14991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14991");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Node node9 = textNode0.nextSibling();
        java.lang.String str10 = textNode0.text;
        java.lang.String str12 = textNode0.attr("ext");
        java.lang.String str14 = textNode0.absUrl("i!");
        java.lang.StringBuilder stringBuilder15 = null;
        org.jsoup.nodes.TextNode textNode19 = new org.jsoup.nodes.TextNode("text", "text");
        int int20 = textNode19.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList21 = textNode19.childNodes();
        java.lang.StringBuilder stringBuilder22 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        outputSettings24.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset30 = outputSettings29.charset();
        outputSettings24.setcharset(charset30);
        outputSettings24.setprettyPrint(true);
        java.nio.charset.Charset charset34 = outputSettings24.getcharset();
        outputSettings24.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings24.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings39.setescapeMode(escapeMode42);
        outputSettings39.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = null;
        outputSettings39.setescapeMode(escapeMode46);
        boolean boolean48 = outputSettings39.forceAllElementAsBlock;
        int int49 = outputSettings39.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings39.escapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = null;
        outputSettings52.setescapeMode(escapeMode55);
        outputSettings52.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = null;
        outputSettings52.setescapeMode(escapeMode59);
        boolean boolean61 = outputSettings52.forceAllElementAsBlock;
        int int62 = outputSettings52.indentAmount;
        java.nio.charset.Charset charset63 = outputSettings52.getcharset();
        outputSettings51.setcharset(charset63);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings38.charset(charset63);
        int int66 = outputSettings65.getindentAmount();
        textNode19.outerHtmlTail(stringBuilder22, (int) (short) 0, outputSettings65);
        // The following exception was thrown during execution in test generation
        try {
            textNode0.outerHtmlHead(stringBuilder15, (int) (byte) 1, outputSettings65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
    }

    @Test
    public void test14992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14992");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        textNode2.text = "hi!";
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        java.lang.String str12 = textNode2.text();
        java.lang.String str13 = textNode2.gettext();
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        org.jsoup.nodes.Node node16 = textNode2.removeAttr("h");
        org.jsoup.nodes.Attributes attributes17 = textNode2.attributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(attributes17);
    }

    @Test
    public void test14993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14993");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node6 = textNode2.attr("#text", "text");
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings9.setcharset(charset16);
        textNode2.outerHtmlTail(stringBuilder7, 0, outputSettings9);
        org.jsoup.nodes.Node node20 = textNode2.parent();
        java.lang.String str21 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test14994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14994");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.siblingNodes();
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings14.setescapeMode(escapeMode17);
        outputSettings14.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = null;
        outputSettings14.setescapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings14.prettyPrint(false);
        outputSettings14.forceAllElementAsBlock = true;
        outputSettings14.setforceAllElementAsBlock(true);
        textNode2.outerHtmlTail(stringBuilder12, (int) '4', outputSettings14);
        java.lang.String str31 = textNode2.absUrl("!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test14995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14995");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.getWholeText();
        textNode2.settext("h");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        textNode2.ensureAttributes();
        textNode2.settext("h");
        textNode2.settext("text");
        textNode2.text = "";
        java.lang.String str18 = textNode2.text();
        boolean boolean20 = textNode2.hasAttr("");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test14996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14996");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        int int10 = outputSettings6.indentAmount();
        outputSettings6.forceAllElementAsBlock = false;
        outputSettings6.setindentAmount((int) ' ');
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings15.setescapeMode(escapeMode18);
        outputSettings15.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings15.setescapeMode(escapeMode22);
        outputSettings15.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings15.getcharsetEncoder();
        boolean boolean27 = outputSettings15.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings15.getcharsetEncoder();
        outputSettings6.charsetEncoder = charsetEncoder28;
        outputSettings6.setforceAllElementAsBlock(false);
        outputSettings6.setindentAmount(100);
        int int34 = outputSettings6.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
    }

    @Test
    public void test14997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14997");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        org.jsoup.nodes.Attributes attributes6 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode2.childNodes();
        java.lang.String str8 = textNode2.outerHtml();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
    }

    @Test
    public void test14998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14998");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str10 = textNode2.attr("ext");
        java.lang.String str11 = textNode2.getWholeText();
        java.lang.String str12 = textNode2.gettext();
        java.lang.Class<?> wildcardClass13 = textNode2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test14999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14999");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#", "text");
        java.lang.String str3 = textNode2.getTEXT_KEY();
        boolean boolean4 = textNode2.isBlank();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test15000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test15000");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        outputSettings6.setprettyPrint(false);
        outputSettings6.setindentAmount(0);
        outputSettings6.indentAmount = (byte) 1;
        java.nio.charset.Charset charset15 = outputSettings6.getcharset();
        outputSettings0.setcharset(charset15);
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings18.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings24.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings24.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings24.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        boolean boolean33 = outputSettings30.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings30.prettyPrint(false);
        int int36 = outputSettings35.getindentAmount();
        outputSettings35.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings35.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        boolean boolean43 = outputSettings40.getprettyPrint();
        boolean boolean44 = outputSettings40.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings40.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings46.escapeMode();
        outputSettings35.setescapeMode(escapeMode47);
        outputSettings24.escapeMode = escapeMode47;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings0.escapeMode(escapeMode47);
        boolean boolean51 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings0.escapeMode();
        boolean boolean53 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        outputSettings54.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset60 = outputSettings59.charset();
        outputSettings54.setcharset(charset60);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset63 = outputSettings62.charset();
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings62.encoder();
        outputSettings54.setcharsetEncoder(charsetEncoder64);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean67 = outputSettings66.prettyPrint;
        boolean boolean68 = outputSettings66.forceAllElementAsBlock;
        int int69 = outputSettings66.getindentAmount();
        boolean boolean70 = outputSettings66.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings66.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder72 = outputSettings66.getcharsetEncoder();
        outputSettings54.setcharsetEncoder(charsetEncoder72);
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings54.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings75.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder78 = outputSettings77.encoder();
        java.nio.charset.Charset charset79 = outputSettings77.getcharset();
        outputSettings0.charset = charset79;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charsetEncoder71);
        org.junit.Assert.assertNotNull(charsetEncoder72);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(charsetEncoder78);
        org.junit.Assert.assertNotNull(charset79);
    }
}

