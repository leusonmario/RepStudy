import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        outputSettings2.prettyPrint = true;
        boolean boolean6 = outputSettings2.getprettyPrint();
        java.nio.charset.Charset charset7 = outputSettings2.getcharset();
        outputSettings2.setforceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charset7);
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.text();
        java.lang.String str10 = textNode2.baseUri();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings14.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings14.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings14.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings20.getcharsetEncoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.encoder();
        boolean boolean21 = outputSettings16.prettyPrint;
        java.nio.charset.Charset charset22 = outputSettings16.charset;
        boolean boolean23 = outputSettings16.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.encoder();
        boolean boolean29 = outputSettings24.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings24.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings16.escapeMode(escapeMode30);
        boolean boolean32 = outputSettings16.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings16.indentAmount(100);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        boolean boolean38 = outputSettings35.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings35.prettyPrint(false);
        outputSettings35.setforceAllElementAsBlock(false);
        outputSettings35.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset45 = outputSettings35.charset;
        outputSettings34.setcharset(charset45);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings15.charset(charset45);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        outputSettings48.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset54 = outputSettings53.charset();
        outputSettings48.setcharset(charset54);
        outputSettings48.setprettyPrint(true);
        java.nio.charset.Charset charset58 = outputSettings48.getcharset();
        outputSettings48.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings48.forceAllElementAsBlock(false);
        outputSettings62.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset65 = outputSettings62.charset;
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings62.getescapeMode();
        java.nio.charset.Charset charset67 = outputSettings62.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings47.charset(charset67);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings68.clone();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNotNull(outputSettings69);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        org.jsoup.nodes.TextNode textNode9 = textNode7.text("");
        java.lang.String str10 = textNode9.gettext();
        textNode9.text = "t";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "#text");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("i!");
        java.lang.String str5 = textNode4.gettext();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset7 = outputSettings6.charset();
        int int8 = outputSettings6.indentAmount;
        boolean boolean9 = textNode4.equals((java.lang.Object) int8);
        java.lang.String str11 = textNode4.absUrl("t");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "i!" + "'", str5, "i!");
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node4 = textNode2.clone();
        textNode2.settext("t");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node8 = textNode2.before("!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        java.nio.charset.Charset charset17 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings0.encoder();
        int int19 = outputSettings0.indentAmount();
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.String str7 = textNode2.getTEXT_KEY();
        textNode2.settext("hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings43.prettyPrint(false);
        int int49 = outputSettings48.getindentAmount();
        outputSettings48.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings48.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        boolean boolean56 = outputSettings53.getprettyPrint();
        boolean boolean57 = outputSettings53.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings53.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings59.escapeMode();
        outputSettings48.setescapeMode(escapeMode60);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings15.escapeMode(escapeMode60);
        java.nio.charset.Charset charset63 = outputSettings62.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings62.escapeMode;
        boolean boolean65 = outputSettings62.prettyPrint;
        java.lang.Class<?> wildcardClass66 = outputSettings62.getClass();
        boolean boolean67 = textNode2.equals((java.lang.Object) wildcardClass66);
        boolean boolean68 = textNode2.isBlank();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings11.clone();
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings11.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings14.setescapeMode(escapeMode17);
        outputSettings14.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = null;
        outputSettings14.setescapeMode(escapeMode21);
        boolean boolean23 = outputSettings14.forceAllElementAsBlock;
        int int24 = outputSettings14.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings14.escapeMode(escapeMode25);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        outputSettings27.setescapeMode(escapeMode30);
        outputSettings27.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings27.setescapeMode(escapeMode34);
        boolean boolean36 = outputSettings27.forceAllElementAsBlock;
        int int37 = outputSettings27.indentAmount;
        java.nio.charset.Charset charset38 = outputSettings27.getcharset();
        outputSettings26.setcharset(charset38);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings11.charset(charset38);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings0.charset(charset38);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings0.indentAmount((int) (short) 1);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        outputSettings44.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset50 = outputSettings49.charset();
        outputSettings44.setcharset(charset50);
        outputSettings44.setprettyPrint(true);
        java.nio.charset.Charset charset54 = outputSettings44.getcharset();
        outputSettings44.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings44.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings58.clone();
        java.nio.charset.CharsetEncoder charsetEncoder60 = outputSettings59.charsetEncoder;
        java.nio.charset.Charset charset61 = outputSettings59.charset;
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings59.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings43.escapeMode(escapeMode62);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charsetEncoder60);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings63);
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean3 = outputSettings2.prettyPrint;
        boolean boolean4 = outputSettings2.forceAllElementAsBlock;
        int int5 = outputSettings2.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings2.charsetEncoder;
        outputSettings0.charsetEncoder = charsetEncoder6;
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        boolean boolean15 = outputSettings12.getprettyPrint();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings12.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings12.getescapeMode();
        outputSettings11.setescapeMode(escapeMode19);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings11.indentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        outputSettings23.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings23.setcharset(charset29);
        outputSettings23.setprettyPrint(true);
        java.nio.charset.Charset charset33 = outputSettings23.getcharset();
        outputSettings23.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings23.forceAllElementAsBlock(false);
        boolean boolean38 = outputSettings23.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings39.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = null;
        outputSettings42.setescapeMode(escapeMode45);
        outputSettings42.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = null;
        outputSettings42.setescapeMode(escapeMode49);
        boolean boolean51 = outputSettings42.forceAllElementAsBlock;
        int int52 = outputSettings42.indentAmount;
        java.nio.charset.Charset charset53 = outputSettings42.getcharset();
        outputSettings39.charset = charset53;
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings39.escapeMode();
        outputSettings23.escapeMode = escapeMode55;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings22.escapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings0.escapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings0.clone();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNotNull(outputSettings59);
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings4.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings4.getescapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str4 = textNode2.absUrl("t");
        textNode2.setBaseUri("");
        java.lang.String str7 = textNode2.outerHtml();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings7.indentAmount((int) (short) 0);
        outputSettings7.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings7.encoder();
        textNode2.outerHtmlTail(stringBuilder5, 97, outputSettings7);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings15.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings15.getescapeMode();
        int int20 = outputSettings15.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings15.escapeMode();
        outputSettings7.setescapeMode(escapeMode21);
        java.nio.charset.Charset charset23 = outputSettings7.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        boolean boolean27 = outputSettings24.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings24.prettyPrint(false);
        outputSettings24.setforceAllElementAsBlock(false);
        outputSettings24.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        int int39 = outputSettings36.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings36.charsetEncoder;
        outputSettings34.charsetEncoder = charsetEncoder40;
        outputSettings24.charsetEncoder = charsetEncoder40;
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings24.encoder();
        java.nio.charset.Charset charset44 = outputSettings24.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings7.charset(charset44);
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(outputSettings45);
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        textNode2.setBaseUri("text");
        java.lang.String str12 = textNode2.text;
        int int13 = textNode2.siblingIndex();
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node17 = textNode2.attr("i!", "i!");
        org.jsoup.nodes.TextNode textNode20 = new org.jsoup.nodes.TextNode("text", "text");
        int int21 = textNode20.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList22 = textNode20.siblingNodes();
        textNode20.text = "";
        org.jsoup.nodes.Node node25 = textNode20.parent();
        boolean boolean27 = textNode20.hasAttr("text");
        java.lang.String str28 = textNode20.outerHtml();
        java.lang.String str29 = textNode20.getWholeText();
        org.jsoup.nodes.TextNode textNode31 = textNode20.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList32 = textNode31.siblingNodes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node33 = textNode2.after((org.jsoup.nodes.Node) textNode31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(nodeList22);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(textNode31);
        org.junit.Assert.assertNotNull(nodeList32);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        boolean boolean23 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings0.forceAllElementAsBlock(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings0.charset("i");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: i");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str10 = textNode0.attr("t");
        org.jsoup.nodes.Node node11 = textNode0.clone();
        org.jsoup.nodes.Node node14 = textNode0.attr("i!", "i!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        org.jsoup.nodes.Node node11 = textNode2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.setprettyPrint(false);
        outputSettings18.setindentAmount(0);
        outputSettings18.indentAmount = (byte) 1;
        java.nio.charset.Charset charset27 = outputSettings18.getcharset();
        outputSettings12.setcharset(charset27);
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings12.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings30.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings36.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings36.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings36.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(false);
        int int48 = outputSettings47.getindentAmount();
        outputSettings47.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        boolean boolean56 = outputSettings52.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings52.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        outputSettings47.setescapeMode(escapeMode59);
        outputSettings36.escapeMode = escapeMode59;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings12.escapeMode(escapeMode59);
        boolean boolean63 = textNode2.equals((java.lang.Object) outputSettings62);
        boolean boolean64 = outputSettings62.prettyPrint;
        java.nio.charset.Charset charset65 = outputSettings62.charset;
        int int66 = outputSettings62.getindentAmount();
        outputSettings62.prettyPrint = true;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        org.jsoup.nodes.Node node11 = textNode2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.setprettyPrint(false);
        outputSettings18.setindentAmount(0);
        outputSettings18.indentAmount = (byte) 1;
        java.nio.charset.Charset charset27 = outputSettings18.getcharset();
        outputSettings12.setcharset(charset27);
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings12.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings30.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings36.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings36.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings36.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(false);
        int int48 = outputSettings47.getindentAmount();
        outputSettings47.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        boolean boolean56 = outputSettings52.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings52.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        outputSettings47.setescapeMode(escapeMode59);
        outputSettings36.escapeMode = escapeMode59;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings12.escapeMode(escapeMode59);
        boolean boolean63 = textNode2.equals((java.lang.Object) outputSettings62);
        int int64 = outputSettings62.getindentAmount();
        outputSettings62.setindentAmount((int) (short) 0);
        outputSettings62.forceAllElementAsBlock = true;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.lang.String str8 = textNode2.text();
        boolean boolean9 = textNode2.isBlank();
        boolean boolean10 = textNode2.isBlank();
        textNode2.ensureAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = textNode2.childNode((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        org.jsoup.nodes.TextNode textNode9 = textNode7.text("");
        java.lang.String str10 = textNode9.gettext();
        org.jsoup.nodes.Node node11 = textNode9.nextSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset8 = outputSettings7.charset();
        outputSettings6.charset = charset8;
        outputSettings6.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings6.getcharsetEncoder();
        outputSettings0.charsetEncoder = charsetEncoder12;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.prettyPrint(true);
        int int16 = outputSettings0.indentAmount();
        java.nio.charset.Charset charset17 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        int int21 = outputSettings18.getindentAmount();
        boolean boolean22 = outputSettings18.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings18.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings24.setescapeMode(escapeMode27);
        outputSettings24.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings24.setescapeMode(escapeMode31);
        boolean boolean33 = outputSettings24.forceAllElementAsBlock;
        int int34 = outputSettings24.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings24.escapeMode(escapeMode35);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = null;
        outputSettings37.setescapeMode(escapeMode40);
        outputSettings37.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = null;
        outputSettings37.setescapeMode(escapeMode44);
        boolean boolean46 = outputSettings37.forceAllElementAsBlock;
        int int47 = outputSettings37.indentAmount;
        java.nio.charset.Charset charset48 = outputSettings37.getcharset();
        outputSettings36.setcharset(charset48);
        outputSettings18.charset = charset48;
        outputSettings0.charset = charset48;
        boolean boolean52 = outputSettings0.forceAllElementAsBlock();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        boolean boolean6 = outputSettings3.getprettyPrint();
        boolean boolean7 = outputSettings3.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings3.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings3.getescapeMode();
        outputSettings2.setescapeMode(escapeMode10);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings2.indentAmount(0);
        java.nio.charset.Charset charset14 = outputSettings2.charset();
        outputSettings2.indentAmount = (short) 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        boolean boolean21 = outputSettings17.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings17.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings25.charset = charset27;
        outputSettings25.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        int int34 = outputSettings31.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings31.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        outputSettings37.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset43 = outputSettings42.charset();
        outputSettings37.setcharset(charset43);
        outputSettings36.setcharset(charset43);
        outputSettings31.setcharset(charset43);
        outputSettings25.setcharset(charset43);
        outputSettings23.setcharset(charset43);
        outputSettings2.charset = charset43;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset43);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset7 = outputSettings0.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        boolean boolean11 = outputSettings8.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings8.prettyPrint(false);
        java.nio.charset.Charset charset14 = outputSettings8.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings8.getescapeMode();
        outputSettings0.escapeMode = escapeMode15;
        boolean boolean17 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings0.getescapeMode();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        org.jsoup.nodes.Node node3 = textNode2.nextSibling();
        org.jsoup.nodes.Node node6 = textNode2.attr("i!", "");
        java.lang.String str7 = textNode2.text();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        org.jsoup.nodes.TextNode textNode13 = textNode2.splitText(1);
        textNode13.ensureAttributes();
        java.lang.String str15 = textNode13.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        org.jsoup.nodes.Attributes attributes8 = textNode0.attributes();
        org.jsoup.nodes.Node node9 = textNode0.nextSibling();
        boolean boolean11 = textNode0.hasAttr("h");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.nodeName();
        org.jsoup.nodes.Node node4 = textNode2.clone();
        org.jsoup.nodes.TextNode textNode7 = new org.jsoup.nodes.TextNode("text", "text");
        int int8 = textNode7.siblingIndex();
        int int9 = textNode7.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode7.childNodes();
        java.lang.String str11 = textNode7.getWholeText();
        org.jsoup.nodes.TextNode textNode13 = textNode7.splitText(1);
        java.lang.String str14 = textNode7.gettext();
        textNode7.settext("hi!");
        org.jsoup.nodes.Node node17 = textNode7.parent();
        org.jsoup.nodes.Node node20 = textNode7.attr("ext", "");
        java.lang.String str21 = textNode7.getTEXT_KEY();
        textNode7.setBaseUri("t");
        org.jsoup.nodes.Node node25 = textNode7.removeAttr("#text");
        java.lang.String str26 = textNode7.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node27 = node4.after((org.jsoup.nodes.Node) textNode7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "t" + "'", str14, "t");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node6 = textNode2.attr("#text", "text");
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings13.setcharset(charset19);
        outputSettings12.setcharset(charset19);
        outputSettings7.setcharset(charset19);
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings7.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings24.setescapeMode(escapeMode27);
        outputSettings24.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings24.setescapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings24.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode;
        outputSettings34.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings34.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        boolean boolean42 = outputSettings39.getprettyPrint();
        boolean boolean43 = outputSettings39.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings39.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode();
        outputSettings34.setescapeMode(escapeMode46);
        outputSettings7.escapeMode = escapeMode46;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset51 = outputSettings50.charset();
        outputSettings49.charset = charset51;
        outputSettings49.indentAmount = (-1);
        java.nio.charset.Charset charset55 = outputSettings49.charset();
        boolean boolean56 = outputSettings49.forceAllElementAsBlock();
        java.nio.charset.Charset charset57 = outputSettings49.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings7.charset(charset57);
        boolean boolean59 = node6.equals((java.lang.Object) outputSettings7);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings7.prettyPrint(true);
        boolean boolean62 = outputSettings7.prettyPrint;
        java.nio.charset.CharsetEncoder charsetEncoder63 = outputSettings7.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset66 = outputSettings65.charset();
        outputSettings64.charset = charset66;
        java.nio.charset.CharsetEncoder charsetEncoder68 = outputSettings64.encoder();
        boolean boolean69 = outputSettings64.prettyPrint;
        java.nio.charset.Charset charset70 = outputSettings64.charset;
        outputSettings7.setcharset(charset70);
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNull(escapeMode35);
        org.junit.Assert.assertNull(escapeMode38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(charsetEncoder63);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(charsetEncoder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(charset70);
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.siblingNodes();
        java.lang.String str11 = textNode2.text;
        java.lang.String str13 = textNode2.absUrl("hi!");
        java.lang.String str15 = textNode2.attr("h");
        textNode2.ensureAttributes();
        java.lang.Class<?> wildcardClass17 = textNode2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        outputSettings0.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings9.setcharset(charset15);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings17.encoder();
        outputSettings9.setcharsetEncoder(charsetEncoder19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        int int24 = outputSettings21.getindentAmount();
        boolean boolean25 = outputSettings21.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings21.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings21.getcharsetEncoder();
        outputSettings9.setcharsetEncoder(charsetEncoder27);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings9.prettyPrint(false);
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings30.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings30.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings0.escapeMode(escapeMode34);
        boolean boolean36 = outputSettings35.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.String str7 = textNode2.toString();
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        outputSettings10.charset = charset12;
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings10.encoder();
        boolean boolean15 = outputSettings10.prettyPrint;
        java.nio.charset.Charset charset16 = outputSettings10.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        outputSettings17.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings17.setcharset(charset23);
        outputSettings17.setprettyPrint(true);
        java.nio.charset.Charset charset27 = outputSettings17.getcharset();
        outputSettings17.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings17.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings10.escapeMode(escapeMode32);
        int int34 = outputSettings33.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings35.charset = charset37;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings35.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings35.escapeMode();
        outputSettings33.escapeMode = escapeMode41;
        textNode2.outerHtmlTail(stringBuilder8, (int) '4', outputSettings33);
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings33.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings33.clone();
        outputSettings33.prettyPrint = true;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertNotNull(outputSettings45);
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        boolean boolean7 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("t");
        boolean boolean11 = textNode2.hasAttr("ext");
        java.lang.String str13 = textNode2.attr("t");
        org.jsoup.nodes.Node node14 = textNode2.parent();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.getTEXT_KEY();
        textNode2.settext("t");
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode15.childNodes();
        org.jsoup.nodes.TextNode textNode18 = textNode15.splitText(1);
        org.jsoup.nodes.Node node21 = textNode18.attr("hi!", "t");
        java.lang.String str23 = textNode18.attr("#text");
        java.lang.String str24 = textNode18.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode26 = textNode18.text("ext");
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings27.charset = charset29;
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.encoder();
        boolean boolean32 = outputSettings27.prettyPrint;
        boolean boolean33 = outputSettings27.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        int int37 = outputSettings34.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings34.getcharsetEncoder();
        boolean boolean39 = outputSettings34.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = null;
        outputSettings40.setescapeMode(escapeMode43);
        outputSettings40.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = null;
        outputSettings40.setescapeMode(escapeMode47);
        boolean boolean49 = outputSettings40.forceAllElementAsBlock;
        int int50 = outputSettings40.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings40.escapeMode(escapeMode51);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = null;
        outputSettings53.setescapeMode(escapeMode56);
        outputSettings53.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = null;
        outputSettings53.setescapeMode(escapeMode60);
        boolean boolean62 = outputSettings53.forceAllElementAsBlock;
        int int63 = outputSettings53.indentAmount;
        java.nio.charset.Charset charset64 = outputSettings53.getcharset();
        outputSettings52.setcharset(charset64);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings34.charset(charset64);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean68 = outputSettings67.prettyPrint;
        boolean boolean69 = outputSettings67.forceAllElementAsBlock;
        boolean boolean70 = outputSettings67.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings67.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        int int76 = outputSettings73.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder77 = outputSettings73.getcharsetEncoder();
        outputSettings72.setcharsetEncoder(charsetEncoder77);
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings72.escapeMode;
        outputSettings34.setescapeMode(escapeMode79);
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings27.escapeMode(escapeMode79);
        boolean boolean82 = textNode18.equals((java.lang.Object) outputSettings27);
        org.jsoup.nodes.Document document83 = textNode18.ownerDocument();
        org.jsoup.nodes.Attributes attributes84 = textNode18.attributes();
        boolean boolean85 = textNode2.equals((java.lang.Object) attributes84);
        org.jsoup.nodes.Node node86 = textNode2.clone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNotNull(textNode18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "text" + "'", str24, "text");
        org.junit.Assert.assertNotNull(textNode26);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder77);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(document83);
        org.junit.Assert.assertNotNull(attributes84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings3.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        boolean boolean9 = outputSettings5.forceAllElementAsBlock();
        boolean boolean10 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings5.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings4.escapeMode(escapeMode11);
        int int13 = outputSettings12.indentAmount();
        int int14 = outputSettings12.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        outputSettings15.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings15.getcharsetEncoder();
        boolean boolean21 = outputSettings15.getprettyPrint();
        org.jsoup.nodes.TextNode textNode22 = new org.jsoup.nodes.TextNode();
        int int23 = textNode22.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings24.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        outputSettings27.setescapeMode(escapeMode30);
        outputSettings27.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings27.setescapeMode(escapeMode34);
        boolean boolean36 = outputSettings27.forceAllElementAsBlock;
        int int37 = outputSettings27.indentAmount;
        java.nio.charset.Charset charset38 = outputSettings27.getcharset();
        outputSettings24.charset = charset38;
        boolean boolean40 = textNode22.equals((java.lang.Object) outputSettings24);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        boolean boolean44 = outputSettings41.getprettyPrint();
        boolean boolean45 = outputSettings41.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings41.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings47.escapeMode();
        outputSettings47.setprettyPrint(true);
        boolean boolean51 = textNode22.equals((java.lang.Object) outputSettings47);
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings47.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        int int56 = outputSettings53.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder57 = outputSettings53.getcharsetEncoder();
        outputSettings47.setcharsetEncoder(charsetEncoder57);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        outputSettings59.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings59.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder66 = outputSettings65.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = null;
        outputSettings65.escapeMode = escapeMode67;
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean70 = outputSettings69.prettyPrint;
        boolean boolean71 = outputSettings69.forceAllElementAsBlock;
        outputSettings69.setprettyPrint(false);
        java.nio.charset.Charset charset74 = outputSettings69.charset;
        java.nio.charset.Charset charset75 = outputSettings69.charset;
        outputSettings65.setcharset(charset75);
        outputSettings47.setcharset(charset75);
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings15.charset(charset75);
        outputSettings12.setcharset(charset75);
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = outputSettings12.escapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(charsetEncoder66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertTrue("'" + escapeMode80 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode80.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        int int25 = outputSettings8.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings8.getescapeMode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        boolean boolean7 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("t");
        java.lang.String str10 = textNode2.toString();
        java.lang.String str11 = textNode2.getTEXT_KEY();
        textNode2.settext("");
        java.lang.String str14 = textNode2.getWholeText();
        java.lang.String str15 = textNode2.text();
        org.jsoup.nodes.TextNode textNode17 = textNode2.text("#text");
        java.lang.StringBuilder stringBuilder18 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.prettyPrint();
        boolean boolean23 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.forceAllElementAsBlock = false;
        textNode2.outerHtmlTail(stringBuilder18, (int) 'a', outputSettings20);
        org.jsoup.nodes.Node node29 = textNode2.attr("t", "i!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "t" + "'", str10, "t");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "t" + "'", str14, "t");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "t" + "'", str15, "t");
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        outputSettings8.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings8.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings14.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings14.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        boolean boolean19 = textNode2.equals((java.lang.Object) outputSettings14);
        org.jsoup.nodes.TextNode textNode20 = new org.jsoup.nodes.TextNode();
        textNode20.setBaseUri("hi!");
        java.lang.String str23 = textNode20.getTEXT_KEY();
        textNode20.text = "hi!";
        boolean boolean27 = textNode20.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList28 = textNode20.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        boolean boolean32 = outputSettings29.getprettyPrint();
        boolean boolean33 = outputSettings29.forceAllElementAsBlock();
        boolean boolean34 = outputSettings29.forceAllElementAsBlock;
        boolean boolean35 = textNode20.equals((java.lang.Object) outputSettings29);
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings29.getcharsetEncoder();
        outputSettings29.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset39 = outputSettings29.charset();
        outputSettings14.setcharset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings14.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        outputSettings43.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings43.forceAllElementAsBlock(true);
        outputSettings49.setprettyPrint(false);
        boolean boolean52 = outputSettings49.prettyPrint();
        outputSettings49.setindentAmount((int) (byte) 100);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        boolean boolean58 = outputSettings55.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings55.prettyPrint(false);
        java.nio.charset.Charset charset61 = outputSettings55.charset;
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings55.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings49.escapeMode(escapeMode62);
        outputSettings42.escapeMode = escapeMode62;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings42.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.prettyPrint(false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "text" + "'", str23, "text");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertNotNull(outputSettings68);
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings14.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings14.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings14.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings14.charsetEncoder;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("t", "ext");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(document3);
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder4 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        boolean boolean9 = outputSettings6.getprettyPrint();
        boolean boolean10 = outputSettings6.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings6.indentAmount((int) '4');
        textNode0.outerHtmlTail(stringBuilder4, (int) (short) 100, outputSettings12);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        boolean boolean17 = outputSettings14.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings14.prettyPrint(false);
        outputSettings14.setforceAllElementAsBlock(false);
        outputSettings14.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset24 = outputSettings14.charset;
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings14.getcharsetEncoder();
        outputSettings12.charsetEncoder = charsetEncoder25;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        outputSettings27.setescapeMode(escapeMode30);
        outputSettings27.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings27.setescapeMode(escapeMode34);
        boolean boolean36 = outputSettings27.forceAllElementAsBlock;
        int int37 = outputSettings27.indentAmount;
        java.nio.charset.Charset charset38 = outputSettings27.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        outputSettings39.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset45 = outputSettings44.charset();
        outputSettings39.setcharset(charset45);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset48 = outputSettings47.charset();
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings47.encoder();
        outputSettings39.setcharsetEncoder(charsetEncoder49);
        java.nio.charset.Charset charset51 = outputSettings39.getcharset();
        boolean boolean52 = outputSettings39.forceAllElementAsBlock();
        java.nio.charset.Charset charset53 = outputSettings39.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings27.charset(charset53);
        outputSettings12.charset = charset53;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = null;
        outputSettings56.setescapeMode(escapeMode59);
        boolean boolean61 = outputSettings56.prettyPrint;
        outputSettings56.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings64.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings64.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean68 = outputSettings67.prettyPrint;
        boolean boolean69 = outputSettings67.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode70 = null;
        outputSettings67.setescapeMode(escapeMode70);
        outputSettings67.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode74 = null;
        outputSettings67.setescapeMode(escapeMode74);
        boolean boolean76 = outputSettings67.forceAllElementAsBlock;
        int int77 = outputSettings67.indentAmount;
        java.nio.charset.Charset charset78 = outputSettings67.getcharset();
        outputSettings64.charset = charset78;
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings56.charset(charset78);
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings12.charset(charset78);
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings12.prettyPrint(false);
        int int84 = outputSettings83.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings83.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode87 = outputSettings86.escapeMode();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(charsetEncoder49);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertNotNull(outputSettings83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertNotNull(outputSettings86);
        org.junit.Assert.assertTrue("'" + escapeMode87 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode87.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        java.lang.String str7 = textNode2.gettext();
        textNode2.setBaseUri("t");
        textNode2.setBaseUri("i!");
        org.jsoup.nodes.Node node13 = textNode2.removeAttr("#text");
        java.lang.String str14 = textNode2.text();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        outputSettings11.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings11.getcharsetEncoder();
        outputSettings5.setcharsetEncoder(charsetEncoder16);
        outputSettings0.charsetEncoder = charsetEncoder16;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings19.encoder();
        boolean boolean22 = outputSettings19.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings23.charset = charset25;
        outputSettings23.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings23.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings23.escapeMode(escapeMode30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings32.charset = charset34;
        outputSettings32.indentAmount = (-1);
        java.nio.charset.Charset charset38 = outputSettings32.charset();
        boolean boolean39 = outputSettings32.forceAllElementAsBlock();
        java.nio.charset.Charset charset40 = outputSettings32.getcharset();
        outputSettings31.charset = charset40;
        outputSettings19.setcharset(charset40);
        outputSettings0.setcharset(charset40);
        java.nio.charset.Charset charset44 = outputSettings0.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        outputSettings45.setprettyPrint(false);
        int int50 = outputSettings45.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        boolean boolean54 = outputSettings51.getprettyPrint();
        boolean boolean55 = outputSettings51.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings51.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode();
        int int59 = outputSettings57.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        outputSettings60.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset66 = outputSettings65.charset();
        outputSettings60.setcharset(charset66);
        outputSettings60.setprettyPrint(true);
        java.nio.charset.Charset charset70 = outputSettings60.getcharset();
        outputSettings60.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings60.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset75 = outputSettings74.getcharset();
        outputSettings57.charset = charset75;
        outputSettings45.setcharset(charset75);
        java.nio.charset.Charset charset78 = outputSettings45.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings0.charset(charset78);
        int int80 = outputSettings0.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder81 = outputSettings0.encoder();
        boolean boolean82 = outputSettings0.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        textNode0.text = "text";
        java.lang.String str10 = textNode0.toString();
        org.jsoup.nodes.Node node11 = textNode0.parent();
        textNode0.text = "h";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode0.wrap("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        java.nio.charset.Charset charset5 = outputSettings0.charset;
        org.jsoup.nodes.TextNode textNode8 = new org.jsoup.nodes.TextNode("text", "text");
        int int9 = textNode8.siblingIndex();
        int int10 = textNode8.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode8.childNodes();
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        textNode8.outerHtmlTail(stringBuilder12, 10, outputSettings14);
        int int31 = outputSettings14.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings14.encoder();
        outputSettings0.charsetEncoder = charsetEncoder32;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        outputSettings34.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings34.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings40.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings40.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings40.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        boolean boolean49 = outputSettings46.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings46.prettyPrint(false);
        int int52 = outputSettings51.getindentAmount();
        outputSettings51.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder55 = outputSettings51.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        boolean boolean59 = outputSettings56.getprettyPrint();
        boolean boolean60 = outputSettings56.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings56.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings62.escapeMode();
        outputSettings51.setescapeMode(escapeMode63);
        outputSettings40.escapeMode = escapeMode63;
        outputSettings0.setescapeMode(escapeMode63);
        boolean boolean67 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setforceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder70 = outputSettings0.charsetEncoder;
        outputSettings0.forceAllElementAsBlock = true;
        boolean boolean73 = outputSettings0.prettyPrint;
        java.nio.charset.CharsetEncoder charsetEncoder74 = null;
        outputSettings0.setcharsetEncoder(charsetEncoder74);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(charsetEncoder70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        org.jsoup.nodes.Node node8 = textNode5.attr("hi!", "t");
        java.lang.String str10 = textNode5.attr("#text");
        java.lang.String str11 = textNode5.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode13 = textNode5.text("ext");
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings14.charset = charset16;
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.encoder();
        boolean boolean19 = outputSettings14.prettyPrint;
        boolean boolean20 = outputSettings14.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        int int24 = outputSettings21.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings21.getcharsetEncoder();
        boolean boolean26 = outputSettings21.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        outputSettings27.setescapeMode(escapeMode30);
        outputSettings27.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings27.setescapeMode(escapeMode34);
        boolean boolean36 = outputSettings27.forceAllElementAsBlock;
        int int37 = outputSettings27.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings27.escapeMode(escapeMode38);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = null;
        outputSettings40.setescapeMode(escapeMode43);
        outputSettings40.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = null;
        outputSettings40.setescapeMode(escapeMode47);
        boolean boolean49 = outputSettings40.forceAllElementAsBlock;
        int int50 = outputSettings40.indentAmount;
        java.nio.charset.Charset charset51 = outputSettings40.getcharset();
        outputSettings39.setcharset(charset51);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings21.charset(charset51);
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        boolean boolean57 = outputSettings54.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings54.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        int int63 = outputSettings60.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings60.getcharsetEncoder();
        outputSettings59.setcharsetEncoder(charsetEncoder64);
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings59.escapeMode;
        outputSettings21.setescapeMode(escapeMode66);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings14.escapeMode(escapeMode66);
        boolean boolean69 = textNode5.equals((java.lang.Object) outputSettings14);
        org.jsoup.nodes.Document document70 = textNode5.ownerDocument();
        java.lang.String str72 = textNode5.attr("");
        boolean boolean74 = textNode5.hasAttr("h");
        java.lang.Class<?> wildcardClass75 = textNode5.getClass();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(document70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        int int6 = outputSettings5.getindentAmount();
        outputSettings5.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        outputSettings9.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings20.setcharset(charset27);
        outputSettings15.setcharset(charset27);
        outputSettings9.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings5.charset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        int int39 = outputSettings38.getindentAmount();
        outputSettings38.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        boolean boolean47 = outputSettings43.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings43.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings49.escapeMode();
        outputSettings38.setescapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings5.escapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = null;
        outputSettings53.setescapeMode(escapeMode56);
        outputSettings53.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = null;
        outputSettings53.setescapeMode(escapeMode60);
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings53.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean65 = outputSettings64.prettyPrint;
        boolean boolean66 = outputSettings64.forceAllElementAsBlock;
        outputSettings64.setprettyPrint(false);
        java.nio.charset.Charset charset69 = outputSettings64.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings63.charset(charset69);
        outputSettings52.charset = charset69;
        outputSettings52.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean75 = outputSettings74.prettyPrint;
        boolean boolean76 = outputSettings74.forceAllElementAsBlock;
        boolean boolean77 = outputSettings74.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings74.prettyPrint(false);
        int int80 = outputSettings79.getindentAmount();
        outputSettings79.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder83 = outputSettings79.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean85 = outputSettings84.prettyPrint;
        boolean boolean86 = outputSettings84.forceAllElementAsBlock;
        boolean boolean87 = outputSettings84.getprettyPrint();
        boolean boolean88 = outputSettings84.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings84.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode91 = outputSettings90.escapeMode();
        outputSettings79.setescapeMode(escapeMode91);
        boolean boolean93 = outputSettings79.prettyPrint;
        java.nio.charset.Charset charset94 = outputSettings79.charset();
        java.nio.charset.CharsetEncoder charsetEncoder95 = outputSettings79.charsetEncoder;
        outputSettings52.charsetEncoder = charsetEncoder95;
        org.jsoup.nodes.Entities.EscapeMode escapeMode97 = outputSettings52.escapeMode();
        int int98 = outputSettings52.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertTrue("'" + escapeMode91 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode91.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(charset94);
        org.junit.Assert.assertNotNull(charsetEncoder95);
        org.junit.Assert.assertTrue("'" + escapeMode97 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode97.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 97 + "'", int98 == 97);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean5 = outputSettings4.prettyPrint;
        boolean boolean6 = outputSettings4.forceAllElementAsBlock;
        int int7 = outputSettings4.getindentAmount();
        boolean boolean8 = outputSettings4.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings4.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings4.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings11.encoder();
        boolean boolean16 = outputSettings11.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings11.escapeMode;
        outputSettings4.setescapeMode(escapeMode17);
        outputSettings0.setescapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings0.clone();
        int int21 = outputSettings0.indentAmount();
        outputSettings0.setprettyPrint(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        org.jsoup.nodes.TextNode textNode13 = textNode2.splitText(1);
        textNode13.ensureAttributes();
        java.lang.String str15 = textNode13.getWholeText();
        java.lang.String str16 = textNode13.getWholeText();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode13.after("t");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "i!" + "'", str15, "i!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "i!" + "'", str16, "i!");
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        outputSettings5.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        boolean boolean15 = outputSettings12.getprettyPrint();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings12.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings12.getescapeMode();
        outputSettings5.setescapeMode(escapeMode19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings21.setprettyPrint(true);
        java.nio.charset.Charset charset31 = outputSettings21.getcharset();
        outputSettings21.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings21.forceAllElementAsBlock(false);
        boolean boolean36 = outputSettings21.prettyPrint();
        org.jsoup.nodes.TextNode textNode39 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = textNode39.equals((java.lang.Object) outputSettings40);
        int int43 = outputSettings40.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        outputSettings44.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset50 = outputSettings49.charset();
        outputSettings44.setcharset(charset50);
        outputSettings44.setprettyPrint(true);
        java.nio.charset.Charset charset54 = outputSettings44.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder55 = outputSettings44.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings44.escapeMode();
        boolean boolean57 = outputSettings44.getprettyPrint();
        boolean boolean58 = outputSettings44.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings44.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings40.escapeMode(escapeMode59);
        java.nio.charset.Charset charset61 = outputSettings60.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings60.escapeMode();
        outputSettings21.setescapeMode(escapeMode62);
        outputSettings5.setescapeMode(escapeMode62);
        boolean boolean65 = outputSettings5.forceAllElementAsBlock();
        boolean boolean66 = outputSettings5.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(charsetEncoder55);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        java.lang.String str3 = textNode2.getTEXT_KEY();
        java.lang.String str4 = textNode2.toString();
        java.lang.String str5 = textNode2.gettext();
        java.lang.String str6 = textNode2.text();
        java.lang.String str7 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode8 = new org.jsoup.nodes.TextNode();
        textNode8.setBaseUri("hi!");
        java.lang.String str11 = textNode8.getTEXT_KEY();
        textNode8.text = "hi!";
        org.jsoup.nodes.TextNode textNode15 = textNode8.splitText((int) (byte) 0);
        java.lang.String str16 = textNode15.nodeName();
        org.jsoup.nodes.Node node18 = textNode15.removeAttr("i!");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#text" + "'", str5, "#text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#text" + "'", str16, "#text");
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        int int1 = textNode0.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        java.nio.charset.Charset charset16 = outputSettings5.getcharset();
        outputSettings2.charset = charset16;
        boolean boolean18 = textNode0.equals((java.lang.Object) outputSettings2);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode();
        outputSettings25.setprettyPrint(true);
        boolean boolean29 = textNode0.equals((java.lang.Object) outputSettings25);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings25.escapeMode;
        outputSettings25.indentAmount = 0;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings25.escapeMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        java.lang.String str4 = textNode0.baseUri();
        java.lang.String str5 = textNode0.text;
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode0.childNodes();
        org.jsoup.nodes.TextNode textNode7 = new org.jsoup.nodes.TextNode();
        textNode7.setBaseUri("hi!");
        java.lang.String str10 = textNode7.getTEXT_KEY();
        textNode7.text = "hi!";
        org.jsoup.nodes.TextNode textNode14 = textNode7.splitText((int) (byte) 0);
        java.lang.String str15 = textNode7.getWholeText();
        org.jsoup.nodes.Node node16 = textNode7.parent();
        textNode7.text = "hi!";
        java.lang.String str20 = textNode7.absUrl("#");
        java.lang.String str21 = textNode7.text();
        // The following exception was thrown during execution in test generation
        try {
            textNode0.replaceWith((org.jsoup.nodes.Node) textNode7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(nodeList6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.Node node9 = textNode2.removeAttr("t");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode();
        textNode11.setBaseUri("hi!");
        java.lang.String str14 = textNode11.text;
        java.lang.String str15 = textNode11.nodeName();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode11.siblingNodes();
        boolean boolean17 = textNode2.equals((java.lang.Object) nodeList16);
        org.jsoup.nodes.Node node18 = textNode2.clone();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        int int20 = textNode2.siblingIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node21 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings3.escapeMode();
        outputSettings3.setprettyPrint(true);
        outputSettings3.forceAllElementAsBlock = true;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        outputSettings6.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings9.setcharset(charset15);
        outputSettings9.setprettyPrint(true);
        java.nio.charset.Charset charset19 = outputSettings9.getcharset();
        outputSettings6.setcharset(charset19);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings6.escapeMode();
        int int22 = outputSettings6.getindentAmount();
        outputSettings6.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset25 = outputSettings6.charset();
        int int26 = outputSettings6.indentAmount();
        java.nio.charset.Charset charset27 = outputSettings6.charset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charset27);
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = document10.wrap("#text");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(document10);
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        textNode2.setBaseUri("text");
        java.lang.String str12 = textNode2.nodeName();
        java.lang.String str13 = textNode2.text;
        java.lang.String str14 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node16 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Node node17 = textNode2.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode19 = textNode2.splitText((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        java.lang.String str11 = textNode2.text;
        java.lang.String str12 = textNode2.gettext();
        org.jsoup.nodes.Node node13 = textNode2.nextSibling();
        java.lang.String str14 = textNode2.outerHtml();
        textNode2.text = "#text";
        org.jsoup.nodes.TextNode textNode18 = textNode2.text("#text");
        textNode2.ensureAttributes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(textNode18);
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node6 = textNode2.attr("#text", "text");
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings9.setcharset(charset16);
        textNode2.outerHtmlTail(stringBuilder7, 0, outputSettings9);
        java.util.List<org.jsoup.nodes.Node> nodeList20 = textNode2.siblingNodes();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(nodeList20);
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        java.lang.String str11 = textNode2.text;
        java.lang.String str12 = textNode2.gettext();
        org.jsoup.nodes.Node node13 = textNode2.nextSibling();
        java.lang.String str14 = textNode2.outerHtml();
        textNode2.text = "#text";
        java.lang.String str17 = textNode2.text;
        java.lang.String str18 = textNode2.nodeName();
        java.util.List<org.jsoup.nodes.Node> nodeList19 = textNode2.childNodes();
        boolean boolean21 = textNode2.hasAttr("t");
        org.jsoup.select.NodeVisitor nodeVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node23 = textNode2.traverse(nodeVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#text" + "'", str17, "#text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#text" + "'", str18, "#text");
        org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "!");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode4 = new org.jsoup.nodes.TextNode();
        textNode4.setBaseUri("hi!");
        java.lang.String str7 = textNode4.getTEXT_KEY();
        textNode4.text = "hi!";
        boolean boolean11 = textNode4.hasAttr("");
        java.lang.String str12 = textNode4.toString();
        java.lang.String str13 = textNode4.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        boolean boolean17 = outputSettings14.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings14.prettyPrint(false);
        int int20 = outputSettings19.getindentAmount();
        outputSettings19.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings23.charset = charset25;
        outputSettings23.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        int int32 = outputSettings29.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings29.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        outputSettings35.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset41 = outputSettings40.charset();
        outputSettings35.setcharset(charset41);
        outputSettings34.setcharset(charset41);
        outputSettings29.setcharset(charset41);
        outputSettings23.setcharset(charset41);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings19.charset(charset41);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.forceAllElementAsBlock(false);
        boolean boolean49 = textNode4.equals((java.lang.Object) outputSettings46);
        org.jsoup.nodes.Node node50 = textNode4.previousSibling();
        java.lang.String str51 = textNode4.getTEXT_KEY();
        textNode4.ensureAttributes();
        boolean boolean53 = textNode2.equals((java.lang.Object) textNode4);
        java.lang.StringBuilder stringBuilder54 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        boolean boolean59 = outputSettings56.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings56.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings61.escapeMode(escapeMode62);
        org.jsoup.nodes.TextNode textNode64 = new org.jsoup.nodes.TextNode();
        textNode64.setBaseUri("hi!");
        java.lang.String str67 = textNode64.getTEXT_KEY();
        textNode64.text = "hi!";
        boolean boolean71 = textNode64.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList72 = textNode64.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        boolean boolean76 = outputSettings73.getprettyPrint();
        boolean boolean77 = outputSettings73.forceAllElementAsBlock();
        boolean boolean78 = outputSettings73.forceAllElementAsBlock;
        boolean boolean79 = textNode64.equals((java.lang.Object) outputSettings73);
        java.nio.charset.CharsetEncoder charsetEncoder80 = outputSettings73.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder81 = outputSettings73.getcharsetEncoder();
        outputSettings63.charsetEncoder = charsetEncoder81;
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder54, (int) (short) 0, outputSettings63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "text" + "'", str51, "text");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "text" + "'", str67, "text");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(nodeList72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(charsetEncoder80);
        org.junit.Assert.assertNotNull(charsetEncoder81);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        int int25 = textNode2.siblingIndex();
        java.lang.String str27 = textNode2.absUrl("ext");
        java.lang.String str28 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node29 = textNode2.previousSibling();
        java.lang.String str30 = textNode2.getWholeText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "text" + "'", str28, "text");
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "text" + "'", str30, "text");
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        textNode2.settext("");
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings9.indentAmount((int) (short) 0);
        outputSettings9.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings9.charsetEncoder;
        boolean boolean16 = textNode2.equals((java.lang.Object) outputSettings9);
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode2.siblingNodes();
        org.jsoup.nodes.Node node18 = textNode2.clone();
        org.jsoup.nodes.TextNode textNode21 = new org.jsoup.nodes.TextNode("text", "text");
        int int22 = textNode21.siblingIndex();
        int int23 = textNode21.siblingIndex();
        org.jsoup.nodes.Node node24 = textNode21.clone();
        java.lang.String str25 = textNode21.text;
        java.lang.String str26 = textNode21.nodeName();
        java.lang.String str27 = textNode21.nodeName();
        textNode21.text = "hi!";
        java.lang.String str30 = textNode21.outerHtml();
        int int31 = textNode21.siblingIndex();
        org.jsoup.nodes.Node node33 = textNode21.removeAttr("h");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node34 = textNode2.after((org.jsoup.nodes.Node) textNode21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "text" + "'", str25, "text");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#text" + "'", str26, "#text");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "#text" + "'", str27, "#text");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        textNode6.ensureAttributes();
        org.jsoup.nodes.Node node9 = textNode6.previousSibling();
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        boolean boolean15 = outputSettings12.getprettyPrint();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock();
        outputSettings12.setprettyPrint(true);
        java.nio.charset.Charset charset19 = outputSettings12.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings12.forceAllElementAsBlock(false);
        textNode6.outerHtmlTail(stringBuilder10, (int) ' ', outputSettings21);
        org.jsoup.nodes.TextNode textNode25 = new org.jsoup.nodes.TextNode("text", "text");
        int int26 = textNode25.siblingIndex();
        int int27 = textNode25.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList28 = textNode25.childNodes();
        java.lang.String str29 = textNode25.getWholeText();
        java.lang.String str30 = textNode25.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList31 = textNode25.childNodes();
        java.lang.String str32 = textNode25.nodeName();
        org.jsoup.nodes.Document document33 = textNode25.ownerDocument();
        java.lang.String str34 = textNode25.getTEXT_KEY();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node35 = textNode6.before((org.jsoup.nodes.Node) textNode25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "text" + "'", str29, "text");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "text" + "'", str30, "text");
        org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "#text" + "'", str32, "#text");
        org.junit.Assert.assertNull(document33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "text" + "'", str34, "text");
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder10);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        int int1 = textNode0.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        java.nio.charset.Charset charset16 = outputSettings5.getcharset();
        outputSettings2.charset = charset16;
        boolean boolean18 = textNode0.equals((java.lang.Object) outputSettings2);
        boolean boolean19 = textNode0.isBlank();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = null;
        outputSettings20.setescapeMode(escapeMode23);
        boolean boolean25 = outputSettings20.prettyPrint;
        outputSettings20.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings28.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings31.setescapeMode(escapeMode34);
        outputSettings31.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings31.setescapeMode(escapeMode38);
        boolean boolean40 = outputSettings31.forceAllElementAsBlock;
        int int41 = outputSettings31.indentAmount;
        java.nio.charset.Charset charset42 = outputSettings31.getcharset();
        outputSettings28.charset = charset42;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings20.charset(charset42);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings44);
        int int46 = outputSettings44.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings44.encoder();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder47);
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset3 = outputSettings0.charset;
        boolean boolean4 = outputSettings0.prettyPrint;
        outputSettings0.setforceAllElementAsBlock(true);
        outputSettings0.indentAmount = (short) 100;
        int int9 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings0.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset12 = outputSettings11.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings13.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.prettyPrint(false);
        java.nio.charset.Charset charset23 = outputSettings17.charset;
        outputSettings17.setprettyPrint(false);
        java.nio.charset.Charset charset26 = outputSettings17.getcharset();
        outputSettings13.setcharset(charset26);
        outputSettings11.setcharset(charset26);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings11.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        int int34 = outputSettings31.getindentAmount();
        boolean boolean35 = outputSettings31.forceAllElementAsBlock;
        boolean boolean36 = outputSettings31.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        outputSettings37.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset43 = outputSettings42.charset();
        outputSettings37.setcharset(charset43);
        outputSettings37.setprettyPrint(true);
        java.nio.charset.Charset charset47 = outputSettings37.getcharset();
        outputSettings37.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings37.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset52 = outputSettings51.getcharset();
        outputSettings51.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings55.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        boolean boolean62 = outputSettings59.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings59.prettyPrint(false);
        java.nio.charset.Charset charset65 = outputSettings59.charset;
        outputSettings59.setprettyPrint(false);
        java.nio.charset.Charset charset68 = outputSettings59.getcharset();
        outputSettings55.setcharset(charset68);
        java.nio.charset.CharsetEncoder charsetEncoder70 = outputSettings55.encoder();
        outputSettings51.setcharsetEncoder(charsetEncoder70);
        outputSettings31.charsetEncoder = charsetEncoder70;
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings73.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean78 = outputSettings77.prettyPrint;
        boolean boolean79 = outputSettings77.forceAllElementAsBlock;
        boolean boolean80 = outputSettings77.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings77.prettyPrint(false);
        java.nio.charset.Charset charset83 = outputSettings77.charset;
        outputSettings77.setprettyPrint(false);
        java.nio.charset.Charset charset86 = outputSettings77.getcharset();
        outputSettings73.setcharset(charset86);
        java.nio.charset.CharsetEncoder charsetEncoder88 = outputSettings73.encoder();
        outputSettings31.setcharsetEncoder(charsetEncoder88);
        outputSettings11.charsetEncoder = charsetEncoder88;
        org.jsoup.nodes.Entities.EscapeMode escapeMode91 = outputSettings11.escapeMode;
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(charsetEncoder70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertNotNull(charset86);
        org.junit.Assert.assertNotNull(charsetEncoder88);
        org.junit.Assert.assertTrue("'" + escapeMode91 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode91.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        boolean boolean6 = textNode2.hasAttr("");
        java.lang.String str7 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        java.nio.charset.Charset charset8 = outputSettings0.getcharset();
        boolean boolean9 = outputSettings0.prettyPrint();
        boolean boolean10 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean11 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        boolean boolean15 = outputSettings12.getprettyPrint();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings12.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode();
        outputSettings18.setprettyPrint(true);
        int int22 = outputSettings18.indentAmount();
        outputSettings18.forceAllElementAsBlock = false;
        outputSettings18.setindentAmount((int) ' ');
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        outputSettings27.setescapeMode(escapeMode30);
        outputSettings27.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings27.setescapeMode(escapeMode34);
        outputSettings27.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings27.getcharsetEncoder();
        boolean boolean39 = outputSettings27.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings27.getcharsetEncoder();
        outputSettings18.charsetEncoder = charsetEncoder40;
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings18.getescapeMode();
        outputSettings0.escapeMode = escapeMode42;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        java.lang.String str8 = textNode6.getWholeText();
        java.lang.String str9 = textNode6.nodeName();
        java.lang.String str10 = textNode6.outerHtml();
        java.lang.String str11 = textNode6.getWholeText();
        textNode6.ensureAttributes();
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode15.childNodes();
        org.jsoup.nodes.TextNode textNode19 = textNode15.text("");
        int int20 = textNode15.siblingIndex();
        org.jsoup.nodes.TextNode textNode22 = textNode15.text("hi!");
        java.lang.String str24 = textNode15.absUrl("text");
        org.jsoup.nodes.TextNode textNode26 = textNode15.splitText(1);
        textNode26.ensureAttributes();
        org.jsoup.nodes.TextNode textNode29 = textNode26.text("t");
        org.jsoup.nodes.Document document30 = textNode29.ownerDocument();
        java.lang.String str31 = textNode29.nodeName();
        java.lang.String str32 = textNode29.text;
        org.jsoup.nodes.Document document33 = textNode29.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node34 = textNode6.before((org.jsoup.nodes.Node) textNode29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertNotNull(textNode19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(textNode26);
        org.junit.Assert.assertNotNull(textNode29);
        org.junit.Assert.assertNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "#text" + "'", str31, "#text");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "t" + "'", str32, "t");
        org.junit.Assert.assertNull(document33);
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        org.jsoup.nodes.TextNode textNode13 = textNode2.splitText(1);
        org.jsoup.nodes.Node node16 = textNode2.attr("text", "t");
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node18 = textNode2.clone();
        org.jsoup.nodes.Document document19 = node18.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.nodes.Node> nodeList20 = document19.childNodes();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(document19);
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        java.lang.String str11 = textNode10.gettext();
        textNode10.ensureAttributes();
        textNode10.setBaseUri("#");
        textNode10.setBaseUri("");
        org.jsoup.nodes.Node node17 = null;
        // The following exception was thrown during execution in test generation
        try {
            textNode10.replaceWith(node17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ext" + "'", str11, "ext");
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.nodeName();
        textNode2.setBaseUri("");
        java.lang.String str12 = textNode2.outerHtml();
        java.lang.String str13 = textNode2.outerHtml();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.wrap("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        outputSettings6.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        outputSettings6.setcharset(charset12);
        outputSettings5.setcharset(charset12);
        outputSettings0.setcharset(charset12);
        int int16 = outputSettings0.getindentAmount();
        boolean boolean17 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings18.charset = charset20;
        outputSettings18.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings18.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings18.escapeMode(escapeMode25);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings27.charset = charset29;
        outputSettings27.indentAmount = (-1);
        java.nio.charset.Charset charset33 = outputSettings27.charset();
        boolean boolean34 = outputSettings27.forceAllElementAsBlock();
        java.nio.charset.Charset charset35 = outputSettings27.getcharset();
        outputSettings26.charset = charset35;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings0.charset(charset35);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings38.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = null;
        outputSettings41.setescapeMode(escapeMode44);
        outputSettings41.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = null;
        outputSettings41.setescapeMode(escapeMode48);
        outputSettings41.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings41.getcharsetEncoder();
        outputSettings38.charsetEncoder = charsetEncoder52;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        outputSettings54.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset60 = outputSettings59.charset();
        outputSettings54.setcharset(charset60);
        outputSettings54.setprettyPrint(true);
        java.nio.charset.Charset charset64 = outputSettings54.getcharset();
        outputSettings54.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings54.forceAllElementAsBlock(false);
        boolean boolean69 = outputSettings54.prettyPrint();
        org.jsoup.nodes.TextNode textNode72 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = textNode72.equals((java.lang.Object) outputSettings73);
        int int76 = outputSettings73.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean78 = outputSettings77.prettyPrint;
        boolean boolean79 = outputSettings77.forceAllElementAsBlock;
        outputSettings77.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset83 = outputSettings82.charset();
        outputSettings77.setcharset(charset83);
        outputSettings77.setprettyPrint(true);
        java.nio.charset.Charset charset87 = outputSettings77.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder88 = outputSettings77.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode89 = outputSettings77.escapeMode();
        boolean boolean90 = outputSettings77.getprettyPrint();
        boolean boolean91 = outputSettings77.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode92 = outputSettings77.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings73.escapeMode(escapeMode92);
        java.nio.charset.Charset charset94 = outputSettings93.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode95 = outputSettings93.escapeMode();
        outputSettings54.setescapeMode(escapeMode95);
        outputSettings38.setescapeMode(escapeMode95);
        java.nio.charset.CharsetEncoder charsetEncoder98 = outputSettings38.charsetEncoder;
        outputSettings37.charsetEncoder = charsetEncoder98;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertNotNull(charset87);
        org.junit.Assert.assertNotNull(charsetEncoder88);
        org.junit.Assert.assertTrue("'" + escapeMode89 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode89.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + escapeMode92 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode92.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings93);
        org.junit.Assert.assertNotNull(charset94);
        org.junit.Assert.assertTrue("'" + escapeMode95 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode95.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder98);
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.getWholeText();
        boolean boolean7 = textNode2.hasAttr("");
        textNode2.ensureAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode10 = textNode2.splitText((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must be not be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.Node node6 = textNode2.previousSibling();
        org.jsoup.nodes.Node node8 = textNode2.removeAttr("#text");
        boolean boolean9 = textNode2.isBlank();
        textNode2.settext("text");
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode();
        textNode12.setBaseUri("hi!");
        java.lang.String str15 = textNode12.getTEXT_KEY();
        textNode12.text = "hi!";
        java.lang.String str18 = textNode12.getWholeText();
        java.lang.StringBuilder stringBuilder19 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings21.getcharsetEncoder();
        outputSettings21.prettyPrint = true;
        boolean boolean29 = outputSettings21.forceAllElementAsBlock;
        textNode12.outerHtmlTail(stringBuilder19, (int) (byte) 100, outputSettings21);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        boolean boolean34 = outputSettings31.getprettyPrint();
        boolean boolean35 = outputSettings31.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings31.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings37.escapeMode();
        outputSettings37.setprettyPrint(true);
        int int41 = outputSettings37.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings37.encoder();
        outputSettings21.setcharsetEncoder(charsetEncoder42);
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings21.escapeMode;
        boolean boolean45 = textNode2.equals((java.lang.Object) escapeMode44);
        org.jsoup.nodes.Node node46 = textNode2.nextSibling();
        org.jsoup.nodes.Node node48 = textNode2.removeAttr("hi!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.getTEXT_KEY();
        java.lang.String str11 = textNode2.attr("");
        java.lang.String str12 = textNode2.gettext();
        org.jsoup.nodes.Node node13 = textNode2.nextSibling();
        java.lang.String str14 = textNode2.toString();
        java.lang.String str15 = textNode2.text();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node16 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "t" + "'", str12, "t");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "t" + "'", str14, "t");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "t" + "'", str15, "t");
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        textNode2.text = "#text";
        boolean boolean11 = textNode2.isBlank();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode2.siblingNodes();
        java.lang.String str13 = textNode2.toString();
        java.lang.String str14 = textNode2.text;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode6 = new org.jsoup.nodes.TextNode("text", "text");
        int int7 = textNode6.siblingIndex();
        org.jsoup.nodes.Node node8 = textNode6.clone();
        boolean boolean9 = textNode2.equals((java.lang.Object) node8);
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeList10);
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.siblingNodes();
        java.lang.String str4 = textNode2.text();
        textNode2.text = "t";
        org.jsoup.nodes.TextNode textNode7 = new org.jsoup.nodes.TextNode();
        textNode7.setBaseUri("hi!");
        java.lang.String str10 = textNode7.getTEXT_KEY();
        textNode7.text = "hi!";
        org.jsoup.nodes.Document document13 = textNode7.ownerDocument();
        org.jsoup.nodes.Node node14 = textNode7.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.before(node14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNull(document13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder5 = null;
        outputSettings4.charsetEncoder = charsetEncoder5;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings7.setescapeMode(escapeMode10);
        outputSettings7.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings7.setescapeMode(escapeMode14);
        boolean boolean16 = outputSettings7.forceAllElementAsBlock;
        int int17 = outputSettings7.indentAmount;
        java.nio.charset.Charset charset18 = outputSettings7.getcharset();
        outputSettings7.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        int int24 = outputSettings21.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings21.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        outputSettings27.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset33 = outputSettings32.charset();
        outputSettings27.setcharset(charset33);
        outputSettings26.setcharset(charset33);
        outputSettings21.setcharset(charset33);
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings38.clone();
        int int40 = outputSettings39.getindentAmount();
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        outputSettings21.setcharset(charset41);
        outputSettings7.setcharset(charset41);
        boolean boolean44 = outputSettings7.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        outputSettings45.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset51 = outputSettings50.charset();
        outputSettings45.setcharset(charset51);
        outputSettings45.setprettyPrint(true);
        java.nio.charset.Charset charset55 = outputSettings45.getcharset();
        outputSettings45.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings45.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = null;
        outputSettings60.setescapeMode(escapeMode63);
        outputSettings60.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = null;
        outputSettings60.setescapeMode(escapeMode67);
        boolean boolean69 = outputSettings60.forceAllElementAsBlock;
        int int70 = outputSettings60.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings60.escapeMode(escapeMode71);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = null;
        outputSettings73.setescapeMode(escapeMode76);
        outputSettings73.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = null;
        outputSettings73.setescapeMode(escapeMode80);
        boolean boolean82 = outputSettings73.forceAllElementAsBlock;
        int int83 = outputSettings73.indentAmount;
        java.nio.charset.Charset charset84 = outputSettings73.getcharset();
        outputSettings72.setcharset(charset84);
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings59.charset(charset84);
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings87.clone();
        int int89 = outputSettings88.getindentAmount();
        java.nio.charset.Charset charset90 = outputSettings88.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings86.charset(charset90);
        outputSettings7.charset = charset90;
        outputSettings4.setcharset(charset90);
        int int94 = outputSettings4.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(charset84);
        org.junit.Assert.assertNotNull(outputSettings86);
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(charset90);
        org.junit.Assert.assertNotNull(outputSettings91);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        java.lang.String str9 = textNode0.nodeName();
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings12.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings12.setescapeMode(escapeMode17);
        int int19 = outputSettings12.indentAmount();
        textNode0.outerHtmlTail(stringBuilder10, 10, outputSettings12);
        boolean boolean22 = textNode0.hasAttr("#text");
        java.lang.String str23 = textNode0.gettext();
        org.jsoup.nodes.TextNode textNode25 = textNode0.text("t");
        textNode25.settext("ext");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(textNode25);
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        outputSettings11.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset17 = outputSettings16.charset();
        outputSettings11.setcharset(charset17);
        outputSettings11.setprettyPrint(true);
        java.nio.charset.Charset charset21 = outputSettings11.getcharset();
        outputSettings11.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings11.forceAllElementAsBlock(false);
        outputSettings25.setforceAllElementAsBlock(false);
        boolean boolean28 = outputSettings25.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        outputSettings29.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings29.indentAmount(1);
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings35.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings25.escapeMode(escapeMode36);
        textNode2.outerHtmlTail(stringBuilder9, 100, outputSettings25);
        textNode2.settext("text");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings37);
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setindentAmount(52);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings9.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings15.encoder();
        outputSettings0.charsetEncoder = charsetEncoder16;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings0.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount(32);
        boolean boolean22 = outputSettings21.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.Node node6 = textNode2.previousSibling();
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode2.childNodes();
        boolean boolean9 = textNode2.hasAttr("h");
        int int10 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        java.lang.String str12 = textNode2.text();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "#text");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("i!");
        org.jsoup.select.NodeVisitor nodeVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node6 = textNode2.traverse(nodeVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(textNode4);
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        boolean boolean23 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings26.clone();
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        outputSettings0.setcharset(charset28);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = null;
        outputSettings0.setescapeMode(escapeMode32);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings31);
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.lang.String str8 = textNode0.outerHtml();
        textNode0.setBaseUri("");
        boolean boolean11 = textNode0.isBlank();
        org.jsoup.nodes.Attributes attributes12 = textNode0.attributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = textNode0.after("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(attributes12);
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset7 = outputSettings0.getcharset();
        int int8 = outputSettings0.indentAmount();
        boolean boolean9 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings0.indentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings21.charset = charset23;
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings21.encoder();
        boolean boolean26 = outputSettings21.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings17.escapeMode(escapeMode27);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings12.escapeMode(escapeMode27);
        boolean boolean30 = outputSettings29.getforceAllElementAsBlock();
        java.nio.charset.Charset charset31 = outputSettings29.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings11.charset(charset31);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings11.clone();
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings33.charsetEncoder;
        outputSettings33.setindentAmount(1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(charsetEncoder34);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Attributes attributes9 = textNode2.attributes();
        org.jsoup.nodes.Node node10 = textNode2.parent();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = textNode2.childNode((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(attributes9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.text();
        java.lang.String str9 = textNode7.getWholeText();
        org.jsoup.nodes.TextNode textNode11 = textNode7.splitText(1);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = textNode11.attr("", "t");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(textNode11);
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.getprettyPrint();
        int int6 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings7.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder11);
        int int13 = outputSettings0.getindentAmount();
        outputSettings0.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        outputSettings16.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings16.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings22.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings22.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        outputSettings26.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset32 = outputSettings31.charset();
        outputSettings26.setcharset(charset32);
        outputSettings22.charset = charset32;
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings22.getcharsetEncoder();
        outputSettings22.setindentAmount((int) (short) 0);
        boolean boolean38 = outputSettings22.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings22.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings0.escapeMode(escapeMode39);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings40);
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("text");
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("t");
        org.jsoup.nodes.TextNode textNode13 = textNode2.splitText((int) (short) 1);
        org.jsoup.nodes.Node node14 = textNode13.clone();
        java.lang.String str15 = textNode13.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ext" + "'", str15, "ext");
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean2 = outputSettings0.getprettyPrint();
        outputSettings0.setprettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings0.escapeMode;
        java.nio.charset.Charset charset9 = outputSettings0.getcharset();
        outputSettings0.setprettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings0.charsetEncoder;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder12);
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        boolean boolean10 = outputSettings6.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings6.indentAmount(97);
        java.nio.charset.Charset charset13 = outputSettings6.charset;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charset13);
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.nodeName();
        org.jsoup.select.NodeVisitor nodeVisitor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node5 = textNode2.traverse(nodeVisitor4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("text");
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("t");
        textNode2.text = "#text";
        java.lang.String str14 = textNode2.text();
        java.lang.String str15 = textNode2.baseUri();
        boolean boolean17 = textNode2.hasAttr("i");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node19 = textNode2.before("text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        org.jsoup.nodes.Node node11 = textNode2.attr("text", "#text");
        java.lang.String str12 = textNode2.gettext();
        java.lang.String str13 = textNode2.outerHtml();
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.siblingNodes();
        java.lang.String str15 = textNode2.getTEXT_KEY();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode17 = textNode2.splitText(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "t" + "'", str12, "t");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "text");
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node7 = textNode2.childNode((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList5);
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.nextSibling();
        textNode0.settext("t");
        org.jsoup.nodes.Attributes attributes11 = textNode0.attributes();
        org.jsoup.nodes.Node node13 = textNode0.removeAttr("!");
        boolean boolean14 = textNode0.isBlank();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        boolean boolean7 = textNode2.isBlank();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        java.lang.String str9 = textNode2.gettext();
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("t", "t");
        textNode12.ensureAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = textNode2.after((org.jsoup.nodes.Node) textNode12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean4 = textNode2.hasAttr("");
        boolean boolean5 = textNode2.isBlank();
        java.lang.String str6 = textNode2.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        boolean boolean13 = outputSettings9.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder7, 0, outputSettings9);
        org.jsoup.nodes.Node node15 = textNode2.previousSibling();
        java.lang.String str17 = textNode2.absUrl("ext");
        org.jsoup.nodes.Node node19 = textNode2.removeAttr("i!");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.text();
        org.jsoup.nodes.Node node9 = textNode7.nextSibling();
        int int10 = textNode7.siblingIndex();
        org.jsoup.nodes.Node node13 = textNode7.attr("h", "t");
        textNode7.text = "!";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("h", "text");
        java.lang.String str4 = textNode2.attr("");
        java.lang.String str5 = textNode2.text;
        org.jsoup.nodes.Node node6 = textNode2.clone();
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.Node node10 = textNode2.attr("hi!", "#text");
        java.lang.Class<?> wildcardClass11 = node10.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h" + "'", str5, "h");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "h" + "'", str7, "h");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        boolean boolean7 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("t");
        java.lang.String str10 = textNode2.toString();
        java.lang.String str11 = textNode2.getTEXT_KEY();
        textNode2.settext("");
        java.lang.String str14 = textNode2.getWholeText();
        java.lang.String str15 = textNode2.text();
        org.jsoup.nodes.TextNode textNode17 = textNode2.text("#text");
        java.lang.String str18 = textNode2.outerHtml();
        textNode2.text = "ext";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "t" + "'", str10, "t");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "t" + "'", str14, "t");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "t" + "'", str15, "t");
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#text" + "'", str18, "#text");
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        int int15 = outputSettings14.getindentAmount();
        outputSettings14.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings18.charset = charset20;
        outputSettings18.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        int int27 = outputSettings24.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings30.setcharset(charset36);
        outputSettings29.setcharset(charset36);
        outputSettings24.setcharset(charset36);
        outputSettings18.setcharset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(false);
        int int48 = outputSettings47.getindentAmount();
        outputSettings47.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        boolean boolean56 = outputSettings52.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings52.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        outputSettings47.setescapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings14.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings0.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean66 = outputSettings65.prettyPrint;
        boolean boolean67 = outputSettings65.forceAllElementAsBlock;
        int int68 = outputSettings65.getindentAmount();
        boolean boolean69 = outputSettings65.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder70 = outputSettings65.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings65.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset74 = outputSettings73.charset();
        outputSettings72.charset = charset74;
        java.nio.charset.CharsetEncoder charsetEncoder76 = outputSettings72.encoder();
        boolean boolean77 = outputSettings72.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings72.escapeMode;
        outputSettings65.setescapeMode(escapeMode78);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings64.escapeMode(escapeMode78);
        org.jsoup.nodes.Entities.EscapeMode escapeMode81 = outputSettings80.escapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder82 = outputSettings80.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode83 = outputSettings80.escapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(charsetEncoder70);
        org.junit.Assert.assertNotNull(charsetEncoder71);
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertNotNull(charsetEncoder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertTrue("'" + escapeMode81 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode81.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder82);
        org.junit.Assert.assertTrue("'" + escapeMode83 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode83.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint;
        outputSettings0.indentAmount = 1;
        outputSettings0.prettyPrint = false;
        java.nio.charset.Charset charset10 = outputSettings0.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings11.encoder();
        boolean boolean16 = outputSettings11.prettyPrint;
        java.nio.charset.Charset charset17 = outputSettings11.charset;
        java.nio.charset.Charset charset18 = outputSettings11.getcharset();
        outputSettings11.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings21.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder26 = null;
        outputSettings25.charsetEncoder = charsetEncoder26;
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings11.escapeMode(escapeMode28);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        boolean boolean33 = outputSettings30.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings30.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        int int39 = outputSettings36.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings36.getcharsetEncoder();
        outputSettings35.setcharsetEncoder(charsetEncoder40);
        outputSettings11.charsetEncoder = charsetEncoder40;
        outputSettings0.setcharsetEncoder(charsetEncoder40);
        boolean boolean44 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        boolean boolean48 = outputSettings45.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings45.prettyPrint(false);
        int int51 = outputSettings50.getindentAmount();
        outputSettings50.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset56 = outputSettings55.charset();
        outputSettings54.charset = charset56;
        outputSettings54.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        int int63 = outputSettings60.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings60.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean67 = outputSettings66.prettyPrint;
        boolean boolean68 = outputSettings66.forceAllElementAsBlock;
        outputSettings66.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset72 = outputSettings71.charset();
        outputSettings66.setcharset(charset72);
        outputSettings65.setcharset(charset72);
        outputSettings60.setcharset(charset72);
        outputSettings54.setcharset(charset72);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings50.charset(charset72);
        outputSettings77.setforceAllElementAsBlock(false);
        int int80 = outputSettings77.getindentAmount();
        java.nio.charset.Charset charset81 = outputSettings77.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings0.charset(charset81);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertNotNull(charset81);
        org.junit.Assert.assertNotNull(outputSettings82);
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("#text");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        outputSettings16.setindentAmount((int) (byte) 0);
        textNode11.outerHtmlTail(stringBuilder12, (int) '#', outputSettings16);
        org.jsoup.nodes.TextNode textNode21 = textNode11.splitText(0);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node22 = textNode21.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(textNode21);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.toString();
        java.lang.String str8 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("h");
        textNode2.text = "";
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode2.siblingNodes();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNotNull(nodeList13);
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        outputSettings0.setindentAmount(0);
        outputSettings0.setprettyPrint(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        textNode2.settext("hi!");
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("hi!");
        int int12 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node14 = textNode2.removeAttr("!");
        org.jsoup.nodes.TextNode textNode16 = textNode2.splitText((int) (short) 0);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(textNode16);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder5 = null;
        outputSettings4.charsetEncoder = charsetEncoder5;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings4.prettyPrint(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings4.charset("#text");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: #text");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(outputSettings8);
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.getprettyPrint();
        int int6 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings7.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder11);
        int int13 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.setprettyPrint(false);
        outputSettings20.setindentAmount(0);
        outputSettings20.indentAmount = (byte) 1;
        java.nio.charset.Charset charset29 = outputSettings20.getcharset();
        outputSettings14.setcharset(charset29);
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        outputSettings32.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings32.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings38.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings38.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings38.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        boolean boolean47 = outputSettings44.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings44.prettyPrint(false);
        int int50 = outputSettings49.getindentAmount();
        outputSettings49.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings49.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        boolean boolean57 = outputSettings54.getprettyPrint();
        boolean boolean58 = outputSettings54.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings54.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = outputSettings60.escapeMode();
        outputSettings49.setescapeMode(escapeMode61);
        outputSettings38.escapeMode = escapeMode61;
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings14.escapeMode(escapeMode61);
        outputSettings0.escapeMode = escapeMode61;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean67 = outputSettings66.prettyPrint;
        boolean boolean68 = outputSettings66.forceAllElementAsBlock;
        boolean boolean69 = outputSettings66.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings66.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings71.escapeMode(escapeMode72);
        org.jsoup.nodes.TextNode textNode74 = new org.jsoup.nodes.TextNode();
        textNode74.setBaseUri("hi!");
        java.lang.String str77 = textNode74.getTEXT_KEY();
        textNode74.text = "hi!";
        boolean boolean81 = textNode74.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList82 = textNode74.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean84 = outputSettings83.prettyPrint;
        boolean boolean85 = outputSettings83.forceAllElementAsBlock;
        boolean boolean86 = outputSettings83.getprettyPrint();
        boolean boolean87 = outputSettings83.forceAllElementAsBlock();
        boolean boolean88 = outputSettings83.forceAllElementAsBlock;
        boolean boolean89 = textNode74.equals((java.lang.Object) outputSettings83);
        java.nio.charset.CharsetEncoder charsetEncoder90 = outputSettings83.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder91 = outputSettings83.getcharsetEncoder();
        outputSettings73.charsetEncoder = charsetEncoder91;
        outputSettings0.charsetEncoder = charsetEncoder91;
        org.jsoup.nodes.Entities.EscapeMode escapeMode94 = outputSettings0.escapeMode();
        boolean boolean95 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings97 = outputSettings0.forceAllElementAsBlock(true);
        int int98 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode99 = outputSettings0.escapeMode;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "text" + "'", str77, "text");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(nodeList82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(charsetEncoder90);
        org.junit.Assert.assertNotNull(charsetEncoder91);
        org.junit.Assert.assertTrue("'" + escapeMode94 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode94.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(outputSettings97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode99 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode99.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str3 = textNode2.text;
        java.lang.String str5 = textNode2.absUrl("text");
        textNode2.text = "i!";
        org.jsoup.nodes.Node node8 = textNode2.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode2.removeAttr("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        boolean boolean6 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        outputSettings8.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings8.getcharsetEncoder();
        outputSettings8.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings8.getcharsetEncoder();
        java.nio.charset.Charset charset17 = outputSettings8.charset;
        outputSettings0.setcharset(charset17);
        boolean boolean19 = outputSettings0.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        outputSettings6.setprettyPrint(false);
        outputSettings6.setindentAmount(0);
        outputSettings6.indentAmount = (byte) 1;
        java.nio.charset.Charset charset15 = outputSettings6.getcharset();
        outputSettings0.setcharset(charset15);
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings18.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings24.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings24.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings24.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        boolean boolean33 = outputSettings30.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings30.prettyPrint(false);
        int int36 = outputSettings35.getindentAmount();
        outputSettings35.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings35.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        boolean boolean43 = outputSettings40.getprettyPrint();
        boolean boolean44 = outputSettings40.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings40.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings46.escapeMode();
        outputSettings35.setescapeMode(escapeMode47);
        outputSettings24.escapeMode = escapeMode47;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings0.escapeMode(escapeMode47);
        boolean boolean51 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings0.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.prettyPrint(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertNotNull(outputSettings55);
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        int int8 = outputSettings6.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        outputSettings14.setcharsetEncoder(charsetEncoder19);
        outputSettings6.charsetEncoder = charsetEncoder19;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        outputSettings22.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings22.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings22.escapeMode();
        outputSettings6.escapeMode = escapeMode28;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings6.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        boolean boolean15 = outputSettings11.getforceAllElementAsBlock();
        outputSettings11.setprettyPrint(false);
        textNode6.outerHtmlTail(stringBuilder9, (int) '#', outputSettings11);
        textNode6.settext("ext");
        java.lang.StringBuilder stringBuilder21 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings23.setescapeMode(escapeMode26);
        outputSettings23.indentAmount = '4';
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings23.prettyPrint(false);
        boolean boolean32 = outputSettings23.forceAllElementAsBlock();
        textNode6.outerHtmlTail(stringBuilder21, (int) (short) 100, outputSettings23);
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings23.charsetEncoder;
        boolean boolean35 = outputSettings23.prettyPrint;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(true);
        boolean boolean11 = outputSettings8.prettyPrint();
        int int12 = outputSettings8.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings8.clone();
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings8.encoder();
        outputSettings8.setforceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charsetEncoder14);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings15.setescapeMode(escapeMode18);
        outputSettings15.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings15.setescapeMode(escapeMode22);
        boolean boolean24 = outputSettings15.forceAllElementAsBlock;
        int int25 = outputSettings15.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings15.escapeMode(escapeMode26);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings28.setescapeMode(escapeMode31);
        outputSettings28.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        outputSettings28.setescapeMode(escapeMode35);
        boolean boolean37 = outputSettings28.forceAllElementAsBlock;
        int int38 = outputSettings28.indentAmount;
        java.nio.charset.Charset charset39 = outputSettings28.getcharset();
        outputSettings27.setcharset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset39);
        boolean boolean42 = outputSettings41.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings41.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        boolean boolean48 = outputSettings45.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings45.prettyPrint(false);
        int int51 = outputSettings50.getindentAmount();
        outputSettings50.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings50.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        boolean boolean58 = outputSettings55.getprettyPrint();
        boolean boolean59 = outputSettings55.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings55.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode();
        outputSettings50.setescapeMode(escapeMode62);
        boolean boolean64 = outputSettings50.prettyPrint;
        java.nio.charset.Charset charset65 = outputSettings50.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings41.charset(charset65);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.forceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings66.getescapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("text");
        java.lang.String str11 = textNode10.nodeName();
        org.jsoup.nodes.TextNode textNode14 = new org.jsoup.nodes.TextNode("text", "text");
        int int15 = textNode14.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode14.siblingNodes();
        textNode14.text = "";
        org.jsoup.nodes.Node node19 = textNode14.parent();
        boolean boolean21 = textNode14.hasAttr("text");
        java.lang.String str22 = textNode14.outerHtml();
        java.lang.String str23 = textNode14.getWholeText();
        int int24 = textNode14.siblingIndex();
        java.lang.String str25 = textNode14.toString();
        java.lang.String str26 = textNode14.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset28 = outputSettings27.charset();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings27.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        outputSettings27.setescapeMode(escapeMode30);
        boolean boolean32 = textNode14.equals((java.lang.Object) escapeMode30);
        org.jsoup.nodes.Node node33 = textNode14.previousSibling();
        textNode14.setBaseUri("text");
        org.jsoup.nodes.Node node36 = textNode14.parent();
        boolean boolean37 = textNode10.equals((java.lang.Object) node36);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.nodes.Node> nodeList38 = node36.siblingNodes();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        outputSettings0.forceAllElementAsBlock = true;
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset17 = outputSettings16.getcharset();
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charset18);
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("i!");
        java.lang.String str6 = textNode5.getTEXT_KEY();
        java.lang.String str7 = textNode5.gettext();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "i!" + "'", str7, "i!");
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.prettyPrint = false;
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("text", "text");
        int int12 = textNode11.siblingIndex();
        int int13 = textNode11.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode11.childNodes();
        java.lang.StringBuilder stringBuilder15 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        int int20 = outputSettings17.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings17.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        outputSettings23.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings23.setcharset(charset29);
        outputSettings22.setcharset(charset29);
        outputSettings17.setcharset(charset29);
        textNode11.outerHtmlTail(stringBuilder15, 10, outputSettings17);
        org.jsoup.nodes.Node node35 = textNode11.removeAttr("hi!");
        java.lang.StringBuilder stringBuilder36 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.getforceAllElementAsBlock();
        boolean boolean40 = outputSettings38.getprettyPrint();
        outputSettings38.setprettyPrint(false);
        textNode11.outerHtmlTail(stringBuilder36, (-1), outputSettings38);
        int int44 = outputSettings38.getindentAmount();
        boolean boolean45 = outputSettings38.getprettyPrint();
        java.nio.charset.Charset charset46 = outputSettings38.charset;
        org.jsoup.nodes.TextNode textNode49 = new org.jsoup.nodes.TextNode("text", "text");
        int int50 = textNode49.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList51 = textNode49.childNodes();
        textNode49.settext("");
        java.lang.String str54 = textNode49.baseUri();
        textNode49.text = "t";
        java.lang.StringBuilder stringBuilder57 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        outputSettings59.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset65 = outputSettings64.charset();
        outputSettings59.setcharset(charset65);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset68 = outputSettings67.charset();
        java.nio.charset.CharsetEncoder charsetEncoder69 = outputSettings67.encoder();
        outputSettings59.setcharsetEncoder(charsetEncoder69);
        textNode49.outerHtmlTail(stringBuilder57, 0, outputSettings59);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings59.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings73.indentAmount((int) (short) 100);
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings73.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode77 = outputSettings73.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings38.escapeMode(escapeMode77);
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings78.getcharsetEncoder();
        outputSettings0.charsetEncoder = charsetEncoder79;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "text" + "'", str54, "text");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(charsetEncoder69);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + escapeMode77 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode77.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertNotNull(charsetEncoder79);
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        boolean boolean7 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.encoder();
        boolean boolean13 = outputSettings8.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings8.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.escapeMode(escapeMode14);
        boolean boolean16 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.prettyPrint(false);
        outputSettings17.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings25.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.getescapeMode();
        outputSettings17.setescapeMode(escapeMode28);
        outputSettings0.setescapeMode(escapeMode28);
        org.jsoup.nodes.TextNode textNode33 = new org.jsoup.nodes.TextNode("text", "text");
        int int34 = textNode33.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList35 = textNode33.childNodes();
        java.lang.String str36 = textNode33.getWholeText();
        java.lang.String str37 = textNode33.text();
        org.jsoup.nodes.Document document38 = textNode33.ownerDocument();
        org.jsoup.nodes.TextNode textNode40 = textNode33.splitText((int) (short) 0);
        textNode33.settext("t");
        java.lang.StringBuilder stringBuilder43 = null;
        org.jsoup.nodes.TextNode textNode47 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = textNode47.equals((java.lang.Object) outputSettings48);
        int int51 = outputSettings48.getindentAmount();
        outputSettings48.indentAmount = (short) -1;
        boolean boolean54 = outputSettings48.forceAllElementAsBlock();
        textNode33.outerHtmlTail(stringBuilder43, 10, outputSettings48);
        boolean boolean56 = outputSettings48.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings48.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings0.escapeMode(escapeMode57);
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings0.escapeMode();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "text" + "'", str36, "text");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "text" + "'", str37, "text");
        org.junit.Assert.assertNull(document38);
        org.junit.Assert.assertNotNull(textNode40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        org.jsoup.nodes.Node node8 = textNode5.attr("hi!", "t");
        java.lang.String str10 = textNode5.attr("#text");
        java.lang.String str11 = textNode5.getTEXT_KEY();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings12.charset = charset14;
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings12.encoder();
        outputSettings12.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings12.escapeMode;
        outputSettings12.prettyPrint = false;
        boolean boolean22 = outputSettings12.getforceAllElementAsBlock();
        boolean boolean23 = textNode5.equals((java.lang.Object) outputSettings12);
        textNode5.text = "ext";
        textNode5.settext("");
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        org.jsoup.nodes.Node node9 = textNode7.previousSibling();
        org.jsoup.nodes.Node node12 = textNode7.attr("text", "text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = node12.after("#text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.Document document6 = textNode0.ownerDocument();
        org.jsoup.nodes.Node node7 = textNode0.nextSibling();
        textNode0.setBaseUri("i");
        java.lang.String str10 = textNode0.gettext();
        org.jsoup.nodes.Attributes attributes11 = textNode0.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode0.siblingNodes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertNotNull(nodeList12);
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.text;
        org.jsoup.nodes.TextNode textNode8 = new org.jsoup.nodes.TextNode();
        textNode8.setBaseUri("hi!");
        java.lang.String str11 = textNode8.getTEXT_KEY();
        textNode8.text = "hi!";
        org.jsoup.nodes.Document document14 = textNode8.ownerDocument();
        java.lang.String str15 = textNode8.nodeName();
        boolean boolean16 = textNode2.equals((java.lang.Object) textNode8);
        java.lang.Class<?> wildcardClass17 = textNode8.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNull(document14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.siblingNodes();
        java.lang.String str7 = textNode2.absUrl("i!");
        java.lang.String str8 = textNode2.gettext();
        java.lang.String str9 = textNode2.text;
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.Attributes attributes9 = textNode0.attributes();
        java.lang.String str10 = textNode0.getWholeText();
        textNode0.text = "!";
        java.lang.String str14 = textNode0.absUrl("i!");
        java.lang.String str15 = textNode0.outerHtml();
        java.lang.String str16 = textNode0.nodeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(attributes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#text" + "'", str16, "#text");
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = null;
        outputSettings6.setescapeMode(escapeMode9);
        outputSettings6.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings6.setescapeMode(escapeMode13);
        boolean boolean15 = outputSettings6.forceAllElementAsBlock;
        int int16 = outputSettings6.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings19.setescapeMode(escapeMode22);
        outputSettings19.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings19.setescapeMode(escapeMode26);
        boolean boolean28 = outputSettings19.forceAllElementAsBlock;
        int int29 = outputSettings19.indentAmount;
        java.nio.charset.Charset charset30 = outputSettings19.getcharset();
        outputSettings18.setcharset(charset30);
        outputSettings0.charset = charset30;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        outputSettings33.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings33.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings39.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        outputSettings43.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset49 = outputSettings48.charset();
        outputSettings43.setcharset(charset49);
        outputSettings39.charset = charset49;
        outputSettings0.setcharset(charset49);
        java.nio.charset.Charset charset53 = outputSettings0.charset;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(charset53);
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.siblingNodes();
        java.lang.String str9 = textNode0.getWholeText();
        org.jsoup.nodes.Node node10 = textNode0.parent();
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode("text", "text");
        int int14 = textNode13.siblingIndex();
        int int15 = textNode13.siblingIndex();
        org.jsoup.nodes.Node node16 = textNode13.parent();
        org.jsoup.nodes.Node node17 = textNode13.nextSibling();
        java.lang.String str18 = textNode13.gettext();
        textNode13.setBaseUri("t");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node21 = node10.after((org.jsoup.nodes.Node) textNode13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        textNode2.setBaseUri("hi!");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings11.setescapeMode(escapeMode14);
        outputSettings11.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings11.setescapeMode(escapeMode18);
        boolean boolean20 = outputSettings11.forceAllElementAsBlock;
        int int21 = outputSettings11.indentAmount;
        java.nio.charset.Charset charset22 = outputSettings11.getcharset();
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) 1, outputSettings11);
        java.lang.String str24 = textNode2.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder25 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        boolean boolean30 = outputSettings27.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings27.prettyPrint(false);
        int int33 = outputSettings32.getindentAmount();
        outputSettings32.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset38 = outputSettings37.charset();
        outputSettings36.charset = charset38;
        outputSettings36.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        int int45 = outputSettings42.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings42.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        outputSettings48.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset54 = outputSettings53.charset();
        outputSettings48.setcharset(charset54);
        outputSettings47.setcharset(charset54);
        outputSettings42.setcharset(charset54);
        outputSettings36.setcharset(charset54);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings32.charset(charset54);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings59.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings62.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings62.clone();
        java.nio.charset.Charset charset65 = outputSettings62.charset();
        outputSettings59.setcharset(charset65);
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder25, (int) ' ', outputSettings59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "text" + "'", str24, "text");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(charset65);
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.childNodes();
        java.lang.String str12 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node13 = textNode2.parent();
        java.lang.String str14 = textNode2.getWholeText();
        java.lang.String str15 = textNode2.gettext();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(true);
        outputSettings10.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        boolean boolean16 = outputSettings13.getprettyPrint();
        boolean boolean17 = outputSettings13.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings13.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings13.getescapeMode();
        outputSettings10.escapeMode = escapeMode20;
        java.nio.charset.Charset charset22 = outputSettings10.charset;
        boolean boolean23 = outputSettings10.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings10.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charsetEncoder24);
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        org.jsoup.nodes.Node node7 = textNode2.clone();
        textNode2.text = "t";
        textNode2.ensureAttributes();
        textNode2.ensureAttributes();
        java.lang.String str12 = textNode2.toString();
        boolean boolean14 = textNode2.hasAttr("h");
        java.lang.String str15 = textNode2.outerHtml();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "t" + "'", str12, "t");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "t" + "'", str15, "t");
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.text;
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings12.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset24 = outputSettings23.charset();
        outputSettings22.charset = charset24;
        outputSettings22.indentAmount = (-1);
        java.nio.charset.Charset charset28 = outputSettings22.charset();
        outputSettings22.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset31 = outputSettings22.getcharset();
        outputSettings12.setcharset(charset31);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings33.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings33.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings33.escapeMode();
        outputSettings12.escapeMode = escapeMode37;
        boolean boolean39 = outputSettings12.prettyPrint;
        textNode2.outerHtmlTail(stringBuilder10, (int) (byte) 0, outputSettings12);
        java.lang.String str41 = textNode2.gettext();
        org.jsoup.nodes.Node node42 = textNode2.clone();
        // The following exception was thrown during execution in test generation
        try {
            node42.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "t" + "'", str41, "t");
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        java.lang.String str4 = textNode0.baseUri();
        java.lang.String str5 = textNode0.text;
        boolean boolean6 = textNode0.isBlank();
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode0.siblingNodes();
        java.lang.String str8 = textNode0.nodeName();
        org.jsoup.nodes.Node node9 = textNode0.clone();
        java.lang.String str10 = textNode0.getTEXT_KEY();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings12.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings0.indentAmount((int) ' ');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("#text");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        outputSettings16.setindentAmount((int) (byte) 0);
        textNode11.outerHtmlTail(stringBuilder12, (int) '#', outputSettings16);
        org.jsoup.nodes.Node node22 = textNode11.attr("#text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList23 = textNode11.siblingNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeList23);
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        boolean boolean12 = outputSettings0.prettyPrint();
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("", "");
        java.lang.String str16 = textNode15.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings17.charset = charset19;
        outputSettings17.indentAmount = (-1);
        java.nio.charset.Charset charset23 = outputSettings17.charset();
        boolean boolean24 = outputSettings17.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings17.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings17.getescapeMode();
        boolean boolean27 = textNode15.equals((java.lang.Object) escapeMode26);
        outputSettings0.escapeMode = escapeMode26;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings0.escapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        outputSettings0.setprettyPrint(false);
        outputSettings0.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        outputSettings11.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings11.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings17.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings17.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder21);
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        outputSettings25.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings25.setcharset(charset31);
        outputSettings25.setprettyPrint(true);
        java.nio.charset.Charset charset35 = outputSettings25.getcharset();
        outputSettings25.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings25.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = null;
        outputSettings41.setescapeMode(escapeMode44);
        outputSettings41.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = null;
        outputSettings41.setescapeMode(escapeMode48);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings41.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings51.escapeMode;
        outputSettings51.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings51.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        boolean boolean59 = outputSettings56.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings56.prettyPrint(false);
        java.nio.charset.Charset charset62 = outputSettings56.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings56.getescapeMode();
        outputSettings51.escapeMode = escapeMode63;
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = outputSettings51.escapeMode();
        outputSettings39.setescapeMode(escapeMode65);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings39.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean70 = outputSettings69.prettyPrint;
        boolean boolean71 = outputSettings69.forceAllElementAsBlock;
        outputSettings69.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings69.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder76 = outputSettings75.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings75.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings78.getescapeMode();
        outputSettings68.escapeMode = escapeMode79;
        org.jsoup.nodes.Entities.EscapeMode escapeMode81 = outputSettings68.getescapeMode();
        outputSettings0.escapeMode = escapeMode81;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNull(escapeMode52);
        org.junit.Assert.assertNull(escapeMode55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertNotNull(charsetEncoder76);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode81 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode81.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.String str4 = textNode2.absUrl("text");
        textNode2.settext("#text");
        int int7 = textNode2.siblingIndex();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        boolean boolean4 = textNode2.hasAttr("hi!");
        java.lang.String str5 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.prettyPrint(true);
        java.nio.charset.Charset charset5 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings4.prettyPrint(true);
        org.jsoup.nodes.TextNode textNode10 = new org.jsoup.nodes.TextNode("text", "text");
        int int11 = textNode10.siblingIndex();
        int int12 = textNode10.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode10.childNodes();
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        int int19 = outputSettings16.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        outputSettings22.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset28 = outputSettings27.charset();
        outputSettings22.setcharset(charset28);
        outputSettings21.setcharset(charset28);
        outputSettings16.setcharset(charset28);
        textNode10.outerHtmlTail(stringBuilder14, 10, outputSettings16);
        int int33 = outputSettings16.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings16.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings16.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        outputSettings36.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        boolean boolean44 = outputSettings41.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset47 = outputSettings46.charset();
        outputSettings45.charset = charset47;
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings45.encoder();
        boolean boolean50 = outputSettings45.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings45.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings41.escapeMode(escapeMode51);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings36.escapeMode(escapeMode51);
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings36.getescapeMode();
        outputSettings16.setescapeMode(escapeMode54);
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset57 = outputSettings16.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings16.indentAmount((int) (byte) 0);
        outputSettings16.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings7.escapeMode(escapeMode62);
        outputSettings63.setindentAmount((int) '#');
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(charsetEncoder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings63);
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        boolean boolean12 = outputSettings10.prettyPrint;
        boolean boolean13 = outputSettings10.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.forceAllElementAsBlock(false);
        boolean boolean16 = outputSettings15.prettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings15.getescapeMode();
        outputSettings15.forceAllElementAsBlock = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNull(escapeMode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(escapeMode17);
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        outputSettings8.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        outputSettings8.setcharset(charset26);
        outputSettings8.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        int int39 = outputSettings38.getindentAmount();
        outputSettings38.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        outputSettings8.setcharsetEncoder(charsetEncoder42);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings44.charset = charset46;
        outputSettings44.indentAmount = (-1);
        java.nio.charset.Charset charset50 = outputSettings44.charset();
        boolean boolean51 = outputSettings44.forceAllElementAsBlock();
        java.nio.charset.Charset charset52 = outputSettings44.getcharset();
        outputSettings8.setcharset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings7.charset(charset52);
        boolean boolean55 = outputSettings54.prettyPrint();
        outputSettings54.indentAmount = (-1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings0.getcharsetEncoder();
        boolean boolean7 = outputSettings0.getforceAllElementAsBlock();
        java.nio.charset.Charset charset8 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings9.setcharset(charset15);
        outputSettings9.setprettyPrint(true);
        java.nio.charset.Charset charset19 = outputSettings9.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings9.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings9.escapeMode();
        boolean boolean22 = outputSettings9.getprettyPrint();
        boolean boolean23 = outputSettings9.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.encoder();
        outputSettings24.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings24.escapeMode;
        outputSettings24.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings34.charset = charset36;
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings34.encoder();
        boolean boolean39 = outputSettings34.getprettyPrint();
        int int40 = outputSettings34.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings41.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings41.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings41.getcharsetEncoder();
        outputSettings34.setcharsetEncoder(charsetEncoder45);
        outputSettings24.setcharsetEncoder(charsetEncoder45);
        outputSettings9.charsetEncoder = charsetEncoder45;
        outputSettings0.charsetEncoder = charsetEncoder45;
        outputSettings0.setprettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder45);
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.nodeName();
        textNode2.settext("#");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        int int9 = textNode2.siblingIndex();
        java.lang.String str10 = textNode2.getWholeText();
        java.lang.String str11 = textNode2.gettext();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(false);
        boolean boolean7 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.indentAmount((int) (byte) 1);
        boolean boolean10 = outputSettings9.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setindentAmount((int) (byte) 10);
        java.nio.charset.CharsetEncoder charsetEncoder9 = null;
        outputSettings0.charsetEncoder = charsetEncoder9;
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.prettyPrint(false);
        java.nio.charset.Charset charset23 = null;
        outputSettings22.setcharset(charset23);
        boolean boolean25 = outputSettings22.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings22.prettyPrint(false);
        int int28 = outputSettings22.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings29.charset = charset31;
        outputSettings29.indentAmount = (-1);
        java.nio.charset.Charset charset35 = outputSettings29.charset();
        outputSettings29.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        boolean boolean41 = outputSettings38.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings38.prettyPrint(false);
        int int44 = outputSettings43.getindentAmount();
        outputSettings43.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings43.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        boolean boolean51 = outputSettings48.getprettyPrint();
        boolean boolean52 = outputSettings48.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings48.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings54.escapeMode();
        outputSettings43.setescapeMode(escapeMode55);
        outputSettings29.escapeMode = escapeMode55;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings22.escapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings12.escapeMode(escapeMode55);
        outputSettings0.escapeMode = escapeMode55;
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = outputSettings0.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        java.lang.String str12 = textNode0.attr("ext");
        textNode0.settext("i!");
        org.jsoup.nodes.Node node15 = textNode0.clone();
        java.lang.String str16 = textNode0.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ext" + "'", str16, "ext");
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings9.getcharsetEncoder();
        outputSettings9.prettyPrint = true;
        boolean boolean17 = outputSettings9.forceAllElementAsBlock;
        textNode0.outerHtmlTail(stringBuilder7, (int) (byte) 100, outputSettings9);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings9.encoder();
        int int20 = outputSettings9.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = null;
        outputSettings21.setescapeMode(escapeMode24);
        boolean boolean26 = outputSettings21.prettyPrint;
        java.nio.charset.Charset charset27 = outputSettings21.charset();
        outputSettings9.charset = charset27;
        outputSettings9.setindentAmount(10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charset27);
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.gettext();
        textNode2.text = "hi!";
        org.jsoup.nodes.Node node12 = textNode2.parent();
        java.lang.String str13 = textNode2.getWholeText();
        org.jsoup.nodes.Attributes attributes14 = textNode2.attributes();
        boolean boolean16 = textNode2.hasAttr("!");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode20 = org.jsoup.nodes.TextNode.createFromEncoded("", "i!");
        org.jsoup.nodes.TextNode textNode22 = textNode20.text("t");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node23 = textNode2.after((org.jsoup.nodes.Node) textNode22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertNotNull(textNode22);
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.prettyPrint(false);
        boolean boolean9 = outputSettings8.prettyPrint();
        outputSettings8.setindentAmount((int) ' ');
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings8.indentAmount(1);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNull(escapeMode14);
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        java.nio.charset.Charset charset12 = outputSettings0.getcharset();
        int int13 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings0.escapeMode();
        boolean boolean15 = outputSettings0.forceAllElementAsBlock();
        boolean boolean16 = outputSettings0.forceAllElementAsBlock();
        boolean boolean17 = outputSettings0.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings0.encoder();
        int int19 = outputSettings0.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        org.jsoup.nodes.Node node26 = textNode2.removeAttr("hi!");
        java.lang.StringBuilder stringBuilder27 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.getforceAllElementAsBlock();
        boolean boolean31 = outputSettings29.getprettyPrint();
        outputSettings29.setprettyPrint(false);
        textNode2.outerHtmlTail(stringBuilder27, (-1), outputSettings29);
        java.util.List<org.jsoup.nodes.Node> nodeList35 = textNode2.childNodes();
        org.jsoup.nodes.Attributes attributes36 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode38 = textNode2.text("ext");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertNotNull(attributes36);
        org.junit.Assert.assertNotNull(textNode38);
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "t");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("t");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset8 = outputSettings7.charset();
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings7.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings7.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings7.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings13.charset = charset15;
        outputSettings13.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings13.getcharsetEncoder();
        outputSettings7.charsetEncoder = charsetEncoder19;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings7.prettyPrint(true);
        int int23 = outputSettings7.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings7.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        outputSettings25.setprettyPrint(false);
        java.nio.charset.Charset charset30 = outputSettings25.charset;
        outputSettings25.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings25.encoder();
        outputSettings7.setcharsetEncoder(charsetEncoder33);
        boolean boolean35 = outputSettings7.prettyPrint();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder5, (int) 'a', outputSettings7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        org.jsoup.nodes.TextNode textNode13 = textNode2.splitText(1);
        org.jsoup.nodes.Node node16 = textNode2.attr("text", "t");
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node18 = textNode2.clone();
        boolean boolean20 = textNode2.hasAttr("text");
        org.jsoup.nodes.Attributes attributes21 = textNode2.attributes();
        org.jsoup.nodes.Node node22 = textNode2.clone();
        java.lang.String str23 = node22.baseUri();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "text" + "'", str23, "text");
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        boolean boolean7 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.encoder();
        boolean boolean13 = outputSettings8.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings8.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.escapeMode(escapeMode14);
        boolean boolean16 = outputSettings15.forceAllElementAsBlock();
        boolean boolean17 = outputSettings15.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode18 = new org.jsoup.nodes.TextNode();
        textNode18.setBaseUri("hi!");
        java.lang.String str21 = textNode18.getTEXT_KEY();
        textNode18.text = "hi!";
        java.lang.String str24 = textNode18.getWholeText();
        java.lang.StringBuilder stringBuilder25 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        outputSettings27.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings27.getcharsetEncoder();
        outputSettings27.prettyPrint = true;
        boolean boolean35 = outputSettings27.forceAllElementAsBlock;
        textNode18.outerHtmlTail(stringBuilder25, (int) (byte) 100, outputSettings27);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        boolean boolean40 = outputSettings37.getprettyPrint();
        boolean boolean41 = outputSettings37.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings37.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings43.escapeMode();
        outputSettings43.setprettyPrint(true);
        int int47 = outputSettings43.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings43.encoder();
        outputSettings27.setcharsetEncoder(charsetEncoder48);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings50.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings50.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder55 = outputSettings50.getcharsetEncoder();
        outputSettings27.setcharsetEncoder(charsetEncoder55);
        outputSettings15.setcharsetEncoder(charsetEncoder55);
        boolean boolean58 = outputSettings15.forceAllElementAsBlock();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charsetEncoder32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertNotNull(charsetEncoder55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        textNode2.setBaseUri("text");
        java.lang.String str12 = textNode2.text;
        int int13 = textNode2.siblingIndex();
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node17 = textNode2.attr("i!", "i!");
        java.lang.String str18 = node17.baseUri();
        java.lang.String str19 = node17.outerHtml();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        boolean boolean13 = outputSettings9.forceAllElementAsBlock();
        boolean boolean14 = outputSettings9.forceAllElementAsBlock;
        boolean boolean15 = textNode0.equals((java.lang.Object) outputSettings9);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings9.getcharsetEncoder();
        boolean boolean17 = outputSettings9.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        boolean boolean21 = outputSettings18.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.prettyPrint(false);
        java.nio.charset.Charset charset24 = outputSettings18.charset;
        outputSettings18.setprettyPrint(false);
        boolean boolean27 = outputSettings18.forceAllElementAsBlock;
        boolean boolean28 = outputSettings18.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings18.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings9.escapeMode(escapeMode29);
        java.nio.charset.Charset charset31 = outputSettings30.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.clone();
        boolean boolean33 = outputSettings30.getprettyPrint();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("hi!");
        int int13 = textNode12.siblingIndex();
        boolean boolean15 = textNode12.hasAttr("i!");
        textNode12.settext("text");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "#text");
        java.lang.String str3 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node4 = textNode2.clone();
        org.jsoup.nodes.Node node5 = node4.parent();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint;
        outputSettings0.indentAmount = 1;
        outputSettings0.prettyPrint = false;
        java.nio.charset.Charset charset10 = outputSettings0.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.prettyPrint(true);
        java.nio.charset.Charset charset13 = outputSettings0.charset;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charset13);
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings7.indentAmount((int) (short) 0);
        outputSettings7.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings7.encoder();
        textNode2.outerHtmlTail(stringBuilder5, 97, outputSettings7);
        org.jsoup.select.NodeVisitor nodeVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node16 = textNode2.traverse(nodeVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(charsetEncoder13);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        int int15 = outputSettings14.getindentAmount();
        outputSettings14.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings18.charset = charset20;
        outputSettings18.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        int int27 = outputSettings24.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings30.setcharset(charset36);
        outputSettings29.setcharset(charset36);
        outputSettings24.setcharset(charset36);
        outputSettings18.setcharset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(false);
        int int48 = outputSettings47.getindentAmount();
        outputSettings47.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        boolean boolean56 = outputSettings52.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings52.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        outputSettings47.setescapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings14.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings0.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset65 = outputSettings64.charset();
        outputSettings63.charset = charset65;
        outputSettings63.indentAmount = (-1);
        java.nio.charset.Charset charset69 = outputSettings63.charset();
        boolean boolean70 = outputSettings63.forceAllElementAsBlock;
        boolean boolean71 = outputSettings63.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings63.indentAmount((int) (byte) 100);
        org.jsoup.nodes.Entities.EscapeMode escapeMode74 = outputSettings63.escapeMode;
        outputSettings62.escapeMode = escapeMode74;
        int int76 = outputSettings62.indentAmount;
        java.nio.charset.Charset charset77 = outputSettings62.charset;
        int int78 = outputSettings62.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings62.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + escapeMode74 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode74.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertNotNull(charsetEncoder79);
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.getWholeText();
        textNode2.settext("h");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            node10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings7.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings7.getescapeMode();
        outputSettings0.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.prettyPrint(true);
        int int15 = outputSettings14.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings14.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings18.encoder();
        outputSettings17.charsetEncoder = charsetEncoder20;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charsetEncoder20);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        int int9 = textNode0.siblingIndex();
        boolean boolean10 = textNode0.isBlank();
        java.lang.String str11 = textNode0.outerHtml();
        java.lang.String str12 = textNode0.getTEXT_KEY();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = textNode0.before("!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        textNode6.ensureAttributes();
        java.lang.String str9 = textNode6.getWholeText();
        org.jsoup.nodes.Node node10 = textNode6.clone();
        org.jsoup.nodes.Node node11 = node10.parent();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        boolean boolean12 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        boolean boolean15 = outputSettings0.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        outputSettings0.setprettyPrint(false);
        outputSettings0.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        outputSettings0.setindentAmount(52);
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        outputSettings14.setescapeMode(escapeMode17);
        outputSettings14.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = null;
        outputSettings14.setescapeMode(escapeMode21);
        boolean boolean23 = outputSettings14.forceAllElementAsBlock;
        int int24 = outputSettings14.indentAmount;
        java.nio.charset.Charset charset25 = outputSettings14.getcharset();
        textNode11.outerHtmlTail(stringBuilder12, (int) (short) -1, outputSettings14);
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings14.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings14.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings30.clone();
        int int32 = outputSettings31.getindentAmount();
        int int33 = outputSettings31.indentAmount;
        outputSettings31.indentAmount = (-1);
        outputSettings31.prettyPrint = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings31.escapeMode;
        outputSettings14.escapeMode = escapeMode38;
        outputSettings0.setescapeMode(escapeMode38);
        int int41 = outputSettings0.indentAmount();
        boolean boolean42 = outputSettings0.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        outputSettings0.setindentAmount(52);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings9.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings15.encoder();
        outputSettings0.charsetEncoder = charsetEncoder16;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings0.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount(32);
        int int22 = outputSettings19.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("text", "#text");
        java.lang.String str3 = textNode2.getTEXT_KEY();
        java.lang.String str5 = textNode2.attr("!");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        outputSettings2.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        int int11 = outputSettings10.getindentAmount();
        outputSettings10.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings14.charset = charset16;
        outputSettings14.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        int int23 = outputSettings20.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings20.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        outputSettings26.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset32 = outputSettings31.charset();
        outputSettings26.setcharset(charset32);
        outputSettings25.setcharset(charset32);
        outputSettings20.setcharset(charset32);
        outputSettings14.setcharset(charset32);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings10.charset(charset32);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        boolean boolean41 = outputSettings38.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings38.prettyPrint(false);
        int int44 = outputSettings43.getindentAmount();
        outputSettings43.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings43.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        boolean boolean51 = outputSettings48.getprettyPrint();
        boolean boolean52 = outputSettings48.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings48.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings54.escapeMode();
        outputSettings43.setescapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings10.escapeMode(escapeMode55);
        outputSettings2.setescapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        boolean boolean62 = outputSettings59.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings59.prettyPrint(false);
        int int65 = outputSettings64.getindentAmount();
        outputSettings64.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder68 = outputSettings64.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean70 = outputSettings69.prettyPrint;
        boolean boolean71 = outputSettings69.forceAllElementAsBlock;
        boolean boolean72 = outputSettings69.getprettyPrint();
        boolean boolean73 = outputSettings69.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings69.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings75.escapeMode();
        outputSettings64.setescapeMode(escapeMode76);
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings2.escapeMode(escapeMode76);
        java.nio.charset.Charset charset79 = outputSettings2.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder80 = outputSettings2.charsetEncoder;
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertNotNull(charset79);
        org.junit.Assert.assertNotNull(charsetEncoder80);
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "ext");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings5.escapeMode(escapeMode16);
        int int18 = outputSettings5.getindentAmount();
        outputSettings5.indentAmount = (-1);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings5.getcharset();
        textNode2.outerHtmlTail(stringBuilder3, (int) (short) 10, outputSettings5);
        java.lang.String str24 = textNode2.text;
        java.lang.String str26 = textNode2.attr("!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNull(escapeMode21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("text");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        boolean boolean14 = outputSettings11.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings11.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        outputSettings19.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings19.setcharset(charset25);
        java.nio.charset.Charset charset27 = outputSettings19.getcharset();
        outputSettings18.charset = charset27;
        textNode2.outerHtmlTail(stringBuilder9, 100, outputSettings18);
        textNode2.setBaseUri("h");
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.getforceAllElementAsBlock();
        boolean boolean34 = outputSettings32.getprettyPrint();
        outputSettings32.setprettyPrint(false);
        outputSettings32.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings32.encoder();
        boolean boolean40 = textNode2.equals((java.lang.Object) outputSettings32);
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.TextNode textNode45 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        org.jsoup.nodes.Document document46 = textNode45.ownerDocument();
        textNode45.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList49 = textNode45.childNodes();
        java.lang.String str50 = textNode45.outerHtml();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(textNode45);
        org.junit.Assert.assertNull(document46);
        org.junit.Assert.assertNotNull(nodeList49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "#text" + "'", str50, "#text");
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.Node node6 = textNode2.previousSibling();
        org.jsoup.nodes.Node node8 = textNode2.removeAttr("#text");
        boolean boolean10 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("h");
        org.jsoup.select.NodeVisitor nodeVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = textNode2.traverse(nodeVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(textNode12);
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        textNode2.text = "hi!";
        java.lang.String str11 = textNode2.outerHtml();
        int int12 = textNode2.siblingIndex();
        java.lang.String str13 = textNode2.text();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings0.getcharsetEncoder();
        outputSettings0.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings0.escapeMode();
        boolean boolean10 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.TextNode textNode15 = org.jsoup.nodes.TextNode.createFromEncoded("text", "text");
        java.lang.StringBuilder stringBuilder16 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        outputSettings18.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings18.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings24.encoder();
        int int26 = outputSettings24.indentAmount;
        outputSettings24.setforceAllElementAsBlock(false);
        textNode15.outerHtmlTail(stringBuilder16, 0, outputSettings24);
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        boolean boolean34 = outputSettings31.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings31.prettyPrint(false);
        java.nio.charset.Charset charset37 = null;
        outputSettings36.setcharset(charset37);
        boolean boolean39 = outputSettings36.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings36.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        boolean boolean48 = outputSettings45.getprettyPrint();
        boolean boolean49 = outputSettings45.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings45.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings45.getescapeMode();
        outputSettings44.setescapeMode(escapeMode52);
        outputSettings41.escapeMode = escapeMode52;
        outputSettings24.escapeMode = escapeMode52;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        outputSettings56.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset62 = outputSettings61.charset();
        outputSettings56.setcharset(charset62);
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings56.getcharsetEncoder();
        boolean boolean65 = outputSettings56.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings56.getescapeMode();
        outputSettings24.setescapeMode(escapeMode66);
        outputSettings12.setescapeMode(escapeMode66);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        int int1 = textNode0.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        java.nio.charset.Charset charset16 = outputSettings5.getcharset();
        outputSettings2.charset = charset16;
        boolean boolean18 = textNode0.equals((java.lang.Object) outputSettings2);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode();
        outputSettings25.setprettyPrint(true);
        boolean boolean29 = textNode0.equals((java.lang.Object) outputSettings25);
        java.util.List<org.jsoup.nodes.Node> nodeList30 = textNode0.childNodes();
        java.lang.String str31 = textNode0.gettext();
        org.jsoup.nodes.Node node32 = textNode0.nextSibling();
        org.jsoup.nodes.TextNode textNode34 = textNode0.text("hi!");
        org.jsoup.nodes.Node node35 = textNode34.clone();
        boolean boolean37 = textNode34.hasAttr("");
        java.lang.String str38 = textNode34.outerHtml();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(textNode34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str3 = textNode2.text;
        boolean boolean4 = textNode2.isBlank();
        java.lang.String str5 = textNode2.text;
        int int6 = textNode2.siblingIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode2.baseUri();
        java.lang.String str9 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node10 = textNode2.parent();
        textNode2.setBaseUri("t");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset8 = outputSettings7.charset();
        outputSettings6.charset = charset8;
        outputSettings6.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings6.getcharsetEncoder();
        outputSettings0.charsetEncoder = charsetEncoder12;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.prettyPrint(true);
        boolean boolean16 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings0.escapeMode();
        boolean boolean18 = outputSettings0.prettyPrint;
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(escapeMode17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint;
        outputSettings0.indentAmount = 1;
        boolean boolean8 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.setprettyPrint(true);
        boolean boolean11 = outputSettings0.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        int int9 = textNode0.siblingIndex();
        boolean boolean10 = textNode0.isBlank();
        java.lang.String str11 = textNode0.outerHtml();
        java.lang.String str12 = textNode0.baseUri();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        java.lang.String str8 = textNode2.text();
        org.jsoup.nodes.Node node11 = textNode2.attr("#text", "hi!");
        org.jsoup.nodes.Attributes attributes12 = textNode2.attributes();
        textNode2.text = "hi!";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(attributes12);
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.getWholeText();
        java.lang.String str6 = textNode2.text();
        org.jsoup.nodes.Document document7 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode9 = textNode2.splitText((int) (short) 0);
        textNode2.settext("t");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = textNode16.equals((java.lang.Object) outputSettings17);
        int int20 = outputSettings17.getindentAmount();
        outputSettings17.indentAmount = (short) -1;
        boolean boolean23 = outputSettings17.forceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder12, 10, outputSettings17);
        textNode2.setBaseUri("t");
        textNode2.text = "ext";
        org.jsoup.nodes.Node node31 = textNode2.attr("#text", "text");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNull(document7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node7 = textNode2.attr("#text", "");
        java.lang.String str8 = textNode2.gettext();
        org.jsoup.nodes.Node node11 = textNode2.attr("text", "");
        org.jsoup.nodes.TextNode textNode14 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode14.childNodes();
        org.jsoup.nodes.TextNode textNode17 = textNode14.splitText(1);
        textNode14.settext("hi!");
        boolean boolean21 = textNode14.hasAttr("text");
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings24.clone();
        boolean boolean26 = outputSettings25.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        int int30 = outputSettings27.getindentAmount();
        boolean boolean31 = outputSettings27.forceAllElementAsBlock;
        java.nio.charset.Charset charset32 = outputSettings27.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings25.charset(charset32);
        boolean boolean34 = textNode14.equals((java.lang.Object) charset32);
        boolean boolean35 = textNode14.isBlank();
        java.lang.String str36 = textNode14.gettext();
        boolean boolean37 = textNode14.isBlank();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node38 = node11.after((org.jsoup.nodes.Node) textNode14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        java.lang.String str25 = textNode2.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node26 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#text" + "'", str25, "#text");
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        boolean boolean9 = textNode2.hasAttr("text");
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        java.nio.charset.Charset charset16 = outputSettings10.charset;
        outputSettings10.setprettyPrint(false);
        java.nio.charset.Charset charset19 = outputSettings10.getcharset();
        boolean boolean20 = textNode2.equals((java.lang.Object) charset19);
        java.lang.String str22 = textNode2.attr("#text");
        java.lang.String str23 = textNode2.getWholeText();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "text" + "'", str23, "text");
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode4 = textNode2.splitText((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        java.nio.charset.Charset charset8 = outputSettings0.getcharset();
        boolean boolean9 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.indentAmount(100);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings13.charset = charset15;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings13.encoder();
        outputSettings13.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings13.escapeMode;
        outputSettings13.forceAllElementAsBlock = false;
        boolean boolean23 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.setindentAmount((-1));
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings13.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings13.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        outputSettings28.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings28.setcharset(charset34);
        outputSettings28.setprettyPrint(true);
        java.nio.charset.Charset charset38 = outputSettings28.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings28.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        boolean boolean47 = outputSettings43.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings43.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings43.getescapeMode();
        outputSettings42.setescapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings42.indentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        outputSettings54.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset60 = outputSettings59.charset();
        outputSettings54.setcharset(charset60);
        outputSettings54.setprettyPrint(true);
        java.nio.charset.Charset charset64 = outputSettings54.getcharset();
        outputSettings54.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings54.forceAllElementAsBlock(false);
        boolean boolean69 = outputSettings54.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings70.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings70.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = null;
        outputSettings73.setescapeMode(escapeMode76);
        outputSettings73.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = null;
        outputSettings73.setescapeMode(escapeMode80);
        boolean boolean82 = outputSettings73.forceAllElementAsBlock;
        int int83 = outputSettings73.indentAmount;
        java.nio.charset.Charset charset84 = outputSettings73.getcharset();
        outputSettings70.charset = charset84;
        org.jsoup.nodes.Entities.EscapeMode escapeMode86 = outputSettings70.escapeMode();
        outputSettings54.escapeMode = escapeMode86;
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings53.escapeMode(escapeMode86);
        java.nio.charset.Charset charset89 = outputSettings53.charset;
        outputSettings28.setcharset(charset89);
        org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings13.charset(charset89);
        java.nio.charset.Charset charset92 = outputSettings91.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings12.charset(charset92);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(charset84);
        org.junit.Assert.assertTrue("'" + escapeMode86 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode86.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertNotNull(charset89);
        org.junit.Assert.assertNotNull(outputSettings91);
        org.junit.Assert.assertNotNull(charset92);
        org.junit.Assert.assertNotNull(outputSettings93);
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        int int7 = textNode2.siblingIndex();
        java.lang.String str8 = textNode2.getTEXT_KEY();
        java.lang.Object obj9 = null;
        boolean boolean10 = textNode2.equals(obj9);
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = null;
        textNode2.outerHtmlTail(stringBuilder11, 100, outputSettings13);
        java.lang.String str15 = textNode2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        textNode2.settext("");
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings9.indentAmount((int) (short) 0);
        outputSettings9.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings9.charsetEncoder;
        boolean boolean16 = textNode2.equals((java.lang.Object) outputSettings9);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        outputSettings17.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings17.setcharset(charset23);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings25.encoder();
        outputSettings17.setcharsetEncoder(charsetEncoder27);
        boolean boolean29 = outputSettings17.forceAllElementAsBlock();
        boolean boolean30 = outputSettings17.prettyPrint();
        outputSettings17.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings17.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        outputSettings34.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings34.forceAllElementAsBlock(true);
        int int41 = outputSettings34.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings34.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = null;
        outputSettings43.setescapeMode(escapeMode46);
        outputSettings43.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = null;
        outputSettings43.setescapeMode(escapeMode50);
        boolean boolean52 = outputSettings43.forceAllElementAsBlock;
        int int53 = outputSettings43.indentAmount;
        java.nio.charset.Charset charset54 = outputSettings43.getcharset();
        outputSettings43.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean58 = outputSettings57.prettyPrint;
        boolean boolean59 = outputSettings57.forceAllElementAsBlock;
        int int60 = outputSettings57.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings57.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean64 = outputSettings63.prettyPrint;
        boolean boolean65 = outputSettings63.forceAllElementAsBlock;
        outputSettings63.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset69 = outputSettings68.charset();
        outputSettings63.setcharset(charset69);
        outputSettings62.setcharset(charset69);
        outputSettings57.setcharset(charset69);
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings57.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings74.clone();
        int int76 = outputSettings75.getindentAmount();
        java.nio.charset.Charset charset77 = outputSettings75.charset();
        outputSettings57.setcharset(charset77);
        outputSettings43.setcharset(charset77);
        boolean boolean80 = outputSettings43.prettyPrint();
        int int81 = outputSettings43.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset83 = outputSettings82.charset();
        int int84 = outputSettings82.indentAmount;
        java.nio.charset.Charset charset85 = outputSettings82.charset;
        boolean boolean86 = outputSettings82.prettyPrint;
        outputSettings82.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode89 = outputSettings82.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings43.escapeMode(escapeMode89);
        outputSettings34.setescapeMode(escapeMode89);
        org.jsoup.nodes.Document.OutputSettings outputSettings92 = outputSettings33.escapeMode(escapeMode89);
        org.jsoup.nodes.Document.OutputSettings outputSettings94 = outputSettings33.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder95 = outputSettings94.charsetEncoder;
        outputSettings9.charsetEncoder = charsetEncoder95;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(charset85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + escapeMode89 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode89.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertNotNull(outputSettings92);
        org.junit.Assert.assertNotNull(outputSettings94);
        org.junit.Assert.assertNotNull(charsetEncoder95);
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode("text", "text");
        int int10 = textNode9.siblingIndex();
        org.jsoup.nodes.Node node11 = textNode9.clone();
        org.jsoup.nodes.Document document12 = textNode9.ownerDocument();
        int int13 = textNode9.siblingIndex();
        java.lang.String str14 = textNode9.text();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.after((org.jsoup.nodes.Node) textNode9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(document12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.indentAmount((int) (short) 0);
        outputSettings0.prettyPrint = false;
        int int6 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.clone();
        int int8 = outputSettings0.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = null;
        outputSettings5.setcharset(charset6);
        boolean boolean8 = outputSettings5.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        int int11 = outputSettings5.indentAmount();
        boolean boolean12 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings5.escapeMode;
        boolean boolean14 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings5.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        java.lang.String str8 = textNode6.getWholeText();
        java.lang.String str9 = textNode6.nodeName();
        java.lang.String str10 = textNode6.outerHtml();
        java.lang.String str11 = textNode6.gettext();
        org.jsoup.nodes.Node node14 = textNode6.attr("#text", "");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode16 = textNode6.splitText(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        boolean boolean13 = outputSettings9.forceAllElementAsBlock();
        boolean boolean14 = outputSettings9.forceAllElementAsBlock;
        boolean boolean15 = textNode0.equals((java.lang.Object) outputSettings9);
        java.lang.String str16 = textNode0.text;
        org.jsoup.nodes.Node node17 = textNode0.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode0.siblingNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings19.encoder();
        boolean boolean24 = outputSettings19.getprettyPrint();
        int int25 = outputSettings19.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings26.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings26.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings26.getcharsetEncoder();
        outputSettings19.setcharsetEncoder(charsetEncoder30);
        int int32 = outputSettings19.getindentAmount();
        int int33 = outputSettings19.indentAmount();
        boolean boolean34 = outputSettings19.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        boolean boolean38 = outputSettings35.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings35.prettyPrint(false);
        int int41 = outputSettings40.getindentAmount();
        outputSettings40.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings44.charset = charset46;
        outputSettings44.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        int int53 = outputSettings50.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings50.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        outputSettings56.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset62 = outputSettings61.charset();
        outputSettings56.setcharset(charset62);
        outputSettings55.setcharset(charset62);
        outputSettings50.setcharset(charset62);
        outputSettings44.setcharset(charset62);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings40.charset(charset62);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings67.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings70.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings70.clone();
        java.nio.charset.Charset charset73 = outputSettings70.charset();
        outputSettings67.setcharset(charset73);
        org.jsoup.nodes.Entities.EscapeMode escapeMode75 = outputSettings67.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings19.escapeMode(escapeMode75);
        boolean boolean77 = textNode0.equals((java.lang.Object) outputSettings19);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertTrue("'" + escapeMode75 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode75.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        java.lang.String str8 = textNode2.baseUri();
        textNode2.settext("ext");
        boolean boolean11 = textNode2.isBlank();
        textNode2.ensureAttributes();
        java.lang.String str13 = textNode2.getWholeText();
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.encoder();
        boolean boolean21 = outputSettings16.prettyPrint;
        java.nio.charset.Charset charset22 = outputSettings16.charset;
        boolean boolean23 = outputSettings16.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.encoder();
        boolean boolean29 = outputSettings24.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings24.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings16.escapeMode(escapeMode30);
        boolean boolean32 = outputSettings31.forceAllElementAsBlock();
        boolean boolean33 = outputSettings31.getforceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings31.encoder();
        textNode2.outerHtmlTail(stringBuilder14, (int) (byte) 100, outputSettings31);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings31.prettyPrint(true);
        int int38 = outputSettings37.getindentAmount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ext" + "'", str13, "ext");
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings7.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings7.prettyPrint(true);
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings11.prettyPrint(true);
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("text", "text");
        int int18 = textNode17.siblingIndex();
        int int19 = textNode17.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList20 = textNode17.childNodes();
        java.lang.StringBuilder stringBuilder21 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        int int26 = outputSettings23.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings23.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        outputSettings29.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset35 = outputSettings34.charset();
        outputSettings29.setcharset(charset35);
        outputSettings28.setcharset(charset35);
        outputSettings23.setcharset(charset35);
        textNode17.outerHtmlTail(stringBuilder21, 10, outputSettings23);
        int int40 = outputSettings23.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings23.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings23.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        outputSettings43.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        boolean boolean51 = outputSettings48.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset54 = outputSettings53.charset();
        outputSettings52.charset = charset54;
        java.nio.charset.CharsetEncoder charsetEncoder56 = outputSettings52.encoder();
        boolean boolean57 = outputSettings52.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings52.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings48.escapeMode(escapeMode58);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings43.escapeMode(escapeMode58);
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = outputSettings43.getescapeMode();
        outputSettings23.setescapeMode(escapeMode61);
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset64 = outputSettings23.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings23.indentAmount((int) (byte) 0);
        outputSettings23.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings23.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings14.escapeMode(escapeMode69);
        outputSettings0.setescapeMode(escapeMode69);
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset74 = outputSettings73.charset();
        outputSettings72.charset = charset74;
        outputSettings72.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder78 = outputSettings72.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings72.escapeMode();
        outputSettings0.setescapeMode(escapeMode79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(charsetEncoder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertNotNull(charsetEncoder78);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean4 = textNode2.hasAttr("");
        boolean boolean5 = textNode2.isBlank();
        java.lang.String str6 = textNode2.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        boolean boolean13 = outputSettings9.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder7, 0, outputSettings9);
        org.jsoup.nodes.Attributes attributes15 = textNode2.attributes();
        java.lang.String str17 = textNode2.attr("h");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        java.nio.charset.Charset charset16 = outputSettings15.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        int int19 = outputSettings17.indentAmount;
        java.nio.charset.Charset charset20 = outputSettings17.charset;
        boolean boolean21 = outputSettings17.prettyPrint;
        outputSettings17.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings17.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings15.escapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings15.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings15.forceAllElementAsBlock(true);
        boolean boolean30 = outputSettings15.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        boolean boolean7 = outputSettings3.getforceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings3.getcharsetEncoder();
        java.nio.charset.Charset charset9 = outputSettings3.charset;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings3.charset("hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(charset9);
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        textNode2.settext("");
        textNode2.ensureAttributes();
        java.lang.String str29 = textNode2.attr("t");
        java.lang.String str30 = textNode2.getWholeText();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings31.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings37.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset41 = outputSettings40.charset();
        outputSettings39.charset = charset41;
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings39.encoder();
        outputSettings39.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings39.escapeMode;
        outputSettings37.escapeMode = escapeMode46;
        boolean boolean48 = outputSettings37.forceAllElementAsBlock;
        outputSettings37.forceAllElementAsBlock = false;
        int int51 = outputSettings37.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings37.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings37.forceAllElementAsBlock(false);
        int int55 = outputSettings54.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings54.forceAllElementAsBlock(false);
        boolean boolean58 = textNode2.equals((java.lang.Object) outputSettings54);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "");
        org.jsoup.nodes.Node node3 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode6 = org.jsoup.nodes.TextNode.createFromEncoded("h", "h");
        boolean boolean7 = textNode6.isBlank();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        boolean boolean12 = outputSettings0.forceAllElementAsBlock();
        boolean boolean13 = outputSettings0.prettyPrint();
        outputSettings0.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        outputSettings16.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset22 = outputSettings21.charset();
        outputSettings16.setcharset(charset22);
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings16.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        boolean boolean28 = outputSettings25.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings25.prettyPrint(false);
        int int31 = outputSettings30.getindentAmount();
        outputSettings30.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings34.charset = charset36;
        outputSettings34.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        int int43 = outputSettings40.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings40.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        outputSettings46.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset52 = outputSettings51.charset();
        outputSettings46.setcharset(charset52);
        outputSettings45.setcharset(charset52);
        outputSettings40.setcharset(charset52);
        outputSettings34.setcharset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings30.charset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean59 = outputSettings58.prettyPrint;
        boolean boolean60 = outputSettings58.forceAllElementAsBlock;
        boolean boolean61 = outputSettings58.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings58.prettyPrint(false);
        int int64 = outputSettings63.getindentAmount();
        outputSettings63.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder67 = outputSettings63.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean69 = outputSettings68.prettyPrint;
        boolean boolean70 = outputSettings68.forceAllElementAsBlock;
        boolean boolean71 = outputSettings68.getprettyPrint();
        boolean boolean72 = outputSettings68.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings68.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode75 = outputSettings74.escapeMode();
        outputSettings63.setescapeMode(escapeMode75);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings30.escapeMode(escapeMode75);
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings16.escapeMode(escapeMode75);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings16.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings80.clone();
        boolean boolean82 = outputSettings81.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean84 = outputSettings83.prettyPrint;
        boolean boolean85 = outputSettings83.forceAllElementAsBlock;
        boolean boolean86 = outputSettings83.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings83.prettyPrint(false);
        int int89 = outputSettings88.getindentAmount();
        outputSettings88.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder92 = outputSettings88.getcharsetEncoder();
        outputSettings81.setcharsetEncoder(charsetEncoder92);
        outputSettings0.setcharsetEncoder(charsetEncoder92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertTrue("'" + escapeMode75 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode75.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder92);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        int int1 = textNode0.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        java.nio.charset.Charset charset16 = outputSettings5.getcharset();
        outputSettings2.charset = charset16;
        boolean boolean18 = textNode0.equals((java.lang.Object) outputSettings2);
        org.jsoup.nodes.Node node19 = textNode0.previousSibling();
        int int20 = textNode0.siblingIndex();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = textNode0.hasAttr("i");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings6.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings6.charsetEncoder;
        outputSettings6.prettyPrint = false;
        outputSettings6.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings13.setcharset(charset19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset22 = outputSettings21.charset();
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings21.encoder();
        outputSettings13.setcharsetEncoder(charsetEncoder23);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        boolean boolean29 = outputSettings25.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings25.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings25.getcharsetEncoder();
        outputSettings13.setcharsetEncoder(charsetEncoder31);
        outputSettings6.charsetEncoder = charsetEncoder31;
        boolean boolean34 = outputSettings6.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings6.indentAmount(0);
        outputSettings6.indentAmount = 35;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(outputSettings36);
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        org.jsoup.nodes.Document document9 = textNode6.ownerDocument();
        java.lang.String str11 = textNode6.attr("#");
        org.jsoup.nodes.TextNode textNode14 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "");
        boolean boolean16 = textNode14.hasAttr("text");
        boolean boolean18 = textNode14.hasAttr("text");
        org.jsoup.nodes.Node node19 = textNode14.previousSibling();
        boolean boolean21 = textNode14.hasAttr("i!");
        org.jsoup.nodes.Node node23 = textNode14.removeAttr("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode6.after(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertNull(document9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.encoder();
        boolean boolean21 = outputSettings16.prettyPrint;
        java.nio.charset.Charset charset22 = outputSettings16.charset;
        boolean boolean23 = outputSettings16.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.encoder();
        boolean boolean29 = outputSettings24.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings24.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings16.escapeMode(escapeMode30);
        boolean boolean32 = outputSettings16.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings16.indentAmount(100);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        boolean boolean38 = outputSettings35.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings35.prettyPrint(false);
        outputSettings35.setforceAllElementAsBlock(false);
        outputSettings35.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset45 = outputSettings35.charset;
        outputSettings34.setcharset(charset45);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings15.charset(charset45);
        java.nio.charset.Charset charset48 = outputSettings15.getcharset();
        boolean boolean49 = outputSettings15.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        int int15 = outputSettings14.getindentAmount();
        outputSettings14.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings18.charset = charset20;
        outputSettings18.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        int int27 = outputSettings24.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings30.setcharset(charset36);
        outputSettings29.setcharset(charset36);
        outputSettings24.setcharset(charset36);
        outputSettings18.setcharset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(false);
        int int48 = outputSettings47.getindentAmount();
        outputSettings47.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        boolean boolean56 = outputSettings52.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings52.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        outputSettings47.setescapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings14.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings0.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings0.indentAmount((int) (byte) 0);
        boolean boolean65 = outputSettings64.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings64.clone();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(outputSettings66);
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        org.jsoup.nodes.Node node8 = textNode5.attr("hi!", "t");
        java.lang.String str10 = textNode5.attr("#text");
        org.jsoup.nodes.Node node11 = textNode5.clone();
        java.lang.Class<?> wildcardClass12 = textNode5.getClass();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        outputSettings0.forceAllElementAsBlock = false;
        boolean boolean10 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setindentAmount((-1));
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.forceAllElementAsBlock(true);
        boolean boolean16 = outputSettings15.prettyPrint();
        outputSettings15.prettyPrint = false;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        org.jsoup.nodes.Node node11 = textNode10.clone();
        org.jsoup.nodes.Node node14 = textNode10.attr("i", "ext");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        outputSettings7.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings7.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        outputSettings22.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings22.setescapeMode(escapeMode29);
        boolean boolean31 = outputSettings22.forceAllElementAsBlock;
        int int32 = outputSettings22.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings22.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings35.setescapeMode(escapeMode38);
        outputSettings35.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings35.setescapeMode(escapeMode42);
        boolean boolean44 = outputSettings35.forceAllElementAsBlock;
        int int45 = outputSettings35.indentAmount;
        java.nio.charset.Charset charset46 = outputSettings35.getcharset();
        outputSettings34.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset46);
        int int49 = outputSettings48.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 0, outputSettings48);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        boolean boolean54 = outputSettings51.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings51.prettyPrint(false);
        boolean boolean57 = outputSettings56.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean59 = outputSettings58.prettyPrint;
        boolean boolean60 = outputSettings58.forceAllElementAsBlock;
        boolean boolean61 = outputSettings58.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings58.prettyPrint(false);
        int int64 = outputSettings63.getindentAmount();
        outputSettings63.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset69 = outputSettings68.charset();
        outputSettings67.charset = charset69;
        outputSettings67.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        int int76 = outputSettings73.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder77 = outputSettings73.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean80 = outputSettings79.prettyPrint;
        boolean boolean81 = outputSettings79.forceAllElementAsBlock;
        outputSettings79.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset85 = outputSettings84.charset();
        outputSettings79.setcharset(charset85);
        outputSettings78.setcharset(charset85);
        outputSettings73.setcharset(charset85);
        outputSettings67.setcharset(charset85);
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings63.charset(charset85);
        java.nio.charset.CharsetEncoder charsetEncoder91 = outputSettings63.getcharsetEncoder();
        outputSettings56.charsetEncoder = charsetEncoder91;
        outputSettings48.setcharsetEncoder(charsetEncoder91);
        java.nio.charset.CharsetEncoder charsetEncoder94 = outputSettings48.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings96 = outputSettings48.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings98 = outputSettings96.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode99 = outputSettings96.escapeMode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charset85);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertNotNull(charsetEncoder91);
        org.junit.Assert.assertNotNull(charsetEncoder94);
        org.junit.Assert.assertNotNull(outputSettings96);
        org.junit.Assert.assertNotNull(outputSettings98);
        org.junit.Assert.assertTrue("'" + escapeMode99 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode99.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        boolean boolean11 = textNode0.isBlank();
        java.lang.String str12 = textNode0.gettext();
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        int int17 = textNode15.siblingIndex();
        org.jsoup.nodes.Node node18 = textNode15.clone();
        java.lang.String str19 = textNode15.text;
        java.lang.String str20 = textNode15.nodeName();
        org.jsoup.nodes.TextNode textNode22 = textNode15.splitText(0);
        java.lang.String str23 = textNode22.toString();
        org.jsoup.nodes.Node node25 = textNode22.removeAttr("i!");
        boolean boolean26 = textNode0.equals((java.lang.Object) textNode22);
        java.lang.String str27 = textNode0.gettext();
        org.jsoup.nodes.Attributes attributes28 = textNode0.attributes();
        textNode0.setBaseUri("i!");
        org.jsoup.nodes.Node node33 = textNode0.attr("ext", "h");
        org.jsoup.nodes.Node node34 = node33.previousSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ext" + "'", str12, "ext");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "text" + "'", str23, "text");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ext" + "'", str27, "ext");
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.absUrl("text");
        textNode2.setBaseUri("#text");
        boolean boolean9 = textNode2.hasAttr("#text");
        org.jsoup.nodes.Node node10 = textNode2.parent();
        java.lang.String str11 = textNode2.nodeName();
        java.lang.String str12 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode15 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document16 = textNode15.ownerDocument();
        org.jsoup.nodes.Node node19 = textNode15.attr("t", "");
        java.lang.String str20 = textNode15.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList21 = textNode15.childNodes();
        java.lang.String str23 = textNode15.attr("text");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertNull(document16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "t");
        java.lang.String str3 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode6 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        java.lang.String str8 = textNode6.attr("");
        boolean boolean9 = textNode6.isBlank();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode2.after((org.jsoup.nodes.Node) textNode6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        textNode2.text = "hi!";
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        java.lang.String str12 = textNode2.text();
        java.lang.String str13 = textNode2.gettext();
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        int int15 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode2.siblingNodes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node17 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(nodeList16);
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        java.lang.String str8 = textNode2.baseUri();
        textNode2.settext("ext");
        java.lang.String str11 = textNode2.nodeName();
        java.lang.String str12 = textNode2.text;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ext" + "'", str12, "ext");
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean2 = outputSettings0.getprettyPrint();
        outputSettings0.setprettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.clone();
        boolean boolean8 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings0.escapeMode;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.getWholeText();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        java.lang.String str9 = textNode2.outerHtml();
        org.jsoup.nodes.TextNode textNode12 = org.jsoup.nodes.TextNode.createFromEncoded("ext", "ext");
        java.lang.String str13 = textNode12.toString();
        org.jsoup.nodes.TextNode textNode15 = textNode12.text("#");
        textNode15.ensureAttributes();
        org.jsoup.nodes.Node node17 = textNode15.parent();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode2.after((org.jsoup.nodes.Node) textNode15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ext" + "'", str13, "ext");
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        int int5 = outputSettings0.getindentAmount();
        boolean boolean6 = outputSettings0.forceAllElementAsBlock();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        outputSettings8.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings8.charsetEncoder;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charsetEncoder27);
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode0.text("ext");
        boolean boolean11 = textNode0.isBlank();
        java.lang.String str12 = textNode0.gettext();
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        int int17 = textNode15.siblingIndex();
        org.jsoup.nodes.Node node18 = textNode15.clone();
        java.lang.String str19 = textNode15.text;
        java.lang.String str20 = textNode15.nodeName();
        org.jsoup.nodes.TextNode textNode22 = textNode15.splitText(0);
        java.lang.String str23 = textNode22.toString();
        org.jsoup.nodes.Node node25 = textNode22.removeAttr("i!");
        boolean boolean26 = textNode0.equals((java.lang.Object) textNode22);
        java.lang.String str27 = textNode0.gettext();
        org.jsoup.nodes.Attributes attributes28 = textNode0.attributes();
        textNode0.setBaseUri("i!");
        org.jsoup.nodes.Node node31 = textNode0.previousSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ext" + "'", str12, "ext");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "text" + "'", str23, "text");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ext" + "'", str27, "ext");
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.Charset charset9 = outputSettings0.getcharset();
        boolean boolean10 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setforceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        boolean boolean6 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.setprettyPrint(false);
        boolean boolean14 = outputSettings9.getforceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings9.escapeMode();
        outputSettings8.escapeMode = escapeMode15;
        boolean boolean17 = outputSettings8.getprettyPrint();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        java.lang.String str7 = textNode2.baseUri();
        textNode2.text = "t";
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings20.encoder();
        outputSettings12.setcharsetEncoder(charsetEncoder22);
        textNode2.outerHtmlTail(stringBuilder10, 0, outputSettings12);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings12.forceAllElementAsBlock(false);
        outputSettings26.indentAmount = 35;
        outputSettings26.prettyPrint = false;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertNotNull(outputSettings26);
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.nextSibling();
        textNode0.settext("t");
        org.jsoup.nodes.Node node13 = textNode0.attr("hi!", "");
        java.lang.String str14 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder15 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        outputSettings17.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings17.setcharset(charset23);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings25.encoder();
        outputSettings17.setcharsetEncoder(charsetEncoder27);
        java.nio.charset.Charset charset29 = outputSettings17.getcharset();
        int int30 = outputSettings17.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings31.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.clone();
        outputSettings33.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        boolean boolean39 = outputSettings36.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings36.prettyPrint(false);
        int int42 = outputSettings41.getindentAmount();
        outputSettings41.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset47 = outputSettings46.charset();
        outputSettings45.charset = charset47;
        outputSettings45.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        int int54 = outputSettings51.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder55 = outputSettings51.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean58 = outputSettings57.prettyPrint;
        boolean boolean59 = outputSettings57.forceAllElementAsBlock;
        outputSettings57.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset63 = outputSettings62.charset();
        outputSettings57.setcharset(charset63);
        outputSettings56.setcharset(charset63);
        outputSettings51.setcharset(charset63);
        outputSettings45.setcharset(charset63);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings41.charset(charset63);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean70 = outputSettings69.prettyPrint;
        boolean boolean71 = outputSettings69.forceAllElementAsBlock;
        boolean boolean72 = outputSettings69.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings69.prettyPrint(false);
        int int75 = outputSettings74.getindentAmount();
        outputSettings74.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder78 = outputSettings74.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean80 = outputSettings79.prettyPrint;
        boolean boolean81 = outputSettings79.forceAllElementAsBlock;
        boolean boolean82 = outputSettings79.getprettyPrint();
        boolean boolean83 = outputSettings79.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings79.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode86 = outputSettings85.escapeMode();
        outputSettings74.setescapeMode(escapeMode86);
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings41.escapeMode(escapeMode86);
        outputSettings33.setescapeMode(escapeMode86);
        outputSettings17.escapeMode = escapeMode86;
        // The following exception was thrown during execution in test generation
        try {
            textNode0.outerHtmlHead(stringBuilder15, (int) '#', outputSettings17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(outputSettings85);
        org.junit.Assert.assertTrue("'" + escapeMode86 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode86.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings88);
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        textNode2.ensureAttributes();
        java.lang.String str9 = textNode2.outerHtml();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText((int) (short) 1);
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode10.siblingNodes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = textNode10.before("#text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNotNull(nodeList11);
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("h", "text");
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode7 = new org.jsoup.nodes.TextNode("text", "text");
        int int8 = textNode7.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode7.siblingNodes();
        textNode7.text = "";
        org.jsoup.nodes.Node node12 = textNode7.parent();
        java.lang.String str13 = textNode7.text();
        boolean boolean14 = textNode7.isBlank();
        java.lang.String str15 = textNode7.nodeName();
        boolean boolean16 = textNode2.equals((java.lang.Object) textNode7);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode18 = textNode2.splitText((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        org.jsoup.nodes.Node node3 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        boolean boolean9 = outputSettings6.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings6.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.escapeMode(escapeMode12);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        java.nio.charset.Charset charset22 = outputSettings14.getcharset();
        outputSettings13.charset = charset22;
        boolean boolean24 = textNode5.equals((java.lang.Object) outputSettings13);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node25 = textNode5.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.charsetEncoder;
        outputSettings0.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings7.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings13.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings13.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings13.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder17);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings0.forceAllElementAsBlock(false);
        boolean boolean21 = outputSettings0.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str9 = textNode0.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.forceAllElementAsBlock(false);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings42);
        java.lang.String str47 = textNode0.absUrl("#text");
        java.lang.String str48 = textNode0.text();
        org.jsoup.nodes.Node node49 = textNode0.clone();
        textNode0.settext("t");
        org.jsoup.nodes.Document document52 = textNode0.ownerDocument();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(document52);
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.getWholeText();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        java.lang.String str9 = textNode2.text;
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Document document1 = textNode0.ownerDocument();
        boolean boolean2 = textNode0.isBlank();
        java.lang.String str3 = textNode0.gettext();
        java.lang.String str4 = textNode0.text;
        boolean boolean5 = textNode0.isBlank();
        java.lang.String str6 = textNode0.getWholeText();
        textNode0.setBaseUri("i!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Attributes attributes9 = textNode0.attributes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.indentAmount((int) '#');
        java.nio.charset.Charset charset13 = outputSettings12.getcharset();
        int int14 = outputSettings12.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings12.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings16.clone();
        org.jsoup.nodes.TextNode textNode20 = org.jsoup.nodes.TextNode.createFromEncoded("text", "text");
        java.lang.StringBuilder stringBuilder21 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        outputSettings23.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings23.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings29.encoder();
        int int31 = outputSettings29.indentAmount;
        outputSettings29.setforceAllElementAsBlock(false);
        textNode20.outerHtmlTail(stringBuilder21, 0, outputSettings29);
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings29.getcharsetEncoder();
        outputSettings16.charsetEncoder = charsetEncoder35;
        outputSettings12.setcharsetEncoder(charsetEncoder35);
        boolean boolean38 = outputSettings12.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(escapeMode15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node4 = textNode2.clone();
        org.jsoup.nodes.Document document5 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node8 = textNode2.attr("hi!", "");
        org.jsoup.nodes.Attributes attributes9 = textNode2.attributes();
        org.jsoup.nodes.Node node10 = textNode2.clone();
        java.lang.String str11 = textNode2.text();
        org.jsoup.select.NodeVisitor nodeVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = textNode2.traverse(nodeVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(attributes9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset8 = outputSettings7.charset();
        outputSettings6.charset = charset8;
        outputSettings6.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings6.getcharsetEncoder();
        outputSettings0.charsetEncoder = charsetEncoder12;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.prettyPrint(true);
        outputSettings15.indentAmount = (byte) 100;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings15.getescapeMode();
        java.nio.charset.Charset charset19 = outputSettings15.getcharset();
        boolean boolean20 = outputSettings15.forceAllElementAsBlock;
        outputSettings15.forceAllElementAsBlock = true;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings15.clone();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNull(escapeMode18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(true);
        boolean boolean11 = outputSettings8.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings12.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        boolean boolean21 = outputSettings17.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings17.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings25.charset = charset27;
        outputSettings25.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        int int34 = outputSettings31.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings31.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        outputSettings37.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset43 = outputSettings42.charset();
        outputSettings37.setcharset(charset43);
        outputSettings36.setcharset(charset43);
        outputSettings31.setcharset(charset43);
        outputSettings25.setcharset(charset43);
        outputSettings23.setcharset(charset43);
        outputSettings12.setcharset(charset43);
        outputSettings8.setcharset(charset43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings8.getescapeMode();
        java.nio.charset.Charset charset52 = outputSettings8.charset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset52);
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings43.prettyPrint(false);
        int int49 = outputSettings48.getindentAmount();
        outputSettings48.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings48.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        boolean boolean56 = outputSettings53.getprettyPrint();
        boolean boolean57 = outputSettings53.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings53.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings59.escapeMode();
        outputSettings48.setescapeMode(escapeMode60);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings15.escapeMode(escapeMode60);
        java.nio.charset.Charset charset63 = outputSettings62.charset();
        boolean boolean64 = outputSettings62.getprettyPrint();
        textNode2.outerHtmlTail(stringBuilder8, (int) '4', outputSettings62);
        boolean boolean67 = textNode2.hasAttr("#");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        int int10 = outputSettings6.indentAmount();
        outputSettings6.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings6.prettyPrint(true);
        boolean boolean15 = outputSettings6.getforceAllElementAsBlock();
        int int16 = outputSettings6.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings17.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings17.getcharsetEncoder();
        outputSettings17.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings17.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        outputSettings25.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings25.setcharset(charset31);
        outputSettings25.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings35.charset = charset37;
        outputSettings35.indentAmount = (-1);
        java.nio.charset.Charset charset41 = outputSettings35.charset();
        outputSettings35.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset44 = outputSettings35.getcharset();
        outputSettings25.setcharset(charset44);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings17.charset(charset44);
        org.jsoup.nodes.TextNode textNode47 = new org.jsoup.nodes.TextNode();
        textNode47.setBaseUri("hi!");
        java.lang.String str50 = textNode47.getTEXT_KEY();
        textNode47.text = "hi!";
        boolean boolean54 = textNode47.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList55 = textNode47.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        boolean boolean59 = outputSettings56.getprettyPrint();
        boolean boolean60 = outputSettings56.forceAllElementAsBlock();
        boolean boolean61 = outputSettings56.forceAllElementAsBlock;
        boolean boolean62 = textNode47.equals((java.lang.Object) outputSettings56);
        java.nio.charset.CharsetEncoder charsetEncoder63 = outputSettings56.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings56.getcharsetEncoder();
        outputSettings46.setcharsetEncoder(charsetEncoder64);
        outputSettings6.charsetEncoder = charsetEncoder64;
        outputSettings6.forceAllElementAsBlock = false;
        outputSettings6.forceAllElementAsBlock = false;
        boolean boolean71 = outputSettings6.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "text" + "'", str50, "text");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charsetEncoder63);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        boolean boolean4 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        outputSettings2.setprettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.String str3 = textNode2.nodeName();
        java.lang.String str5 = textNode2.absUrl("t");
        org.jsoup.nodes.Attributes attributes6 = textNode2.attributes();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings9.setcharset(charset15);
        outputSettings9.setprettyPrint(true);
        java.nio.charset.Charset charset19 = outputSettings9.getcharset();
        outputSettings9.setprettyPrint(true);
        boolean boolean22 = outputSettings9.prettyPrint;
        boolean boolean23 = outputSettings9.forceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder7, 1, outputSettings9);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node26 = textNode2.before("i");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        int int9 = textNode2.siblingIndex();
        boolean boolean10 = textNode2.isBlank();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("ext");
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode15.childNodes();
        java.lang.String str18 = textNode15.getWholeText();
        java.lang.String str19 = textNode15.text();
        org.jsoup.nodes.Attributes attributes20 = textNode15.attributes();
        boolean boolean21 = textNode15.isBlank();
        // The following exception was thrown during execution in test generation
        try {
            textNode12.replaceWith((org.jsoup.nodes.Node) textNode15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean4 = textNode2.hasAttr("");
        textNode2.setBaseUri("t");
        java.lang.String str7 = textNode2.text;
        org.jsoup.nodes.Node node10 = textNode2.attr("#text", "");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(false);
        outputSettings0.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset10 = outputSettings0.charset;
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings0.getescapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("t");
        org.jsoup.nodes.Node node5 = textNode2.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode7 = textNode2.splitText((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str3 = textNode2.text;
        int int4 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.text;
        java.lang.String str7 = textNode2.attr("");
        java.lang.String str8 = textNode2.nodeName();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        java.lang.String str10 = textNode2.text();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) '4');
        java.lang.Class<?> wildcardClass15 = outputSettings12.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings4.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings4.prettyPrint(true);
        boolean boolean9 = outputSettings8.prettyPrint();
        boolean boolean10 = outputSettings8.getforceAllElementAsBlock();
        boolean boolean11 = textNode2.equals((java.lang.Object) outputSettings8);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.prettyPrint();
        java.nio.charset.Charset charset15 = outputSettings12.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings8.charset(charset15);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        outputSettings17.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings17.setcharset(charset23);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings25.encoder();
        outputSettings17.setcharsetEncoder(charsetEncoder27);
        boolean boolean29 = outputSettings17.forceAllElementAsBlock();
        boolean boolean30 = outputSettings17.prettyPrint();
        outputSettings17.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings17.clone();
        java.nio.charset.Charset charset34 = outputSettings33.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings33.escapeMode;
        outputSettings16.setescapeMode(escapeMode35);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        java.lang.String str8 = textNode0.getWholeText();
        org.jsoup.nodes.Node node9 = textNode0.parent();
        org.jsoup.nodes.TextNode textNode11 = textNode0.text("i!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(textNode11);
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        int int9 = textNode2.siblingIndex();
        boolean boolean11 = textNode2.hasAttr("t");
        org.jsoup.nodes.Node node12 = textNode2.clone();
        textNode2.ensureAttributes();
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.encoder();
        boolean boolean21 = outputSettings16.prettyPrint;
        java.nio.charset.Charset charset22 = outputSettings16.charset;
        boolean boolean23 = outputSettings16.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.encoder();
        boolean boolean29 = outputSettings24.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings24.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings16.escapeMode(escapeMode30);
        boolean boolean32 = outputSettings16.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        int int36 = outputSettings33.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings33.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        outputSettings39.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset45 = outputSettings44.charset();
        outputSettings39.setcharset(charset45);
        outputSettings38.setcharset(charset45);
        outputSettings33.setcharset(charset45);
        outputSettings16.charset = charset45;
        java.nio.charset.CharsetEncoder charsetEncoder50 = outputSettings16.encoder();
        textNode2.outerHtmlTail(stringBuilder14, 0, outputSettings16);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node53 = textNode2.before("i");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(charsetEncoder50);
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock;
        boolean boolean8 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.indentAmount((int) (byte) 100);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings0.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        boolean boolean17 = outputSettings14.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings14.prettyPrint(false);
        java.nio.charset.Charset charset20 = null;
        outputSettings19.setcharset(charset20);
        boolean boolean22 = outputSettings19.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings19.prettyPrint(false);
        int int25 = outputSettings19.indentAmount();
        boolean boolean26 = outputSettings19.forceAllElementAsBlock;
        java.nio.charset.Charset charset27 = outputSettings19.getcharset();
        java.nio.charset.Charset charset28 = outputSettings19.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        boolean boolean32 = outputSettings29.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings29.prettyPrint(false);
        outputSettings29.setforceAllElementAsBlock(false);
        outputSettings29.setindentAmount((int) (byte) 0);
        java.nio.charset.Charset charset39 = outputSettings29.charset;
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings29.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings29.prettyPrint(false);
        int int43 = outputSettings42.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings42.getescapeMode();
        java.nio.charset.Charset charset45 = outputSettings42.charset();
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings42.getcharsetEncoder();
        outputSettings19.setcharsetEncoder(charsetEncoder46);
        outputSettings13.charsetEncoder = charsetEncoder46;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charset27);
        org.junit.Assert.assertNull(charset28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(charsetEncoder46);
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset3 = outputSettings0.charset;
        boolean boolean4 = outputSettings0.prettyPrint;
        outputSettings0.setforceAllElementAsBlock(true);
        boolean boolean7 = outputSettings0.prettyPrint();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings0.escapeMode();
        boolean boolean13 = outputSettings0.getprettyPrint();
        boolean boolean14 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings0.getescapeMode();
        outputSettings0.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings0.clone();
        outputSettings0.prettyPrint = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings19);
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings3.prettyPrint(true);
        java.nio.charset.Charset charset9 = outputSettings8.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings12.clone();
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings12.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings8.escapeMode(escapeMode15);
        int int17 = outputSettings8.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings8.escapeMode();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        boolean boolean23 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode26 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = textNode26.equals((java.lang.Object) outputSettings27);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings27.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings0.escapeMode(escapeMode30);
        java.nio.charset.Charset charset32 = outputSettings0.getcharset();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(charset32);
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("ext", "text");
        java.lang.String str3 = textNode2.nodeName();
        java.lang.String str4 = textNode2.getWholeText();
        java.lang.String str5 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode2.siblingNodes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ext" + "'", str4, "ext");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertNotNull(nodeList6);
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        textNode0.text = "#text";
        java.lang.String str12 = textNode0.attr("#text");
        org.jsoup.nodes.Node node13 = textNode0.nextSibling();
        org.jsoup.nodes.Node node14 = textNode0.parent();
        boolean boolean16 = textNode0.hasAttr("i!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "");
        org.jsoup.nodes.Node node3 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node7 = textNode2.before("t");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(textNode5);
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        org.jsoup.nodes.TextNode textNode13 = textNode2.splitText(1);
        org.jsoup.nodes.Node node16 = textNode2.attr("text", "t");
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node18 = textNode2.clone();
        java.lang.String str19 = textNode2.text;
        org.jsoup.nodes.TextNode textNode21 = textNode2.text("hi!");
        java.lang.String str22 = textNode21.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "h" + "'", str19, "h");
        org.junit.Assert.assertNotNull(textNode21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        outputSettings7.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings7.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        outputSettings22.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings22.setescapeMode(escapeMode29);
        boolean boolean31 = outputSettings22.forceAllElementAsBlock;
        int int32 = outputSettings22.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings22.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings35.setescapeMode(escapeMode38);
        outputSettings35.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings35.setescapeMode(escapeMode42);
        boolean boolean44 = outputSettings35.forceAllElementAsBlock;
        int int45 = outputSettings35.indentAmount;
        java.nio.charset.Charset charset46 = outputSettings35.getcharset();
        outputSettings34.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset46);
        int int49 = outputSettings48.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 0, outputSettings48);
        outputSettings48.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        outputSettings53.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings53.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder60 = outputSettings53.charsetEncoder;
        outputSettings48.setcharsetEncoder(charsetEncoder60);
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings48.escapeMode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charsetEncoder60);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        boolean boolean7 = textNode2.isBlank();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        java.lang.String str9 = textNode2.gettext();
        int int10 = textNode2.siblingIndex();
        java.lang.String str11 = textNode2.baseUri();
        org.jsoup.nodes.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = textNode2.before(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        org.jsoup.nodes.Document document9 = textNode6.ownerDocument();
        java.lang.String str11 = textNode6.attr("#");
        boolean boolean13 = textNode6.hasAttr("#");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertNull(document9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        textNode2.setBaseUri("hi!");
        java.lang.String str10 = textNode2.attr("");
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("t");
        org.jsoup.select.NodeVisitor nodeVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = textNode2.traverse(nodeVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(true);
        boolean boolean11 = outputSettings8.prettyPrint;
        outputSettings8.setforceAllElementAsBlock(false);
        boolean boolean14 = outputSettings8.forceAllElementAsBlock;
        boolean boolean15 = outputSettings8.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.encoder();
        outputSettings16.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings16.escapeMode;
        outputSettings16.prettyPrint = false;
        java.nio.charset.Charset charset26 = outputSettings16.getcharset();
        outputSettings16.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings16.charsetEncoder;
        outputSettings8.charsetEncoder = charsetEncoder29;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = outputSettings36.forceAllElementAsBlock;
        boolean boolean39 = outputSettings36.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset42 = outputSettings41.charset();
        outputSettings40.charset = charset42;
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings40.encoder();
        boolean boolean45 = outputSettings40.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings40.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings36.escapeMode(escapeMode46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings31.escapeMode(escapeMode46);
        boolean boolean49 = outputSettings48.getforceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings48.escapeMode;
        java.nio.charset.Charset charset51 = outputSettings48.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings8.charset(charset51);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings52.charset("#");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: #");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(outputSettings52);
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "ext");
        boolean boolean3 = textNode2.isBlank();
        java.lang.String str5 = textNode2.attr("#");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings0.escapeMode();
        boolean boolean13 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = textNode16.equals((java.lang.Object) outputSettings17);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings17.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.escapeMode(escapeMode20);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings0.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings0.charset;
        outputSettings0.setforceAllElementAsBlock(false);
        boolean boolean26 = outputSettings0.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        int int1 = textNode0.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        java.nio.charset.Charset charset16 = outputSettings5.getcharset();
        outputSettings2.charset = charset16;
        boolean boolean18 = textNode0.equals((java.lang.Object) outputSettings2);
        boolean boolean19 = textNode0.isBlank();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = null;
        outputSettings20.setescapeMode(escapeMode23);
        boolean boolean25 = outputSettings20.prettyPrint;
        outputSettings20.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings28.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings31.setescapeMode(escapeMode34);
        outputSettings31.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings31.setescapeMode(escapeMode38);
        boolean boolean40 = outputSettings31.forceAllElementAsBlock;
        int int41 = outputSettings31.indentAmount;
        java.nio.charset.Charset charset42 = outputSettings31.getcharset();
        outputSettings28.charset = charset42;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings20.charset(charset42);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings44);
        java.nio.charset.Charset charset46 = outputSettings44.charset();
        boolean boolean47 = outputSettings44.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings44.getescapeMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(escapeMode48);
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        boolean boolean5 = textNode2.hasAttr("hi!");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        boolean boolean7 = textNode2.isBlank();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode6.childNodes();
        java.lang.String str11 = textNode6.absUrl("i!");
        org.jsoup.nodes.Node node14 = textNode6.attr("#", "i!");
        java.lang.String str15 = textNode6.baseUri();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.childNodes();
        org.jsoup.nodes.Node node13 = textNode2.removeAttr("text");
        org.jsoup.nodes.Node node16 = textNode2.attr("i!", "");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = node16.before("i");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.forceAllElementAsBlock = false;
        int int7 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.encoder();
        outputSettings8.setprettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings8.charsetEncoder;
        outputSettings0.setcharsetEncoder(charsetEncoder15);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings0.prettyPrint(false);
        boolean boolean19 = outputSettings0.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.absUrl("text");
        textNode2.setBaseUri("#text");
        textNode2.setBaseUri("i!");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.Document document11 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node12 = textNode2.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = node12.previousSibling();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNull(document11);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.settext("text");
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.String str8 = textNode0.absUrl("text");
        boolean boolean9 = textNode0.isBlank();
        org.jsoup.nodes.Document document10 = textNode0.ownerDocument();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(document10);
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        int int9 = textNode0.siblingIndex();
        textNode0.settext("i!");
        java.lang.String str12 = textNode0.nodeName();
        org.jsoup.nodes.Node node14 = textNode0.removeAttr("i!");
        node14.setBaseUri("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        outputSettings6.setprettyPrint(false);
        boolean boolean9 = outputSettings6.prettyPrint();
        java.nio.charset.Charset charset10 = outputSettings6.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings6.clone();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings11);
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        org.jsoup.nodes.Node node26 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.TextNode textNode28 = textNode2.text("ext");
        java.lang.String str29 = textNode28.baseUri();
        java.lang.StringBuilder stringBuilder30 = null;
        org.jsoup.nodes.TextNode textNode34 = new org.jsoup.nodes.TextNode("text", "text");
        int int35 = textNode34.siblingIndex();
        int int36 = textNode34.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList37 = textNode34.childNodes();
        java.lang.StringBuilder stringBuilder38 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        int int43 = outputSettings40.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings40.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        outputSettings46.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset52 = outputSettings51.charset();
        outputSettings46.setcharset(charset52);
        outputSettings45.setcharset(charset52);
        outputSettings40.setcharset(charset52);
        textNode34.outerHtmlTail(stringBuilder38, 10, outputSettings40);
        outputSettings40.setprettyPrint(false);
        java.nio.charset.Charset charset59 = outputSettings40.charset;
        java.nio.charset.Charset charset60 = outputSettings40.charset;
        java.nio.charset.Charset charset61 = outputSettings40.charset;
        // The following exception was thrown during execution in test generation
        try {
            textNode28.outerHtmlHead(stringBuilder30, (int) (short) 1, outputSettings40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(textNode28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "text" + "'", str29, "text");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(charset61);
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        boolean boolean13 = outputSettings9.forceAllElementAsBlock();
        boolean boolean14 = outputSettings9.forceAllElementAsBlock;
        boolean boolean15 = textNode0.equals((java.lang.Object) outputSettings9);
        org.jsoup.nodes.Attributes attributes16 = textNode0.attributes();
        java.lang.String str17 = textNode0.outerHtml();
        org.jsoup.nodes.Node node18 = textNode0.parent();
        java.lang.String str19 = textNode0.baseUri();
        org.jsoup.nodes.Node node20 = textNode0.parent();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.nodeName();
        org.jsoup.nodes.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings14.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings14.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings14.forceAllElementAsBlock(true);
        int int21 = outputSettings14.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.prettyPrint(true);
        boolean boolean5 = outputSettings4.getprettyPrint();
        boolean boolean6 = outputSettings4.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings13.setcharset(charset19);
        outputSettings12.setcharset(charset19);
        outputSettings7.setcharset(charset19);
        int int23 = outputSettings7.getindentAmount();
        boolean boolean24 = outputSettings7.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings25.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = null;
        outputSettings25.setescapeMode(escapeMode28);
        boolean boolean30 = outputSettings25.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset33 = outputSettings32.charset();
        outputSettings31.charset = charset33;
        outputSettings31.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings31.getcharsetEncoder();
        outputSettings25.charsetEncoder = charsetEncoder37;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings25.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        int int44 = outputSettings41.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings41.getcharsetEncoder();
        boolean boolean46 = outputSettings41.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean48 = outputSettings47.prettyPrint;
        boolean boolean49 = outputSettings47.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = null;
        outputSettings47.setescapeMode(escapeMode50);
        outputSettings47.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = null;
        outputSettings47.setescapeMode(escapeMode54);
        boolean boolean56 = outputSettings47.forceAllElementAsBlock;
        int int57 = outputSettings47.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings47.escapeMode(escapeMode58);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = null;
        outputSettings60.setescapeMode(escapeMode63);
        outputSettings60.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = null;
        outputSettings60.setescapeMode(escapeMode67);
        boolean boolean69 = outputSettings60.forceAllElementAsBlock;
        int int70 = outputSettings60.indentAmount;
        java.nio.charset.Charset charset71 = outputSettings60.getcharset();
        outputSettings59.setcharset(charset71);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings41.charset(charset71);
        outputSettings40.charset = charset71;
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings7.charset(charset71);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings75.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset78 = outputSettings75.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings75.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings4.escapeMode(escapeMode79);
        boolean boolean81 = outputSettings4.prettyPrint();
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(charset71);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        boolean boolean13 = outputSettings9.forceAllElementAsBlock();
        boolean boolean14 = outputSettings9.forceAllElementAsBlock;
        boolean boolean15 = textNode0.equals((java.lang.Object) outputSettings9);
        java.lang.String str16 = textNode0.text;
        org.jsoup.nodes.Node node17 = textNode0.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode0.siblingNodes();
        java.lang.String str19 = textNode0.outerHtml();
        org.jsoup.nodes.TextNode textNode22 = new org.jsoup.nodes.TextNode("i!", "");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node23 = textNode0.before((org.jsoup.nodes.Node) textNode22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        org.jsoup.nodes.Node node8 = textNode5.attr("hi!", "t");
        java.lang.String str10 = textNode5.attr("#text");
        java.lang.String str11 = textNode5.getTEXT_KEY();
        java.lang.String str13 = textNode5.absUrl("t");
        org.jsoup.nodes.Node node14 = textNode5.clone();
        int int15 = textNode5.siblingIndex();
        int int16 = textNode5.siblingIndex();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("t");
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("ext");
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode("text", "text");
        int int14 = textNode13.siblingIndex();
        int int15 = textNode13.siblingIndex();
        org.jsoup.nodes.Node node16 = textNode13.clone();
        java.lang.String str17 = textNode13.text;
        java.lang.String str18 = textNode13.nodeName();
        java.lang.String str19 = textNode13.getWholeText();
        boolean boolean20 = textNode13.isBlank();
        textNode13.settext("text");
        org.jsoup.nodes.Node node23 = textNode13.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            textNode10.replaceWith((org.jsoup.nodes.Node) textNode13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#text" + "'", str18, "#text");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        textNode2.ensureAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node5 = textNode2.removeAttr("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.parent();
        boolean boolean7 = textNode2.equals((java.lang.Object) 1L);
        org.jsoup.nodes.Node node10 = textNode2.attr("#text", "t");
        java.lang.String str11 = textNode2.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = textNode2.before("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        java.lang.String str9 = textNode6.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode11 = textNode6.splitText((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.Document document6 = textNode0.ownerDocument();
        java.lang.String str7 = textNode0.outerHtml();
        java.lang.String str8 = textNode0.gettext();
        org.jsoup.nodes.Node node11 = textNode0.attr("h", "i!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = textNode0.after("h");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.toString();
        java.lang.String str9 = textNode2.absUrl("hi!");
        textNode2.text = "#";
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        boolean boolean9 = textNode7.isBlank();
        java.lang.String str10 = textNode7.text;
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings15.clone();
        outputSettings15.prettyPrint = true;
        textNode7.outerHtmlTail(stringBuilder11, (int) (short) 0, outputSettings15);
        java.lang.String str20 = textNode7.toString();
        java.lang.String str22 = textNode7.absUrl("ext");
        java.lang.String str23 = textNode7.nodeName();
        org.jsoup.nodes.TextNode textNode25 = textNode7.text("t");
        int int26 = textNode25.siblingIndex();
        java.lang.String str27 = textNode25.getTEXT_KEY();
        int int28 = textNode25.siblingIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#text" + "'", str23, "#text");
        org.junit.Assert.assertNotNull(textNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "text" + "'", str27, "text");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode8.toString();
        java.lang.String str10 = textNode8.text();
        org.jsoup.nodes.TextNode textNode12 = textNode8.splitText(0);
        org.jsoup.nodes.Document document13 = textNode12.ownerDocument();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ext" + "'", str9, "ext");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ext" + "'", str10, "ext");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNull(document13);
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        int int15 = outputSettings14.getindentAmount();
        outputSettings14.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings18.charset = charset20;
        outputSettings18.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        int int27 = outputSettings24.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings30.setcharset(charset36);
        outputSettings29.setcharset(charset36);
        outputSettings24.setcharset(charset36);
        outputSettings18.setcharset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(false);
        int int48 = outputSettings47.getindentAmount();
        outputSettings47.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        boolean boolean56 = outputSettings52.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings52.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        outputSettings47.setescapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings14.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings0.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings64.clone();
        boolean boolean66 = outputSettings64.forceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode69 = new org.jsoup.nodes.TextNode("text", "text");
        int int70 = textNode69.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList71 = textNode69.siblingNodes();
        textNode69.text = "";
        int int74 = textNode69.siblingIndex();
        java.lang.StringBuilder stringBuilder75 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean78 = outputSettings77.prettyPrint;
        boolean boolean79 = outputSettings77.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = null;
        outputSettings77.setescapeMode(escapeMode80);
        boolean boolean82 = outputSettings77.prettyPrint;
        outputSettings77.indentAmount = 1;
        boolean boolean85 = outputSettings77.getforceAllElementAsBlock();
        textNode69.outerHtmlTail(stringBuilder75, (int) (byte) 1, outputSettings77);
        outputSettings77.forceAllElementAsBlock = true;
        java.nio.charset.Charset charset89 = outputSettings77.getcharset();
        outputSettings64.charset = charset89;
        org.jsoup.nodes.Entities.EscapeMode escapeMode91 = outputSettings64.escapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(nodeList71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(charset89);
        org.junit.Assert.assertTrue("'" + escapeMode91 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode91.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Node node12 = textNode2.attr("ext", "#text");
        org.jsoup.nodes.Document document13 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node15 = textNode2.removeAttr("i");
        org.jsoup.nodes.TextNode textNode18 = new org.jsoup.nodes.TextNode("text", "text");
        int int19 = textNode18.siblingIndex();
        int int20 = textNode18.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList21 = textNode18.childNodes();
        java.lang.String str22 = textNode18.getWholeText();
        org.jsoup.nodes.TextNode textNode24 = textNode18.splitText(1);
        java.lang.String str25 = textNode18.gettext();
        textNode18.text = "i!";
        org.jsoup.nodes.Node node28 = textNode18.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node29 = node15.after((org.jsoup.nodes.Node) textNode18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(document13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
        org.junit.Assert.assertNotNull(textNode24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "t" + "'", str25, "t");
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings9.encoder();
        boolean boolean14 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings5.escapeMode(escapeMode15);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings0.escapeMode(escapeMode15);
        boolean boolean18 = outputSettings17.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.clone();
        outputSettings17.setforceAllElementAsBlock(false);
        boolean boolean22 = outputSettings17.forceAllElementAsBlock;
        boolean boolean23 = outputSettings17.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node6 = textNode2.attr("#text", "text");
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings9.setcharset(charset16);
        textNode2.outerHtmlTail(stringBuilder7, 0, outputSettings9);
        boolean boolean20 = outputSettings9.getforceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings9.encoder();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charsetEncoder21);
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = null;
        outputSettings5.setcharset(charset6);
        outputSettings5.setprettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings5.getcharsetEncoder();
        java.nio.charset.Charset charset11 = outputSettings5.charset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNull(charset11);
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        boolean boolean10 = textNode2.isBlank();
        int int11 = textNode2.siblingIndex();
        java.lang.String str12 = textNode2.gettext();
        org.jsoup.nodes.Node node13 = textNode2.clone();
        java.lang.Class<?> wildcardClass14 = node13.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        java.nio.charset.CharsetEncoder charsetEncoder2 = outputSettings0.encoder();
        boolean boolean3 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean4 = outputSettings0.prettyPrint();
        org.jsoup.nodes.TextNode textNode7 = new org.jsoup.nodes.TextNode("text", "text");
        int int8 = textNode7.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode7.childNodes();
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings12.setprettyPrint(true);
        java.nio.charset.Charset charset22 = outputSettings12.getcharset();
        outputSettings12.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings12.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        outputSettings27.setescapeMode(escapeMode30);
        outputSettings27.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null;
        outputSettings27.setescapeMode(escapeMode34);
        boolean boolean36 = outputSettings27.forceAllElementAsBlock;
        int int37 = outputSettings27.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings27.escapeMode(escapeMode38);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = null;
        outputSettings40.setescapeMode(escapeMode43);
        outputSettings40.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = null;
        outputSettings40.setescapeMode(escapeMode47);
        boolean boolean49 = outputSettings40.forceAllElementAsBlock;
        int int50 = outputSettings40.indentAmount;
        java.nio.charset.Charset charset51 = outputSettings40.getcharset();
        outputSettings39.setcharset(charset51);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings26.charset(charset51);
        int int54 = outputSettings53.getindentAmount();
        textNode7.outerHtmlTail(stringBuilder10, (int) (short) 0, outputSettings53);
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        boolean boolean59 = outputSettings56.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings56.prettyPrint(false);
        boolean boolean62 = outputSettings61.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean64 = outputSettings63.prettyPrint;
        boolean boolean65 = outputSettings63.forceAllElementAsBlock;
        boolean boolean66 = outputSettings63.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings63.prettyPrint(false);
        int int69 = outputSettings68.getindentAmount();
        outputSettings68.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset74 = outputSettings73.charset();
        outputSettings72.charset = charset74;
        outputSettings72.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean79 = outputSettings78.prettyPrint;
        boolean boolean80 = outputSettings78.forceAllElementAsBlock;
        int int81 = outputSettings78.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder82 = outputSettings78.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean85 = outputSettings84.prettyPrint;
        boolean boolean86 = outputSettings84.forceAllElementAsBlock;
        outputSettings84.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings89 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset90 = outputSettings89.charset();
        outputSettings84.setcharset(charset90);
        outputSettings83.setcharset(charset90);
        outputSettings78.setcharset(charset90);
        outputSettings72.setcharset(charset90);
        org.jsoup.nodes.Document.OutputSettings outputSettings95 = outputSettings68.charset(charset90);
        java.nio.charset.CharsetEncoder charsetEncoder96 = outputSettings68.getcharsetEncoder();
        outputSettings61.charsetEncoder = charsetEncoder96;
        outputSettings53.setcharsetEncoder(charsetEncoder96);
        outputSettings0.setcharsetEncoder(charsetEncoder96);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(charset90);
        org.junit.Assert.assertNotNull(outputSettings95);
        org.junit.Assert.assertNotNull(charsetEncoder96);
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        textNode2.settext("hi!");
        boolean boolean9 = textNode2.hasAttr("text");
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings12.clone();
        boolean boolean14 = outputSettings13.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        boolean boolean19 = outputSettings15.forceAllElementAsBlock;
        java.nio.charset.Charset charset20 = outputSettings15.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings13.charset(charset20);
        boolean boolean22 = textNode2.equals((java.lang.Object) charset20);
        boolean boolean23 = textNode2.isBlank();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node25 = textNode2.before("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "t");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("t");
        textNode2.settext("hi!");
        java.lang.String str7 = textNode2.outerHtml();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode8.toString();
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        boolean boolean18 = outputSettings15.getprettyPrint();
        boolean boolean19 = outputSettings15.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings15.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings15.getescapeMode();
        outputSettings14.setescapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings14.indentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        outputSettings26.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset32 = outputSettings31.charset();
        outputSettings26.setcharset(charset32);
        outputSettings26.setprettyPrint(true);
        java.nio.charset.Charset charset36 = outputSettings26.getcharset();
        outputSettings26.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings26.forceAllElementAsBlock(false);
        boolean boolean41 = outputSettings26.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings42.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = null;
        outputSettings45.setescapeMode(escapeMode48);
        outputSettings45.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = null;
        outputSettings45.setescapeMode(escapeMode52);
        boolean boolean54 = outputSettings45.forceAllElementAsBlock;
        int int55 = outputSettings45.indentAmount;
        java.nio.charset.Charset charset56 = outputSettings45.getcharset();
        outputSettings42.charset = charset56;
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings42.escapeMode();
        outputSettings26.escapeMode = escapeMode58;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings25.escapeMode(escapeMode58);
        textNode8.outerHtmlTail(stringBuilder10, 10, outputSettings60);
        org.jsoup.nodes.TextNode textNode64 = new org.jsoup.nodes.TextNode("text", "text");
        int int65 = textNode64.siblingIndex();
        int int66 = textNode64.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList67 = textNode64.childNodes();
        boolean boolean69 = textNode64.hasAttr("hi!");
        textNode64.settext("t");
        java.lang.String str72 = textNode64.gettext();
        // The following exception was thrown during execution in test generation
        try {
            textNode8.replaceWith((org.jsoup.nodes.Node) textNode64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ext" + "'", str9, "ext");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(nodeList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "t" + "'", str72, "t");
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode();
        outputSettings0.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings0.encoder();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder10);
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.gettext();
        textNode2.text = "hi!";
        org.jsoup.nodes.Node node12 = textNode2.parent();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = node12.baseUri();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        java.lang.String str11 = textNode2.text;
        java.lang.String str12 = textNode2.gettext();
        org.jsoup.nodes.Node node13 = textNode2.nextSibling();
        org.jsoup.nodes.Node node16 = textNode2.attr("hi!", "t");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.forceAllElementAsBlock(false);
        int int11 = outputSettings0.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.lang.String str7 = textNode6.toString();
        textNode6.ensureAttributes();
        org.jsoup.nodes.Node node9 = textNode6.previousSibling();
        java.lang.String str10 = textNode6.text;
        org.jsoup.nodes.Node node11 = textNode6.parent();
        java.lang.String str13 = textNode6.absUrl("i!");
        textNode6.setBaseUri("i!");
        org.jsoup.nodes.Node node18 = textNode6.attr("i", "");
        java.lang.String str20 = textNode6.attr("#");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("");
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node11 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.baseUri();
        org.jsoup.nodes.Node node6 = textNode2.clone();
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("hi!");
        java.lang.String str11 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("h", "i!");
        org.jsoup.nodes.Node node4 = textNode2.removeAttr("i!");
        java.lang.String str5 = node4.outerHtml();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h" + "'", str5, "h");
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        outputSettings7.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings7.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings22.setescapeMode(escapeMode25);
        outputSettings22.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings22.setescapeMode(escapeMode29);
        boolean boolean31 = outputSettings22.forceAllElementAsBlock;
        int int32 = outputSettings22.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings22.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings35.setescapeMode(escapeMode38);
        outputSettings35.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings35.setescapeMode(escapeMode42);
        boolean boolean44 = outputSettings35.forceAllElementAsBlock;
        int int45 = outputSettings35.indentAmount;
        java.nio.charset.Charset charset46 = outputSettings35.getcharset();
        outputSettings34.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset46);
        int int49 = outputSettings48.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 0, outputSettings48);
        java.lang.String str52 = textNode2.attr("t");
        org.jsoup.nodes.TextNode textNode54 = textNode2.text("text");
        org.jsoup.nodes.TextNode textNode56 = textNode2.splitText((int) (short) 1);
        org.jsoup.nodes.TextNode textNode59 = new org.jsoup.nodes.TextNode("text", "text");
        int int60 = textNode59.siblingIndex();
        int int61 = textNode59.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList62 = textNode59.childNodes();
        java.lang.String str63 = textNode59.getWholeText();
        org.jsoup.nodes.TextNode textNode65 = textNode59.splitText(1);
        java.lang.String str66 = textNode59.gettext();
        boolean boolean68 = textNode59.hasAttr("hi!");
        java.lang.StringBuilder stringBuilder69 = null;
        org.jsoup.nodes.TextNode textNode73 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean75 = outputSettings74.prettyPrint;
        boolean boolean76 = textNode73.equals((java.lang.Object) outputSettings74);
        int int77 = outputSettings74.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean79 = outputSettings78.prettyPrint;
        boolean boolean80 = outputSettings78.forceAllElementAsBlock;
        outputSettings78.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset84 = outputSettings83.charset();
        outputSettings78.setcharset(charset84);
        outputSettings78.setprettyPrint(true);
        java.nio.charset.Charset charset88 = outputSettings78.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder89 = outputSettings78.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode90 = outputSettings78.escapeMode();
        boolean boolean91 = outputSettings78.getprettyPrint();
        boolean boolean92 = outputSettings78.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode93 = outputSettings78.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings94 = outputSettings74.escapeMode(escapeMode93);
        java.nio.charset.Charset charset95 = outputSettings94.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode96 = outputSettings94.escapeMode();
        textNode59.outerHtmlTail(stringBuilder69, (int) (short) 1, outputSettings94);
        boolean boolean98 = textNode2.equals((java.lang.Object) stringBuilder69);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(textNode54);
        org.junit.Assert.assertNotNull(textNode56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeList62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "text" + "'", str63, "text");
        org.junit.Assert.assertNotNull(textNode65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "t" + "'", str66, "t");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(charset84);
        org.junit.Assert.assertNotNull(charset88);
        org.junit.Assert.assertNotNull(charsetEncoder89);
        org.junit.Assert.assertTrue("'" + escapeMode90 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode90.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + escapeMode93 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode93.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings94);
        org.junit.Assert.assertNotNull(charset95);
        org.junit.Assert.assertTrue("'" + escapeMode96 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode96.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        boolean boolean23 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings26.clone();
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        outputSettings0.setcharset(charset28);
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings0.encoder();
        boolean boolean31 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings0.indentAmount((int) (short) 0);
        java.nio.charset.Charset charset34 = outputSettings0.getcharset();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(charset34);
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        textNode2.setBaseUri("text");
        java.lang.String str12 = textNode2.text;
        org.jsoup.nodes.Node node14 = textNode2.removeAttr("text");
        java.lang.String str16 = textNode2.absUrl("ext");
        textNode2.settext("ext");
        org.jsoup.nodes.Node node19 = textNode2.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList20 = textNode2.childNodes();
        org.jsoup.nodes.Node node23 = textNode2.attr("i", "");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "text");
        org.jsoup.nodes.Node node5 = textNode2.attr("hi!", "t");
        org.jsoup.nodes.Attributes attributes6 = textNode2.attributes();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.lang.String str9 = textNode2.attr("");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node11 = textNode2.before("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.getTEXT_KEY();
        java.lang.String str11 = textNode2.absUrl("ext");
        java.lang.String str12 = textNode2.toString();
        java.lang.String str13 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.childNode(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "t" + "'", str12, "t");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "t" + "'", str13, "t");
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        java.nio.charset.Charset charset14 = outputSettings3.getcharset();
        outputSettings0.charset = charset14;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings0.escapeMode();
        java.nio.charset.Charset charset17 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        java.nio.charset.Charset charset25 = outputSettings19.charset();
        boolean boolean26 = outputSettings19.forceAllElementAsBlock();
        java.nio.charset.Charset charset27 = outputSettings19.getcharset();
        boolean boolean28 = outputSettings19.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        int int32 = outputSettings29.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings29.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        outputSettings35.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset41 = outputSettings40.charset();
        outputSettings35.setcharset(charset41);
        outputSettings34.setcharset(charset41);
        outputSettings29.setcharset(charset41);
        int int45 = outputSettings29.getindentAmount();
        outputSettings29.indentAmount = 'a';
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings29.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings19.escapeMode(escapeMode48);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings0.escapeMode(escapeMode48);
        int int51 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings0.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings0.indentAmount((int) '4');
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings54);
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node4 = textNode2.clone();
        org.jsoup.nodes.Document document5 = textNode2.ownerDocument();
        int int6 = textNode2.siblingIndex();
        java.lang.String str7 = textNode2.text();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "");
        org.jsoup.nodes.Attributes attributes3 = textNode2.attributes();
        java.lang.String str4 = textNode2.getWholeText();
        org.jsoup.nodes.Document document5 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("hi!");
        java.lang.String str8 = textNode2.baseUri();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
        org.junit.Assert.assertNull(document5);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        outputSettings8.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        outputSettings8.setcharset(charset26);
        outputSettings8.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        int int39 = outputSettings38.getindentAmount();
        outputSettings38.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        outputSettings8.setcharsetEncoder(charsetEncoder42);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset46 = outputSettings45.charset();
        outputSettings44.charset = charset46;
        outputSettings44.indentAmount = (-1);
        java.nio.charset.Charset charset50 = outputSettings44.charset();
        boolean boolean51 = outputSettings44.forceAllElementAsBlock();
        java.nio.charset.Charset charset52 = outputSettings44.getcharset();
        outputSettings8.setcharset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings7.charset(charset52);
        boolean boolean55 = outputSettings54.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings54.forceAllElementAsBlock(true);
        boolean boolean58 = outputSettings54.prettyPrint;
        boolean boolean59 = outputSettings54.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        outputSettings60.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings60.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean68 = outputSettings67.prettyPrint;
        boolean boolean69 = outputSettings67.forceAllElementAsBlock;
        int int70 = outputSettings67.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings67.charsetEncoder;
        outputSettings60.charsetEncoder = charsetEncoder71;
        outputSettings60.setprettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder75 = outputSettings60.encoder();
        outputSettings54.setcharsetEncoder(charsetEncoder75);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder71);
        org.junit.Assert.assertNotNull(charsetEncoder75);
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        textNode2.setBaseUri("ext");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node7 = textNode2.childNode((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("ext", "text");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        outputSettings3.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings3.getcharsetEncoder();
        boolean boolean9 = outputSettings3.getprettyPrint();
        boolean boolean10 = textNode2.equals((java.lang.Object) outputSettings3);
        org.jsoup.nodes.Node node11 = textNode2.parent();
        org.jsoup.select.NodeVisitor nodeVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = node11.traverse(nodeVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode5.childNodes();
        org.jsoup.nodes.Document document7 = textNode5.ownerDocument();
        org.jsoup.nodes.TextNode textNode9 = textNode5.text("text");
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(nodeList6);
        org.junit.Assert.assertNull(document7);
        org.junit.Assert.assertNotNull(textNode9);
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        outputSettings0.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        outputSettings15.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings15.getcharsetEncoder();
        outputSettings15.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        outputSettings23.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings23.forceAllElementAsBlock(true);
        boolean boolean30 = outputSettings29.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        java.nio.charset.CharsetEncoder charsetEncoder41 = outputSettings39.encoder();
        outputSettings31.setcharsetEncoder(charsetEncoder41);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        int int46 = outputSettings43.getindentAmount();
        boolean boolean47 = outputSettings43.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings43.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings43.getcharsetEncoder();
        outputSettings31.setcharsetEncoder(charsetEncoder49);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings31.prettyPrint(false);
        outputSettings52.setindentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        outputSettings55.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset61 = outputSettings60.charset();
        outputSettings55.setcharset(charset61);
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset64 = outputSettings63.charset();
        java.nio.charset.CharsetEncoder charsetEncoder65 = outputSettings63.encoder();
        outputSettings55.setcharsetEncoder(charsetEncoder65);
        java.nio.charset.Charset charset67 = outputSettings55.getcharset();
        outputSettings52.charset = charset67;
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings52.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings29.escapeMode(escapeMode69);
        java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings29.encoder();
        outputSettings15.charsetEncoder = charsetEncoder71;
        outputSettings0.charsetEncoder = charsetEncoder71;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(charsetEncoder41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertNotNull(charsetEncoder49);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(charsetEncoder65);
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertNotNull(charsetEncoder71);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        boolean boolean5 = textNode2.hasAttr("hi!");
        int int6 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node7 = textNode2.nextSibling();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        int int9 = textNode2.siblingIndex();
        boolean boolean11 = textNode2.hasAttr("t");
        org.jsoup.nodes.Node node12 = textNode2.clone();
        org.jsoup.nodes.Document document13 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode16 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str18 = textNode16.absUrl("t");
        textNode16.setBaseUri("");
        java.lang.String str21 = textNode16.text();
        org.jsoup.nodes.Node node22 = textNode16.clone();
        boolean boolean23 = textNode2.equals((java.lang.Object) textNode16);
        org.jsoup.nodes.TextNode textNode26 = new org.jsoup.nodes.TextNode("text", "hi!");
        textNode26.ensureAttributes();
        org.jsoup.nodes.Node node28 = textNode26.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            textNode16.replaceWith(node28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(document13);
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.getTEXT_KEY();
        java.lang.String str11 = textNode2.attr("");
        java.lang.String str12 = textNode2.gettext();
        org.jsoup.nodes.Node node13 = textNode2.nextSibling();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.getforceAllElementAsBlock();
        boolean boolean16 = outputSettings14.getprettyPrint();
        outputSettings14.setprettyPrint(false);
        int int19 = outputSettings14.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings14.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset22 = outputSettings14.getcharset();
        boolean boolean23 = textNode2.equals((java.lang.Object) charset22);
        org.jsoup.nodes.Document document24 = textNode2.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = document24.siblingIndex();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "t" + "'", str12, "t");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(document24);
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset3 = outputSettings0.charset;
        boolean boolean4 = outputSettings0.prettyPrint;
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        java.nio.charset.Charset charset9 = outputSettings7.charset();
        outputSettings7.prettyPrint = true;
        int int12 = outputSettings7.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings7.getcharsetEncoder();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder13);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode11 = textNode2.splitText((int) (short) 1);
        org.jsoup.nodes.Node node12 = textNode2.clone();
        org.jsoup.nodes.Node node14 = textNode2.removeAttr("text");
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("text", "text");
        int int18 = textNode17.siblingIndex();
        int int19 = textNode17.siblingIndex();
        org.jsoup.nodes.Node node22 = textNode17.attr("#text", "");
        boolean boolean23 = textNode17.isBlank();
        org.jsoup.nodes.Attributes attributes24 = textNode17.attributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node25 = node14.before((org.jsoup.nodes.Node) textNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(attributes24);
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset7 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings10.setescapeMode(escapeMode13);
        boolean boolean15 = outputSettings10.prettyPrint;
        outputSettings10.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = null;
        outputSettings18.setescapeMode(escapeMode21);
        outputSettings18.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = null;
        outputSettings18.setescapeMode(escapeMode25);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings18.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings28.escapeMode;
        outputSettings28.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings28.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        boolean boolean37 = outputSettings33.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings33.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode();
        outputSettings28.setescapeMode(escapeMode40);
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings28.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings10.escapeMode(escapeMode42);
        boolean boolean44 = outputSettings10.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset47 = outputSettings46.charset();
        outputSettings45.charset = charset47;
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings45.encoder();
        outputSettings45.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings45.escapeMode;
        outputSettings45.prettyPrint = false;
        java.nio.charset.Charset charset55 = outputSettings45.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder56 = outputSettings45.encoder();
        boolean boolean57 = outputSettings45.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings45.getescapeMode();
        outputSettings10.setescapeMode(escapeMode58);
        outputSettings0.setescapeMode(escapeMode58);
        java.nio.charset.Charset charset61 = outputSettings0.getcharset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNull(escapeMode29);
        org.junit.Assert.assertNull(escapeMode32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(charsetEncoder49);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(charsetEncoder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset61);
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.Charset charset9 = outputSettings0.getcharset();
        boolean boolean10 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings11.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.clone();
        outputSettings13.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        boolean boolean19 = outputSettings16.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings16.prettyPrint(false);
        int int22 = outputSettings21.getindentAmount();
        outputSettings21.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings25.charset = charset27;
        outputSettings25.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        int int34 = outputSettings31.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings31.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        outputSettings37.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset43 = outputSettings42.charset();
        outputSettings37.setcharset(charset43);
        outputSettings36.setcharset(charset43);
        outputSettings31.setcharset(charset43);
        outputSettings25.setcharset(charset43);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings21.charset(charset43);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        boolean boolean52 = outputSettings49.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings49.prettyPrint(false);
        int int55 = outputSettings54.getindentAmount();
        outputSettings54.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings54.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        boolean boolean62 = outputSettings59.getprettyPrint();
        boolean boolean63 = outputSettings59.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings59.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.escapeMode();
        outputSettings54.setescapeMode(escapeMode66);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings21.escapeMode(escapeMode66);
        outputSettings13.setescapeMode(escapeMode66);
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings0.escapeMode(escapeMode66);
        boolean boolean71 = outputSettings0.getforceAllElementAsBlock();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings0.charset("text");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: text");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings0.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings0.forceAllElementAsBlock(true);
        boolean boolean5 = outputSettings4.prettyPrint();
        int int6 = outputSettings4.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings4.getcharsetEncoder();
        java.lang.Class<?> wildcardClass8 = outputSettings4.getClass();
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        int int9 = outputSettings6.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings6.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings11.setcharset(charset18);
        outputSettings6.setcharset(charset18);
        outputSettings0.setcharset(charset18);
        boolean boolean23 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode26 = new org.jsoup.nodes.TextNode("text", "text");
        int int27 = textNode26.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList28 = textNode26.siblingNodes();
        textNode26.text = "";
        java.lang.String str31 = textNode26.baseUri();
        java.lang.String str33 = textNode26.attr("");
        org.jsoup.nodes.Document document34 = textNode26.ownerDocument();
        java.lang.String str35 = textNode26.text;
        java.lang.StringBuilder stringBuilder36 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        int int41 = outputSettings38.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        outputSettings44.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset50 = outputSettings49.charset();
        outputSettings44.setcharset(charset50);
        outputSettings43.setcharset(charset50);
        outputSettings38.setcharset(charset50);
        textNode26.outerHtmlTail(stringBuilder36, 0, outputSettings38);
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings38.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings0.escapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings56.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean59 = outputSettings58.prettyPrint;
        outputSettings58.prettyPrint = false;
        outputSettings58.setforceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings58.getcharsetEncoder();
        outputSettings57.charsetEncoder = charsetEncoder64;
        boolean boolean66 = outputSettings57.prettyPrint;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "text" + "'", str31, "text");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(document34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean4 = textNode2.hasAttr("");
        boolean boolean5 = textNode2.isBlank();
        java.lang.String str6 = textNode2.getTEXT_KEY();
        java.lang.String str7 = textNode2.text;
        boolean boolean9 = textNode2.hasAttr("");
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        outputSettings12.setprettyPrint(true);
        java.nio.charset.Charset charset22 = outputSettings12.getcharset();
        outputSettings12.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings12.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings28.setescapeMode(escapeMode31);
        outputSettings28.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        outputSettings28.setescapeMode(escapeMode35);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings28.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.escapeMode;
        outputSettings38.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings38.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings43.prettyPrint(false);
        java.nio.charset.Charset charset49 = outputSettings43.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings43.getescapeMode();
        outputSettings38.escapeMode = escapeMode50;
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings38.escapeMode();
        outputSettings26.setescapeMode(escapeMode52);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings26.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        boolean boolean58 = outputSettings56.forceAllElementAsBlock;
        outputSettings56.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings56.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder63 = outputSettings62.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings62.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.getescapeMode();
        outputSettings55.escapeMode = escapeMode66;
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder10, 97, outputSettings55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNull(escapeMode39);
        org.junit.Assert.assertNull(escapeMode42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(charsetEncoder63);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.toString();
        java.lang.String str9 = textNode2.absUrl("hi!");
        java.lang.String str11 = textNode2.absUrl("text");
        java.lang.String str12 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.setindentAmount((int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        outputSettings2.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        int int11 = outputSettings10.getindentAmount();
        outputSettings10.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings14.charset = charset16;
        outputSettings14.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        int int23 = outputSettings20.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings20.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        outputSettings26.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset32 = outputSettings31.charset();
        outputSettings26.setcharset(charset32);
        outputSettings25.setcharset(charset32);
        outputSettings20.setcharset(charset32);
        outputSettings14.setcharset(charset32);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings10.charset(charset32);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        boolean boolean41 = outputSettings38.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings38.prettyPrint(false);
        int int44 = outputSettings43.getindentAmount();
        outputSettings43.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings43.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        boolean boolean51 = outputSettings48.getprettyPrint();
        boolean boolean52 = outputSettings48.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings48.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings54.escapeMode();
        outputSettings43.setescapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings10.escapeMode(escapeMode55);
        outputSettings2.setescapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        boolean boolean62 = outputSettings59.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings59.prettyPrint(false);
        int int65 = outputSettings64.getindentAmount();
        outputSettings64.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder68 = outputSettings64.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean70 = outputSettings69.prettyPrint;
        boolean boolean71 = outputSettings69.forceAllElementAsBlock;
        boolean boolean72 = outputSettings69.getprettyPrint();
        boolean boolean73 = outputSettings69.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings69.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings75.escapeMode();
        outputSettings64.setescapeMode(escapeMode76);
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings2.escapeMode(escapeMode76);
        outputSettings2.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings2.forceAllElementAsBlock(false);
        outputSettings82.setforceAllElementAsBlock(false);
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertNotNull(outputSettings82);
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        java.nio.charset.Charset charset8 = outputSettings0.getcharset();
        boolean boolean9 = outputSettings0.prettyPrint();
        boolean boolean10 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean11 = outputSettings0.prettyPrint;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings0.charsetEncoder;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(charsetEncoder12);
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Node node9 = textNode0.nextSibling();
        java.lang.String str10 = textNode0.nodeName();
        java.lang.String str12 = textNode0.attr("i!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        int int9 = textNode2.siblingIndex();
        java.lang.String str10 = textNode2.getTEXT_KEY();
        java.lang.String str12 = textNode2.absUrl("!");
        java.lang.String str14 = textNode2.absUrl("i");
        org.jsoup.nodes.Node node15 = textNode2.parent();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        outputSettings2.setindentAmount((int) (byte) 0);
        boolean boolean5 = outputSettings2.getforceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings2.charsetEncoder;
        int int7 = outputSettings2.indentAmount;
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) '4');
        boolean boolean15 = outputSettings14.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset17 = outputSettings16.charset();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings16.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null;
        outputSettings16.setescapeMode(escapeMode19);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings16.indentAmount((int) (byte) 10);
        int int23 = outputSettings16.getindentAmount();
        outputSettings16.indentAmount = 0;
        java.nio.charset.CharsetEncoder charsetEncoder26 = null;
        outputSettings16.setcharsetEncoder(charsetEncoder26);
        org.jsoup.nodes.TextNode textNode30 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = textNode30.equals((java.lang.Object) outputSettings31);
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings31.escapeMode;
        java.nio.charset.Charset charset35 = outputSettings31.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings31.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings37.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings37.escapeMode;
        outputSettings16.escapeMode = escapeMode39;
        outputSettings14.setescapeMode(escapeMode39);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "");
        java.lang.String str3 = textNode2.nodeName();
        org.jsoup.nodes.Node node4 = textNode2.parent();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("#text");
        java.lang.String str7 = textNode6.nodeName();
        java.lang.String str9 = textNode6.attr("h");
        textNode6.settext("h");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean3 = textNode2.isBlank();
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.text = "hi!";
        textNode2.setBaseUri("!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = textNode2.absUrl("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings14.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings31.clone();
        int int33 = outputSettings32.getindentAmount();
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        outputSettings14.setcharset(charset34);
        outputSettings0.setcharset(charset34);
        boolean boolean37 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        outputSettings38.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset44 = outputSettings43.charset();
        outputSettings38.setcharset(charset44);
        outputSettings38.setprettyPrint(true);
        java.nio.charset.Charset charset48 = outputSettings38.getcharset();
        outputSettings38.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings38.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = null;
        outputSettings53.setescapeMode(escapeMode56);
        outputSettings53.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = null;
        outputSettings53.setescapeMode(escapeMode60);
        boolean boolean62 = outputSettings53.forceAllElementAsBlock;
        int int63 = outputSettings53.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings53.escapeMode(escapeMode64);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean67 = outputSettings66.prettyPrint;
        boolean boolean68 = outputSettings66.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = null;
        outputSettings66.setescapeMode(escapeMode69);
        outputSettings66.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = null;
        outputSettings66.setescapeMode(escapeMode73);
        boolean boolean75 = outputSettings66.forceAllElementAsBlock;
        int int76 = outputSettings66.indentAmount;
        java.nio.charset.Charset charset77 = outputSettings66.getcharset();
        outputSettings65.setcharset(charset77);
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings52.charset(charset77);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings80.clone();
        int int82 = outputSettings81.getindentAmount();
        java.nio.charset.Charset charset83 = outputSettings81.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings79.charset(charset83);
        outputSettings0.charset = charset83;
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings0.prettyPrint(true);
        java.nio.charset.Charset charset88 = outputSettings87.charset();
        java.lang.Class<?> wildcardClass89 = charset88.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertNotNull(outputSettings87);
        org.junit.Assert.assertNotNull(charset88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        textNode0.text = "text";
        java.lang.String str10 = textNode0.toString();
        org.jsoup.nodes.Attributes attributes11 = textNode0.attributes();
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("text", "text");
        int int17 = textNode16.siblingIndex();
        int int18 = textNode16.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList19 = textNode16.childNodes();
        java.lang.StringBuilder stringBuilder20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        int int25 = outputSettings22.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings22.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        outputSettings28.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings28.setcharset(charset34);
        outputSettings27.setcharset(charset34);
        outputSettings22.setcharset(charset34);
        textNode16.outerHtmlTail(stringBuilder20, 10, outputSettings22);
        int int39 = outputSettings22.indentAmount;
        textNode0.outerHtmlTail(stringBuilder12, 10, outputSettings22);
        org.jsoup.nodes.TextNode textNode42 = textNode0.text("i!");
        org.jsoup.nodes.TextNode textNode44 = textNode42.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList45 = textNode42.siblingNodes();
        boolean boolean47 = textNode42.hasAttr("hi!");
        textNode42.setBaseUri("#");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(textNode42);
        org.junit.Assert.assertNotNull(textNode44);
        org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("text");
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("t");
        node11.setBaseUri("i");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        java.lang.String str4 = textNode0.getTEXT_KEY();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode0.childNodes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node8 = textNode0.attr("ext", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "text" + "'", str4, "text");
        org.junit.Assert.assertNotNull(nodeList5);
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.escapeMode(escapeMode11);
        outputSettings12.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        outputSettings15.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings15.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings15.encoder();
        outputSettings15.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings25.charset = charset27;
        outputSettings25.indentAmount = (-1);
        java.nio.charset.Charset charset31 = outputSettings25.charset();
        outputSettings25.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        boolean boolean37 = outputSettings34.getprettyPrint();
        boolean boolean38 = outputSettings34.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings34.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings40.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset44 = outputSettings43.charset();
        outputSettings42.charset = charset44;
        outputSettings42.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean49 = outputSettings48.prettyPrint;
        boolean boolean50 = outputSettings48.forceAllElementAsBlock;
        int int51 = outputSettings48.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings48.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        outputSettings54.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset60 = outputSettings59.charset();
        outputSettings54.setcharset(charset60);
        outputSettings53.setcharset(charset60);
        outputSettings48.setcharset(charset60);
        outputSettings42.setcharset(charset60);
        outputSettings40.setcharset(charset60);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings25.charset(charset60);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings15.charset(charset60);
        boolean boolean68 = outputSettings67.forceAllElementAsBlock;
        outputSettings67.indentAmount = (short) 10;
        java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings67.getcharsetEncoder();
        outputSettings12.setcharsetEncoder(charsetEncoder71);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(charsetEncoder71);
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Document document10 = textNode2.ownerDocument();
        java.lang.String str11 = textNode2.text;
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        int int17 = outputSettings14.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings14.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        outputSettings20.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings20.setcharset(charset26);
        outputSettings19.setcharset(charset26);
        outputSettings14.setcharset(charset26);
        textNode2.outerHtmlTail(stringBuilder12, 0, outputSettings14);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings14.indentAmount((int) (short) 100);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings14.indentAmount((int) (byte) 0);
        int int35 = outputSettings34.getindentAmount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        java.lang.String str6 = textNode0.getWholeText();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings9.getcharsetEncoder();
        outputSettings9.prettyPrint = true;
        boolean boolean17 = outputSettings9.forceAllElementAsBlock;
        textNode0.outerHtmlTail(stringBuilder7, (int) (byte) 100, outputSettings9);
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings9.encoder();
        int int20 = outputSettings9.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = null;
        outputSettings21.setescapeMode(escapeMode24);
        boolean boolean26 = outputSettings21.prettyPrint;
        java.nio.charset.Charset charset27 = outputSettings21.charset();
        outputSettings9.charset = charset27;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        boolean boolean32 = outputSettings29.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings29.prettyPrint(false);
        outputSettings29.setforceAllElementAsBlock(false);
        outputSettings29.setindentAmount((int) (byte) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        boolean boolean43 = outputSettings41.forceAllElementAsBlock;
        int int44 = outputSettings41.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings41.charsetEncoder;
        outputSettings39.charsetEncoder = charsetEncoder45;
        outputSettings29.charsetEncoder = charsetEncoder45;
        java.nio.charset.Charset charset48 = outputSettings29.charset();
        outputSettings9.charset = charset48;
        java.lang.Class<?> wildcardClass50 = charset48.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("ext", "ext");
        java.lang.String str3 = textNode2.getTEXT_KEY();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(nodeList4);
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        textNode2.settext("");
        java.lang.String str7 = textNode2.baseUri();
        textNode2.text = "t";
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        outputSettings12.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings12.setcharset(charset18);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings20.encoder();
        outputSettings12.setcharsetEncoder(charsetEncoder22);
        textNode2.outerHtmlTail(stringBuilder10, 0, outputSettings12);
        java.util.List<org.jsoup.nodes.Node> nodeList25 = textNode2.siblingNodes();
        org.jsoup.nodes.Node node26 = textNode2.clone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        outputSettings6.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings6.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder11);
        int int13 = outputSettings0.indentAmount();
        boolean boolean14 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings0.indentAmount(100);
        boolean boolean17 = outputSettings0.forceAllElementAsBlock;
        int int18 = outputSettings0.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        boolean boolean7 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.encoder();
        boolean boolean13 = outputSettings8.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings8.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.escapeMode(escapeMode14);
        boolean boolean16 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings0.indentAmount(100);
        outputSettings0.setprettyPrint(true);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(outputSettings18);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.nodeName();
        textNode2.setBaseUri("");
        java.lang.String str12 = textNode2.outerHtml();
        java.lang.String str13 = textNode2.outerHtml();
        java.lang.String str15 = textNode2.absUrl("#text");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        int int7 = textNode2.siblingIndex();
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings10.setescapeMode(escapeMode13);
        boolean boolean15 = outputSettings10.prettyPrint;
        outputSettings10.indentAmount = 1;
        boolean boolean18 = outputSettings10.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder8, (int) (byte) 1, outputSettings10);
        outputSettings10.forceAllElementAsBlock = true;
        int int22 = outputSettings10.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings10.escapeMode;
        int int24 = outputSettings10.getindentAmount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(escapeMode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        boolean boolean10 = textNode2.isBlank();
        java.lang.String str11 = textNode2.getTEXT_KEY();
        boolean boolean13 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node15 = textNode2.removeAttr("#text");
        java.lang.String str16 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean2 = outputSettings0.getprettyPrint();
        outputSettings0.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.clone();
        outputSettings5.setprettyPrint(false);
        outputSettings5.prettyPrint = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings5.escapeMode;
        outputSettings5.prettyPrint = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.getcharsetEncoder();
        boolean boolean6 = outputSettings0.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.charsetEncoder;
        outputSettings0.forceAllElementAsBlock = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsetEncoder7);
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        boolean boolean15 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset18 = outputSettings17.charset();
        outputSettings16.charset = charset18;
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings16.encoder();
        boolean boolean21 = outputSettings16.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings16.escapeMode;
        outputSettings0.escapeMode = escapeMode22;
        outputSettings0.forceAllElementAsBlock = false;
        outputSettings0.forceAllElementAsBlock = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Node node9 = textNode0.nextSibling();
        java.lang.String str11 = textNode0.attr("text");
        java.lang.String str12 = textNode0.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder13 = null;
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("text", "text");
        int int18 = textNode17.siblingIndex();
        int int19 = textNode17.siblingIndex();
        java.lang.StringBuilder stringBuilder20 = null;
        org.jsoup.nodes.TextNode textNode24 = new org.jsoup.nodes.TextNode("text", "text");
        int int25 = textNode24.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList26 = textNode24.siblingNodes();
        textNode24.text = "";
        org.jsoup.nodes.Node node29 = textNode24.parent();
        java.util.List<org.jsoup.nodes.Node> nodeList30 = textNode24.siblingNodes();
        java.lang.StringBuilder stringBuilder31 = null;
        org.jsoup.nodes.TextNode textNode35 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = textNode35.equals((java.lang.Object) outputSettings36);
        int int39 = outputSettings36.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings36.prettyPrint(true);
        int int42 = outputSettings36.indentAmount;
        textNode24.outerHtmlTail(stringBuilder31, (int) (short) 100, outputSettings36);
        int int44 = outputSettings36.getindentAmount();
        textNode17.outerHtmlTail(stringBuilder20, (int) (short) 0, outputSettings36);
        textNode0.outerHtmlTail(stringBuilder13, 10, outputSettings36);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings36.forceAllElementAsBlock(true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(nodeList30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(outputSettings48);
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings6.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.encoder();
        outputSettings8.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings8.escapeMode;
        outputSettings6.escapeMode = escapeMode15;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        boolean boolean22 = outputSettings19.getprettyPrint();
        boolean boolean23 = outputSettings19.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings18.escapeMode(escapeMode26);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.prettyPrint(false);
        java.nio.charset.Charset charset30 = outputSettings29.getcharset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(charset30);
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Node node9 = textNode0.nextSibling();
        java.lang.String str10 = textNode0.text;
        java.lang.String str12 = textNode0.attr("ext");
        java.lang.String str14 = textNode0.absUrl("i!");
        int int15 = textNode0.siblingIndex();
        org.jsoup.nodes.Node node16 = textNode0.parent();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode0.after("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.setprettyPrint(true);
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.encoder();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charsetEncoder8);
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        outputSettings11.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings11.getcharsetEncoder();
        outputSettings5.setcharsetEncoder(charsetEncoder16);
        outputSettings0.charsetEncoder = charsetEncoder16;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings19.encoder();
        boolean boolean22 = outputSettings19.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings23.charset = charset25;
        outputSettings23.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings23.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings23.escapeMode(escapeMode30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings32.charset = charset34;
        outputSettings32.indentAmount = (-1);
        java.nio.charset.Charset charset38 = outputSettings32.charset();
        boolean boolean39 = outputSettings32.forceAllElementAsBlock();
        java.nio.charset.Charset charset40 = outputSettings32.getcharset();
        outputSettings31.charset = charset40;
        outputSettings19.setcharset(charset40);
        outputSettings0.setcharset(charset40);
        java.nio.charset.Charset charset44 = outputSettings0.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        outputSettings45.setprettyPrint(false);
        int int50 = outputSettings45.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        boolean boolean54 = outputSettings51.getprettyPrint();
        boolean boolean55 = outputSettings51.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings51.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode();
        int int59 = outputSettings57.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        outputSettings60.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset66 = outputSettings65.charset();
        outputSettings60.setcharset(charset66);
        outputSettings60.setprettyPrint(true);
        java.nio.charset.Charset charset70 = outputSettings60.getcharset();
        outputSettings60.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings60.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset75 = outputSettings74.getcharset();
        outputSettings57.charset = charset75;
        outputSettings45.setcharset(charset75);
        java.nio.charset.Charset charset78 = outputSettings45.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings0.charset(charset78);
        int int80 = outputSettings0.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder81 = outputSettings0.encoder();
        int int82 = outputSettings0.indentAmount();
        boolean boolean83 = outputSettings0.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        int int10 = outputSettings6.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings6.encoder();
        java.nio.charset.Charset charset12 = outputSettings6.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings6.indentAmount(1);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings6.indentAmount(100);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings16);
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        int int15 = outputSettings14.getindentAmount();
        outputSettings14.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings18.charset = charset20;
        outputSettings18.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        int int27 = outputSettings24.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        boolean boolean32 = outputSettings30.forceAllElementAsBlock;
        outputSettings30.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings30.setcharset(charset36);
        outputSettings29.setcharset(charset36);
        outputSettings24.setcharset(charset36);
        outputSettings18.setcharset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset36);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(false);
        int int48 = outputSettings47.getindentAmount();
        outputSettings47.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings47.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        boolean boolean56 = outputSettings52.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings52.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode();
        outputSettings47.setescapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings14.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings0.escapeMode(escapeMode59);
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings0.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean65 = outputSettings64.prettyPrint;
        boolean boolean66 = outputSettings64.forceAllElementAsBlock;
        outputSettings64.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings64.indentAmount(1);
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings70.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings70.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings73.indentAmount((int) (short) 0);
        outputSettings73.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings73.encoder();
        outputSettings72.setcharsetEncoder(charsetEncoder79);
        outputSettings0.setcharsetEncoder(charsetEncoder79);
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings0.indentAmount(1);
        outputSettings0.indentAmount = (short) -1;
        boolean boolean86 = outputSettings0.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertNotNull(charsetEncoder79);
        org.junit.Assert.assertNotNull(outputSettings83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        outputSettings6.indentAmount = '#';
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings6.charsetEncoder;
        outputSettings6.setindentAmount(0);
        boolean boolean12 = outputSettings6.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("text");
        java.lang.String str9 = textNode8.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node11 = textNode8.wrap("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("text");
        org.jsoup.nodes.Node node9 = textNode2.nextSibling();
        textNode2.text = "hi!";
        java.lang.String str12 = textNode2.gettext();
        int int13 = textNode2.siblingIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        outputSettings3.setescapeMode(escapeMode6);
        outputSettings3.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = null;
        outputSettings3.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings3.forceAllElementAsBlock;
        int int13 = outputSettings3.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings3.escapeMode(escapeMode14);
        int int16 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings19.clone();
        java.nio.charset.Charset charset21 = outputSettings20.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings3.charset(charset21);
        outputSettings0.charset = charset21;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.encoder();
        boolean boolean29 = outputSettings24.prettyPrint;
        java.nio.charset.Charset charset30 = outputSettings24.charset;
        boolean boolean31 = outputSettings24.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings32.charset = charset34;
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings32.encoder();
        boolean boolean37 = outputSettings32.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings24.escapeMode(escapeMode38);
        boolean boolean40 = outputSettings39.forceAllElementAsBlock();
        boolean boolean41 = outputSettings39.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode42 = new org.jsoup.nodes.TextNode();
        textNode42.setBaseUri("hi!");
        java.lang.String str45 = textNode42.getTEXT_KEY();
        textNode42.text = "hi!";
        java.lang.String str48 = textNode42.getWholeText();
        java.lang.StringBuilder stringBuilder49 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean52 = outputSettings51.prettyPrint;
        boolean boolean53 = outputSettings51.forceAllElementAsBlock;
        outputSettings51.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder56 = outputSettings51.getcharsetEncoder();
        outputSettings51.prettyPrint = true;
        boolean boolean59 = outputSettings51.forceAllElementAsBlock;
        textNode42.outerHtmlTail(stringBuilder49, (int) (byte) 100, outputSettings51);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean62 = outputSettings61.prettyPrint;
        boolean boolean63 = outputSettings61.forceAllElementAsBlock;
        boolean boolean64 = outputSettings61.getprettyPrint();
        boolean boolean65 = outputSettings61.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings61.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings67.escapeMode();
        outputSettings67.setprettyPrint(true);
        int int71 = outputSettings67.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder72 = outputSettings67.encoder();
        outputSettings51.setcharsetEncoder(charsetEncoder72);
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        outputSettings74.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings74.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings74.getcharsetEncoder();
        outputSettings51.setcharsetEncoder(charsetEncoder79);
        outputSettings39.setcharsetEncoder(charsetEncoder79);
        outputSettings0.charsetEncoder = charsetEncoder79;
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings84.indentAmount((int) (byte) 100);
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings84.indentAmount((int) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "text" + "'", str45, "text");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charsetEncoder56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder72);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertNotNull(charsetEncoder79);
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertNotNull(outputSettings86);
        org.junit.Assert.assertNotNull(outputSettings88);
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean4 = textNode2.hasAttr("");
        boolean boolean5 = textNode2.isBlank();
        java.lang.String str6 = textNode2.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        boolean boolean13 = outputSettings9.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder7, 0, outputSettings9);
        org.jsoup.nodes.Node node15 = textNode2.previousSibling();
        java.lang.String str16 = textNode2.text();
        java.lang.String str17 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node19 = textNode2.before("text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        textNode2.setBaseUri("text");
        java.lang.String str12 = textNode2.text;
        int int13 = textNode2.siblingIndex();
        java.lang.String str14 = textNode2.getWholeText();
        textNode2.text = "#text";
        org.jsoup.nodes.TextNode textNode18 = textNode2.text("i!");
        boolean boolean19 = textNode2.isBlank();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(textNode18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "ext");
        org.jsoup.nodes.Node node4 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Node node5 = node4.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList6 = node5.siblingNodes();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(nodeList6);
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str4 = textNode2.absUrl("t");
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.Class<?> wildcardClass7 = textNode2.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = null;
        outputSettings6.setescapeMode(escapeMode9);
        outputSettings6.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings6.setescapeMode(escapeMode13);
        boolean boolean15 = outputSettings6.forceAllElementAsBlock;
        int int16 = outputSettings6.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings19.setescapeMode(escapeMode22);
        outputSettings19.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings19.setescapeMode(escapeMode26);
        boolean boolean28 = outputSettings19.forceAllElementAsBlock;
        int int29 = outputSettings19.indentAmount;
        java.nio.charset.Charset charset30 = outputSettings19.getcharset();
        outputSettings18.setcharset(charset30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings0.charset(charset30);
        int int33 = outputSettings32.getindentAmount();
        boolean boolean34 = outputSettings32.prettyPrint();
        int int35 = outputSettings32.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        int int1 = textNode0.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings5.setescapeMode(escapeMode8);
        outputSettings5.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = null;
        outputSettings5.setescapeMode(escapeMode12);
        boolean boolean14 = outputSettings5.forceAllElementAsBlock;
        int int15 = outputSettings5.indentAmount;
        java.nio.charset.Charset charset16 = outputSettings5.getcharset();
        outputSettings2.charset = charset16;
        boolean boolean18 = textNode0.equals((java.lang.Object) outputSettings2);
        boolean boolean19 = textNode0.isBlank();
        java.lang.String str20 = textNode0.getWholeText();
        java.lang.String str21 = textNode0.baseUri();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node23 = textNode0.childNode(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        outputSettings0.prettyPrint = false;
        boolean boolean10 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode("h", "#text");
        org.jsoup.nodes.Node node14 = textNode13.nextSibling();
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("text", "text");
        int int18 = textNode17.siblingIndex();
        int int19 = textNode17.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList20 = textNode17.childNodes();
        java.lang.String str21 = textNode17.getWholeText();
        org.jsoup.nodes.TextNode textNode23 = textNode17.splitText(1);
        java.lang.String str24 = textNode17.gettext();
        textNode17.settext("hi!");
        org.jsoup.nodes.Node node27 = textNode17.parent();
        org.jsoup.nodes.Node node29 = textNode17.removeAttr("#text");
        org.jsoup.nodes.TextNode textNode30 = new org.jsoup.nodes.TextNode();
        int int31 = textNode30.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings32.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null;
        outputSettings35.setescapeMode(escapeMode38);
        outputSettings35.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings35.setescapeMode(escapeMode42);
        boolean boolean44 = outputSettings35.forceAllElementAsBlock;
        int int45 = outputSettings35.indentAmount;
        java.nio.charset.Charset charset46 = outputSettings35.getcharset();
        outputSettings32.charset = charset46;
        boolean boolean48 = textNode30.equals((java.lang.Object) outputSettings32);
        boolean boolean49 = textNode30.isBlank();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean51 = outputSettings50.prettyPrint;
        boolean boolean52 = outputSettings50.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = null;
        outputSettings50.setescapeMode(escapeMode53);
        boolean boolean55 = outputSettings50.prettyPrint;
        outputSettings50.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings58.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings58.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean62 = outputSettings61.prettyPrint;
        boolean boolean63 = outputSettings61.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = null;
        outputSettings61.setescapeMode(escapeMode64);
        outputSettings61.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = null;
        outputSettings61.setescapeMode(escapeMode68);
        boolean boolean70 = outputSettings61.forceAllElementAsBlock;
        int int71 = outputSettings61.indentAmount;
        java.nio.charset.Charset charset72 = outputSettings61.getcharset();
        outputSettings58.charset = charset72;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings50.charset(charset72);
        boolean boolean75 = textNode30.equals((java.lang.Object) outputSettings74);
        java.nio.charset.Charset charset76 = outputSettings74.charset();
        boolean boolean77 = textNode17.equals((java.lang.Object) charset76);
        boolean boolean78 = textNode13.equals((java.lang.Object) charset76);
        outputSettings0.charset = charset76;
        boolean boolean80 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setprettyPrint(false);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertNotNull(textNode23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "t" + "'", str24, "t");
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(charset76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        int int6 = outputSettings0.indentAmount();
        int int7 = outputSettings0.indentAmount;
        boolean boolean8 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        boolean boolean12 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings9.prettyPrint(false);
        java.nio.charset.Charset charset15 = outputSettings9.charset;
        outputSettings9.setprettyPrint(false);
        boolean boolean18 = outputSettings9.forceAllElementAsBlock;
        boolean boolean19 = outputSettings9.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings9.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode();
        outputSettings0.escapeMode = escapeMode22;
        java.lang.Class<?> wildcardClass24 = escapeMode22.getClass();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        java.lang.String str5 = textNode2.attr("t");
        java.lang.String str7 = textNode2.attr("");
        textNode2.text = "#text";
        java.lang.String str10 = textNode2.baseUri();
        java.lang.String str11 = textNode2.outerHtml();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        java.lang.String str8 = textNode2.text();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        org.jsoup.nodes.Node node12 = textNode2.attr("hi!", "#text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = node12.after("i!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        outputSettings0.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        outputSettings10.charset = charset12;
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings10.encoder();
        boolean boolean15 = outputSettings10.getprettyPrint();
        int int16 = outputSettings10.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings17.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings17.getcharsetEncoder();
        outputSettings10.setcharsetEncoder(charsetEncoder21);
        outputSettings0.setcharsetEncoder(charsetEncoder21);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings0.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.charset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertNotNull(outputSettings24);
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.escapeMode(escapeMode6);
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings5.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings5.escapeMode;
        int int10 = outputSettings5.indentAmount();
        outputSettings5.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings5.getcharsetEncoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNull(escapeMode8);
        org.junit.Assert.assertNull(escapeMode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder13);
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings12.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(true);
        outputSettings21.setforceAllElementAsBlock(false);
        boolean boolean26 = outputSettings21.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.getTEXT_KEY();
        textNode2.settext("t");
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode15.childNodes();
        org.jsoup.nodes.TextNode textNode18 = textNode15.splitText(1);
        org.jsoup.nodes.Node node21 = textNode18.attr("hi!", "t");
        java.lang.String str23 = textNode18.attr("#text");
        java.lang.String str24 = textNode18.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode26 = textNode18.text("ext");
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset29 = outputSettings28.charset();
        outputSettings27.charset = charset29;
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.encoder();
        boolean boolean32 = outputSettings27.prettyPrint;
        boolean boolean33 = outputSettings27.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        int int37 = outputSettings34.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings34.getcharsetEncoder();
        boolean boolean39 = outputSettings34.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = null;
        outputSettings40.setescapeMode(escapeMode43);
        outputSettings40.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = null;
        outputSettings40.setescapeMode(escapeMode47);
        boolean boolean49 = outputSettings40.forceAllElementAsBlock;
        int int50 = outputSettings40.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings40.escapeMode(escapeMode51);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = null;
        outputSettings53.setescapeMode(escapeMode56);
        outputSettings53.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = null;
        outputSettings53.setescapeMode(escapeMode60);
        boolean boolean62 = outputSettings53.forceAllElementAsBlock;
        int int63 = outputSettings53.indentAmount;
        java.nio.charset.Charset charset64 = outputSettings53.getcharset();
        outputSettings52.setcharset(charset64);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings34.charset(charset64);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean68 = outputSettings67.prettyPrint;
        boolean boolean69 = outputSettings67.forceAllElementAsBlock;
        boolean boolean70 = outputSettings67.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings67.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean74 = outputSettings73.prettyPrint;
        boolean boolean75 = outputSettings73.forceAllElementAsBlock;
        int int76 = outputSettings73.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder77 = outputSettings73.getcharsetEncoder();
        outputSettings72.setcharsetEncoder(charsetEncoder77);
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings72.escapeMode;
        outputSettings34.setescapeMode(escapeMode79);
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings27.escapeMode(escapeMode79);
        boolean boolean82 = textNode18.equals((java.lang.Object) outputSettings27);
        org.jsoup.nodes.Document document83 = textNode18.ownerDocument();
        org.jsoup.nodes.Attributes attributes84 = textNode18.attributes();
        boolean boolean85 = textNode2.equals((java.lang.Object) attributes84);
        textNode2.settext("hi!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNotNull(textNode18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "text" + "'", str24, "text");
        org.junit.Assert.assertNotNull(textNode26);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder77);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(document83);
        org.junit.Assert.assertNotNull(attributes84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str9 = textNode2.attr("");
        org.jsoup.nodes.Node node12 = textNode2.attr("ext", "#text");
        org.jsoup.nodes.Document document13 = textNode2.ownerDocument();
        java.lang.String str14 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode17 = org.jsoup.nodes.TextNode.createFromEncoded("h", "h");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode2.after((org.jsoup.nodes.Node) textNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(textNode17);
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        java.lang.String str6 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("text");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        boolean boolean14 = outputSettings11.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings11.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        outputSettings19.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings19.setcharset(charset25);
        java.nio.charset.Charset charset27 = outputSettings19.getcharset();
        outputSettings18.charset = charset27;
        textNode2.outerHtmlTail(stringBuilder9, 100, outputSettings18);
        textNode2.setBaseUri("h");
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Document document34 = textNode2.ownerDocument();
        textNode2.settext("i!");
        org.jsoup.nodes.TextNode textNode39 = new org.jsoup.nodes.TextNode("text", "text");
        int int40 = textNode39.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList41 = textNode39.childNodes();
        org.jsoup.nodes.TextNode textNode43 = textNode39.text("");
        int int44 = textNode39.siblingIndex();
        org.jsoup.nodes.TextNode textNode46 = textNode39.text("hi!");
        java.lang.String str48 = textNode39.absUrl("text");
        org.jsoup.nodes.TextNode textNode50 = textNode39.splitText(1);
        org.jsoup.nodes.Node node53 = textNode39.attr("text", "t");
        textNode39.ensureAttributes();
        org.jsoup.nodes.Node node55 = textNode39.clone();
        boolean boolean57 = textNode39.hasAttr("text");
        org.jsoup.nodes.Attributes attributes58 = textNode39.attributes();
        org.jsoup.nodes.Node node59 = textNode39.clone();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith(node59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNull(document34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(nodeList41);
        org.junit.Assert.assertNotNull(textNode43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(textNode46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(textNode50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(attributes58);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode();
        outputSettings6.setprettyPrint(true);
        int int10 = outputSettings6.indentAmount();
        outputSettings6.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings6.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings6.clone();
        boolean boolean15 = outputSettings6.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "ext");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        int int8 = outputSettings5.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings5.getcharsetEncoder();
        boolean boolean10 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings11.setescapeMode(escapeMode14);
        outputSettings11.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings11.setescapeMode(escapeMode18);
        boolean boolean20 = outputSettings11.forceAllElementAsBlock;
        int int21 = outputSettings11.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings11.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings24.setescapeMode(escapeMode27);
        outputSettings24.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings24.setescapeMode(escapeMode31);
        boolean boolean33 = outputSettings24.forceAllElementAsBlock;
        int int34 = outputSettings24.indentAmount;
        java.nio.charset.Charset charset35 = outputSettings24.getcharset();
        outputSettings23.setcharset(charset35);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings5.charset(charset35);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        boolean boolean41 = outputSettings38.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings38.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        int int47 = outputSettings44.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings44.getcharsetEncoder();
        outputSettings43.setcharsetEncoder(charsetEncoder48);
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings43.escapeMode;
        outputSettings5.setescapeMode(escapeMode50);
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset53 = outputSettings5.getcharset();
        outputSettings5.prettyPrint = true;
        textNode2.outerHtmlTail(stringBuilder3, 97, outputSettings5);
        boolean boolean57 = outputSettings5.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings0.getcharsetEncoder();
        outputSettings0.setforceAllElementAsBlock(false);
        boolean boolean9 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = textNode12.equals((java.lang.Object) outputSettings13);
        int int16 = outputSettings13.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        outputSettings17.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings17.setcharset(charset23);
        outputSettings17.setprettyPrint(true);
        java.nio.charset.Charset charset27 = outputSettings17.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings17.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings17.escapeMode();
        boolean boolean30 = outputSettings17.getprettyPrint();
        boolean boolean31 = outputSettings17.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings17.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings13.escapeMode(escapeMode32);
        java.nio.charset.Charset charset34 = outputSettings33.charset();
        outputSettings0.setcharset(charset34);
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings0.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        outputSettings38.charset = charset40;
        outputSettings38.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings38.prettyPrint(false);
        java.nio.charset.Charset charset46 = outputSettings38.charset;
        outputSettings38.setprettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings38.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings38.escapeMode;
        outputSettings37.setescapeMode(escapeMode50);
        int int52 = outputSettings37.indentAmount();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node6 = textNode2.attr("t", "");
        java.lang.String str7 = textNode2.toString();
        java.lang.String str8 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("h");
        java.lang.String str12 = textNode2.attr("");
        int int13 = textNode2.siblingIndex();
        java.lang.String str14 = textNode2.nodeName();
        java.lang.StringBuilder stringBuilder15 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        boolean boolean21 = outputSettings17.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings17.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings17.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings17.prettyPrint(true);
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings26.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings26.getescapeMode();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder15, (int) (byte) 0, outputSettings26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        org.jsoup.nodes.Node node7 = textNode2.clone();
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("text", "text");
        int int12 = textNode11.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode11.childNodes();
        textNode11.settext("");
        textNode11.setBaseUri("hi!");
        java.lang.StringBuilder stringBuilder18 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = null;
        outputSettings20.setescapeMode(escapeMode23);
        outputSettings20.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings20.setescapeMode(escapeMode27);
        boolean boolean29 = outputSettings20.forceAllElementAsBlock;
        int int30 = outputSettings20.indentAmount;
        java.nio.charset.Charset charset31 = outputSettings20.getcharset();
        textNode11.outerHtmlTail(stringBuilder18, (int) (short) 1, outputSettings20);
        java.lang.String str33 = textNode11.text;
        org.jsoup.nodes.Node node34 = textNode11.clone();
        java.lang.StringBuilder stringBuilder35 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        boolean boolean39 = outputSettings37.forceAllElementAsBlock;
        boolean boolean40 = outputSettings37.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings37.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.escapeMode(escapeMode43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings42.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings42.escapeMode;
        int int47 = outputSettings42.indentAmount();
        textNode11.outerHtmlTail(stringBuilder35, 100, outputSettings42);
        boolean boolean49 = textNode2.equals((java.lang.Object) 100);
        java.lang.String str50 = textNode2.text;
        java.util.List<org.jsoup.nodes.Node> nodeList51 = textNode2.siblingNodes();
        java.lang.String str52 = textNode2.outerHtml();
        boolean boolean54 = textNode2.hasAttr("i");
        java.lang.String str55 = textNode2.nodeName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNull(escapeMode45);
        org.junit.Assert.assertNull(escapeMode46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "#text" + "'", str55, "#text");
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.Attributes attributes9 = textNode0.attributes();
        java.lang.String str10 = textNode0.getWholeText();
        textNode0.text = "!";
        boolean boolean14 = textNode0.hasAttr("#");
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("text", "text");
        int int18 = textNode17.siblingIndex();
        textNode17.setBaseUri("text");
        java.lang.String str21 = textNode17.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode23 = textNode17.text("text");
        java.lang.StringBuilder stringBuilder24 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        boolean boolean29 = outputSettings26.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings26.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.escapeMode(escapeMode32);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        outputSettings34.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        outputSettings34.setcharset(charset40);
        java.nio.charset.Charset charset42 = outputSettings34.getcharset();
        outputSettings33.charset = charset42;
        textNode17.outerHtmlTail(stringBuilder24, 100, outputSettings33);
        textNode17.setBaseUri("h");
        // The following exception was thrown during execution in test generation
        try {
            textNode0.replaceWith((org.jsoup.nodes.Node) textNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(attributes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertNotNull(textNode23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(charset42);
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("text");
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("hi!");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings14.setprettyPrint(true);
        java.nio.charset.Charset charset24 = outputSettings14.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings14.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings14.escapeMode();
        boolean boolean27 = outputSettings14.getprettyPrint();
        boolean boolean28 = outputSettings14.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings14.getescapeMode();
        outputSettings14.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings14.getescapeMode();
        textNode2.outerHtmlTail(stringBuilder12, (int) (byte) 10, outputSettings14);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        outputSettings34.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset40 = outputSettings39.charset();
        outputSettings34.setcharset(charset40);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        boolean boolean44 = outputSettings42.forceAllElementAsBlock;
        boolean boolean45 = outputSettings42.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(false);
        int int48 = outputSettings47.getindentAmount();
        outputSettings47.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset53 = outputSettings52.charset();
        outputSettings51.charset = charset53;
        outputSettings51.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean58 = outputSettings57.prettyPrint;
        boolean boolean59 = outputSettings57.forceAllElementAsBlock;
        int int60 = outputSettings57.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings57.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean64 = outputSettings63.prettyPrint;
        boolean boolean65 = outputSettings63.forceAllElementAsBlock;
        outputSettings63.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset69 = outputSettings68.charset();
        outputSettings63.setcharset(charset69);
        outputSettings62.setcharset(charset69);
        outputSettings57.setcharset(charset69);
        outputSettings51.setcharset(charset69);
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings47.charset(charset69);
        outputSettings34.charset = charset69;
        outputSettings34.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset79 = outputSettings78.charset();
        java.nio.charset.CharsetEncoder charsetEncoder80 = outputSettings78.encoder();
        boolean boolean81 = outputSettings78.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings78.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean85 = outputSettings84.prettyPrint;
        boolean boolean86 = outputSettings84.forceAllElementAsBlock;
        int int87 = outputSettings84.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder88 = outputSettings84.getcharsetEncoder();
        boolean boolean89 = outputSettings84.forceAllElementAsBlock;
        boolean boolean90 = outputSettings84.getforceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode91 = outputSettings84.getescapeMode();
        outputSettings78.setescapeMode(escapeMode91);
        outputSettings34.escapeMode = escapeMode91;
        outputSettings14.setescapeMode(escapeMode91);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(charset79);
        org.junit.Assert.assertNotNull(charsetEncoder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(outputSettings83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + escapeMode91 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode91.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        textNode0.ensureAttributes();
        java.lang.String str9 = textNode0.outerHtml();
        java.lang.String str10 = textNode0.baseUri();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(true);
        outputSettings10.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        boolean boolean16 = outputSettings13.getprettyPrint();
        boolean boolean17 = outputSettings13.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings13.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings13.getescapeMode();
        outputSettings10.escapeMode = escapeMode20;
        java.nio.charset.Charset charset22 = outputSettings10.charset;
        outputSettings10.setprettyPrint(false);
        int int25 = outputSettings10.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings10.getcharsetEncoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(charsetEncoder26);
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        outputSettings0.prettyPrint = false;
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.encoder();
        boolean boolean12 = outputSettings0.forceAllElementAsBlock;
        boolean boolean13 = outputSettings0.prettyPrint();
        boolean boolean14 = outputSettings0.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        boolean boolean4 = outputSettings3.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        int int8 = outputSettings5.getindentAmount();
        boolean boolean9 = outputSettings5.forceAllElementAsBlock;
        java.nio.charset.Charset charset10 = outputSettings5.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings3.charset(charset10);
        org.jsoup.nodes.TextNode textNode14 = new org.jsoup.nodes.TextNode("text", "text");
        int int15 = textNode14.siblingIndex();
        int int16 = textNode14.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode14.childNodes();
        java.lang.StringBuilder stringBuilder18 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        int int23 = outputSettings20.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings20.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        outputSettings26.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset32 = outputSettings31.charset();
        outputSettings26.setcharset(charset32);
        outputSettings25.setcharset(charset32);
        outputSettings20.setcharset(charset32);
        textNode14.outerHtmlTail(stringBuilder18, 10, outputSettings20);
        int int37 = outputSettings20.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings20.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings20.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        outputSettings40.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        boolean boolean48 = outputSettings45.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset51 = outputSettings50.charset();
        outputSettings49.charset = charset51;
        java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings49.encoder();
        boolean boolean54 = outputSettings49.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings49.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings45.escapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings40.escapeMode(escapeMode55);
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings40.getescapeMode();
        outputSettings20.setescapeMode(escapeMode58);
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset61 = outputSettings20.charset;
        outputSettings3.charset = charset61;
        outputSettings3.setindentAmount((int) '#');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(charsetEncoder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset61);
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        java.nio.charset.Charset charset6 = outputSettings0.charset();
        boolean boolean7 = outputSettings0.forceAllElementAsBlock;
        boolean boolean8 = outputSettings0.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.indentAmount((int) (byte) 100);
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings10.encoder();
        outputSettings10.prettyPrint = false;
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = textNode16.equals((java.lang.Object) outputSettings17);
        int int20 = outputSettings17.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount(0);
        org.jsoup.nodes.TextNode textNode27 = new org.jsoup.nodes.TextNode();
        int int28 = textNode27.siblingIndex();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings29.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        outputSettings32.setescapeMode(escapeMode35);
        outputSettings32.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = null;
        outputSettings32.setescapeMode(escapeMode39);
        boolean boolean41 = outputSettings32.forceAllElementAsBlock;
        int int42 = outputSettings32.indentAmount;
        java.nio.charset.Charset charset43 = outputSettings32.getcharset();
        outputSettings29.charset = charset43;
        boolean boolean45 = textNode27.equals((java.lang.Object) outputSettings29);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        boolean boolean49 = outputSettings46.getprettyPrint();
        boolean boolean50 = outputSettings46.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings46.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode();
        outputSettings52.setprettyPrint(true);
        boolean boolean56 = textNode27.equals((java.lang.Object) outputSettings52);
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings52.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = null;
        outputSettings52.escapeMode = escapeMode58;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        outputSettings60.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings60.forceAllElementAsBlock(true);
        int int67 = outputSettings60.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings60.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset70 = outputSettings69.charset();
        int int71 = outputSettings69.indentAmount;
        java.nio.charset.Charset charset72 = outputSettings69.charset;
        outputSettings60.charset = charset72;
        java.nio.charset.CharsetEncoder charsetEncoder74 = outputSettings60.getcharsetEncoder();
        outputSettings52.setcharsetEncoder(charsetEncoder74);
        outputSettings24.setcharsetEncoder(charsetEncoder74);
        outputSettings10.setcharsetEncoder(charsetEncoder74);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(charsetEncoder74);
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.gettext();
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode2.siblingNodes();
        java.lang.String str8 = textNode2.text;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings0.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings0.getcharsetEncoder();
        boolean boolean7 = outputSettings0.getforceAllElementAsBlock();
        java.nio.charset.Charset charset8 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        boolean boolean11 = outputSettings9.forceAllElementAsBlock;
        outputSettings9.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings9.setcharset(charset15);
        outputSettings9.setprettyPrint(true);
        java.nio.charset.Charset charset19 = outputSettings9.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings9.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings9.escapeMode();
        boolean boolean22 = outputSettings9.getprettyPrint();
        boolean boolean23 = outputSettings9.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset26 = outputSettings25.charset();
        outputSettings24.charset = charset26;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.encoder();
        outputSettings24.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings24.escapeMode;
        outputSettings24.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings34.charset = charset36;
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings34.encoder();
        boolean boolean39 = outputSettings34.getprettyPrint();
        int int40 = outputSettings34.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings41.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings41.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings41.getcharsetEncoder();
        outputSettings34.setcharsetEncoder(charsetEncoder45);
        outputSettings24.setcharsetEncoder(charsetEncoder45);
        outputSettings9.charsetEncoder = charsetEncoder45;
        outputSettings0.charsetEncoder = charsetEncoder45;
        outputSettings0.setindentAmount((int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder45);
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings12.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(true);
        outputSettings21.setforceAllElementAsBlock(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings21.charset("!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: !");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("text", "i");
        java.lang.String str3 = textNode2.baseUri();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "i" + "'", str3, "i");
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("hi!");
        int int13 = textNode12.siblingIndex();
        java.lang.String str14 = textNode12.baseUri();
        java.lang.String str15 = textNode12.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node17 = textNode12.after("ext");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str4 = textNode2.absUrl("t");
        textNode2.text = "text";
        java.lang.String str7 = textNode2.text;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node8 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        org.jsoup.nodes.Node node8 = textNode0.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = node8.before("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        boolean boolean9 = textNode7.isBlank();
        java.lang.String str10 = textNode7.nodeName();
        boolean boolean11 = textNode7.isBlank();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("t");
        java.lang.String str6 = textNode2.absUrl("text");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode2.childNodes();
        java.lang.String str8 = textNode2.outerHtml();
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "t" + "'", str8, "t");
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.getWholeText();
        boolean boolean7 = textNode2.hasAttr("");
        java.lang.String str8 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.siblingNodes();
        boolean boolean11 = textNode2.hasAttr("text");
        java.lang.String str12 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode15 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "");
        boolean boolean17 = textNode15.hasAttr("text");
        boolean boolean19 = textNode15.hasAttr("text");
        org.jsoup.nodes.Node node20 = textNode15.previousSibling();
        org.jsoup.nodes.Node node22 = textNode15.removeAttr("!");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("text");
        java.lang.String str8 = textNode7.baseUri();
        org.jsoup.nodes.Node node9 = textNode7.previousSibling();
        org.jsoup.nodes.Node node12 = textNode7.attr("text", "text");
        java.lang.String str14 = textNode7.attr("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode7.childNodes();
        org.jsoup.nodes.TextNode textNode17 = textNode7.text("i!");
        textNode17.settext("text");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertNotNull(textNode17);
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        outputSettings1.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode4 = outputSettings1.escapeMode();
        java.nio.charset.Charset charset5 = outputSettings1.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings1.forceAllElementAsBlock(false);
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertTrue("'" + escapeMode4 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode4.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(outputSettings7);
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "hi!");
        org.jsoup.nodes.Document document3 = textNode2.ownerDocument();
        textNode2.setBaseUri("ext");
        java.lang.String str6 = textNode2.text();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("h");
        textNode2.text = "";
        org.jsoup.nodes.Node node11 = textNode2.nextSibling();
        java.lang.String str12 = textNode2.toString();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(document3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode6 = new org.jsoup.nodes.TextNode();
        textNode6.setBaseUri("hi!");
        java.lang.String str9 = textNode6.getTEXT_KEY();
        textNode6.text = "hi!";
        org.jsoup.nodes.TextNode textNode13 = textNode6.splitText((int) (byte) 0);
        org.jsoup.nodes.Node node16 = textNode13.attr("#text", "");
        boolean boolean17 = textNode2.equals((java.lang.Object) node16);
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.gettext();
        org.jsoup.nodes.Node node20 = textNode2.previousSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        textNode2.settext("hi!");
        boolean boolean9 = textNode2.hasAttr("text");
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings12.clone();
        boolean boolean14 = outputSettings13.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        boolean boolean19 = outputSettings15.forceAllElementAsBlock;
        java.nio.charset.Charset charset20 = outputSettings15.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings13.charset(charset20);
        boolean boolean22 = textNode2.equals((java.lang.Object) charset20);
        boolean boolean23 = textNode2.isBlank();
        java.lang.String str24 = textNode2.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node26 = textNode2.childNode(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode0.childNodes();
        org.jsoup.nodes.Node node9 = textNode0.nextSibling();
        java.lang.String str10 = textNode0.text;
        java.lang.String str12 = textNode0.attr("ext");
        org.jsoup.nodes.Node node13 = textNode0.previousSibling();
        java.lang.String str14 = textNode0.text;
        java.lang.String str15 = textNode0.toString();
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode();
        textNode16.setBaseUri("hi!");
        java.lang.String str19 = textNode16.getTEXT_KEY();
        textNode16.text = "hi!";
        boolean boolean23 = textNode16.hasAttr("");
        java.lang.String str24 = textNode16.baseUri();
        java.lang.String str25 = textNode16.outerHtml();
        org.jsoup.nodes.Node node27 = textNode16.removeAttr("ext");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node28 = textNode0.before(node27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("#text");
        java.lang.String str9 = textNode2.text;
        textNode2.settext("t");
        textNode2.ensureAttributes();
        java.lang.String str13 = textNode2.gettext();
        java.lang.String str14 = textNode2.getTEXT_KEY();
        java.lang.String str15 = textNode2.gettext();
        int int16 = textNode2.siblingIndex();
        java.lang.String str17 = textNode2.text;
        java.lang.String str18 = textNode2.baseUri();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "t" + "'", str13, "t");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "t" + "'", str15, "t");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "t" + "'", str17, "t");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean2 = outputSettings1.prettyPrint;
        boolean boolean3 = outputSettings1.forceAllElementAsBlock;
        outputSettings1.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset7 = outputSettings6.charset();
        outputSettings1.setcharset(charset7);
        outputSettings0.setcharset(charset7);
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings0.encoder();
        int int11 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings0.forceAllElementAsBlock(false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(outputSettings13);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "text");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node6 = textNode2.attr("#text", "text");
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        outputSettings10.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings10.setcharset(charset16);
        outputSettings9.setcharset(charset16);
        textNode2.outerHtmlTail(stringBuilder7, 0, outputSettings9);
        java.lang.Class<?> wildcardClass20 = textNode2.getClass();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        boolean boolean5 = outputSettings0.prettyPrint;
        outputSettings0.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings8.charset = charset10;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.encoder();
        boolean boolean13 = outputSettings8.prettyPrint;
        java.nio.charset.Charset charset14 = outputSettings8.charset;
        java.nio.charset.Charset charset15 = outputSettings8.getcharset();
        outputSettings0.setcharset(charset15);
        java.nio.charset.Charset charset17 = outputSettings0.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings0.getescapeMode();
        java.nio.charset.Charset charset19 = outputSettings0.charset;
        boolean boolean20 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset23 = outputSettings22.charset();
        outputSettings21.charset = charset23;
        boolean boolean25 = outputSettings21.getforceAllElementAsBlock();
        boolean boolean26 = outputSettings21.forceAllElementAsBlock;
        int int27 = outputSettings21.indentAmount();
        outputSettings21.setforceAllElementAsBlock(false);
        outputSettings21.prettyPrint = true;
        outputSettings21.prettyPrint = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings0.escapeMode(escapeMode34);
        outputSettings0.indentAmount = 0;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNull(escapeMode18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        outputSettings0.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset8 = outputSettings0.charset;
        outputSettings0.setprettyPrint(false);
        outputSettings0.prettyPrint = false;
        java.nio.charset.Charset charset13 = null;
        outputSettings0.setcharset(charset13);
        int int15 = outputSettings0.getindentAmount();
        java.nio.charset.Charset charset16 = outputSettings0.getcharset();
        boolean boolean17 = outputSettings0.forceAllElementAsBlock();
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("i!", "");
        java.lang.String str3 = textNode2.getTEXT_KEY();
        int int4 = textNode2.siblingIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        outputSettings0.setprettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(false);
        boolean boolean13 = outputSettings0.getprettyPrint();
        outputSettings0.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings0.forceAllElementAsBlock(true);
        int int18 = outputSettings0.indentAmount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode11 = textNode2.splitText((int) (short) 1);
        java.lang.String str12 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "text");
        int int16 = textNode15.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode15.siblingNodes();
        textNode15.text = "";
        org.jsoup.nodes.Node node20 = textNode15.parent();
        boolean boolean22 = textNode15.hasAttr("text");
        java.lang.String str23 = textNode15.outerHtml();
        org.jsoup.nodes.Node node24 = textNode15.clone();
        org.jsoup.nodes.TextNode textNode26 = textNode15.text("text");
        boolean boolean28 = textNode26.hasAttr("ext");
        java.lang.String str29 = textNode26.text();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node30 = textNode2.after((org.jsoup.nodes.Node) textNode26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(textNode26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "text" + "'", str29, "text");
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode("text", "text");
        int int10 = textNode9.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode9.siblingNodes();
        textNode9.text = "";
        org.jsoup.nodes.Node node14 = textNode9.parent();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode9.siblingNodes();
        java.lang.StringBuilder stringBuilder16 = null;
        org.jsoup.nodes.TextNode textNode20 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = textNode20.equals((java.lang.Object) outputSettings21);
        int int24 = outputSettings21.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings21.prettyPrint(true);
        int int27 = outputSettings21.indentAmount;
        textNode9.outerHtmlTail(stringBuilder16, (int) (short) 100, outputSettings21);
        int int29 = outputSettings21.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 0, outputSettings21);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node32 = textNode2.before("#text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        java.lang.String str9 = textNode2.gettext();
        textNode2.text = "hi!";
        java.lang.String str13 = textNode2.attr("#text");
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings14.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder19 = null;
        outputSettings18.charsetEncoder = charsetEncoder19;
        outputSettings18.setprettyPrint(true);
        boolean boolean23 = textNode2.equals((java.lang.Object) outputSettings18);
        org.jsoup.nodes.Node node24 = textNode2.previousSibling();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t" + "'", str9, "t");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings14.setforceAllElementAsBlock(false);
        outputSettings14.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        java.nio.charset.Charset charset25 = outputSettings19.charset();
        outputSettings19.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        boolean boolean31 = outputSettings28.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings28.prettyPrint(false);
        int int34 = outputSettings33.getindentAmount();
        outputSettings33.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings33.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean39 = outputSettings38.prettyPrint;
        boolean boolean40 = outputSettings38.forceAllElementAsBlock;
        boolean boolean41 = outputSettings38.getprettyPrint();
        boolean boolean42 = outputSettings38.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings38.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings44.escapeMode();
        outputSettings33.setescapeMode(escapeMode45);
        outputSettings19.escapeMode = escapeMode45;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings14.escapeMode(escapeMode45);
        boolean boolean49 = outputSettings48.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        outputSettings7.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings7.setcharset(charset13);
        outputSettings7.setprettyPrint(true);
        java.nio.charset.Charset charset17 = outputSettings7.getcharset();
        outputSettings7.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings7.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings0.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings0.indentAmount(97);
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings26.charsetEncoder;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean4 = textNode2.hasAttr("");
        boolean boolean5 = textNode2.isBlank();
        org.jsoup.nodes.Node node8 = textNode2.attr("hi!", "h");
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode();
        textNode9.setBaseUri("hi!");
        java.lang.String str12 = textNode9.getTEXT_KEY();
        textNode9.text = "hi!";
        boolean boolean16 = textNode9.hasAttr("text");
        org.jsoup.nodes.Node node17 = textNode9.clone();
        org.jsoup.nodes.TextNode textNode19 = textNode9.text("ext");
        java.lang.String str20 = textNode9.text();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(textNode19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ext" + "'", str20, "ext");
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean5 = outputSettings4.prettyPrint;
        boolean boolean6 = outputSettings4.forceAllElementAsBlock;
        boolean boolean7 = outputSettings4.getprettyPrint();
        boolean boolean8 = outputSettings4.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings4.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings12.charset = charset14;
        outputSettings12.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = outputSettings18.forceAllElementAsBlock;
        int int21 = outputSettings18.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings18.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        outputSettings24.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset30 = outputSettings29.charset();
        outputSettings24.setcharset(charset30);
        outputSettings23.setcharset(charset30);
        outputSettings18.setcharset(charset30);
        outputSettings12.setcharset(charset30);
        outputSettings10.setcharset(charset30);
        outputSettings0.setcharset(charset30);
        boolean boolean37 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings0.escapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        org.jsoup.nodes.Node node7 = textNode2.parent();
        boolean boolean9 = textNode2.hasAttr("text");
        java.lang.String str10 = textNode2.outerHtml();
        java.lang.String str11 = textNode2.getWholeText();
        int int12 = textNode2.siblingIndex();
        java.lang.String str13 = textNode2.toString();
        java.lang.String str14 = textNode2.outerHtml();
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        boolean boolean20 = textNode17.equals((java.lang.Object) outputSettings18);
        textNode17.text = "i!";
        org.jsoup.nodes.TextNode textNode24 = textNode17.text("#text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node25 = textNode2.before((org.jsoup.nodes.Node) textNode24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(textNode24);
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        outputSettings0.setprettyPrint(false);
        boolean boolean6 = outputSettings0.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings15.setescapeMode(escapeMode18);
        outputSettings15.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings15.setescapeMode(escapeMode22);
        boolean boolean24 = outputSettings15.forceAllElementAsBlock;
        int int25 = outputSettings15.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings15.escapeMode(escapeMode26);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings28.setescapeMode(escapeMode31);
        outputSettings28.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        outputSettings28.setescapeMode(escapeMode35);
        boolean boolean37 = outputSettings28.forceAllElementAsBlock;
        int int38 = outputSettings28.indentAmount;
        java.nio.charset.Charset charset39 = outputSettings28.getcharset();
        outputSettings27.setcharset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset39);
        outputSettings14.setindentAmount(100);
        outputSettings14.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = null;
        outputSettings46.setescapeMode(escapeMode49);
        outputSettings46.indentAmount = '4';
        java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings46.getcharsetEncoder();
        outputSettings14.setcharsetEncoder(charsetEncoder53);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        boolean boolean58 = outputSettings55.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings55.prettyPrint(false);
        java.nio.charset.Charset charset61 = outputSettings55.charset();
        outputSettings55.setindentAmount(52);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean65 = outputSettings64.prettyPrint;
        boolean boolean66 = outputSettings64.forceAllElementAsBlock;
        outputSettings64.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings64.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings70.encoder();
        outputSettings55.charsetEncoder = charsetEncoder71;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings55.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean76 = outputSettings75.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings75.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings77.clone();
        outputSettings77.prettyPrint = true;
        boolean boolean81 = outputSettings77.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings77.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset85 = outputSettings84.charset();
        java.nio.charset.CharsetEncoder charsetEncoder86 = outputSettings84.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder87 = outputSettings84.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode88 = outputSettings84.escapeMode;
        outputSettings77.setescapeMode(escapeMode88);
        outputSettings74.setescapeMode(escapeMode88);
        outputSettings14.escapeMode = escapeMode88;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charsetEncoder53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertNotNull(charsetEncoder71);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(outputSettings83);
        org.junit.Assert.assertNotNull(charset85);
        org.junit.Assert.assertNotNull(charsetEncoder86);
        org.junit.Assert.assertNotNull(charsetEncoder87);
        org.junit.Assert.assertTrue("'" + escapeMode88 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode88.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = textNode2.equals((java.lang.Object) outputSettings3);
        int int6 = outputSettings3.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings3.prettyPrint(true);
        java.nio.charset.Charset charset9 = outputSettings8.charset;
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("text", "text");
        int int13 = textNode12.siblingIndex();
        int int14 = textNode12.siblingIndex();
        org.jsoup.nodes.Node node15 = textNode12.clone();
        java.lang.String str16 = textNode12.text;
        org.jsoup.nodes.Node node17 = textNode12.previousSibling();
        boolean boolean19 = textNode12.hasAttr("text");
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        boolean boolean23 = outputSettings20.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(false);
        java.nio.charset.Charset charset26 = outputSettings20.charset;
        outputSettings20.setprettyPrint(false);
        java.nio.charset.Charset charset29 = outputSettings20.getcharset();
        boolean boolean30 = textNode12.equals((java.lang.Object) charset29);
        outputSettings8.setcharset(charset29);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        java.nio.charset.Charset charset6 = null;
        outputSettings5.setcharset(charset6);
        boolean boolean8 = outputSettings5.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.prettyPrint(false);
        outputSettings5.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings13.setcharset(charset19);
        outputSettings13.setprettyPrint(true);
        java.nio.charset.Charset charset23 = outputSettings13.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings13.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        boolean boolean28 = outputSettings25.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings25.prettyPrint(false);
        int int31 = outputSettings30.getindentAmount();
        outputSettings30.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings34.charset = charset36;
        outputSettings34.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        int int43 = outputSettings40.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings40.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        boolean boolean48 = outputSettings46.forceAllElementAsBlock;
        outputSettings46.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset52 = outputSettings51.charset();
        outputSettings46.setcharset(charset52);
        outputSettings45.setcharset(charset52);
        outputSettings40.setcharset(charset52);
        outputSettings34.setcharset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings30.charset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean59 = outputSettings58.prettyPrint;
        boolean boolean60 = outputSettings58.forceAllElementAsBlock;
        boolean boolean61 = outputSettings58.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings58.prettyPrint(false);
        int int64 = outputSettings63.getindentAmount();
        outputSettings63.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder67 = outputSettings63.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean69 = outputSettings68.prettyPrint;
        boolean boolean70 = outputSettings68.forceAllElementAsBlock;
        boolean boolean71 = outputSettings68.getprettyPrint();
        boolean boolean72 = outputSettings68.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings68.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode75 = outputSettings74.escapeMode();
        outputSettings63.setescapeMode(escapeMode75);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings30.escapeMode(escapeMode75);
        java.nio.charset.Charset charset78 = outputSettings77.charset();
        outputSettings13.setcharset(charset78);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset82 = outputSettings81.charset();
        outputSettings80.charset = charset82;
        java.nio.charset.CharsetEncoder charsetEncoder84 = outputSettings80.encoder();
        boolean boolean85 = outputSettings80.prettyPrint;
        java.nio.charset.Charset charset86 = outputSettings80.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings13.charset(charset86);
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings5.charset(charset86);
        outputSettings88.setprettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode91 = outputSettings88.getescapeMode();
        boolean boolean92 = outputSettings88.forceAllElementAsBlock();
        boolean boolean93 = outputSettings88.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings95 = outputSettings88.prettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertTrue("'" + escapeMode75 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode75.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(charset82);
        org.junit.Assert.assertNotNull(charsetEncoder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(charset86);
        org.junit.Assert.assertNotNull(outputSettings87);
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertTrue("'" + escapeMode91 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode91.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(outputSettings95);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        java.nio.charset.Charset charset12 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        boolean boolean15 = outputSettings13.forceAllElementAsBlock;
        outputSettings13.indentAmount = (short) 10;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings13.escapeMode;
        outputSettings0.escapeMode = escapeMode18;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings0.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset24 = outputSettings23.charset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset24);
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode6.siblingNodes();
        textNode6.ensureAttributes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset13 = outputSettings12.charset();
        outputSettings11.charset = charset13;
        boolean boolean15 = outputSettings11.getforceAllElementAsBlock();
        outputSettings11.setprettyPrint(false);
        textNode6.outerHtmlTail(stringBuilder9, (int) '#', outputSettings11);
        textNode6.settext("ext");
        java.lang.String str21 = textNode6.getWholeText();
        java.lang.String str22 = textNode6.text();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode24 = textNode6.splitText((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must be not be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("text");
        org.jsoup.nodes.Node node8 = textNode0.clone();
        org.jsoup.nodes.Attributes attributes9 = textNode0.attributes();
        org.jsoup.nodes.Node node10 = textNode0.parent();
        org.jsoup.nodes.Node node11 = textNode0.clone();
        java.lang.String str12 = textNode0.toString();
        org.jsoup.nodes.Attributes attributes13 = textNode0.attributes();
        textNode0.settext("");
        org.jsoup.nodes.Node node16 = textNode0.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = node16.after("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(attributes9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset1 = outputSettings0.charset();
        int int2 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset3 = outputSettings0.charset;
        boolean boolean4 = outputSettings0.prettyPrint;
        outputSettings0.setforceAllElementAsBlock(true);
        boolean boolean7 = outputSettings0.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings8.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings8.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        outputSettings8.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings8.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        outputSettings16.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset22 = outputSettings21.charset();
        outputSettings16.setcharset(charset22);
        outputSettings16.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset28 = outputSettings27.charset();
        outputSettings26.charset = charset28;
        outputSettings26.indentAmount = (-1);
        java.nio.charset.Charset charset32 = outputSettings26.charset();
        outputSettings26.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset35 = outputSettings26.getcharset();
        outputSettings16.setcharset(charset35);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings8.charset(charset35);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings37.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings0.escapeMode(escapeMode38);
        int int40 = outputSettings39.indentAmount;
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "");
        org.jsoup.nodes.Attributes attributes3 = textNode2.attributes();
        java.lang.String str4 = textNode2.baseUri();
        java.lang.String str5 = textNode2.gettext();
        boolean boolean6 = textNode2.isBlank();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(attributes3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "t");
        java.lang.String str3 = textNode2.nodeName();
        java.lang.String str5 = textNode2.absUrl("t");
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.TextNode textNode8 = new org.jsoup.nodes.TextNode();
        textNode8.setBaseUri("hi!");
        java.lang.String str11 = textNode8.getTEXT_KEY();
        textNode8.text = "hi!";
        java.lang.String str14 = textNode8.getWholeText();
        java.lang.StringBuilder stringBuilder15 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        boolean boolean19 = outputSettings17.forceAllElementAsBlock;
        boolean boolean20 = outputSettings17.getprettyPrint();
        boolean boolean21 = outputSettings17.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings17.indentAmount((int) '4');
        textNode8.outerHtmlTail(stringBuilder15, 35, outputSettings23);
        textNode2.outerHtmlTail(stringBuilder6, (-1), outputSettings23);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings23.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings23.prettyPrint(false);
        boolean boolean30 = outputSettings29.forceAllElementAsBlock();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.siblingNodes();
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset15 = outputSettings14.charset();
        outputSettings13.charset = charset15;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings13.encoder();
        outputSettings13.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings13.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings13.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        outputSettings22.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset28 = outputSettings27.charset();
        outputSettings22.setcharset(charset28);
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings22.getcharsetEncoder();
        outputSettings13.setcharsetEncoder(charsetEncoder30);
        boolean boolean32 = outputSettings13.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings13.getescapeMode();
        textNode2.outerHtmlTail(stringBuilder11, (int) (short) 10, outputSettings13);
        boolean boolean36 = textNode2.hasAttr("");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.clone();
        textNode2.setBaseUri("text");
        java.lang.String str12 = textNode2.text;
        textNode2.settext("t");
        boolean boolean16 = textNode2.hasAttr("text");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings0.indentAmount(100);
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings0.getescapeMode();
        boolean boolean13 = outputSettings0.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        textNode2.text = "hi!";
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        java.lang.String str12 = textNode2.text();
        java.lang.String str13 = textNode2.gettext();
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode16.childNodes();
        org.jsoup.nodes.TextNode textNode19 = textNode16.splitText(1);
        java.lang.String str20 = textNode16.getTEXT_KEY();
        java.lang.String str21 = textNode16.toString();
        boolean boolean23 = textNode16.equals((java.lang.Object) (short) 0);
        java.lang.String str24 = textNode16.text;
        org.jsoup.nodes.Attributes attributes25 = textNode16.attributes();
        textNode16.settext("text");
        org.jsoup.nodes.Attributes attributes28 = textNode16.attributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node29 = textNode2.before((org.jsoup.nodes.Node) textNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertNotNull(textNode19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "t" + "'", str21, "t");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "t" + "'", str24, "t");
        org.junit.Assert.assertNotNull(attributes25);
        org.junit.Assert.assertNotNull(attributes28);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        java.lang.String str6 = textNode2.getTEXT_KEY();
        java.lang.String str7 = textNode2.toString();
        boolean boolean9 = textNode2.equals((java.lang.Object) (short) 0);
        org.jsoup.nodes.Node node10 = textNode2.parent();
        java.lang.String str11 = textNode2.getWholeText();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "t" + "'", str7, "t");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "t" + "'", str11, "t");
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean9 = outputSettings8.prettyPrint;
        boolean boolean10 = outputSettings8.forceAllElementAsBlock;
        int int11 = outputSettings8.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings8.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        boolean boolean16 = outputSettings14.forceAllElementAsBlock;
        outputSettings14.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset20 = outputSettings19.charset();
        outputSettings14.setcharset(charset20);
        outputSettings13.setcharset(charset20);
        outputSettings8.setcharset(charset20);
        textNode2.outerHtmlTail(stringBuilder6, 10, outputSettings8);
        org.jsoup.nodes.Node node26 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Document document27 = textNode2.ownerDocument();
        java.lang.String str28 = textNode2.text();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "text" + "'", str28, "text");
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean5 = outputSettings4.prettyPrint;
        boolean boolean6 = outputSettings4.forceAllElementAsBlock;
        outputSettings4.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset10 = outputSettings9.charset();
        outputSettings4.setcharset(charset10);
        java.nio.charset.Charset charset12 = outputSettings4.getcharset();
        outputSettings3.setcharset(charset12);
        boolean boolean14 = outputSettings3.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.settext("text");
        org.jsoup.nodes.Node node6 = textNode0.nextSibling();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        outputSettings7.charset = charset9;
        boolean boolean11 = outputSettings7.getforceAllElementAsBlock();
        boolean boolean12 = textNode0.equals((java.lang.Object) outputSettings7);
        outputSettings7.forceAllElementAsBlock = false;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        textNode2.settext("hi!");
        int int8 = textNode2.siblingIndex();
        java.lang.String str9 = textNode2.baseUri();
        textNode2.setBaseUri("t");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings16.clone();
        outputSettings16.prettyPrint = true;
        boolean boolean20 = outputSettings16.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings16.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) ' ');
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings24.clone();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder12, (int) (byte) 1, outputSettings25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(outputSettings25);
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        boolean boolean7 = textNode0.hasAttr("");
        java.lang.String str8 = textNode0.toString();
        java.lang.String str9 = textNode0.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset21 = outputSettings20.charset();
        outputSettings19.charset = charset21;
        outputSettings19.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        int int28 = outputSettings25.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean32 = outputSettings31.prettyPrint;
        boolean boolean33 = outputSettings31.forceAllElementAsBlock;
        outputSettings31.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset37 = outputSettings36.charset();
        outputSettings31.setcharset(charset37);
        outputSettings30.setcharset(charset37);
        outputSettings25.setcharset(charset37);
        outputSettings19.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.forceAllElementAsBlock(false);
        boolean boolean45 = textNode0.equals((java.lang.Object) outputSettings42);
        boolean boolean46 = outputSettings42.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings42.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings48.escapeMode;
        outputSettings48.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean53 = outputSettings52.prettyPrint;
        boolean boolean54 = outputSettings52.forceAllElementAsBlock;
        boolean boolean55 = outputSettings52.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings52.prettyPrint(false);
        int int58 = outputSettings57.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings57.forceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = outputSettings60.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings48.escapeMode(escapeMode61);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings62);
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.nodeName();
        java.lang.String str8 = textNode2.nodeName();
        textNode2.text = "hi!";
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        java.lang.String str12 = textNode2.text();
        java.lang.String str13 = textNode2.gettext();
        java.lang.String str14 = textNode2.text();
        org.jsoup.nodes.Node node15 = textNode2.clone();
        org.jsoup.select.NodeVisitor nodeVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node17 = node15.traverse(nodeVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#text" + "'", str7, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        java.lang.String str7 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        int int9 = textNode2.siblingIndex();
        boolean boolean10 = textNode2.isBlank();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset12 = outputSettings11.charset();
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings11.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = null;
        outputSettings11.setescapeMode(escapeMode14);
        boolean boolean16 = outputSettings11.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings17.charset = charset19;
        outputSettings17.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings17.getcharsetEncoder();
        outputSettings11.charsetEncoder = charsetEncoder23;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings11.prettyPrint(true);
        outputSettings26.indentAmount = (byte) 100;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings26.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings26.getcharsetEncoder();
        boolean boolean31 = textNode2.equals((java.lang.Object) outputSettings26);
        java.util.List<org.jsoup.nodes.Node> nodeList32 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode35 = new org.jsoup.nodes.TextNode("text", "text");
        int int36 = textNode35.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList37 = textNode35.childNodes();
        org.jsoup.nodes.TextNode textNode39 = textNode35.text("");
        int int40 = textNode35.siblingIndex();
        org.jsoup.nodes.TextNode textNode42 = textNode35.text("hi!");
        org.jsoup.nodes.TextNode textNode44 = textNode35.text("#text");
        java.lang.String str45 = textNode35.nodeName();
        java.lang.String str46 = textNode35.getWholeText();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node47 = textNode2.after((org.jsoup.nodes.Node) textNode35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNull(escapeMode29);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertNotNull(textNode39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(textNode42);
        org.junit.Assert.assertNotNull(textNode44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "#text" + "'", str45, "#text");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#text" + "'", str46, "#text");
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        int int3 = outputSettings0.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.getcharsetEncoder();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        boolean boolean8 = outputSettings6.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = null;
        outputSettings6.setescapeMode(escapeMode9);
        outputSettings6.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = null;
        outputSettings6.setescapeMode(escapeMode13);
        boolean boolean15 = outputSettings6.forceAllElementAsBlock;
        int int16 = outputSettings6.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings19.setescapeMode(escapeMode22);
        outputSettings19.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        outputSettings19.setescapeMode(escapeMode26);
        boolean boolean28 = outputSettings19.forceAllElementAsBlock;
        int int29 = outputSettings19.indentAmount;
        java.nio.charset.Charset charset30 = outputSettings19.getcharset();
        outputSettings18.setcharset(charset30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings0.charset(charset30);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        int int42 = outputSettings39.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings39.getcharsetEncoder();
        outputSettings38.setcharsetEncoder(charsetEncoder43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings38.escapeMode;
        outputSettings0.setescapeMode(escapeMode45);
        org.jsoup.nodes.TextNode textNode49 = new org.jsoup.nodes.TextNode("text", "text");
        int int50 = textNode49.siblingIndex();
        int int51 = textNode49.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList52 = textNode49.childNodes();
        java.lang.String str53 = textNode49.gettext();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        boolean boolean56 = outputSettings54.forceAllElementAsBlock;
        int int57 = outputSettings54.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings54.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        boolean boolean62 = outputSettings60.forceAllElementAsBlock;
        outputSettings60.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset66 = outputSettings65.charset();
        outputSettings60.setcharset(charset66);
        outputSettings59.setcharset(charset66);
        outputSettings54.setcharset(charset66);
        boolean boolean70 = textNode49.equals((java.lang.Object) charset66);
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings0.charset(charset66);
        boolean boolean72 = outputSettings71.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings71.getescapeMode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "text" + "'", str53, "text");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        boolean boolean9 = outputSettings0.forceAllElementAsBlock;
        int int10 = outputSettings0.indentAmount;
        java.nio.charset.Charset charset11 = outputSettings0.getcharset();
        boolean boolean12 = outputSettings0.prettyPrint();
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("", "");
        java.lang.String str16 = textNode15.outerHtml();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset19 = outputSettings18.charset();
        outputSettings17.charset = charset19;
        outputSettings17.indentAmount = (-1);
        java.nio.charset.Charset charset23 = outputSettings17.charset();
        boolean boolean24 = outputSettings17.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings17.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings17.getescapeMode();
        boolean boolean27 = textNode15.equals((java.lang.Object) escapeMode26);
        outputSettings0.escapeMode = escapeMode26;
        org.jsoup.nodes.TextNode textNode31 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList32 = textNode31.childNodes();
        org.jsoup.nodes.TextNode textNode34 = textNode31.splitText(1);
        org.jsoup.nodes.Node node37 = textNode34.attr("hi!", "t");
        java.lang.String str39 = textNode34.attr("#text");
        java.lang.String str40 = textNode34.getTEXT_KEY();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset43 = outputSettings42.charset();
        outputSettings41.charset = charset43;
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings41.encoder();
        outputSettings41.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings41.escapeMode;
        outputSettings41.prettyPrint = false;
        boolean boolean51 = outputSettings41.getforceAllElementAsBlock();
        boolean boolean52 = textNode34.equals((java.lang.Object) outputSettings41);
        outputSettings41.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings41.getescapeMode();
        outputSettings0.setescapeMode(escapeMode55);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertNotNull(textNode34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "text" + "'", str40, "text");
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode8 = textNode2.splitText(1);
        org.jsoup.nodes.Node node11 = textNode2.attr("text", "#text");
        java.lang.String str12 = textNode2.gettext();
        java.lang.String str13 = textNode2.outerHtml();
        java.lang.String str14 = textNode2.nodeName();
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node18 = textNode2.attr("#", "!");
        java.lang.Class<?> wildcardClass19 = node18.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "t" + "'", str12, "t");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("t", "#text");
        org.jsoup.nodes.Node node3 = textNode2.parent();
        org.jsoup.select.NodeVisitor nodeVisitor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node5 = textNode2.traverse(nodeVisitor4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.escapeMode(escapeMode6);
        outputSettings5.setindentAmount(52);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        boolean boolean14 = outputSettings10.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings10.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode();
        outputSettings16.setprettyPrint(true);
        int int20 = outputSettings16.indentAmount();
        outputSettings16.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings16.prettyPrint(true);
        int int25 = outputSettings24.getindentAmount();
        org.jsoup.nodes.TextNode textNode26 = new org.jsoup.nodes.TextNode();
        textNode26.setBaseUri("hi!");
        java.lang.String str29 = textNode26.getTEXT_KEY();
        textNode26.text = "hi!";
        java.lang.String str32 = textNode26.getWholeText();
        java.lang.StringBuilder stringBuilder33 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        outputSettings35.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings35.getcharsetEncoder();
        outputSettings35.prettyPrint = true;
        boolean boolean43 = outputSettings35.forceAllElementAsBlock;
        textNode26.outerHtmlTail(stringBuilder33, (int) (byte) 100, outputSettings35);
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings35.encoder();
        outputSettings24.setcharsetEncoder(charsetEncoder45);
        outputSettings5.setcharsetEncoder(charsetEncoder45);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "text" + "'", str29, "text");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charsetEncoder45);
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        int int6 = outputSettings0.indentAmount();
        int int7 = outputSettings0.indentAmount;
        boolean boolean8 = outputSettings0.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings0.charsetEncoder;
        java.nio.charset.Charset charset10 = outputSettings0.charset;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertNotNull(charset10);
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings3.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        boolean boolean9 = outputSettings5.forceAllElementAsBlock();
        boolean boolean10 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings5.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings4.escapeMode(escapeMode11);
        int int13 = outputSettings12.indentAmount();
        boolean boolean14 = outputSettings12.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset17 = outputSettings16.charset();
        outputSettings15.charset = charset17;
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.encoder();
        boolean boolean20 = outputSettings15.getprettyPrint();
        int int21 = outputSettings15.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings22.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings22.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings22.getcharsetEncoder();
        outputSettings15.setcharsetEncoder(charsetEncoder26);
        int int28 = outputSettings15.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        outputSettings29.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings29.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        boolean boolean37 = outputSettings35.forceAllElementAsBlock;
        outputSettings35.setprettyPrint(false);
        outputSettings35.setindentAmount(0);
        outputSettings35.indentAmount = (byte) 1;
        java.nio.charset.Charset charset44 = outputSettings35.getcharset();
        outputSettings29.setcharset(charset44);
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings29.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean48 = outputSettings47.prettyPrint;
        boolean boolean49 = outputSettings47.forceAllElementAsBlock;
        outputSettings47.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings47.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings53.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings53.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings53.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean60 = outputSettings59.prettyPrint;
        boolean boolean61 = outputSettings59.forceAllElementAsBlock;
        boolean boolean62 = outputSettings59.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings59.prettyPrint(false);
        int int65 = outputSettings64.getindentAmount();
        outputSettings64.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder68 = outputSettings64.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean70 = outputSettings69.prettyPrint;
        boolean boolean71 = outputSettings69.forceAllElementAsBlock;
        boolean boolean72 = outputSettings69.getprettyPrint();
        boolean boolean73 = outputSettings69.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings69.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings75.escapeMode();
        outputSettings64.setescapeMode(escapeMode76);
        outputSettings53.escapeMode = escapeMode76;
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings29.escapeMode(escapeMode76);
        outputSettings15.escapeMode = escapeMode76;
        outputSettings12.escapeMode = escapeMode76;
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean83 = outputSettings82.prettyPrint;
        boolean boolean84 = outputSettings82.forceAllElementAsBlock;
        outputSettings82.indentAmount = (short) 10;
        java.nio.charset.Charset charset87 = outputSettings82.charset;
        java.nio.charset.Charset charset88 = outputSettings82.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings89 = outputSettings12.charset(charset88);
        java.nio.charset.Charset charset90 = outputSettings89.charset();
        boolean boolean91 = outputSettings89.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(charsetEncoder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(charset87);
        org.junit.Assert.assertNotNull(charset88);
        org.junit.Assert.assertNotNull(outputSettings89);
        org.junit.Assert.assertNotNull(charset90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.String str7 = textNode2.toString();
        java.lang.String str9 = textNode2.attr("hi!");
        textNode2.settext("h");
        org.jsoup.nodes.Document document12 = textNode2.ownerDocument();
        java.lang.String str13 = textNode2.getWholeText();
        textNode2.settext("text");
        org.jsoup.nodes.Node node16 = textNode2.nextSibling();
        org.jsoup.nodes.Node node18 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.TextNode textNode21 = org.jsoup.nodes.TextNode.createFromEncoded("text", "#text");
        java.lang.String str22 = textNode21.gettext();
        org.jsoup.nodes.Node node23 = textNode21.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = node18.before((org.jsoup.nodes.Node) textNode21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(textNode21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        java.lang.String str4 = textNode0.baseUri();
        java.lang.String str5 = textNode0.text;
        org.jsoup.nodes.TextNode textNode8 = new org.jsoup.nodes.TextNode("text", "text");
        int int9 = textNode8.siblingIndex();
        int int10 = textNode8.siblingIndex();
        org.jsoup.nodes.Node node11 = textNode8.clone();
        boolean boolean12 = textNode0.equals((java.lang.Object) textNode8);
        java.lang.String str13 = textNode8.nodeName();
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode8.siblingNodes();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode8.siblingNodes();
        java.lang.String str16 = textNode8.getTEXT_KEY();
        java.lang.String str17 = textNode8.text;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.indentAmount(1);
        outputSettings0.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings9.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = null;
        outputSettings12.setescapeMode(escapeMode15);
        outputSettings12.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null;
        outputSettings12.setescapeMode(escapeMode19);
        outputSettings12.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings12.getcharsetEncoder();
        outputSettings9.charsetEncoder = charsetEncoder23;
        outputSettings0.charsetEncoder = charsetEncoder23;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings0.clone();
        outputSettings0.setindentAmount((int) (short) 1);
        boolean boolean29 = outputSettings0.forceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean4 = outputSettings3.prettyPrint;
        boolean boolean5 = outputSettings3.forceAllElementAsBlock;
        boolean boolean6 = outputSettings3.getprettyPrint();
        boolean boolean7 = outputSettings3.forceAllElementAsBlock();
        outputSettings3.forceAllElementAsBlock = false;
        outputSettings3.setindentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset14 = outputSettings13.charset();
        outputSettings12.charset = charset14;
        outputSettings12.indentAmount = (-1);
        java.nio.charset.Charset charset18 = outputSettings12.charset();
        outputSettings3.charset = charset18;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        int int23 = outputSettings20.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings20.getcharsetEncoder();
        boolean boolean25 = outputSettings20.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = null;
        outputSettings26.setescapeMode(escapeMode29);
        outputSettings26.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = null;
        outputSettings26.setescapeMode(escapeMode33);
        boolean boolean35 = outputSettings26.forceAllElementAsBlock;
        int int36 = outputSettings26.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings26.escapeMode(escapeMode37);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null;
        outputSettings39.setescapeMode(escapeMode42);
        outputSettings39.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = null;
        outputSettings39.setescapeMode(escapeMode46);
        boolean boolean48 = outputSettings39.forceAllElementAsBlock;
        int int49 = outputSettings39.indentAmount;
        java.nio.charset.Charset charset50 = outputSettings39.getcharset();
        outputSettings38.setcharset(charset50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings20.charset(charset50);
        outputSettings3.setcharset(charset50);
        outputSettings2.charset = charset50;
        int int55 = outputSettings2.getindentAmount();
        boolean boolean56 = outputSettings2.prettyPrint();
        int int57 = outputSettings2.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings2.clone();
        int int59 = outputSettings2.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode4 = textNode2.splitText((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must be not be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null;
        outputSettings15.setescapeMode(escapeMode18);
        outputSettings15.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null;
        outputSettings15.setescapeMode(escapeMode22);
        boolean boolean24 = outputSettings15.forceAllElementAsBlock;
        int int25 = outputSettings15.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings15.escapeMode(escapeMode26);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        boolean boolean30 = outputSettings28.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings28.setescapeMode(escapeMode31);
        outputSettings28.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        outputSettings28.setescapeMode(escapeMode35);
        boolean boolean37 = outputSettings28.forceAllElementAsBlock;
        int int38 = outputSettings28.indentAmount;
        java.nio.charset.Charset charset39 = outputSettings28.getcharset();
        outputSettings27.setcharset(charset39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.charset(charset39);
        int int42 = outputSettings41.getindentAmount();
        boolean boolean43 = outputSettings41.prettyPrint();
        outputSettings41.setprettyPrint(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        outputSettings0.setprettyPrint(true);
        java.nio.charset.Charset charset10 = outputSettings0.getcharset();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings0.forceAllElementAsBlock(false);
        outputSettings14.setforceAllElementAsBlock(false);
        boolean boolean17 = outputSettings14.forceAllElementAsBlock();
        boolean boolean18 = outputSettings14.getprettyPrint();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings14.charset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.indentAmount((int) (short) 0);
        outputSettings0.prettyPrint = false;
        outputSettings0.prettyPrint = false;
        int int8 = outputSettings0.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode5 = textNode2.splitText(1);
        textNode2.settext("hi!");
        int int8 = textNode2.siblingIndex();
        java.lang.String str9 = textNode2.baseUri();
        textNode2.setBaseUri("t");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean15 = outputSettings14.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings16.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings19.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        boolean boolean26 = outputSettings24.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings24.setescapeMode(escapeMode27);
        outputSettings24.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = null;
        outputSettings24.setescapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings24.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode;
        outputSettings34.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings34.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        boolean boolean41 = outputSettings39.forceAllElementAsBlock;
        boolean boolean42 = outputSettings39.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings39.prettyPrint(false);
        java.nio.charset.Charset charset45 = outputSettings39.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings39.getescapeMode();
        outputSettings34.escapeMode = escapeMode46;
        boolean boolean48 = outputSettings34.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean50 = outputSettings49.prettyPrint;
        boolean boolean51 = outputSettings49.forceAllElementAsBlock;
        boolean boolean52 = outputSettings49.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings49.prettyPrint(false);
        java.nio.charset.Charset charset55 = outputSettings49.charset();
        outputSettings34.charset = charset55;
        outputSettings19.setcharset(charset55);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings18.charset(charset55);
        boolean boolean59 = outputSettings18.forceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder12, 32, outputSettings18);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNull(escapeMode35);
        org.junit.Assert.assertNull(escapeMode38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode6 = new org.jsoup.nodes.TextNode();
        textNode6.setBaseUri("hi!");
        java.lang.String str9 = textNode6.getTEXT_KEY();
        textNode6.text = "hi!";
        org.jsoup.nodes.TextNode textNode13 = textNode6.splitText((int) (byte) 0);
        org.jsoup.nodes.Node node16 = textNode13.attr("#text", "");
        boolean boolean17 = textNode2.equals((java.lang.Object) node16);
        java.lang.String str19 = textNode2.absUrl("ext");
        java.lang.String str20 = textNode2.text;
        java.util.List<org.jsoup.nodes.Node> nodeList21 = textNode2.siblingNodes();
        java.lang.String str22 = textNode2.outerHtml();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode2.after("t");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        boolean boolean4 = textNode2.hasAttr("");
        java.lang.String str5 = textNode2.gettext();
        org.jsoup.nodes.Node node6 = textNode2.clone();
        node6.setBaseUri("#text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = node6.before("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(node6);
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.Charset charset5 = outputSettings0.charset;
        outputSettings0.setprettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        boolean boolean13 = outputSettings10.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.prettyPrint(false);
        int int16 = outputSettings15.getindentAmount();
        outputSettings15.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        boolean boolean22 = outputSettings20.forceAllElementAsBlock;
        boolean boolean23 = outputSettings20.getprettyPrint();
        boolean boolean24 = outputSettings20.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings20.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode();
        outputSettings15.setescapeMode(escapeMode27);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        boolean boolean31 = outputSettings29.forceAllElementAsBlock;
        boolean boolean32 = outputSettings29.getprettyPrint();
        boolean boolean33 = outputSettings29.forceAllElementAsBlock();
        outputSettings29.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings29.charsetEncoder;
        java.nio.charset.Charset charset37 = outputSettings29.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings15.charset(charset37);
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings15.getescapeMode();
        outputSettings0.setescapeMode(escapeMode39);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.siblingNodes();
        textNode2.text = "";
        int int7 = textNode2.siblingIndex();
        boolean boolean9 = textNode2.hasAttr("#text");
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("", "#text");
        java.lang.String str13 = textNode12.outerHtml();
        java.lang.String str14 = textNode12.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.after((org.jsoup.nodes.Node) textNode12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.lang.String str5 = textNode2.absUrl("text");
        textNode2.setBaseUri("#text");
        boolean boolean9 = textNode2.hasAttr("#text");
        java.lang.String str10 = textNode2.toString();
        org.jsoup.nodes.Node node11 = textNode2.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = node11.siblingNodes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeList12);
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        java.lang.String str3 = textNode2.outerHtml();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "");
        org.jsoup.nodes.Node node3 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("hi!");
        java.lang.String str7 = textNode2.attr("i!");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("hi!");
        java.lang.String str3 = textNode0.getTEXT_KEY();
        textNode0.text = "hi!";
        org.jsoup.nodes.TextNode textNode7 = textNode0.splitText((int) (byte) 0);
        java.lang.String str8 = textNode0.getWholeText();
        org.jsoup.nodes.Node node9 = textNode0.parent();
        textNode0.text = "hi!";
        java.lang.String str13 = textNode0.absUrl("#");
        java.lang.String str14 = textNode0.text();
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("text", "text");
        int int18 = textNode17.siblingIndex();
        int int19 = textNode17.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList20 = textNode17.childNodes();
        java.lang.String str21 = textNode17.nodeName();
        org.jsoup.nodes.Node node22 = textNode17.previousSibling();
        org.jsoup.nodes.Node node24 = textNode17.removeAttr("text");
        org.jsoup.nodes.TextNode textNode26 = textNode17.text("#");
        boolean boolean28 = textNode26.hasAttr("h");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node29 = textNode0.after((org.jsoup.nodes.Node) textNode26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(textNode26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        int int7 = outputSettings0.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.forceAllElementAsBlock(true);
        boolean boolean11 = outputSettings8.prettyPrint;
        outputSettings8.setforceAllElementAsBlock(false);
        boolean boolean14 = outputSettings8.forceAllElementAsBlock;
        boolean boolean15 = outputSettings8.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        boolean boolean18 = outputSettings16.forceAllElementAsBlock;
        outputSettings16.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings16.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings22.encoder();
        boolean boolean24 = outputSettings22.prettyPrint;
        int int25 = outputSettings22.getindentAmount();
        int int26 = outputSettings22.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        boolean boolean29 = outputSettings27.forceAllElementAsBlock;
        boolean boolean30 = outputSettings27.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings27.prettyPrint(false);
        java.nio.charset.Charset charset33 = outputSettings27.charset;
        outputSettings22.setcharset(charset33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings8.charset(charset33);
        java.nio.charset.Charset charset36 = outputSettings35.getcharset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(charset36);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset2 = outputSettings1.charset();
        outputSettings0.charset = charset2;
        java.nio.charset.CharsetEncoder charsetEncoder4 = outputSettings0.encoder();
        boolean boolean5 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset6 = outputSettings0.charset;
        java.nio.charset.Charset charset7 = outputSettings0.getcharset();
        outputSettings0.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean11 = outputSettings10.prettyPrint;
        boolean boolean12 = outputSettings10.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings10.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder15 = null;
        outputSettings14.charsetEncoder = charsetEncoder15;
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings14.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings0.escapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        outputSettings19.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset25 = outputSettings24.charset();
        outputSettings19.setcharset(charset25);
        outputSettings19.setprettyPrint(true);
        java.nio.charset.Charset charset29 = outputSettings19.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings19.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings19.escapeMode();
        boolean boolean32 = outputSettings19.getprettyPrint();
        org.jsoup.nodes.TextNode textNode35 = new org.jsoup.nodes.TextNode("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        boolean boolean38 = textNode35.equals((java.lang.Object) outputSettings36);
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings36.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings19.escapeMode(escapeMode39);
        outputSettings0.escapeMode = escapeMode39;
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings40);
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.getWholeText();
        java.lang.String str7 = textNode2.toString();
        org.jsoup.nodes.Node node8 = textNode2.parent();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings11.indentAmount((int) (short) 0);
        outputSettings11.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings11.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings11.forceAllElementAsBlock(true);
        textNode2.outerHtmlTail(stringBuilder9, (int) 'a', outputSettings11);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings21.forceAllElementAsBlock(true);
        int int28 = outputSettings21.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings21.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.forceAllElementAsBlock(true);
        outputSettings31.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean35 = outputSettings34.prettyPrint;
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        outputSettings34.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings34.indentAmount(1);
        outputSettings40.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        outputSettings43.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset49 = outputSettings48.charset();
        outputSettings43.setcharset(charset49);
        outputSettings43.setprettyPrint(true);
        java.nio.charset.Charset charset53 = outputSettings43.getcharset();
        outputSettings40.setcharset(charset53);
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings40.escapeMode();
        int int56 = outputSettings40.getindentAmount();
        outputSettings40.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset59 = outputSettings40.charset();
        outputSettings31.charset = charset59;
        outputSettings11.charset = charset59;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(charset59);
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = null;
        outputSettings0.setescapeMode(escapeMode3);
        outputSettings0.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = null;
        outputSettings0.setescapeMode(escapeMode7);
        outputSettings0.setprettyPrint(false);
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode("text", "text");
        int int14 = textNode13.siblingIndex();
        int int15 = textNode13.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode13.childNodes();
        java.lang.StringBuilder stringBuilder17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean20 = outputSettings19.prettyPrint;
        boolean boolean21 = outputSettings19.forceAllElementAsBlock;
        int int22 = outputSettings19.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings19.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean26 = outputSettings25.prettyPrint;
        boolean boolean27 = outputSettings25.forceAllElementAsBlock;
        outputSettings25.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset31 = outputSettings30.charset();
        outputSettings25.setcharset(charset31);
        outputSettings24.setcharset(charset31);
        outputSettings19.setcharset(charset31);
        textNode13.outerHtmlTail(stringBuilder17, 10, outputSettings19);
        int int36 = outputSettings19.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings19.encoder();
        outputSettings0.charsetEncoder = charsetEncoder37;
        int int39 = outputSettings0.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "ext");
        textNode2.ensureAttributes();
        int int4 = textNode2.siblingIndex();
        textNode2.text = "ext";
        textNode2.settext("i");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        boolean boolean13 = outputSettings11.forceAllElementAsBlock;
        boolean boolean14 = outputSettings11.getprettyPrint();
        boolean boolean15 = outputSettings11.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings11.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode();
        outputSettings17.setprettyPrint(true);
        int int21 = outputSettings17.indentAmount();
        outputSettings17.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings17.prettyPrint(true);
        boolean boolean26 = outputSettings17.getforceAllElementAsBlock();
        int int27 = outputSettings17.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings17.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings17.encoder();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder9, (int) (short) -1, outputSettings17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(charsetEncoder30);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        boolean boolean3 = outputSettings0.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.prettyPrint(false);
        int int6 = outputSettings5.getindentAmount();
        outputSettings5.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        outputSettings9.indentAmount = (-1);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean16 = outputSettings15.prettyPrint;
        boolean boolean17 = outputSettings15.forceAllElementAsBlock;
        int int18 = outputSettings15.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings15.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean22 = outputSettings21.prettyPrint;
        boolean boolean23 = outputSettings21.forceAllElementAsBlock;
        outputSettings21.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        outputSettings21.setcharset(charset27);
        outputSettings20.setcharset(charset27);
        outputSettings15.setcharset(charset27);
        outputSettings9.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings5.charset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean34 = outputSettings33.prettyPrint;
        boolean boolean35 = outputSettings33.forceAllElementAsBlock;
        boolean boolean36 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.prettyPrint(false);
        int int39 = outputSettings38.getindentAmount();
        outputSettings38.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings38.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean44 = outputSettings43.prettyPrint;
        boolean boolean45 = outputSettings43.forceAllElementAsBlock;
        boolean boolean46 = outputSettings43.getprettyPrint();
        boolean boolean47 = outputSettings43.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings43.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings49.escapeMode();
        outputSettings38.setescapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings5.escapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean54 = outputSettings53.prettyPrint;
        boolean boolean55 = outputSettings53.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = null;
        outputSettings53.setescapeMode(escapeMode56);
        outputSettings53.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = null;
        outputSettings53.setescapeMode(escapeMode60);
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings53.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean65 = outputSettings64.prettyPrint;
        boolean boolean66 = outputSettings64.forceAllElementAsBlock;
        outputSettings64.setprettyPrint(false);
        java.nio.charset.Charset charset69 = outputSettings64.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings63.charset(charset69);
        outputSettings52.charset = charset69;
        outputSettings52.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean75 = outputSettings74.prettyPrint;
        boolean boolean76 = outputSettings74.forceAllElementAsBlock;
        boolean boolean77 = outputSettings74.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings74.prettyPrint(false);
        int int80 = outputSettings79.getindentAmount();
        outputSettings79.setindentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder83 = outputSettings79.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean85 = outputSettings84.prettyPrint;
        boolean boolean86 = outputSettings84.forceAllElementAsBlock;
        boolean boolean87 = outputSettings84.getprettyPrint();
        boolean boolean88 = outputSettings84.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings84.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode91 = outputSettings90.escapeMode();
        outputSettings79.setescapeMode(escapeMode91);
        boolean boolean93 = outputSettings79.prettyPrint;
        java.nio.charset.Charset charset94 = outputSettings79.charset();
        java.nio.charset.CharsetEncoder charsetEncoder95 = outputSettings79.charsetEncoder;
        outputSettings52.charsetEncoder = charsetEncoder95;
        java.nio.charset.CharsetEncoder charsetEncoder97 = outputSettings52.encoder();
        outputSettings52.indentAmount = (byte) 100;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertTrue("'" + escapeMode91 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode91.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(charset94);
        org.junit.Assert.assertNotNull(charsetEncoder95);
        org.junit.Assert.assertNotNull(charsetEncoder97);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean6 = outputSettings5.prettyPrint;
        boolean boolean7 = outputSettings5.forceAllElementAsBlock;
        boolean boolean8 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset11 = outputSettings10.charset();
        outputSettings9.charset = charset11;
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings9.encoder();
        boolean boolean14 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings5.escapeMode(escapeMode15);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings0.escapeMode(escapeMode15);
        boolean boolean18 = outputSettings17.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean21 = outputSettings20.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean24 = outputSettings23.prettyPrint;
        boolean boolean25 = outputSettings23.forceAllElementAsBlock;
        boolean boolean26 = outputSettings23.getprettyPrint();
        boolean boolean27 = outputSettings23.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings23.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings23.getescapeMode();
        outputSettings22.setescapeMode(escapeMode30);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings22.indentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset36 = outputSettings35.charset();
        outputSettings34.charset = charset36;
        outputSettings34.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings34.getcharsetEncoder();
        outputSettings34.setforceAllElementAsBlock(false);
        boolean boolean43 = outputSettings34.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean45 = outputSettings44.prettyPrint;
        boolean boolean46 = outputSettings44.forceAllElementAsBlock;
        outputSettings44.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings44.indentAmount(1);
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings50.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings50.charsetEncoder;
        outputSettings50.prettyPrint = false;
        java.nio.charset.Charset charset55 = outputSettings50.charset;
        outputSettings34.setcharset(charset55);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings22.charset(charset55);
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode();
        outputSettings19.escapeMode = escapeMode58;
        int int60 = outputSettings19.indentAmount;
        outputSettings19.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings19.prettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(charsetEncoder40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(outputSettings64);
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.indentAmount((int) (short) 0);
        outputSettings0.prettyPrint = false;
        int int6 = outputSettings0.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        outputSettings8.setescapeMode(escapeMode11);
        boolean boolean13 = outputSettings8.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset16 = outputSettings15.charset();
        outputSettings14.charset = charset16;
        outputSettings14.indentAmount = (-1);
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings14.getcharsetEncoder();
        outputSettings8.charsetEncoder = charsetEncoder20;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings8.prettyPrint(true);
        int int24 = outputSettings8.indentAmount();
        java.nio.charset.Charset charset25 = outputSettings8.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean27 = outputSettings26.prettyPrint;
        boolean boolean28 = outputSettings26.forceAllElementAsBlock;
        int int29 = outputSettings26.getindentAmount();
        boolean boolean30 = outputSettings26.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings26.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        outputSettings32.setescapeMode(escapeMode35);
        outputSettings32.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = null;
        outputSettings32.setescapeMode(escapeMode39);
        boolean boolean41 = outputSettings32.forceAllElementAsBlock;
        int int42 = outputSettings32.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings32.escapeMode(escapeMode43);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        boolean boolean47 = outputSettings45.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = null;
        outputSettings45.setescapeMode(escapeMode48);
        outputSettings45.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = null;
        outputSettings45.setescapeMode(escapeMode52);
        boolean boolean54 = outputSettings45.forceAllElementAsBlock;
        int int55 = outputSettings45.indentAmount;
        java.nio.charset.Charset charset56 = outputSettings45.getcharset();
        outputSettings44.setcharset(charset56);
        outputSettings26.charset = charset56;
        outputSettings8.charset = charset56;
        outputSettings0.charset = charset56;
        java.lang.Class<?> wildcardClass61 = outputSettings0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        int int4 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.childNodes();
        java.lang.String str6 = textNode2.gettext();
        textNode2.settext("text");
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("t");
        textNode2.text = "#text";
        textNode2.settext("");
        int int16 = textNode2.siblingIndex();
        java.lang.String str17 = textNode2.toString();
        textNode2.setBaseUri("ext");
        java.lang.StringBuilder stringBuilder20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        boolean boolean24 = outputSettings22.forceAllElementAsBlock;
        boolean boolean25 = outputSettings22.getprettyPrint();
        boolean boolean26 = outputSettings22.forceAllElementAsBlock();
        outputSettings22.setprettyPrint(true);
        java.nio.charset.Charset charset29 = outputSettings22.getcharset();
        outputSettings22.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        boolean boolean34 = outputSettings32.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = null;
        outputSettings32.setescapeMode(escapeMode35);
        boolean boolean37 = outputSettings32.prettyPrint;
        outputSettings32.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean41 = outputSettings40.prettyPrint;
        boolean boolean42 = outputSettings40.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = null;
        outputSettings40.setescapeMode(escapeMode43);
        outputSettings40.indentAmount = '4';
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = null;
        outputSettings40.setescapeMode(escapeMode47);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings40.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings50.escapeMode;
        outputSettings50.setforceAllElementAsBlock(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings50.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean56 = outputSettings55.prettyPrint;
        boolean boolean57 = outputSettings55.forceAllElementAsBlock;
        boolean boolean58 = outputSettings55.getprettyPrint();
        boolean boolean59 = outputSettings55.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings55.indentAmount((int) '4');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode();
        outputSettings50.setescapeMode(escapeMode62);
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings50.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings32.escapeMode(escapeMode64);
        boolean boolean66 = outputSettings32.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset69 = outputSettings68.charset();
        outputSettings67.charset = charset69;
        java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings67.encoder();
        outputSettings67.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode74 = outputSettings67.escapeMode;
        outputSettings67.prettyPrint = false;
        java.nio.charset.Charset charset77 = outputSettings67.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder78 = outputSettings67.encoder();
        boolean boolean79 = outputSettings67.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = outputSettings67.getescapeMode();
        outputSettings32.setescapeMode(escapeMode80);
        outputSettings22.setescapeMode(escapeMode80);
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder20, (int) '4', outputSettings22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertNull(escapeMode51);
        org.junit.Assert.assertNull(escapeMode54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(charsetEncoder71);
        org.junit.Assert.assertTrue("'" + escapeMode74 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode74.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertNotNull(charsetEncoder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + escapeMode80 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode80.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings1 = outputSettings0.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.clone();
        java.nio.charset.Charset charset3 = outputSettings0.charset();
        outputSettings0.setindentAmount(52);
        org.junit.Assert.assertNotNull(outputSettings1);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(charset3);
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.getforceAllElementAsBlock();
        boolean boolean2 = outputSettings0.getprettyPrint();
        outputSettings0.setprettyPrint(false);
        outputSettings0.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.encoder();
        boolean boolean8 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.prettyPrint = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = '#';
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset6 = outputSettings5.charset();
        outputSettings0.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        java.nio.charset.Charset charset9 = outputSettings8.charset();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings8.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        boolean boolean14 = outputSettings12.forceAllElementAsBlock;
        int int15 = outputSettings12.getindentAmount();
        boolean boolean16 = outputSettings12.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings12.encoder();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings12.getcharsetEncoder();
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(true);
        boolean boolean24 = outputSettings21.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings21.indentAmount((int) (short) 100);
        boolean boolean27 = outputSettings26.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        boolean boolean2 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean8 = outputSettings7.prettyPrint;
        boolean boolean9 = outputSettings7.forceAllElementAsBlock;
        int int10 = outputSettings7.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.charsetEncoder;
        outputSettings0.charsetEncoder = charsetEncoder11;
        outputSettings0.setprettyPrint(false);
        boolean boolean15 = outputSettings0.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings0.getcharsetEncoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charsetEncoder16);
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Document document1 = textNode0.ownerDocument();
        boolean boolean2 = textNode0.isBlank();
        textNode0.settext("text");
        org.jsoup.nodes.Node node6 = textNode0.removeAttr("#text");
        java.lang.String str7 = textNode0.text;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node9 = textNode0.wrap("ext");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: BaseURI must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(document1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        int int3 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        int int7 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("#text");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings14.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.clone();
        outputSettings16.setindentAmount((int) (byte) 0);
        textNode11.outerHtmlTail(stringBuilder12, (int) '#', outputSettings16);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings16.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset22 = outputSettings16.charset();
        outputSettings16.indentAmount = (byte) 100;
        boolean boolean25 = outputSettings16.forceAllElementAsBlock;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("h", "text");
        java.lang.String str4 = textNode2.attr("");
        int int5 = textNode2.siblingIndex();
        java.lang.String str6 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
    }
}

