/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 22:12:36 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      int int0 = (-1647);
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = textNode0.gettext();
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertNull(string0);
      
      Document.OutputSettings document_OutputSettings0 = null;
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "8m[l_yYS-XW<5K";
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      textNode0.parentNode = (Node) textNode0;
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.parentNode.baseUri());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      
      String string1 = textNode0.getTEXT_KEY();
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNotSame(string1, string0);
      assertEquals("text", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      textNode0.settext(string0);
      assertEquals("8m[l_yYS-XW<5K", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(document_OutputSettings0.indentAmount);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "E\\TfKhm_X\\;-";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("E\\TfKhm_X\\;-", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("E\\TfKhm_X\\;-", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string0);
      assertEquals("E\\TfKhm_X\\;-", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("E\\TfKhm_X\\;-", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("E\\TfKhm_X\\;-", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("E\\TfKhm_X\\;-", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      int int0 = 10;
      TextNode textNode2 = textNode0.splitText(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("E\\TfKhm_X\\;-", textNode0.baseUri());
      assertEquals("E\\TfKhm_X\\", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("E\\TfKhm_X\\;-", textNode2.baseUri());
      assertEquals(";-", textNode2.gettext());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotNull(textNode2);
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      
      Attributes attributes0 = textNode2.attributes();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("E\\TfKhm_X\\;-", textNode0.baseUri());
      assertEquals("E\\TfKhm_X\\", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("E\\TfKhm_X\\;-", textNode2.baseUri());
      assertEquals(";-", textNode2.gettext());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotNull(attributes0);
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "#temt";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#temt", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#temt", textNode0.gettext());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.TEXT_KEY);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#temt", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#temt", textNode0.gettext());
      assertEquals("text", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertNotNull(document0);
      
      TextNode textNode1 = (TextNode)textNode0.doClone(document0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#temt", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#temt", textNode0.gettext());
      assertEquals("text", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("#temt", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#temt", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      String string1 = textNode1.toString();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#temt", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#temt", textNode0.gettext());
      assertEquals("text", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("#temt", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#temt", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      assertEquals("\n#temt", string1);
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = textNode1.absUrl(textNode0.TEXT_KEY);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#temt", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#temt", textNode0.gettext());
      assertEquals("text", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("#temt", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#temt", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = 1250;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertFalse(boolean0);
      
      String string0 = "IN";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("IN", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("IN", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings1);
      
      TextNode textNode1 = (TextNode)textNode0.attr(textNode0.TEXT_KEY, textNode0.TEXT_KEY);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("IN", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("IN", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("IN", textNode1.gettext());
      assertEquals("IN", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      textNode1.outerHtmlHead(stringBuilder0, document_OutputSettings1.indentAmount, document_OutputSettings0);
      assertEquals("text", stringBuilder0.toString());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("IN", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("IN", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals("IN", textNode1.gettext());
      assertEquals("IN", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(textNode1, textNode0);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      
      String string1 = textNode1.text();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("IN", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("IN", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("IN", textNode1.gettext());
      assertEquals("IN", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      assertEquals("text", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = (-1);
      TextNode textNode0 = new TextNode();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 31;
      String string0 = "0D~%>lroy";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("0D~%>lroy", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("0D~%>lroy", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertNotNull(document_OutputSettings1);
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings1);
      assertEquals("0D~%&gt;lroy", stringBuilder0.toString());
      assertEquals("0D~%>lroy", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("0D~%>lroy", textNode0.baseUri());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertFalse(document_OutputSettings1.prettyPrint);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "+p38Wl!tP|:6bF/\">4";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+p38Wl!tP|:6bF/\">4", textNode0.baseUri());
      assertEquals("+p38Wl!tP|:6bF/\">4", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      int int0 = 276;
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings0);
      
      textNode0.indent(stringBuilder0, int0, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+p38Wl!tP|:6bF/\">4", textNode0.baseUri());
      assertEquals("+p38Wl!tP|:6bF/\">4", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("\n                                                                                                                                                                                                                                                                                    ", stringBuilder0.toString());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      String string1 = TextNode.stripLeadingWhitespace(textNode0.text);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+p38Wl!tP|:6bF/\">4", textNode0.baseUri());
      assertEquals("+p38Wl!tP|:6bF/\">4", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("+p38Wl!tP|:6bF/\">4", string1);
      assertNotNull(string1);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("\n                                                                                                                                                                                                                                                                                    ", stringBuilder0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.TEXT_KEY);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("text", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      TextNode textNode1 = (TextNode)textNode0.doClone(document0);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("text", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      int int0 = 1706;
      textNode0.setSiblingIndex(int0);
      assertEquals(1706, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(textNode0, textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      
      String string1 = textNode0.toString();
      assertEquals(1706, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string1.equals((Object)string0));
      
      TextNode textNode2 = (TextNode)textNode1.before((Node) textNode0);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("text", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode2.gettext());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertNotNull(textNode2);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode0));
      
      boolean boolean0 = true;
      document0.outputSettings.setforceAllElementAsBlock(boolean0);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("text", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      
      StringBuilder stringBuilder0 = new StringBuilder(textNode0.TEXT_KEY);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", stringBuilder0.toString());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertFalse(boolean1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(boolean1 == boolean0);
      
      textNode1.outerHtmlHead(stringBuilder0, document0.outputSettings.indentAmount, document0.outputSettings);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("text", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("text", stringBuilder0.toString());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document0.outputSettings);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("text", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("text", stringBuilder0.toString());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      String string1 = "org.jsoup.select.Evaluator$AttributeStarting";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AttributeStarting", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = textNode0.isBlank();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AttributeStarting", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "Gkjd";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("Gkjd", string1);
      assertNotNull(string1);
      
      TextNode textNode0 = new TextNode();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "dl";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("dl", string1);
      assertNotNull(string1);
      
      String string2 = "gZjwz+bps>x,\"lFLs8";
      String string3 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string3);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("gZjwz+bps>x,\"lFLs8", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotNull(textNode0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = textNode0.text();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("gZjwz+bps>x,\"lFLs8", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertEquals("gZjwz+bps>x,\"lFLs8", string4);
      assertNotNull(string4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      String string0 = "v!8q.^n{^->l%";
      TextNode textNode1 = textNode0.text(string0);
      assertEquals("v!8q.^n{^->l%", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNull(textNode1.baseUri());
      assertEquals("v!8q.^n{^->l%", textNode1.gettext());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      String string1 = textNode1.attr(textNode0.TEXT_KEY);
      assertEquals("v!8q.^n{^->l%", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNull(textNode1.baseUri());
      assertEquals("v!8q.^n{^->l%", textNode1.gettext());
      assertSame(textNode0, textNode1);
      assertSame(string0, string1);
      assertSame(textNode1, textNode0);
      assertSame(string1, string0);
      assertEquals("v!8q.^n{^->l%", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      int int0 = 35;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "/\\*TVM%0?$/uSc";
      String string1 = "text";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("/\\*TVM%0?$/uSc", textNode0.gettext());
      assertEquals("text", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("text", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("/\\*TVM%0?$/uSc", textNode1.gettext());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      String string1 = "0";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("0", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = textNode0.getTEXT_KEY();
      assertEquals("0", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("text", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "Tag name must not be empty.";
      String string4 = textNode0.absUrl(string3);
      assertEquals("0", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string4, string3);
      assertSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertNotNull(textNode0);
      
      String string1 = textNode0.text();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = textNode0.getWholeText();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = "\"<D(Ah:4";
      TextNode textNode1 = (TextNode)textNode0.attr(string3, string2);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.gettext());
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = textNode0.attr(string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(string4, string2);
      assertSame(string4, string0);
      assertSame(string4, string1);
      assertNotSame(string4, string3);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = "";
      Node node0 = textNode0.previousSibling();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertSame(string0, string5);
      assertSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNull(node0);
      assertFalse(string0.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        textNode0.absUrl(string5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "A9Vx";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("A9Vx", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("A9Vx", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = "#text";
      StringBuilder stringBuilder0 = new StringBuilder(string1);
      assertEquals("#text", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, (CharSequence) textNode0.TEXT_KEY);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("A9Vx", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("A9Vx", textNode0.baseUri());
      assertEquals("text#text", stringBuilder0.toString());
      assertEquals("text#text", stringBuilder1.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuilder0, int0, int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("A9Vx", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("A9Vx", textNode0.baseUri());
      assertEquals("text#text", stringBuilder0.toString());
      assertEquals("text#text", stringBuilder1.toString());
      assertEquals("text#text", stringBuilder2.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      long long0 = (-816L);
      StringBuilder stringBuilder3 = stringBuilder2.append(long0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("A9Vx", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("A9Vx", textNode0.baseUri());
      assertEquals("text#text-816", stringBuilder0.toString());
      assertEquals("text#text-816", stringBuilder1.toString());
      assertEquals("text#text-816", stringBuilder2.toString());
      assertEquals("text#text-816", stringBuilder3.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotNull(stringBuilder3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 41;
      Document.OutputSettings document_OutputSettings0 = null;
      textNode0.outerHtmlTail(stringBuilder3, int1, document_OutputSettings0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("A9Vx", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("A9Vx", textNode0.baseUri());
      assertEquals("text#text-816", stringBuilder0.toString());
      assertEquals("text#text-816", stringBuilder1.toString());
      assertEquals("text#text-816", stringBuilder2.toString());
      assertEquals("text#text-816", stringBuilder3.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 1;
      StringBuilder stringBuilder1 = stringBuilder0.append(int0);
      assertEquals("1", stringBuilder0.toString());
      assertEquals("1", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("1", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertFalse(boolean0);
      
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      boolean boolean1 = textNode0.isBlank();
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      textNode0.ensureAttributes();
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string1 = textNode0.toString();
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("colgroup", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "<;8^LP'2i";
      String string3 = TextNode.stripLeadingWhitespace(string2);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertEquals("<;8^LP'2i", string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = "";
      TextNode textNode1 = textNode0.text(string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      String string1 = textNode1.gettext();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(string0, string1);
      assertSame(textNode1, textNode0);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = TextNode.normaliseWhitespace(textNode1.TEXT_KEY);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(textNode1, textNode0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("text", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = textNode1.gettext();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string0, string3);
      assertSame(textNode1, textNode0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertSame(textNode0, textNode1);
      assertNotNull(attributes0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text(string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      StringBuilder stringBuilder0 = null;
      int int0 = 24;
      List<Node> list0 = textNode1.siblingNodes();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(list0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings0);
      
      textNode1.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      textNode1.ensureAttributes();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.attributes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "optgroup";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("optgroup", string1);
      assertNotNull(string1);
      
      String string2 = "&B <Z4@eJx9(U";
      String string3 = TextNode.normaliseWhitespace(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      TextNode textNode0 = new TextNode();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text(string3);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "figure";
      textNode0.baseUri = string4;
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("figure", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string5 = textNode1.gettext();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("figure", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("figure", textNode1.baseUri());
      assertNotSame(string2, string0);
      assertSame(string2, string5);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string5);
      assertSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(string5, string3);
      assertSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotNull(string5);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        textNode0.before(textNode1.TEXT_KEY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      String string0 = "Xe^i6?AlOV7~wiOg";
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "x";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("x", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("x", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      TextNode textNode1 = (TextNode)textNode0.attr(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("x", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("x", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("x", textNode1.baseUri());
      assertEquals("x", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      textNode0.parentNode = (Node) textNode1;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("x", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("x", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("x", textNode1.baseUri());
      assertEquals("x", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("x", textNode0.parentNode.baseUri());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      
      String string1 = textNode0.nodeName();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("x", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("x", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("#text", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      textNode0.settext(string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("x", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("x", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertFalse(string0.equals((Object)string1));
      
      String string2 = textNode0.getTEXT_KEY();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("x", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("x", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("text", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "";
      String string4 = TextNode.normaliseWhitespace(string3);
      assertSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = textNode0.getTEXT_KEY();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("text", string0);
      assertNotNull(string0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "\n\n";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\n\n", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      String string2 = "^\\s+";
      textNode0.settext(string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("^\\s+", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      TextNode textNode1 = (TextNode)textNode0.traverse(nodeVisitor0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("^\\s+", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("^\\s+", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      TextNode textNode2 = textNode0.text(string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\n\n", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("\n\n", textNode2.gettext());
      assertEquals("", textNode2.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      StringBuilder stringBuilder0 = null;
      int int0 = 32;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.forceAllElementAsBlock(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertNotNull(document_OutputSettings2);
      
      document_OutputSettings0.setcharsetEncoder(document_OutputSettings1.charsetEncoder);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(document_OutputSettings1.charset);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertFalse(document_OutputSettings3.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings3);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.getescapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertFalse(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertFalse(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertFalse(document_OutputSettings4.forceAllElementAsBlock);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertFalse(document_OutputSettings3.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings4);
      
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings4);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.getescapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertFalse(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\n\n", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertFalse(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertFalse(document_OutputSettings4.forceAllElementAsBlock);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertFalse(document_OutputSettings3.forceAllElementAsBlock);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "cite";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("cite", string1);
      assertNotNull(string1);
      
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      int int0 = (-2501);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = ">K";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(">K", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(">K", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      int int0 = 26;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      int int0 = 24;
      textNode0.setSiblingIndex(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(24, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      textNode0.ensureAttributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(24, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      textNode0.baseUri = string0;
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(24, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string1 = "";
      // Undeclared exception!
      try { 
        textNode0.attr(string1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      String string0 = "org.jsoup.select.Evaluator$AttributeWithValue";
      TextNode textNode1 = textNode0.text(string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValue", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValue", textNode1.gettext());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      int int0 = 0;
      TextNode textNode2 = textNode1.splitText(int0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertNull(textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValue", textNode2.gettext());
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotNull(textNode2);
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      
      String string1 = textNode1.getWholeText();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string0, string1);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      boolean boolean0 = textNode1.hasAttr(string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(boolean0);
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = "@?~@WJr`0YA\\j8@;?";
      TextNode textNode3 = textNode0.text(string3);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("@?~@WJr`0YA\\j8@;?", textNode0.gettext());
      assertNull(textNode3.baseUri());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("@?~@WJr`0YA\\j8@;?", textNode3.gettext());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertSame(textNode3, textNode0);
      assertNotNull(textNode3);
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(textNode3.equals((Object)textNode2));
      
      textNode3.ensureAttributes();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("@?~@WJr`0YA\\j8@;?", textNode0.gettext());
      assertNull(textNode3.baseUri());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("@?~@WJr`0YA\\j8@;?", textNode3.gettext());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertSame(textNode3, textNode0);
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(textNode3.equals((Object)textNode2));
      
      String string4 = "";
      String string5 = "#text";
      TextNode textNode4 = TextNode.createFromEncoded(string4, string5);
      assertEquals(0, textNode4.siblingIndex());
      assertEquals("#text", textNode4.baseUri());
      assertEquals("#text", textNode4.nodeName());
      assertEquals("text", textNode4.getTEXT_KEY());
      assertEquals("", textNode4.gettext());
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(textNode4, textNode2);
      assertNotSame(textNode4, textNode1);
      assertNotSame(textNode4, textNode3);
      assertNotSame(textNode4, textNode0);
      assertNotNull(textNode4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(textNode4.equals((Object)textNode2));
      assertFalse(textNode4.equals((Object)textNode1));
      assertFalse(textNode4.equals((Object)textNode3));
      assertFalse(textNode4.equals((Object)textNode0));
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "-)\\!R[K9Q1zvu|>S";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("-)\\!R[K9Q1zvu|>S", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("-)\\!R[K9Q1zvu|>S", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      String string1 = textNode0.nodeName();
      assertEquals("-)\\!R[K9Q1zvu|>S", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("-)\\!R[K9Q1zvu|>S", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("#text", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      StringBuilder stringBuilder0 = null;
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertNotNull(document_OutputSettings1);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      document_OutputSettings1.setescapeMode(entities_EscapeMode0);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(document_OutputSettings0.charset);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertNotNull(document_OutputSettings2);
      
      document_OutputSettings1.forceAllElementAsBlock = document_OutputSettings0.prettyPrint;
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      
      boolean boolean1 = true;
      int int1 = 0;
      document_OutputSettings0.indentAmount = int1;
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(0, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.forceAllElementAsBlock(boolean1);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(0, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(0, document_OutputSettings1.getindentAmount());
      assertEquals(0, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertEquals(0, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertEquals(0, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(0, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(0, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(0, document_OutputSettings3.indentAmount);
      assertNotNull(document_OutputSettings3);
      
      int int2 = 0;
      document_OutputSettings3.setindentAmount(int2);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(0, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(0, document_OutputSettings1.getindentAmount());
      assertEquals(0, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertEquals(0, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertEquals(0, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(0, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(0, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(0, document_OutputSettings3.indentAmount);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertEquals(0, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.getescapeMode());
      assertEquals(0, document_OutputSettings4.getindentAmount());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(0, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(0, document_OutputSettings1.getindentAmount());
      assertEquals(0, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertEquals(0, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertEquals(0, document_OutputSettings4.indentAmount);
      assertEquals(0, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(0, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(0, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(0, document_OutputSettings3.indentAmount);
      assertNotNull(document_OutputSettings4);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings3.charset(document_OutputSettings0.charset);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.getescapeMode());
      assertTrue(document_OutputSettings5.forceAllElementAsBlock());
      assertTrue(document_OutputSettings5.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(0, document_OutputSettings5.getindentAmount());
      assertEquals(0, document_OutputSettings5.indentAmount());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertTrue(document_OutputSettings5.getprettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(0, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(0, document_OutputSettings1.getindentAmount());
      assertEquals(0, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertEquals(0, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertTrue(document_OutputSettings5.prettyPrint);
      assertTrue(document_OutputSettings5.forceAllElementAsBlock);
      assertEquals(0, document_OutputSettings5.indentAmount);
      assertEquals(0, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(0, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(0, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(0, document_OutputSettings3.indentAmount);
      assertNotNull(document_OutputSettings5);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "OsM";
      String string1 = "$";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("$", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("OsM", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = TextNode.stripLeadingWhitespace(textNode0.text);
      assertEquals("$", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("OsM", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("OsM", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "M)J.GzsN2!HN";
      String string4 = "Split offset must not be greater than current text length";
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string4);
      assertEquals("$", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("OsM", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("OsM", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("$", textNode1.baseUri());
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = textNode0.attr(string3);
      assertEquals("$", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("OsM", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = textNode0.getWholeText();
      assertEquals("$", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("OsM", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string6);
      assertSame(textNode0, textNode1);
      assertNotSame(string6, string5);
      assertSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertSame(string6, string0);
      assertNotSame(string6, string1);
      assertEquals("OsM", string6);
      assertNotNull(string6);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        textNode0.attr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "}";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("}", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("}", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = textNode0.isBlank();
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertTrue(boolean0);
      
      String string0 = textNode0.gettext();
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertNull(string0);
      
      int int0 = 56;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "F,kMC";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("F,kMC", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("F,kMC", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = "?";
      TextNode textNode1 = (TextNode)textNode0.attr(string0, string1);
      assertEquals("F,kMC", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("F,kMC", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("F,kMC", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("F,kMC", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      TextNode textNode0 = TextNode.createFromEncoded(string1, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(textNode0);
      
      String string2 = "table";
      String string3 = "textarea";
      DataNode dataNode0 = new DataNode(string2, string3);
      assertEquals("textarea", dataNode0.baseUri());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        textNode0.replaceChild(dataNode0, dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.baseUri());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.ensureAttributes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "x#cr6^]!9;X(k";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("x#cr6^]!9;X(k", textNode0.baseUri());
      assertEquals("x#cr6^]!9;X(k", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      textNode0.ensureAttributes();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("x#cr6^]!9;X(k", textNode0.baseUri());
      assertEquals("x#cr6^]!9;X(k", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      int int0 = 1;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("x#cr6^]!9;X(k", textNode0.baseUri());
      assertEquals("x", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("x#cr6^]!9;X(k", textNode1.baseUri());
      assertEquals("#cr6^]!9;X(k", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      String string1 = textNode1.nodeName();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("x#cr6^]!9;X(k", textNode0.baseUri());
      assertEquals("x", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("x#cr6^]!9;X(k", textNode1.baseUri());
      assertEquals("#cr6^]!9;X(k", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      assertEquals("#text", string1);
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        textNode1.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "pdD";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("pdD", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("pdD", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text(string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("pdD", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("pdD", textNode0.baseUri());
      assertEquals("pdD", textNode1.baseUri());
      assertEquals("pdD", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        textNode1.absUrl(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      int int0 = 15;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertFalse(boolean0);
      
      String string0 = "";
      textNode0.text = string0;
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string1 = textNode0.nodeName();
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string1, string0);
      assertEquals("#text", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 100;
      // Undeclared exception!
      try { 
        textNode0.splitText(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = "";
      long long0 = 0L;
      StringBuilder stringBuilder1 = stringBuilder0.append(long0);
      assertEquals("0", stringBuilder0.toString());
      assertEquals("0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder0.append(string0);
      assertEquals("0", stringBuilder0.toString());
      assertEquals("0", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      
      int int0 = 1410;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      String string1 = textNode0.text();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = textNode0.toString();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "xmZx{_3py;s";
      String string1 = "ghV+:+";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("ghV+:+", textNode0.baseUri());
      assertEquals("xmZx{_3py;s", textNode0.gettext());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      TextNode textNode1 = TextNode.createFromEncoded(textNode0.TEXT_KEY, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("ghV+:+", textNode0.baseUri());
      assertEquals("xmZx{_3py;s", textNode0.gettext());
      assertEquals("text", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("ghV+:+", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      
      String string2 = null;
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("ghV+:+", textNode0.baseUri());
      assertEquals("xmZx{_3py;s", textNode0.gettext());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertEquals(0, nodeArray0.length);
      assertNotNull(nodeArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = textNode0.getWholeText();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertNull(string1);
      
      TextNode textNode1 = textNode0.text(string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNull(textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      TextNode textNode2 = textNode1.text(textNode0.text);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNull(textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertNull(textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertNull(textNode2.gettext());
      assertEquals(0, textNode2.siblingIndex());
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertNotNull(textNode2);
      
      // Undeclared exception!
      try { 
        textNode2.after(textNode0.text);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "(3Q%&n3.9X8b6B";
      String string1 = "@RN%c";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("@RN%c", textNode0.baseUri());
      assertEquals("(3Q%&n3.9X8b6B", textNode0.gettext());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 0;
      long long0 = (-1L);
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, long0);
      assertEquals("-1", stringBuilder0.toString());
      assertEquals("-1", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((float) int0);
      assertEquals("-10.0", stringBuilder0.toString());
      assertEquals("-10.0", stringBuilder1.toString());
      assertEquals("-10.0", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      
      int int1 = 789;
      StringBuilder stringBuilder3 = stringBuilder2.appendCodePoint(int1);
      assertEquals("-10.0\u0315", stringBuilder0.toString());
      assertEquals("-10.0\u0315", stringBuilder1.toString());
      assertEquals("-10.0\u0315", stringBuilder2.toString());
      assertEquals("-10.0\u0315", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertNotNull(stringBuilder3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 2060;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertNotNull(document_OutputSettings0);
      
      textNode0.outerHtmlHead(stringBuilder3, int2, document_OutputSettings0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("@RN%c", textNode0.baseUri());
      assertEquals("(3Q%&n3.9X8b6B", textNode0.gettext());
      assertEquals("-10.0\u0315(3Q%&amp;n3.9X8b6B", stringBuilder0.toString());
      assertEquals("-10.0\u0315(3Q%&amp;n3.9X8b6B", stringBuilder1.toString());
      assertEquals("-10.0\u0315(3Q%&amp;n3.9X8b6B", stringBuilder2.toString());
      assertEquals("-10.0\u0315(3Q%&amp;n3.9X8b6B", stringBuilder3.toString());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "E\\TfKhm_(X\\;-";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("E\\TfKhm_(X\\;-", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      TextNode textNode1 = (TextNode)textNode0.traverse(nodeVisitor0);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("E\\TfKhm_(X\\;-", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("E\\TfKhm_(X\\;-", textNode1.gettext());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      String string2 = textNode0.toString();
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("E\\TfKhm_(X\\;-", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertEquals("E\\TfKhm_(X\\;-", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string0);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("E\\TfKhm_(X\\;-", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("E\\TfKhm_(X\\;-", textNode2.gettext());
      assertEquals(0, textNode2.siblingIndex());
      assertNull(textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertNotNull(textNode2);
      assertTrue(string0.equals((Object)string2));
      
      int int0 = 0;
      TextNode textNode3 = textNode0.splitText(int0);
      assertNull(textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("E\\TfKhm_(X\\;-", textNode3.gettext());
      assertNull(textNode3.baseUri());
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertNotSame(textNode3, textNode0);
      assertNotNull(textNode3);
      assertTrue(string0.equals((Object)string2));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode0));
      
      boolean boolean0 = textNode3.hasAttr(textNode0.TEXT_KEY);
      assertNull(textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("E\\TfKhm_(X\\;-", textNode3.gettext());
      assertNull(textNode3.baseUri());
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertNotSame(textNode3, textNode0);
      assertTrue(boolean0);
      assertTrue(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode0));
      
      textNode0.ensureAttributes();
      assertNull(textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertTrue(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode3));
      
      Attributes attributes0 = textNode0.attributes();
      assertNull(textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotNull(attributes0);
      assertTrue(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode3));
      
      String string3 = "";
      textNode3.settext(string3);
      assertNull(textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode3.gettext());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertNull(textNode3.baseUri());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertNotSame(textNode3, textNode0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "~g1.s;";
      // Undeclared exception!
      try { 
        textNode0.wrap(string4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "hGt`NFPXG";
      int int0 = (-3949);
      char[] charArray0 = new char[9];
      char char0 = '}';
      charArray0[0] = char0;
      char char1 = 'O';
      charArray0[1] = char1;
      char char2 = 'O';
      charArray0[2] = char2;
      char char3 = 'P';
      charArray0[3] = char3;
      char char4 = 'R';
      charArray0[4] = char4;
      char char5 = 'Y';
      charArray0[5] = char5;
      char char6 = '-';
      charArray0[6] = char6;
      char char7 = 'E';
      charArray0[7] = char7;
      char char8 = '\\';
      charArray0[8] = char8;
      int int1 = (-1966);
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      long long0 = (-1L);
      StringBuilder stringBuilder1 = stringBuilder0.append(long0);
      assertEquals("-1", stringBuilder0.toString());
      assertEquals("-1", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertEquals("-1", stringBuilder0.toString());
      assertEquals("-1", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertFalse(boolean0);
      
      int int2 = 0;
      String string1 = "_";
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "E\\TfKhm_(X\\;-";
      String string1 = null;
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      String string2 = "";
      String string3 = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, object0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      char char0 = '{';
      StringBuilder stringBuilder2 = stringBuilder1.append(char0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.delete(int0, int0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertNotNull(stringBuilder3);
      
      StringBuilder stringBuilder4 = stringBuilder0.append((double) int0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertNotNull(stringBuilder4);
      
      StringBuilder stringBuilder5 = stringBuilder3.appendCodePoint(int0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder4);
      assertNotNull(stringBuilder5);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder5);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder4);
      assertFalse(boolean0);
      
      String string4 = "k5ix";
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      int int1 = 2053;
      // Undeclared exception!
      try { 
        textNode0.splitText(int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "[2sHfQ,#{YeCntsYR";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[2sHfQ,#{YeCntsYR", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[2sHfQ,#{YeCntsYR", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[2sHfQ,#{YeCntsYR", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("[2sHfQ,#{YeCntsYR", textNode1.baseUri());
      assertEquals("[2sHfQ,#{YeCntsYR", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      String string1 = "p";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("[2sHfQ,#{YeCntsYR", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string0.equals((Object)string1));
      
      int int1 = (-1);
      char[] charArray0 = new char[3];
      char char0 = '2';
      charArray0[0] = char0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      
      boolean boolean1 = false;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(boolean1);
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertFalse(document_OutputSettings4.getprettyPrint());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertFalse(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertFalse(document_OutputSettings4.prettyPrint);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertFalse(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertFalse(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings4);
      assertFalse(boolean1 == boolean0);
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(boolean0 == boolean1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings4);
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertFalse(document_OutputSettings4.getprettyPrint());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[2sHfQ,#{YeCntsYR", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("[2sHfQ,#{YeCntsYR", stringBuilder0.toString());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertFalse(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertNotSame(string0, string1);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertFalse(document_OutputSettings4.prettyPrint);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertFalse(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertFalse(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertFalse(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int0 == int1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(boolean0 == boolean1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      
      char char1 = 'm';
      charArray0[1] = charArray0[0];
      char char2 = 'Q';
      charArray0[2] = char2;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(int1, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = textNode0.text();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = textNode0.getWholeText();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = "\"<D(Ah:4";
      TextNode textNode1 = (TextNode)textNode0.attr(string3, string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.gettext());
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "y=6%;\"GcOKZ";
      textNode1.baseUri = string4;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("y=6%;\"GcOKZ", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.gettext());
      assertEquals("y=6%;\"GcOKZ", textNode1.baseUri());
      
      Node node0 = textNode1.previousSibling();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("y=6%;\"GcOKZ", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.gettext());
      assertEquals("y=6%;\"GcOKZ", textNode1.baseUri());
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(textNode1, textNode0);
      assertNull(node0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string5 = textNode0.attr(string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("y=6%;\"GcOKZ", textNode0.baseUri());
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(string5, string2);
      assertSame(string5, string1);
      assertNotSame(string5, string4);
      assertSame(string5, string0);
      assertNotSame(string5, string3);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = "";
      Node node1 = textNode0.previousSibling();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("y=6%;\"GcOKZ", textNode0.baseUri());
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string6);
      assertSame(string0, string5);
      assertSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNull(node1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      
      String string7 = null;
      // Undeclared exception!
      try { 
        textNode0.text(string7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "8lW__mXW<50";
      String string1 = "Ph-`{Z";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("8lW__mXW<50", textNode0.gettext());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("8lW__mXW<50", textNode1.gettext());
      assertEquals("Ph-`{Z", textNode1.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      
      textNode0.parentNode = (Node) textNode1;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("8lW__mXW<50", textNode1.gettext());
      assertEquals("Ph-`{Z", textNode1.baseUri());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      assertEquals("Ph-`{Z", textNode0.parentNode.baseUri());
      
      TextNode textNode2 = TextNode.createFromEncoded(textNode0.TEXT_KEY, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("8lW__mXW<50", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      
      String string2 = "Split offset must be not be negative";
      String string3 = TextNode.normaliseWhitespace(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("Split offset must be not be negative", string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = textNode2.getTEXT_KEY();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("8lW__mXW<50", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertEquals("text", string4);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean0);
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      char[] charArray0 = new char[5];
      char char0 = 'v';
      charArray0[0] = char0;
      char char1 = '9';
      charArray0[1] = char1;
      char char2 = 'r';
      charArray0[2] = char2;
      char char3 = 'u';
      charArray0[3] = char3;
      char char4 = '9';
      charArray0[4] = char4;
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      assertEquals("falsev9ru9", stringBuilder2.toString());
      assertEquals("falsev9ru9", stringBuilder0.toString());
      assertEquals("falsev9ru9", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(5, charArray0.length);
      assertNotNull(stringBuilder2);
      assertArrayEquals(new char[] {'v', '9', 'r', 'u', '9'}, charArray0);
      
      StringBuilder stringBuilder3 = stringBuilder2.insert(int0, char4);
      assertEquals("9falsev9ru9", stringBuilder2.toString());
      assertEquals("9falsev9ru9", stringBuilder3.toString());
      assertEquals("9falsev9ru9", stringBuilder0.toString());
      assertEquals("9falsev9ru9", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertEquals(5, charArray0.length);
      assertNotNull(stringBuilder3);
      assertFalse(char4 == char3);
      assertFalse(char4 == char2);
      assertFalse(char4 == char0);
      assertArrayEquals(new char[] {'v', '9', 'r', 'u', '9'}, charArray0);
      
      int int1 = (-2127);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertNotNull(document_OutputSettings0);
      
      boolean boolean1 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean1);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings1);
      assertFalse(boolean1 == boolean0);
      
      int int2 = 67;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(int2);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(67, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(67, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(67, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(67, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(67, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(67, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(67, document_OutputSettings0.indentAmount);
      assertEquals(67, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(67, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings2);
      assertFalse(boolean1 == boolean0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      textNode1.outerHtmlHead(stringBuilder3, int1, document_OutputSettings2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("8lW__mXW<50", textNode1.gettext());
      assertEquals("Ph-`{Z", textNode1.baseUri());
      assertEquals("9falsev9ru98lW__mXW&lt;50", stringBuilder2.toString());
      assertEquals("9falsev9ru98lW__mXW&lt;50", stringBuilder3.toString());
      assertEquals("9falsev9ru98lW__mXW&lt;50", stringBuilder0.toString());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(67, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(67, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("9falsev9ru98lW__mXW&lt;50", stringBuilder1.toString());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(67, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(67, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(67, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(67, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(67, document_OutputSettings0.indentAmount);
      assertEquals(67, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(67, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(5, charArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(boolean0 == boolean1);
      assertFalse(char4 == char3);
      assertFalse(char4 == char2);
      assertFalse(char4 == char0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {'v', '9', 'r', 'u', '9'}, charArray0);
      
      int int3 = 32;
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder1, int3, document_OutputSettings2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string0 = "";
      int int0 = 17;
      textNode0.siblingIndex = int0;
      assertNull(textNode0.baseUri());
      assertEquals(17, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      
      TextNode textNode1 = textNode0.text(string0);
      assertNull(textNode0.baseUri());
      assertEquals(17, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(17, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      String string1 = "$9naZV%e3$K";
      String string2 = "'M PG(w.x";
      TextNode textNode2 = (TextNode)textNode1.attr(string1, string2);
      assertNull(textNode0.baseUri());
      assertEquals(17, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(17, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertNull(textNode2.baseUri());
      assertEquals("", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(17, textNode2.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = new StringBuilder(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      
      int int1 = 79;
      int int2 = 74;
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) string0, int1, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 79, end 74, s.length() 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "";
      String string1 = "Must be true";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Must be true", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 265;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int1 = 315;
      boolean boolean0 = true;
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean0);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertFalse(int0 == int1);
      
      TextNode textNode1 = TextNode.createFromEncoded(textNode0.TEXT_KEY, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Must be true", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(document_OutputSettings0.charset);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertFalse(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertFalse(document_OutputSettings3.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      
      boolean boolean1 = false;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.forceAllElementAsBlock(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertFalse(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings4.forceAllElementAsBlock());
      assertFalse(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.getescapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertFalse(document_OutputSettings3.forceAllElementAsBlock);
      assertFalse(document_OutputSettings4.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertNotNull(document_OutputSettings4);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings3.forceAllElementAsBlock(boolean1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertFalse(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings5.getindentAmount());
      assertFalse(document_OutputSettings5.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.getescapeMode());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings5.getprettyPrint());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertFalse(document_OutputSettings3.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings5.indentAmount);
      assertTrue(document_OutputSettings5.prettyPrint);
      assertFalse(document_OutputSettings5.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings5);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(boolean1 == boolean0);
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      
      textNode0.indent(stringBuilder0, int1, document_OutputSettings5);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Must be true", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("true\n                                                                                                                                                                                                                                                                                                                           ", stringBuilder0.toString());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertFalse(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings5.getindentAmount());
      assertFalse(document_OutputSettings5.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.getescapeMode());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings5.getprettyPrint());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertFalse(document_OutputSettings3.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings5.indentAmount);
      assertTrue(document_OutputSettings5.prettyPrint);
      assertFalse(document_OutputSettings5.forceAllElementAsBlock);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(boolean1 == boolean0);
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      
      String string2 = textNode0.text();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Must be true", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      
      String string3 = "";
      String string4 = TextNode.stripLeadingWhitespace(string3);
      assertNotSame(string3, string1);
      assertSame(string3, string4);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = textNode0.attr(string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Must be true", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(textNode0, textNode1);
      assertSame(string5, string0);
      assertSame(string5, string3);
      assertNotSame(string5, string1);
      assertSame(string5, string4);
      assertNotSame(string5, string2);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean2 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("true\n                                                                                                                                                                                                                                                                                                                           ", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertTrue(boolean2);
      assertFalse(int0 == int1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("true\n                                                                                                                                                                                                                                                                                                                           ", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertTrue(boolean3);
      assertFalse(int0 == int1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String string6 = "a\"/8";
      String string7 = ">##rR=Qnha8I{6P7";
      TextNode textNode2 = (TextNode)textNode1.attr(string6, string7);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Must be true", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("text", textNode2.gettext());
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string0, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string7);
      assertNotSame(string1, string2);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string7);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode0));
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      int int0 = 1;
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.isBlank();
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertFalse(boolean0);
      
      textNode0.ensureAttributes();
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      
      String string1 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("text", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 1707;
      int int2 = (-2035);
      textNode0.setSiblingIndex(int2);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-2035), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertNotNull(document_OutputSettings0);
      
      boolean boolean1 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertNotNull(document_OutputSettings1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = textNode0.toString();
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-2035), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("colgroup", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = "";
      // Undeclared exception!
      try { 
        textNode0.attr(string3, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      int int0 = 1;
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.isBlank();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(boolean0);
      
      textNode0.ensureAttributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string1 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("text", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 1707;
      int int2 = (-2035);
      textNode0.setSiblingIndex(int2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-2035), textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertNotNull(document_OutputSettings0);
      
      boolean boolean1 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertNotNull(document_OutputSettings1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-2035), textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("colgroup", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      TextNode textNode1 = (TextNode)textNode0.attr(string2, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-2035), textNode0.siblingIndex());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals((-2035), textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = textNode0.getTEXT_KEY();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-2035), textNode0.siblingIndex());
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertEquals("text", string3);
      assertNotNull(string3);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = textNode0.getTEXT_KEY();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-2035), textNode0.siblingIndex());
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertEquals("text", string4);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      int int0 = 1;
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      textNode0.ensureAttributes();
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string1 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("text", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 1707;
      textNode0.setSiblingIndex(int1);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertNotNull(document_OutputSettings1);
      
      String string2 = textNode0.toString();
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("colgroup", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = "";
      // Undeclared exception!
      try { 
        textNode0.attr(string3, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "8lW__mXW<50";
      String string1 = "Ph-`{Z";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("8lW__mXW<50", textNode0.gettext());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8lW__mXW<50", textNode1.gettext());
      assertEquals("Ph-`{Z", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      
      textNode0.parentNode = (Node) textNode1;
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8lW__mXW<50", textNode1.gettext());
      assertEquals("Ph-`{Z", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Ph-`{Z", textNode0.parentNode.baseUri());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      
      String string2 = "Split offset must be not be negative";
      String string3 = TextNode.normaliseWhitespace(string2);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("Split offset must be not be negative", string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = textNode0.getTEXT_KEY();
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertEquals("text", string4);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = true;
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean0);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      char[] charArray0 = new char[5];
      char char0 = 'v';
      char char1 = '9';
      charArray0[1] = char1;
      char char2 = 'r';
      String string5 = "s?zLg-\"3*e(!~GDdV";
      textNode0.settext(string5);
      assertEquals("s?zLg-\"3*e(!~GDdV", textNode0.gettext());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      
      charArray0[2] = char2;
      char char3 = 'u';
      charArray0[3] = char3;
      char char4 = '9';
      charArray0[4] = char4;
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      assertEquals("true\u00009ru9", stringBuilder2.toString());
      assertEquals("true\u00009ru9", stringBuilder0.toString());
      assertEquals("true\u00009ru9", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(5, charArray0.length);
      assertNotNull(stringBuilder2);
      assertArrayEquals(new char[] {'\u0000', '9', 'r', 'u', '9'}, charArray0);
      
      StringBuilder stringBuilder3 = stringBuilder2.insert(int0, char4);
      assertEquals("9true\u00009ru9", stringBuilder2.toString());
      assertEquals("9true\u00009ru9", stringBuilder3.toString());
      assertEquals("9true\u00009ru9", stringBuilder0.toString());
      assertEquals("9true\u00009ru9", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(5, charArray0.length);
      assertNotNull(stringBuilder3);
      assertFalse(char4 == char0);
      assertFalse(char4 == char3);
      assertFalse(char4 == char2);
      assertArrayEquals(new char[] {'\u0000', '9', 'r', 'u', '9'}, charArray0);
      
      int int1 = (-2127);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings0);
      
      boolean boolean1 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertNotNull(document_OutputSettings1);
      
      int int2 = 67;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(int2);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(67, document_OutputSettings0.getindentAmount());
      assertEquals(67, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(67, document_OutputSettings1.getindentAmount());
      assertEquals(67, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(67, document_OutputSettings2.indentAmount());
      assertEquals(67, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(67, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(67, document_OutputSettings1.indentAmount);
      assertEquals(67, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertNotNull(document_OutputSettings2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      textNode1.outerHtmlHead(stringBuilder3, int1, document_OutputSettings2);
      assertEquals("s?zLg-\"3*e(!~GDdV", textNode0.gettext());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8lW__mXW<50", textNode1.gettext());
      assertEquals("Ph-`{Z", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("9true\u00009ru98lW__mXW&lt;50", stringBuilder2.toString());
      assertEquals("9true\u00009ru98lW__mXW&lt;50", stringBuilder3.toString());
      assertEquals("9true\u00009ru98lW__mXW&lt;50", stringBuilder0.toString());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(67, document_OutputSettings0.getindentAmount());
      assertEquals(67, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals("9true\u00009ru98lW__mXW&lt;50", stringBuilder1.toString());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(67, document_OutputSettings1.getindentAmount());
      assertEquals(67, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(67, document_OutputSettings2.indentAmount());
      assertEquals(67, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(67, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(67, document_OutputSettings1.indentAmount);
      assertEquals(67, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(5, charArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(char4 == char0);
      assertFalse(char4 == char3);
      assertFalse(char4 == char2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {'\u0000', '9', 'r', 'u', '9'}, charArray0);
      
      int int3 = 3;
      // Undeclared exception!
      try { 
        textNode0.splitText(int3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = "4Ii.c7ute<O^lpC<{";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Node node0 = textNode0.parentNode;
      assertNull(node0);
      
      textNode0.parentNode = node0;
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.baseUri());
      
      int int0 = (-1);
      textNode0.siblingIndex = int0;
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.baseUri());
      
      List<Node> list0 = textNode0.childNodes();
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      textNode0.childNodes = list0;
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(textNode0.childNodes.isEmpty());
      assertEquals(0, textNode0.childNodes.size());
      
      String string1 = textNode0.text();
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.baseUri());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("4Ii.c7ute<O^lpC<{", string1);
      assertNotNull(string1);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string0);
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("4Ii.c7ute<O^lpC<{", textNode0.baseUri());
      assertEquals("4Ii.c7ute<O^lpC<{", textNode1.baseUri());
      assertEquals((-1), textNode1.siblingIndex());
      assertEquals("4Ii.c7ute<O^lpC<{", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      String string2 = "";
      String string3 = TextNode.stripLeadingWhitespace(string2);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.isBlank();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(boolean0);
      
      textNode0.ensureAttributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      TextNode textNode1 = (TextNode)textNode0.traverse(nodeVisitor0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      String string1 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("text", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 1707;
      textNode0.setSiblingIndex(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(1707, textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertFalse(string0.equals((Object)string1));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings0);
      
      String string2 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(1707, textNode0.siblingIndex());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("colgroup", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = "";
      String string4 = textNode0.getTEXT_KEY();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(1707, textNode0.siblingIndex());
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertEquals("text", string4);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals(1707, textNode2.siblingIndex());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("colgroup", textNode2.gettext());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("colgroup", textNode2.baseUri());
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.isBlank();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(boolean0);
      
      textNode0.ensureAttributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      
      String string1 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("text", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 1707;
      textNode0.setSiblingIndex(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings0);
      
      String string2 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("colgroup", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int1 = 815;
      textNode0.outerHtmlHead(stringBuilder0, int1, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("colgroup", stringBuilder0.toString());
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertNotNull(textNode0);
      
      Document document0 = new Document(string0);
      assertEquals("colgroup", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.toggleClass(textNode0.text);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      TextNode textNode1 = (TextNode)textNode0.doClone(document2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("colgroup", textNode1.baseUri());
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      boolean boolean0 = textNode0.isBlank();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertNotSame(textNode0, textNode1);
      assertFalse(boolean0);
      assertFalse(textNode0.equals((Object)textNode1));
      
      textNode0.ensureAttributes();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertNotSame(textNode0, textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      
      String string1 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("text", string1);
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 1707;
      textNode0.setSiblingIndex(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals(1707, textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings0);
      
      String string2 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals(1707, textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("colgroup", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "";
      String string4 = "Z";
      StringBuilder stringBuilder0 = new StringBuilder(string4);
      assertEquals("Z", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) textNode1);
      assertEquals("Z\ncolgroup", stringBuilder0.toString());
      assertEquals("Z\ncolgroup", stringBuilder1.toString());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("colgroup", textNode1.baseUri());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotNull(stringBuilder1);
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      StringBuilder stringBuilder2 = stringBuilder1.append((float) int0);
      assertEquals("Z\ncolgroup1707.0", stringBuilder0.toString());
      assertEquals("Z\ncolgroup1707.0", stringBuilder1.toString());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("Z\ncolgroup1707.0", stringBuilder2.toString());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("colgroup", textNode1.baseUri());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotNull(stringBuilder2);
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      double double0 = 0.0;
      StringBuilder stringBuilder3 = stringBuilder2.append(double0);
      assertEquals("Z\ncolgroup1707.00.0", stringBuilder0.toString());
      assertEquals("Z\ncolgroup1707.00.0", stringBuilder1.toString());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("Z\ncolgroup1707.00.0", stringBuilder2.toString());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Z\ncolgroup1707.00.0", stringBuilder3.toString());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("colgroup", textNode1.baseUri());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotNull(stringBuilder3);
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      char char0 = 'P';
      StringBuilder stringBuilder4 = stringBuilder3.append(char0);
      assertEquals("Z\ncolgroup1707.00.0P", stringBuilder0.toString());
      assertEquals("Z\ncolgroup1707.00.0P", stringBuilder1.toString());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("Z\ncolgroup1707.00.0P", stringBuilder2.toString());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Z\ncolgroup1707.00.0P", stringBuilder3.toString());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals("Z\ncolgroup1707.00.0P", stringBuilder4.toString());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("colgroup", textNode1.baseUri());
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertNotNull(stringBuilder4);
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder4);
      assertEquals("Z\ncolgroup1707.00.0P", stringBuilder0.toString());
      assertEquals("Z\ncolgroup1707.00.0P", stringBuilder1.toString());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("Z\ncolgroup1707.00.0P", stringBuilder2.toString());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Z\ncolgroup1707.00.0P", stringBuilder3.toString());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals("Z\ncolgroup1707.00.0P", stringBuilder4.toString());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("colgroup", textNode1.baseUri());
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertFalse(boolean1);
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      String string0 = "8lW__mXW<50";
      String string1 = "Ph-`{Z";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals("8lW__mXW<50", textNode0.gettext());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("8lW__mXW<50", textNode1.gettext());
      assertEquals("Ph-`{Z", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      
      textNode0.parentNode = (Node) textNode1;
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("8lW__mXW<50", textNode1.gettext());
      assertEquals("Ph-`{Z", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      assertEquals("Ph-`{Z", textNode0.parentNode.baseUri());
      
      String string2 = "Split offset must be not be negative";
      String string3 = TextNode.normaliseWhitespace(string2);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals("Split offset must be not be negative", string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = textNode0.getTEXT_KEY();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertEquals("text", string4);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[5];
      String string5 = TextNode.normaliseWhitespace(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(string2, string3);
      assertSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string5, string1);
      assertSame(string5, string3);
      assertSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertEquals("Split offset must be not be negative", string5);
      assertNotNull(string5);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      char char0 = 'v';
      char char1 = '9';
      charArray0[1] = char1;
      textNode0.settext(string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals("8lW__mXW<50", textNode0.gettext());
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(textNode0, textNode1);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      
      char char2 = 'F';
      charArray0[3] = char2;
      char char3 = '9';
      charArray0[4] = char3;
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertEquals("\u00009\u0000F9", stringBuilder1.toString());
      assertEquals("\u00009\u0000F9", stringBuilder0.toString());
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(5, charArray0.length);
      assertNotNull(stringBuilder1);
      assertArrayEquals(new char[] {'\u0000', '9', '\u0000', 'F', '9'}, charArray0);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, char3);
      assertEquals("9\u00009\u0000F9", stringBuilder1.toString());
      assertEquals("9\u00009\u0000F9", stringBuilder2.toString());
      assertEquals("9\u00009\u0000F9", stringBuilder0.toString());
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertEquals(5, charArray0.length);
      assertNotNull(stringBuilder2);
      assertFalse(char3 == char2);
      assertFalse(char3 == char0);
      assertArrayEquals(new char[] {'\u0000', '9', '\u0000', 'F', '9'}, charArray0);
      
      int int1 = (-2127);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertNotNull(document_OutputSettings0);
      
      boolean boolean1 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertNotNull(document_OutputSettings1);
      
      int int2 = 67;
      textNode1.outerHtmlHead(stringBuilder2, int1, document_OutputSettings0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals("8lW__mXW<50", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("8lW__mXW<50", textNode1.gettext());
      assertEquals("Ph-`{Z", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("9\u00009\u0000F98lW__mXW&lt;50", stringBuilder1.toString());
      assertEquals("9\u00009\u0000F98lW__mXW&lt;50", stringBuilder2.toString());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals("9\u00009\u0000F98lW__mXW&lt;50", stringBuilder0.toString());
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(5, charArray0.length);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(char3 == char2);
      assertFalse(char3 == char0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertArrayEquals(new char[] {'\u0000', '9', '\u0000', 'F', '9'}, charArray0);
      
      int int3 = 3;
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string4);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Ph-`{Z", textNode0.baseUri());
      assertEquals("8lW__mXW<50", textNode0.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("8lW__mXW<50", textNode2.gettext());
      assertEquals("Ph-`{Z", textNode2.baseUri());
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(textNode2.equals((Object)textNode1));
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = "bS";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("bS", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("bS", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("bS", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("bS", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("bS", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("bS", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("bS", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("bS", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.getquirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("bS", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string1 = "org.jsoup.select.Evaluator$AllElements";
      Document document2 = (Document)document1.prepend(string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("bS", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("bS", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("bS", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.getquirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("bS", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.getquirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("bS", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertNotSame(string0, string1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(string1, string0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Document document3 = (Document)document2.html(string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("bS", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("bS", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("bS", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.getquirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("bS", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.getquirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("bS", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("bS", document3.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.getquirksMode());
      assertNotSame(string0, string1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(string1, string0);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Document document4 = (Document)document3.val(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("bS", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("bS", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("bS", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.getquirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("bS", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.getquirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("bS", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("bS", document3.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.getquirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("bS", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.getquirksMode());
      assertNotSame(string0, string1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(string1, string0);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotNull(document4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      textNode0.parentNode = (Node) document4;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("bS", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("bS", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("bS", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.getquirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("bS", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.getquirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("bS", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("bS", document3.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.getquirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("bS", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.getquirksMode());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      assertEquals("bS", textNode0.parentNode.baseUri());
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("bS", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("bS", textNode1.baseUri());
      assertEquals("bS", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = "\\TfK?m_(X\\;-";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\\TfK?m_(X\\;-", textNode0.gettext());
      assertEquals("\\TfK?m_(X\\;-", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\\TfK?m_(X\\;-", textNode0.gettext());
      assertEquals("\\TfK?m_(X\\;-", textNode0.baseUri());
      assertEquals("\\TfK?m_(X\\;-", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("\\TfK?m_(X\\;-", textNode1.gettext());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      Document document0 = new Document(textNode1.TEXT_KEY);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\\TfK?m_(X\\;-", textNode0.gettext());
      assertEquals("\\TfK?m_(X\\;-", textNode0.baseUri());
      assertEquals("\\TfK?m_(X\\;-", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("\\TfK?m_(X\\;-", textNode1.gettext());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\\TfK?m_(X\\;-", textNode0.gettext());
      assertEquals("\\TfK?m_(X\\;-", textNode0.baseUri());
      assertEquals("\\TfK?m_(X\\;-", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("\\TfK?m_(X\\;-", textNode1.gettext());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("text", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Element element0 = document1.head();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\\TfK?m_(X\\;-", textNode0.gettext());
      assertEquals("\\TfK?m_(X\\;-", textNode0.baseUri());
      assertEquals("\\TfK?m_(X\\;-", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("\\TfK?m_(X\\;-", textNode1.gettext());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("text", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("text", element0.baseUri());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      
      Element element1 = element0.nextElementSibling();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\\TfK?m_(X\\;-", textNode0.gettext());
      assertEquals("\\TfK?m_(X\\;-", textNode0.baseUri());
      assertEquals("\\TfK?m_(X\\;-", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("\\TfK?m_(X\\;-", textNode1.gettext());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("text", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("text", element0.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals("text", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      textNode1.parentNode = (Node) element1;
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\\TfK?m_(X\\;-", textNode0.gettext());
      assertEquals("\\TfK?m_(X\\;-", textNode0.baseUri());
      assertEquals("\\TfK?m_(X\\;-", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("\\TfK?m_(X\\;-", textNode1.gettext());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("text", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("text", element0.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals("text", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, textNode1.parentNode.siblingIndex());
      assertEquals("text", textNode1.parentNode.baseUri());
      
      int int0 = 0;
      TextNode textNode2 = (TextNode)textNode0.removeAttr(textNode1.text);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\\TfK?m_(X\\;-", textNode0.gettext());
      assertEquals("\\TfK?m_(X\\;-", textNode0.baseUri());
      assertEquals("\\TfK?m_(X\\;-", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("\\TfK?m_(X\\;-", textNode1.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("\\TfK?m_(X\\;-", textNode2.gettext());
      assertEquals("\\TfK?m_(X\\;-", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertNotNull(textNode2);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document0 = new Document(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.toggleClass(textNode0.text);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("colgroup", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      TextNode textNode1 = (TextNode)textNode0.doClone(document2);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("colgroup", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.baseUri());
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      textNode0.ensureAttributes();
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotSame(textNode0, textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      
      int int0 = 1707;
      textNode0.setSiblingIndex(int0);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(textNode0, textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertNotNull(document_OutputSettings0);
      
      String string1 = textNode0.toString();
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("colgroup", string1);
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "";
      String string3 = "Z";
      StringBuilder stringBuilder0 = new StringBuilder(string3);
      assertEquals("Z", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) textNode1);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("colgroup", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("Z\ncolgroup", stringBuilder0.toString());
      assertEquals("Z\ncolgroup", stringBuilder1.toString());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      StringBuilder stringBuilder2 = stringBuilder1.append((double) int0);
      assertEquals("Z\ncolgroup1707.0", stringBuilder2.toString());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("colgroup", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("Z\ncolgroup1707.0", stringBuilder0.toString());
      assertEquals("Z\ncolgroup1707.0", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertNotNull(stringBuilder2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      char char0 = 'P';
      StringBuilder stringBuilder3 = stringBuilder2.append(char0);
      assertEquals("Z\ncolgroup1707.0P", stringBuilder2.toString());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Z\ncolgroup1707.0P", stringBuilder3.toString());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("colgroup", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("Z\ncolgroup1707.0P", stringBuilder0.toString());
      assertEquals("Z\ncolgroup1707.0P", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertNotNull(stringBuilder3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder3);
      assertEquals("Z\ncolgroup1707.0P", stringBuilder2.toString());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Z\ncolgroup1707.0P", stringBuilder3.toString());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("colgroup", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("Z\ncolgroup1707.0P", stringBuilder0.toString());
      assertEquals("Z\ncolgroup1707.0P", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = textNode1.toString();
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("colgroup", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.baseUri());
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(textNode1, textNode0);
      assertEquals("\ncolgroup", string4);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      
      String string5 = textNode0.text();
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertEquals("colgroup", string5);
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      textNode1.outerHtmlHead(stringBuilder3, document_OutputSettings0.indentAmount, document1.outputSettings);
      assertEquals("Z\ncolgroup1707.0P\n colgroup", stringBuilder2.toString());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Z\ncolgroup1707.0P\n colgroup", stringBuilder3.toString());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("colgroup", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("colgroup", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("Z\ncolgroup1707.0P\n colgroup", stringBuilder0.toString());
      assertEquals("Z\ncolgroup1707.0P\n colgroup", stringBuilder1.toString());
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertNotNull(textNode0);
      
      Document document0 = new Document(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.toggleClass(textNode0.text);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      TextNode textNode1 = (TextNode)textNode0.doClone(document2);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.gettext());
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      int int0 = 1707;
      textNode0.setSiblingIndex(int0);
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertNotSame(textNode0, textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertNotNull(document_OutputSettings0);
      
      String string1 = textNode0.toString();
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("colgroup", string1);
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "";
      String string3 = "Z";
      document1.setParentNode(document2);
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("colgroup", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertEquals("colgroup", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      
      StringBuilder stringBuilder0 = new StringBuilder(string3);
      assertEquals("Z", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) int0);
      assertEquals("Z1707.0", stringBuilder0.toString());
      assertEquals("Z1707.0", stringBuilder1.toString());
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      char char0 = 'P';
      StringBuilder stringBuilder2 = stringBuilder1.append(char0);
      assertEquals("Z1707.0P", stringBuilder2.toString());
      assertEquals("Z1707.0P", stringBuilder0.toString());
      assertEquals("Z1707.0P", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertNotNull(stringBuilder2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder2);
      assertEquals("Z1707.0P", stringBuilder2.toString());
      assertEquals("Z1707.0P", stringBuilder0.toString());
      assertEquals("Z1707.0P", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertFalse(boolean0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        textNode1.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      Document document0 = new Document(string0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("colgroup", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.toggleClass(textNode0.text);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("colgroup", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      TextNode textNode1 = (TextNode)textNode0.doClone(document2);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("colgroup", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      int int0 = 1707;
      textNode0.setSiblingIndex(int0);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(1707, textNode0.siblingIndex());
      assertNotSame(textNode0, textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings.indentAmount(int0);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1707, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1707, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals(1707, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings0);
      
      String string1 = textNode0.toString();
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(1707, textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("colgroup", string1);
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "";
      String string3 = "Z";
      StringBuilder stringBuilder0 = new StringBuilder(string3);
      assertEquals("Z", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) int0);
      assertEquals("Z1707.0", stringBuilder0.toString());
      assertEquals("Z1707.0", stringBuilder1.toString());
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      char char0 = 'P';
      StringBuilder stringBuilder2 = stringBuilder1.append(char0);
      assertEquals("Z1707.0P", stringBuilder2.toString());
      assertEquals("Z1707.0P", stringBuilder0.toString());
      assertEquals("Z1707.0P", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder2);
      assertEquals("Z1707.0P", stringBuilder2.toString());
      assertEquals("Z1707.0P", stringBuilder0.toString());
      assertEquals("Z1707.0P", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertFalse(boolean0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = textNode1.toString();
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("colgroup", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("colgroup", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.getquirksMode());
      assertEquals("colgroup", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(textNode1, textNode0);
      assertEquals("\ncolgroup", string4);
      assertNotNull(string4);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(textNode1.equals((Object)textNode0));
      
      String string5 = textNode0.text();
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(1707, textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertEquals("colgroup", string5);
      assertNotNull(string5);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      // Undeclared exception!
      textNode1.outerHtmlHead(stringBuilder2, document_OutputSettings0.indentAmount, document1.outputSettings);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.TEXT_KEY);
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("text", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      TextNode textNode1 = (TextNode)textNode0.doClone(document0);
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      String string1 = "";
      TextNode textNode2 = textNode1.text(string1);
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", textNode1.gettext());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode2.gettext());
      assertEquals("colgroup", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      assertSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode2.equals((Object)textNode0));
      
      int int0 = 1707;
      textNode0.setSiblingIndex(int0);
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertNotNull(document_OutputSettings0);
      
      String string2 = textNode0.toString();
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("colgroup", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = "";
      String string4 = "Z";
      StringBuilder stringBuilder0 = new StringBuilder(string4);
      assertEquals("Z", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) int0);
      assertEquals("Z1707.0", stringBuilder0.toString());
      assertEquals("Z1707.0", stringBuilder1.toString());
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      char char0 = 'P';
      StringBuilder stringBuilder2 = stringBuilder1.append(char0);
      assertEquals("Z1707.0P", stringBuilder2.toString());
      assertEquals("Z1707.0P", stringBuilder0.toString());
      assertEquals("Z1707.0P", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertNotNull(stringBuilder2);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder2);
      assertEquals("Z1707.0P", stringBuilder2.toString());
      assertEquals("Z1707.0P", stringBuilder0.toString());
      assertEquals("Z1707.0P", stringBuilder1.toString());
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertFalse(boolean0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = textNode1.toString();
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", textNode1.gettext());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      
      textNode1.outerHtmlHead(stringBuilder2, document_OutputSettings0.indentAmount, document1.outputSettings);
      assertEquals("Z1707.0P", stringBuilder2.toString());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.getquirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("text", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals("Z1707.0P", stringBuilder0.toString());
      assertEquals("Z1707.0P", stringBuilder1.toString());
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.TEXT_KEY);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.quirksMode(document0.quirksMode);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("text", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      TextNode textNode1 = (TextNode)textNode0.doClone(document0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.baseUri());
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      int int0 = 1707;
      textNode0.setSiblingIndex(int0);
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertNotSame(textNode0, textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertNotNull(document_OutputSettings0);
      
      String string1 = textNode0.toString();
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("colgroup", string1);
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "";
      String string3 = "Z";
      StringBuilder stringBuilder0 = new StringBuilder(string3);
      assertEquals("Z", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) int0);
      assertEquals("Z1707.0", stringBuilder0.toString());
      assertEquals("Z1707.0", stringBuilder1.toString());
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      char char0 = 'P';
      StringBuilder stringBuilder2 = stringBuilder0.append(textNode1.TEXT_KEY);
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("Z1707.0text", stringBuilder0.toString());
      assertEquals("Z1707.0text", stringBuilder2.toString());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = (-3160);
      document_OutputSettings0.setindentAmount(int1);
      assertEquals((-3160), document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals((-3160), document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals((-3160), document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(int1 == int0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder2);
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("Z1707.0text", stringBuilder0.toString());
      assertEquals("Z1707.0text", stringBuilder2.toString());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertFalse(boolean0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = textNode1.toString();
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.baseUri());
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(document0, document1);
      assertNotSame(textNode1, textNode0);
      assertEquals("\ncolgroup", string4);
      assertNotNull(string4);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(textNode1.equals((Object)textNode0));
      
      // Undeclared exception!
      try { 
        textNode1.outerHtmlHead(stringBuilder2, document_OutputSettings0.indentAmount, document1.outputSettings);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      int int0 = (-162);
      textNode0.siblingIndex = int0;
      assertEquals((-162), textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      Document document0 = Document.createShell(textNode0.TEXT_KEY);
      assertEquals((-162), textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("text", document0.baseUri());
      assertNotNull(document0);
      
      TextNode textNode1 = (TextNode)textNode0.doClone(document0);
      assertEquals((-162), textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("text", document0.baseUri());
      assertEquals("colgroup", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals((-162), textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      StringBuilder stringBuilder0 = new StringBuilder(textNode0.text);
      assertEquals((-162), textNode0.siblingIndex());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("colgroup", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(textNode0.equals((Object)textNode1));
      
      char char0 = 'P';
      // Undeclared exception!
      try { 
        textNode1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertNotNull(textNode0);
      
      int int0 = (-1);
      textNode0.siblingIndex = int0;
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      
      TextNode textNode1 = textNode0.text(string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals((-1), textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      String string1 = null;
      textNode0.baseUri = string1;
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      
      String string2 = textNode1.getTEXT_KEY();
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals((-1), textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotSame(string2, string0);
      assertEquals("text", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int1 = 2040;
      // Undeclared exception!
      try { 
        textNode1.splitText(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      String string0 = "colgroup";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.TEXT_KEY);
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertNotNull(document0);
      
      document0.setParentNode(textNode0);
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      
      TextNode textNode1 = (TextNode)textNode0.doClone(document0);
      assertEquals("colgroup", textNode0.gettext());
      assertEquals("colgroup", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("colgroup", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("colgroup", textNode1.gettext());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      char char0 = 'P';
      // Undeclared exception!
      try { 
        textNode1.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.TEXT_KEY);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      TextNode textNode1 = (TextNode)textNode0.doClone(document0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      int int0 = 1707;
      textNode0.setSiblingIndex(int0);
      assertEquals("", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(textNode0, textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings0);
      
      String string1 = textNode0.toString();
      assertEquals("", textNode0.baseUri());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string1.equals((Object)string0));
      
      TextNode textNode2 = (TextNode)textNode1.before((Node) textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("", textNode2.gettext());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotNull(textNode2);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode0));
      
      boolean boolean0 = true;
      document_OutputSettings0.setforceAllElementAsBlock(boolean0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      StringBuilder stringBuilder0 = new StringBuilder(textNode0.TEXT_KEY);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) int0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text1707.0", stringBuilder0.toString());
      assertEquals("text1707.0", stringBuilder1.toString());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text1707.0", stringBuilder0.toString());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(stringBuilder0, stringBuilder1);
      assertFalse(boolean1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(boolean1 == boolean0);
      
      textNode1.outerHtmlHead(stringBuilder0, document_OutputSettings0.indentAmount, document0.outputSettings);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals("text1707.0", stringBuilder0.toString());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode0));
      
      int int1 = 3;
      textNode0.outerHtmlHead(stringBuilder0, int1, document_OutputSettings0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals("text1707.0", stringBuilder0.toString());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(int1 == int0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.TEXT_KEY);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      TextNode textNode1 = (TextNode)textNode0.doClone(document0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      int int0 = 1707;
      document0.setParentNode(textNode1);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      
      textNode0.setSiblingIndex(int0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(textNode0, textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      
      String string1 = textNode0.toString();
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1707, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string1.equals((Object)string0));
      
      TextNode textNode2 = (TextNode)textNode1.before((Node) textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("", textNode2.gettext());
      assertEquals(0, textNode2.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertNotNull(textNode2);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode0));
      
      boolean boolean0 = true;
      document0.outputSettings.setforceAllElementAsBlock(boolean0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      
      StringBuilder stringBuilder0 = new StringBuilder(textNode0.TEXT_KEY);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", stringBuilder0.toString());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertFalse(boolean1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        textNode1.outerHtmlHead(stringBuilder0, document0.outputSettings.indentAmount, document0.outputSettings);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.TEXT_KEY);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertNotNull(document0);
      
      TextNode textNode1 = (TextNode)textNode0.doClone(document0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      int int0 = 1694;
      textNode0.setSiblingIndex(int0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(1694, textNode0.siblingIndex());
      assertNotSame(textNode0, textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      
      String string1 = textNode0.toString();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(1694, textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = true;
      document0.outputSettings.setforceAllElementAsBlock(boolean0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(1694, textNode0.siblingIndex());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      
      Document document1 = (Document)document0.empty();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(1694, textNode0.siblingIndex());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("text", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      
      document0.normaliseTextNodes(document1);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(1694, textNode0.siblingIndex());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("text", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("text", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      
      // Undeclared exception!
      try { 
        textNode1.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertFalse(boolean0);
      
      String string0 = "IN";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("IN", textNode0.baseUri());
      assertEquals("IN", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertNotNull(document_OutputSettings0);
      
      String string1 = "q";
      Document document0 = Document.createShell(string1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("q", document0.baseUri());
      assertNotSame(string1, string0);
      assertNotNull(document0);
      assertFalse(string1.equals((Object)string0));
      
      Document document1 = document0.normalise();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("q", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("q", document1.baseUri());
      assertNotSame(string1, string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(string1.equals((Object)string0));
      
      Element element0 = document1.head();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("q", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("q", document1.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("q", element0.baseUri());
      assertNotSame(string1, string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertFalse(string1.equals((Object)string0));
      
      Element element1 = element0.appendChild(textNode0);
      assertEquals("IN", textNode0.baseUri());
      assertEquals("IN", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("q", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("q", document1.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("q", element0.baseUri());
      assertEquals("q", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "/~/b~hr$FMJw;";
      Element element2 = element1.prepend(string2);
      assertEquals("IN", textNode0.baseUri());
      assertEquals("IN", textNode0.gettext());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("q", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("q", document1.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("q", element0.baseUri());
      assertEquals("q", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("q", element2.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      TextNode textNode1 = (TextNode)textNode0.doClone(element2);
      assertEquals("IN", textNode0.baseUri());
      assertEquals("IN", textNode0.gettext());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("q", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("q", document1.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("q", element0.baseUri());
      assertEquals("q", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("q", element2.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("IN", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("IN", textNode1.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertNotNull(document_OutputSettings1);
      
      TextNode textNode2 = (TextNode)textNode0.attr(textNode0.TEXT_KEY, textNode0.TEXT_KEY);
      assertEquals("IN", textNode0.baseUri());
      assertEquals("IN", textNode0.gettext());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(1, textNode2.siblingIndex());
      assertEquals("IN", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("IN", textNode2.gettext());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode1));
      
      String string3 = "?6N\"Z2>d";
      TextNode textNode3 = (TextNode)textNode2.before(string3);
      assertEquals("IN", textNode3.gettext());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("IN", textNode3.baseUri());
      assertEquals(2, textNode3.siblingIndex());
      assertEquals("IN", textNode0.baseUri());
      assertEquals("IN", textNode0.gettext());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(2, textNode2.siblingIndex());
      assertEquals("IN", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("IN", textNode2.gettext());
      assertSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode1);
      assertSame(textNode3, textNode2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode3);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, textNode3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(textNode3);
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      textNode2.outerHtmlHead(stringBuilder0, document_OutputSettings1.indentAmount, document_OutputSettings0);
      assertEquals("\n text", stringBuilder0.toString());
      assertEquals("IN", textNode0.baseUri());
      assertEquals("IN", textNode0.gettext());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(2, textNode2.siblingIndex());
      assertEquals("IN", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("IN", textNode2.gettext());
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, textNode3);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode1));
      
      String string4 = textNode2.text();
      assertEquals("IN", textNode0.baseUri());
      assertEquals("IN", textNode0.gettext());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(2, textNode2.siblingIndex());
      assertEquals("IN", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("IN", textNode2.gettext());
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode3);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, textNode3);
      assertEquals("text", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode1));
      
      TextNode textNode4 = (TextNode)textNode2.attr(string1, textNode0.TEXT_KEY);
      assertEquals(2, textNode4.siblingIndex());
      assertEquals("text", textNode4.getTEXT_KEY());
      assertEquals("#text", textNode4.nodeName());
      assertEquals("IN", textNode4.baseUri());
      assertEquals("IN", textNode4.gettext());
      assertEquals("IN", textNode0.baseUri());
      assertEquals("IN", textNode0.gettext());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(2, textNode2.siblingIndex());
      assertEquals("IN", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("IN", textNode2.gettext());
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(textNode4, textNode1);
      assertSame(textNode4, textNode2);
      assertSame(textNode4, textNode3);
      assertSame(textNode4, textNode0);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode3);
      assertSame(textNode0, textNode4);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, textNode4);
      assertSame(textNode2, textNode3);
      assertNotNull(textNode4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode4.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode2.equals((Object)textNode1));
  }
}
