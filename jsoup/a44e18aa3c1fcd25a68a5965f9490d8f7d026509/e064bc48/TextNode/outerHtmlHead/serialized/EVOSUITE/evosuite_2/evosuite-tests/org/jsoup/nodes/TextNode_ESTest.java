/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 01:51:10 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.UnsupportedCharsetException;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.SerializedObjectSupporter;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode373();
      assertNotNull(textNode0);
      assertEquals("Hello", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string0 = "#text";
      String string1 = "";
      textNode0.settext(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.charset.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      document_OutputSettings0.setcharsetEncoder(charsetEncoder0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      String string2 = textNode0.gettext();
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      TextNode textNode1 = serializedObjectSupporter0.deserializeObjectTextNode430();
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("<p>Jsoup</p>", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      
      TextNode textNode2 = TextNode.createFromEncoded(textNode1.text, textNode0.TEXT_KEY);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("<p>Jsoup</p>", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("<p>Jsoup</p>", textNode2.gettext());
      assertEquals("text", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      
      TextNode textNode3 = textNode2.splitText(document_OutputSettings0.indentAmount);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode2));
      assertNotNull(textNode3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode3);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode3);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode2);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("<p>Jsoup</p>", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("<", textNode2.gettext());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("text", textNode3.baseUri());
      assertEquals("p>Jsoup</p>", textNode3.gettext());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      System.setCurrentTimeMillis(document_OutputSettings0.indentAmount);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      TextNode textNode4 = textNode3.splitText(document_OutputSettings0.indentAmount);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode3));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode3));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode4.equals((Object)textNode3));
      assertFalse(textNode4.equals((Object)textNode1));
      assertFalse(textNode4.equals((Object)textNode0));
      assertFalse(textNode4.equals((Object)textNode2));
      assertNotNull(textNode4);
      assertNotSame(textNode0, textNode4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode3);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode4);
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode4);
      assertNotSame(textNode2, textNode3);
      assertNotSame(textNode3, textNode4);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode2);
      assertNotSame(textNode4, textNode3);
      assertNotSame(textNode4, textNode1);
      assertNotSame(textNode4, textNode0);
      assertNotSame(textNode4, textNode2);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("<p>Jsoup</p>", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("<", textNode2.gettext());
      assertEquals("p", textNode3.gettext());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("text", textNode3.baseUri());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("text", textNode4.baseUri());
      assertEquals("#text", textNode4.nodeName());
      assertEquals(0, textNode4.siblingIndex());
      assertEquals("text", textNode4.getTEXT_KEY());
      assertEquals(">Jsoup</p>", textNode4.gettext());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      String string3 = "";
      String string4 = textNode0.toString();
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode2));
      assertNotNull(string4);
      assertEquals("", string4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(textNode0, textNode4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode2);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode134();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Check", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      
      String string0 = "Integer94.xml";
      String string1 = textNode0.absUrl(string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Check", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      
      String string2 = TextNode.normaliseWhitespace(textNode0.text);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Check", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Check", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      
      String string3 = textNode0.toString();
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Check", string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Check", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string0 = "p:aWR,,$)[B";
      String string1 = "";
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      String string2 = "p6I@uu*=[T)Nnu{=";
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      
      String string3 = "c&gyjxC";
      int int0 = 1282;
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode189();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("four", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string0 = "p:aWR,u$)[B";
      textNode0.text = string0;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      
      textNode0.remove();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      
      int int0 = 2404;
      textNode0.setSiblingIndex(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      
      String string1 = textNode0.getTEXT_KEY();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("text", string1);
      assertNotSame(string1, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder65();
      assertNotNull(stringBuilder0);
      assertEquals("<p title=\"&pi;\">", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      boolean boolean1 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      boolean boolean2 = false;
      String string2 = "p6I@uu*=[T)Nnu{=";
      TextNode textNode1 = TextNode.createFromEncoded(string2, textNode0.text);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(textNode1, textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      document_OutputSettings3.forceAllElementAsBlock = document_OutputSettings1.forceAllElementAsBlock;
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      
      String string3 = "c&gyjxC";
      String string4 = "kJUaC";
      TextNode textNode2 = (TextNode)textNode1.attr(string3, string4);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode2);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode2.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      
      TextNode textNode3 = (TextNode)textNode1.removeAttr(string1);
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode3);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode3, textNode2);
      assertNotSame(textNode3, textNode0);
      assertSame(textNode3, textNode1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode3);
      assertSame(textNode1, textNode2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode3.baseUri());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode3.gettext());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      
      int int1 = 1699;
      textNode3.outerHtmlHead(stringBuilder0, int1, document_OutputSettings1);
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode3, textNode2);
      assertNotSame(textNode3, textNode0);
      assertSame(textNode3, textNode1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode3);
      assertSame(textNode1, textNode2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode3.baseUri());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode3.gettext());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("<p title=\"&pi;\">", stringBuilder0.toString());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      String string5 = TextNode.stripLeadingWhitespace(textNode1.TEXT_KEY);
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(string5);
      assertEquals("text", string5);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode3);
      assertSame(textNode1, textNode2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder321();
      assertNotNull(stringBuilder0);
      assertEquals("<p>", stringBuilder0.toString());
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode315();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals(" ", textNode0.gettext());
      
      String string0 = "org.jsoup.nodes.TextNode";
      TextNode textNode1 = textNode0.text(string0);
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("org.jsoup.nodes.TextNode", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(2, textNode1.siblingIndex());
      assertEquals("org.jsoup.nodes.TextNode", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      
      String string1 = textNode0.attr(textNode1.text);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string0, string1);
      assertSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      assertEquals("org.jsoup.nodes.TextNode", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(2, textNode1.siblingIndex());
      assertEquals("org.jsoup.nodes.TextNode", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      
      int int0 = 1;
      TextNode textNode2 = textNode1.splitText(int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string0, string1);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("o", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("o", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(2, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(3, textNode2.siblingIndex());
      assertEquals("rg.jsoup.nodes.TextNode", textNode2.gettext());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertEquals("<p>", stringBuilder0.toString());
      
      int int1 = 2;
      textNode2.setBaseUri(textNode1.text);
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(int0 == int1);
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string0, string1);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("o", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("o", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(2, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(3, textNode2.siblingIndex());
      assertEquals("o", textNode2.baseUri());
      assertEquals("rg.jsoup.nodes.TextNode", textNode2.gettext());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      
      textNode2.parentNode = (Node) textNode1;
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("o", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("o", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(2, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(3, textNode2.siblingIndex());
      assertEquals("o", textNode2.baseUri());
      assertEquals("rg.jsoup.nodes.TextNode", textNode2.gettext());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(2, textNode2.parentNode.siblingIndex());
      assertEquals("", textNode2.parentNode.baseUri());
      
      int int2 = (-640);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      TextNode textNode3 = TextNode.createFromEncoded(textNode0.text, textNode1.TEXT_KEY);
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode0));
      assertNotNull(textNode3);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string0, string1);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode3);
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertNotSame(textNode3, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("o", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("o", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(2, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode3.baseUri());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("o", textNode3.gettext());
      
      String string2 = textNode0.text();
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("o", string2);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("o", textNode0.gettext());
      
      String string3 = TextNode.normaliseWhitespace(textNode0.text);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode2));
      assertNotNull(string3);
      assertEquals("o", string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("o", textNode0.gettext());
      
      String string4 = "(s>o;0{QN#$Ua&s0|r";
      // Undeclared exception!
      try { 
        textNode3.attr(string1, string4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode308();
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder290();
      assertNotNull(stringBuilder0);
      assertEquals("<!DOCTYPE html>\n<html>\n <head></head>\n <body>\n  OneTwoThree\n  <link />Four", stringBuilder0.toString());
      
      int int0 = 1199;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.forceAllElementAsBlock(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      
      textNode0.indent(stringBuilder0, int0, document_OutputSettings1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      int int1 = 0;
      String string0 = null;
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger15();
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode82();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("one", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      
      String string0 = "";
      TextNode textNode1 = TextNode.createFromEncoded(textNode0.TEXT_KEY, textNode0.TEXT_KEY);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("one", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("text", textNode1.baseUri());
      
      int int0 = (-131);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode399();
      assertNull(textNode0);
      
      TextNode textNode1 = serializedObjectSupporter0.deserializeObjectTextNode176();
      assertNotNull(textNode1);
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Hello ", textNode1.gettext());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder226();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = 32;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      boolean boolean0 = false;
      document_OutputSettings0.setprettyPrint(boolean0);
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Hello ", textNode1.gettext());
      assertEquals("Hello ", stringBuilder0.toString());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      String string0 = textNode1.getWholeText();
      assertNotNull(string0);
      assertEquals("Hello ", string0);
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Hello ", textNode1.gettext());
      
      String string1 = textNode1.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\nHello ", string1);
      assertNotSame(string1, string0);
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Hello ", textNode1.gettext());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode292();
      assertNotNull(textNode0);
      assertEquals("Seven ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(7, textNode0.siblingIndex());
      
      int int0 = (-28);
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder310();
      assertNotNull(stringBuilder0);
      assertEquals("<span>Hello \n <div>\n  there\n </div>", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      int int1 = 4428;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int1);
      assertFalse(int1 == int0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(4428, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(4428, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(4428, document_OutputSettings1.indentAmount());
      assertEquals(4428, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(4428, document_OutputSettings0.indentAmount);
      assertEquals(4428, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.forceAllElementAsBlock(document_OutputSettings0.prettyPrint);
      assertFalse(int1 == int0);
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(4428, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(4428, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(4428, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(4428, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(4428, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(4428, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(4428, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(4428, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(4428, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode292();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(7, textNode0.siblingIndex());
      assertEquals("Seven ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      
      int int0 = (-28);
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder310();
      assertNotNull(stringBuilder0);
      assertEquals("<span>Hello \n <div>\n  there\n </div>", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      int int1 = 4428;
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode308();
      assertNotNull(textNode0);
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      String string0 = null;
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger15();
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder114();
      assertNotNull(stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      int int1 = 0;
      Document.OutputSettings document_OutputSettings0 = null;
      int int2 = 299;
      String string1 = "";
      StringBuilder stringBuilder1 = stringBuilder0.replace(int0, int2, string1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      
      textNode0.outerHtmlTail(stringBuilder0, int1, document_OutputSettings0);
      assertFalse(int1 == int2);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", stringBuilder0.toString());
      
      String string2 = "M69L5=<";
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("", stringBuilder0.toString());
      
      String string3 = "Ca~<6)B`F~U7V8*i";
      String string4 = textNode0.attr(string3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      boolean boolean1 = textNode0.isBlank();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode136();
      assertNotNull(textNode0);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals(" ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string0 = textNode0.nodeName();
      assertNotNull(string0);
      assertEquals("#text", string0);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals(" ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "/";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("/", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("/", textNode0.gettext());
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("/", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("/", textNode0.gettext());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
          assertNotNull(serializedObjectSupporter0);
          
          TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode399();
          assertNull(textNode0);
          
          TextNode textNode1 = serializedObjectSupporter0.deserializeObjectTextNode176();
          assertNotNull(textNode1);
          assertEquals(0, textNode1.siblingIndex());
          assertEquals("Hello ", textNode1.gettext());
          assertEquals("text", textNode1.getTEXT_KEY());
          assertEquals("#text", textNode1.nodeName());
          assertEquals("", textNode1.baseUri());
          
          StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder226();
          assertNotNull(stringBuilder0);
          assertEquals("", stringBuilder0.toString());
          
          int int0 = 32;
          Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
          assertNotNull(document_OutputSettings0);
          assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
          assertTrue(document_OutputSettings0.prettyPrint());
          assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
          assertFalse(document_OutputSettings0.forceAllElementAsBlock());
          assertTrue(document_OutputSettings0.getprettyPrint());
          assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
          assertEquals(1, document_OutputSettings0.indentAmount());
          assertEquals(1, document_OutputSettings0.getindentAmount());
          assertFalse(document_OutputSettings0.forceAllElementAsBlock);
          assertTrue(document_OutputSettings0.prettyPrint);
          assertEquals(1, document_OutputSettings0.indentAmount);
          
          Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int0);
          assertNotNull(document_OutputSettings1);
          assertSame(document_OutputSettings0, document_OutputSettings1);
          assertSame(document_OutputSettings1, document_OutputSettings0);
          assertEquals(32, document_OutputSettings0.getindentAmount());
          assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
          assertTrue(document_OutputSettings0.prettyPrint());
          assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
          assertFalse(document_OutputSettings0.forceAllElementAsBlock());
          assertTrue(document_OutputSettings0.getprettyPrint());
          assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
          assertEquals(32, document_OutputSettings0.indentAmount());
          assertEquals(32, document_OutputSettings1.indentAmount());
          assertEquals(32, document_OutputSettings1.getindentAmount());
          assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
          assertFalse(document_OutputSettings1.forceAllElementAsBlock());
          assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
          assertTrue(document_OutputSettings1.prettyPrint());
          assertTrue(document_OutputSettings1.getprettyPrint());
          assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
          assertFalse(document_OutputSettings0.forceAllElementAsBlock);
          assertTrue(document_OutputSettings0.prettyPrint);
          assertEquals(32, document_OutputSettings0.indentAmount);
          assertFalse(document_OutputSettings1.forceAllElementAsBlock);
          assertEquals(32, document_OutputSettings1.indentAmount);
          assertTrue(document_OutputSettings1.prettyPrint);
          
          textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings1);
          assertSame(document_OutputSettings0, document_OutputSettings1);
          assertSame(document_OutputSettings1, document_OutputSettings0);
          assertEquals(0, textNode1.siblingIndex());
          assertEquals("Hello ", textNode1.gettext());
          assertEquals("text", textNode1.getTEXT_KEY());
          assertEquals("#text", textNode1.nodeName());
          assertEquals("", textNode1.baseUri());
          assertEquals(32, document_OutputSettings0.getindentAmount());
          assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
          assertTrue(document_OutputSettings0.prettyPrint());
          assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
          assertFalse(document_OutputSettings0.forceAllElementAsBlock());
          assertTrue(document_OutputSettings0.getprettyPrint());
          assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
          assertEquals(32, document_OutputSettings0.indentAmount());
          assertEquals(32, document_OutputSettings1.indentAmount());
          assertEquals(32, document_OutputSettings1.getindentAmount());
          assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
          assertFalse(document_OutputSettings1.forceAllElementAsBlock());
          assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
          assertTrue(document_OutputSettings1.prettyPrint());
          assertTrue(document_OutputSettings1.getprettyPrint());
          assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
          assertFalse(document_OutputSettings0.forceAllElementAsBlock);
          assertTrue(document_OutputSettings0.prettyPrint);
          assertEquals(32, document_OutputSettings0.indentAmount);
          assertFalse(document_OutputSettings1.forceAllElementAsBlock);
          assertEquals(32, document_OutputSettings1.indentAmount);
          assertTrue(document_OutputSettings1.prettyPrint);
          
          String string0 = textNode1.getWholeText();
          assertNotNull(string0);
          assertEquals("Hello ", string0);
          assertEquals(0, textNode1.siblingIndex());
          assertEquals("Hello ", textNode1.gettext());
          assertEquals("text", textNode1.getTEXT_KEY());
          assertEquals("#text", textNode1.nodeName());
          assertEquals("", textNode1.baseUri());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "|W8MRvYA.7ZYh0r\\L";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertNotNull(textNode0);
      assertEquals("|W8MRvYA.7ZYh0r\\L", textNode0.gettext());
      assertEquals("|W8MRvYA.7ZYh0r\\L", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode1 = serializedObjectSupporter0.deserializeObjectTextNode343();
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Blah \u0000", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      
      textNode0.parentNode = (Node) textNode1;
      assertEquals("|W8MRvYA.7ZYh0r\\L", textNode0.gettext());
      assertEquals("|W8MRvYA.7ZYh0r\\L", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Blah \u0000", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode0.parentNode.baseUri());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      
      String string1 = textNode0.toString();
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("|W8MRvYA.7ZYh0r\\L", string1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("|W8MRvYA.7ZYh0r\\L", textNode0.gettext());
      assertEquals("|W8MRvYA.7ZYh0r\\L", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string2 = textNode0.getTEXT_KEY();
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("text", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("|W8MRvYA.7ZYh0r\\L", textNode0.gettext());
      assertEquals("|W8MRvYA.7ZYh0r\\L", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      boolean boolean0 = textNode0.isBlank();
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(boolean0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertEquals("|W8MRvYA.7ZYh0r\\L", textNode0.gettext());
      assertEquals("|W8MRvYA.7ZYh0r\\L", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      boolean boolean1 = textNode1.isBlank();
      assertFalse(textNode1.equals((Object)textNode0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(textNode1, textNode0);
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Blah \u0000", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "aN];Un-7|%SPv:XW";
      int int0 = (-1);
      long long0 = 0L;
      int int1 = 1189;
      int int2 = 165;
      String string1 = "'";
      int int3 = 3155;
      String string2 = "";
      String string3 = TextNode.stripLeadingWhitespace(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "h6)P U9bi['`G\\";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("h6)P U9bi['`G\\", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string2 = "";
      String string3 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode309();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("there", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("there", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string0 = "^\\s+";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertNotNull(string1);
      assertEquals("^\\s+", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      TextNode textNode0 = new TextNode(string0, string1);
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      
      String string2 = "Split offset must not be greater than current text length";
      TextNode textNode1 = textNode0.text(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(textNode1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode1.gettext());
      assertNull(textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode19();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("foo", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        textNode0.attr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode187();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(3, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(" Four", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      String string0 = "StringBuilder142.xml";
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string0);
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(3, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(" Four", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(" Four", textNode1.gettext());
      assertEquals(3, textNode1.siblingIndex());
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode229();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Dodgy", textNode0.gettext());
      
      String string0 = textNode0.gettext();
      assertNotNull(string0);
      assertEquals("Dodgy", string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Dodgy", textNode0.gettext());
      
      textNode0.settext(string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Dodgy", textNode0.gettext());
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode192();
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("One ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger309();
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder190();
      assertNotNull(stringBuilder0);
      assertEquals("<p>One <em>four</em><b>", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = serializedObjectSupporter0.deserializeObjectStringBuilder247();
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder1);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertEquals("<h1>Head</h1>\n<table>\n <tbody>\n  <tr>\n   <td>", stringBuilder1.toString());
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("One ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      textNode0.ensureAttributes();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("One ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string0 = textNode0.gettext();
      assertNotNull(string0);
      assertEquals("One ", string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("One ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      Integer integer1 = serializedObjectSupporter0.deserializeObjectInteger52();
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("One ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      textNode0.ensureAttributes();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("One ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string1 = "";
      String string2 = textNode0.attr(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("One ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string3 = textNode0.getTEXT_KEY();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("text", string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("One ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      boolean boolean1 = textNode0.isBlank();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("One ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      TextNode textNode1 = textNode0.text(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertSame(textNode1, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      
      textNode0.ensureAttributes();
      assertSame(textNode0, textNode1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      
      // Undeclared exception!
      try { 
        textNode1.removeAttr(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      
      String string1 = textNode0.nodeName();
      assertNotNull(string1);
      assertEquals("#text", string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      
      // Undeclared exception!
      try { 
        textNode0.ensureAttributes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode264();
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("http://foo.com/", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("One", textNode0.gettext());
      
      String string0 = textNode0.getWholeText();
      assertNotNull(string0);
      assertEquals("One", string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("http://foo.com/", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("One", textNode0.gettext());
      
      String string1 = textNode0.text();
      assertNotNull(string1);
      assertEquals("One", string1);
      assertSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("http://foo.com/", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("One", textNode0.gettext());
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode168();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("\n", textNode0.gettext());
      assertEquals(1, textNode0.siblingIndex());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string1 = "d";
      textNode0.settext(string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("d", textNode0.gettext());
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("d", textNode0.gettext());
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("d", textNode0.gettext());
      
      String string2 = "";
      String string3 = "(@@h]&2z";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      String string0 = textNode0.text();
      assertNotNull(string0);
      assertEquals("Two", string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      String string1 = textNode0.getTEXT_KEY();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("text", string1);
      assertNotSame(string1, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      boolean boolean0 = textNode0.hasAttr(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      String string2 = "";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder367();
      assertNotNull(stringBuilder0);
      assertEquals("<table> \n <tbody>\n  <tr>\n   <td>One </td>\n   <td>\n    <table>\n     <tbody>\n      <tr>\n       <td>", stringBuilder0.toString());
      
      int int0 = 28;
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger361();
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, (Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("<table> \n <tbody>\n  <tr>\n   4<td>One </td>\n   <td>\n    <table>\n     <tbody>\n      <tr>\n       <td>", stringBuilder0.toString());
      assertEquals("<table> \n <tbody>\n  <tr>\n   4<td>One </td>\n   <td>\n    <table>\n     <tbody>\n      <tr>\n       <td>", stringBuilder1.toString());
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("<table> \n <tbody>\n  <tr>\n   4<td>One </td>\n   <td>\n    <table>\n     <tbody>\n      <tr>\n       <td>", stringBuilder0.toString());
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode121();
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("there", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      textNode0.ensureAttributes();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("there", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      textNode0.siblingIndex = int0;
      assertEquals("#text", textNode0.nodeName());
      assertEquals(28, textNode0.siblingIndex());
      assertEquals("there", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string0 = textNode0.text();
      assertNotNull(string0);
      assertEquals("there", string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(28, textNode0.siblingIndex());
      assertEquals("there", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      TextNode textNode1 = textNode0.text(string0);
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(28, textNode0.siblingIndex());
      assertEquals("there", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("there", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(28, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Two", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string0 = textNode0.text();
      assertNotNull(string0);
      assertEquals("Two", string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Two", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string1 = textNode0.getTEXT_KEY();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("text", string1);
      assertNotSame(string1, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Two", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      boolean boolean0 = textNode0.hasAttr(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Two", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string2 = "Integer94.xml";
      String string3 = textNode0.absUrl(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Two", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string4 = "6re67w d5>H";
      String string5 = TextNode.normaliseWhitespace(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("6re67w d5>H", string5);
      assertNotSame(string4, string3);
      assertSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string1);
      
      String string6 = "|e<qq Y";
      String string7 = TextNode.stripLeadingWhitespace(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("|e<qq Y", string7);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertSame(string6, string7);
      assertNotSame(string6, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      
      int int0 = 1;
      TextNode textNode1 = textNode0.splitText(int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("T", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("wo", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode97();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Three", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      textNode0.ensureAttributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Three", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string0 = textNode0.nodeName();
      assertNotNull(string0);
      assertEquals("#text", string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Three", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string1 = "k4M=?C\"^p'";
      String string2 = "";
      TextNode textNode1 = TextNode.createFromEncoded(string1, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("k4M=?C\"^p'", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      
      String string3 = textNode1.toString();
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("k4M=?C&quot;^p'", string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("k4M=?C\"^p'", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      
      String string4 = textNode0.getWholeText();
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("Three", string4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Three", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string5 = null;
      // Undeclared exception!
      try { 
        textNode0.attr(string5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode112();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals(" there & now >", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      
      String string0 = "%A.ZIHmGi=\",!s{";
      String string1 = "text";
      String string2 = textNode0.attr(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" there & now >", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals(" there & now >", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      
      String string3 = "";
      TextNode textNode1 = (TextNode)textNode0.attr(string0, string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(textNode1, textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals(" there & now >", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals(" there & now >", textNode1.gettext());
      
      String string4 = "O<W:#Y6)j44>>RP1(";
      String string5 = TextNode.normaliseWhitespace(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("O<W:#Y6)j44>>RP1(", string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode263();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("http://foo.com/", textNode0.baseUri());
      assertEquals("Three", textNode0.gettext());
      
      String string0 = textNode0.nodeName();
      assertNotNull(string0);
      assertEquals("#text", string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("http://foo.com/", textNode0.baseUri());
      assertEquals("Three", textNode0.gettext());
      
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger251();
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      String string1 = textNode0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Three", string1);
      assertNotSame(string1, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("http://foo.com/", textNode0.baseUri());
      assertEquals("Three", textNode0.gettext());
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("http://foo.com/", textNode0.baseUri());
      assertEquals("Three", textNode0.gettext());
      
      Integer integer1 = serializedObjectSupporter0.deserializeObjectInteger328();
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      int int0 = 0;
      Node[] nodeArray0 = null;
      // Undeclared exception!
      try { 
        textNode0.addChildren(int0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode186();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Three", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      Node node0 = textNode0.nextSibling();
      assertNull(node0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Three", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger335();
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      textNode0.remove();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Three", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Three", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      String string0 = "Integer169.xml";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertNotNull(string1);
      assertEquals("Integer169.xml", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = ".FB\\Q(";
      TextNode textNode1 = (TextNode)textNode0.attr(string2, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Three", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("Three", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode113();
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("there & now > ", textNode0.gettext());
      
      String string0 = null;
      textNode0.settext(string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger401();
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode57();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Doctype test", textNode0.gettext());
      
      // Undeclared exception!
      try { 
        serializedObjectSupporter0.deserializeObjectDocument50();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Document$OutputSettings cannot be cast to org.jsoup.nodes.Document
         //
         verifyException("org.jsoup.nodes.SerializedObjectSupporter", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "7f<7.(vYk'Qqvu)O4IF";
      TextNode textNode0 = new TextNode(string0, string0);
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.gettext());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      Node node0 = textNode0.nextSibling();
      assertNull(node0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.gettext());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string1 = "";
      List<Node> list0 = textNode0.siblingNodes();
      assertFalse(string0.equals((Object)string1));
      assertNotNull(list0);
      assertNotSame(string0, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.gettext());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      textNode0.childNodes = list0;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.gettext());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, textNode0.childNodes.size());
      assertTrue(textNode0.childNodes.isEmpty());
      
      TextNode textNode1 = TextNode.createFromEncoded(textNode0.text, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertNotSame(textNode1, textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.gettext());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode1.gettext());
      
      String string2 = textNode0.getWholeText();
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("7f<7.(vYk'Qqvu)O4IF", string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.gettext());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      boolean boolean0 = textNode1.isBlank();
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode1, textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.gettext());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("7f<7.(vYk'Qqvu)O4IF", textNode1.gettext());
      
      String string3 = "";
      String string4 = null;
      TextNode textNode2 = TextNode.createFromEncoded(string3, string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotNull(textNode2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertNull(textNode2.baseUri());
      
      String string5 = "";
      // Undeclared exception!
      try { 
        textNode2.attr(string4, string5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode330();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("aaa", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      int int0 = 80;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode313();
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Hello ", textNode0.gettext());
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Hello ", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      
      String string0 = "P;5/BW";
      String string1 = "mark";
      textNode0.settext(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("mark", textNode0.gettext());
      
      TextNode textNode2 = TextNode.createFromEncoded(string0, textNode0.text);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode2);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string0, string1);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("mark", textNode0.gettext());
      assertEquals("P;5/BW", textNode2.gettext());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("mark", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      
      int int1 = 34;
      // Undeclared exception!
      try { 
        textNode1.splitText(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode225();
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("\u00B9\u00B2\u00B3\u00BC\u00BD\u00BE", textNode0.gettext());
      
      String string0 = "#text";
      textNode0.settext(string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.gettext());
      
      String string1 = "";
      textNode0.settext(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      
      String string2 = "StringBuilder331.xml";
      TextNode textNode1 = textNode0.text(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("StringBuilder331.xml", textNode0.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("StringBuilder331.xml", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      
      textNode1.settext(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      
      StringBuilder stringBuilder0 = null;
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.charset.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      document_OutputSettings0.setcharsetEncoder(charsetEncoder0);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode169();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Hello there", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder404();
      assertNotNull(stringBuilder0);
      assertEquals("<table> \n <colgroup> \n  <col /> \n </colgroup>\n <colgroup> \n  <col /> \n  <col /> \n  <col /> \n </colgroup>\n <thead> \n  <tr> \n   <th> </th>\n   <th>2008 </th>\n   <th>2007 </th>\n   <th>2006 </th>\n  </tr>\n </thead>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Research and development </th>\n   <td> $ 1,109 </td>\n   <td> $ 782 </td>\n   <td> $ 712 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 3.4% </td>\n   <td> 3.3% </td>\n   <td> 3.7% </td>\n  </tr>\n </tbody>\n <tbody> \n  <tr>", stringBuilder0.toString());
      
      int int0 = 1916;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Hello there", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("<table> \n <colgroup> \n  <col /> \n </colgroup>\n <colgroup> \n  <col /> \n  <col /> \n  <col /> \n </colgroup>\n <thead> \n  <tr> \n   <th> </th>\n   <th>2008 </th>\n   <th>2007 </th>\n   <th>2006 </th>\n  </tr>\n </thead>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Research and development </th>\n   <td> $ 1,109 </td>\n   <td> $ 782 </td>\n   <td> $ 712 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 3.4% </td>\n   <td> 3.3% </td>\n   <td> 3.7% </td>\n  </tr>\n </tbody>\n <tbody> \n  <tr>", stringBuilder0.toString());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode320();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("now", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("now", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode308();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      TextNode textNode1 = (TextNode)textNode0.traverse(nodeVisitor0);
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("Hello ", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      
      int int0 = (-2403);
      textNode1.setSiblingIndex(int0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-2403), textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals((-2403), textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Hello ", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      
      int int1 = 0;
      boolean boolean0 = textNode0.hasAttr(textNode0.TEXT_KEY);
      assertTrue(boolean0);
      assertSame(textNode0, textNode1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-2403), textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder114();
      assertNotNull(stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      int int2 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode308();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      TextNode textNode1 = (TextNode)textNode0.traverse(nodeVisitor0);
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("Hello ", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      
      textNode1.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("Hello ", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      
      int int0 = 0;
      textNode0.siblingIndex = int0;
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      
      String string0 = null;
      TextNode textNode2 = (TextNode)textNode1.removeAttr(textNode0.text);
      assertNotNull(textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("Hello ", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("Hello ", textNode2.gettext());
      
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder252();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode198();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("two", textNode0.gettext());
      
      Node node0 = null;
      textNode0.parentNode = node0;
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("two", textNode0.gettext());
      
      Node[] nodeArray0 = new Node[0];
      textNode0.addChildren(nodeArray0);
      assertEquals(0, nodeArray0.length);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("two", textNode0.gettext());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node1 = textNode0.previousSibling();
      assertNull(node1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("two", textNode0.gettext());
      
      TextNode textNode1 = (TextNode)textNode0.traverse(nodeVisitor0);
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("two", textNode0.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals("two", textNode1.gettext());
      
      String string0 = "uj.|";
      textNode0.setBaseUri(string0);
      assertSame(textNode0, textNode1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("uj.|", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("two", textNode0.gettext());
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertSame(textNode0, textNode1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("uj.|", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("two", textNode0.gettext());
      
      String string1 = textNode0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("two", string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("uj.|", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("two", textNode0.gettext());
      
      String string2 = null;
      // Undeclared exception!
      try { 
        textNode0.text(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode283();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Term", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      
      int int0 = (-2214);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      String string0 = null;
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder114();
      assertNotNull(stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      int int1 = 0;
      Document.OutputSettings document_OutputSettings0 = null;
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode283();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("Term", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("Term", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      
      textNode1.parentNode = (Node) textNode0;
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("Term", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals(0, textNode1.parentNode.siblingIndex());
      assertEquals("", textNode1.parentNode.baseUri());
      
      StringBuilder stringBuilder0 = null;
      boolean boolean0 = textNode1.hasAttr(textNode0.TEXT_KEY);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertTrue(boolean0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("Term", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      
      String string0 = textNode0.getWholeText();
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(textNode0, textNode1);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      
      int int1 = (-2722);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(document_OutputSettings0.charset);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      
      boolean boolean1 = false;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.forceAllElementAsBlock(boolean1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(boolean1 == boolean0);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertFalse(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertFalse(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(boolean1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(boolean1 == boolean0);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertFalse(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.getescapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.getprettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertFalse(document_OutputSettings2.prettyPrint);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertFalse(document_OutputSettings3.forceAllElementAsBlock);
      assertFalse(document_OutputSettings3.prettyPrint);
      assertFalse(document_OutputSettings4.prettyPrint);
      assertFalse(document_OutputSettings4.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings4.indentAmount);
      
      String string1 = serializedObjectSupporter0.deserializeObjectString83();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Foo ", string1);
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try { 
        textNode1.outerHtmlHead(stringBuilder0, int1, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode308();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      String string0 = null;
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger15();
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      String string1 = "";
      textNode0.settext(string1);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder114();
      assertNotNull(stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      int int1 = 0;
      Document.OutputSettings document_OutputSettings0 = null;
      textNode0.outerHtmlTail(stringBuilder0, int1, document_OutputSettings0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      String string2 = "Ca~<6)B`F~U7V8*i";
      String string3 = textNode0.attr(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode308();
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Hello ", textNode0.gettext());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      String string0 = null;
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger15();
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      String string1 = "";
      textNode0.settext(string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder114();
      assertNotNull(stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      int int1 = 0;
      Document.OutputSettings document_OutputSettings0 = null;
      textNode0.outerHtmlTail(stringBuilder0, int1, document_OutputSettings0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      String string2 = "Ca~<6)B`F~U7V8*i";
      String string3 = "org.xmlpull.v1.XmlPullParser";
      String string4 = "\\l]:svVv\" D*cEv]M;";
      TextNode textNode1 = TextNode.createFromEncoded(string3, string4);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertEquals("org.xmlpull.v1.XmlPullParser", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("\\l]:svVv\" D*cEv]M;", textNode1.baseUri());
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      long long0 = (-495L);
      System.setCurrentTimeMillis(long0);
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode189();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("four", textNode0.gettext());
      
      String string0 = "p:aWR,u$)[B";
      textNode0.text = string0;
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string1 = "";
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      textNode0.remove();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      int int0 = 2404;
      textNode0.setSiblingIndex(int0);
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      
      String string2 = textNode0.attr(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      
      String string3 = textNode0.getTEXT_KEY();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("text", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder65();
      assertNotNull(stringBuilder0);
      assertEquals("<p title=\"&pi;\">", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      boolean boolean1 = true;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.forceAllElementAsBlock(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      boolean boolean2 = false;
      String string4 = "p6I@uu*=[T)Nnu{=";
      TextNode textNode1 = TextNode.createFromEncoded(string4, textNode0.text);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode0.text.equals((Object)string3));
      assertFalse(textNode0.text.equals((Object)string4));
      assertFalse(textNode0.text.equals((Object)string2));
      assertFalse(textNode0.text.equals((Object)string1));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode0.text, string3);
      assertNotSame(textNode0.text, string4);
      assertSame(textNode0.text, string0);
      assertNotSame(textNode0.text, string2);
      assertNotSame(textNode0.text, string1);
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("<p title=\"&pi;\">false", stringBuilder1.toString());
      assertEquals("<p title=\"&pi;\">false", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(document_OutputSettings1.forceAllElementAsBlock);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      document_OutputSettings4.forceAllElementAsBlock = document_OutputSettings2.forceAllElementAsBlock;
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings4);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertEquals("<p title=\"&pi;\">falsep&colon;aWR&comma;u&dollar;&rpar;&lsqb;B", stringBuilder0.toString());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode377();
      assertNotNull(textNode0);
      assertEquals("Something", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      String string0 = textNode0.toString();
      assertNotNull(string0);
      assertEquals("Something", string0);
      assertEquals("Something", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      
      String string0 = textNode0.text();
      assertNotNull(string0);
      assertEquals("Two", string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      
      String string1 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("text", string1);
      assertNotSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      
      boolean boolean0 = textNode0.hasAttr(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      
      String string2 = "Integer94.xml";
      String string3 = textNode0.absUrl(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      
      String string4 = "6re67w d5>H";
      String string5 = TextNode.normaliseWhitespace(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("6re67w d5>H", string5);
      assertNotSame(string4, string0);
      assertSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      
      TextNode textNode1 = textNode0.text(string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertSame(textNode1, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("Two", textNode1.gettext());
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      String string0 = null;
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder114();
      assertNotNull(stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      int int1 = 3310;
      Document.OutputSettings document_OutputSettings0 = null;
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode136();
      assertNotNull(textNode0);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(" ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      
      String string1 = "GSow:z";
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string1);
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(" ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals(" ", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      
      String string2 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("text", string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(" ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode308();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      String string0 = null;
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger15();
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      String string1 = "";
      textNode0.settext(string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder114();
      assertNotNull(stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      int int1 = 0;
      Document.OutputSettings document_OutputSettings0 = null;
      int int2 = 299;
      String string2 = "";
      StringBuilder stringBuilder1 = stringBuilder0.replace(int0, int2, string2);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(string2, string1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      
      textNode0.outerHtmlTail(stringBuilder0, int1, document_OutputSettings0);
      assertFalse(int1 == int2);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", stringBuilder0.toString());
      
      String string3 = "M69L5=<";
      textNode0.baseUri = string3;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("M69L5=<", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("", stringBuilder0.toString());
      
      String string4 = "Ca~<6)B`F~U7V8*i";
      String string5 = textNode0.attr(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertSame(string5, string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("M69L5=<", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      boolean boolean1 = textNode0.isBlank();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("M69L5=<", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode283();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("Term", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Term", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(1, textNode1.siblingIndex());
      
      textNode1.parentNode = (Node) textNode0;
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Term", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("", textNode1.parentNode.baseUri());
      assertEquals(0, textNode1.parentNode.siblingIndex());
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder26();
      assertNotNull(stringBuilder0);
      assertEquals("<div>\n <p>", stringBuilder0.toString());
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode282();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("link", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string0 = textNode0.outerHtml();
      assertNotNull(string0);
      assertEquals("link", string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("link", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("", textNode0.baseUri());
      assertEquals("link", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("<div>\n <p>", stringBuilder0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("<div>\n <p>", stringBuilder1.toString());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(document_OutputSettings0.charset);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(document_OutputSettings0.escapeMode);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertFalse(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      
      textNode0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals("", textNode0.baseUri());
      assertEquals("link", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      boolean boolean0 = true;
      document_OutputSettings3.setprettyPrint(boolean0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertFalse(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      
      String string1 = textNode0.text();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("link", string1);
      assertNotSame(string1, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("link", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      document_OutputSettings2.setcharsetEncoder(document_OutputSettings3.charsetEncoder);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertFalse(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      
      // Undeclared exception!
      try { 
        document_OutputSettings3.charset(textNode0.TEXT_KEY);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // text
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder114();
      assertNotNull(stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      int int1 = 3310;
      StringBuilder stringBuilder1 = stringBuilder0.append(int1);
      assertFalse(int1 == int0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>3310", stringBuilder0.toString());
      assertEquals("\nthere &amp; now &gt; \n<p>3310", stringBuilder1.toString());
      
      Document.OutputSettings document_OutputSettings0 = null;
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("\nthere &amp; now &gt; \n<p>3310", stringBuilder0.toString());
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode203();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("five", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      
      String string0 = textNode0.gettext();
      assertNotNull(string0);
      assertEquals("five", string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("five", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      String string0 = null;
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder114();
      assertNotNull(stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      int int1 = 3310;
      Document.OutputSettings document_OutputSettings0 = null;
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode126();
      assertNotNull(textNode0);
      assertEquals("What?", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      String string1 = textNode0.getWholeText();
      assertNotNull(string1);
      assertEquals("What?", string1);
      assertEquals("What?", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode308();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 32;
      String string0 = null;
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger15();
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      String string1 = "";
      textNode0.settext(string1);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder31();
      assertNotNull(stringBuilder0);
      assertEquals("<p><span>", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = serializedObjectSupporter0.deserializeObjectStringBuilder114();
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder1);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder1.toString());
      
      int int1 = 0;
      Document.OutputSettings document_OutputSettings0 = null;
      textNode0.outerHtmlTail(stringBuilder1, int1, document_OutputSettings0);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(int1 == int0);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder1.toString());
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(boolean0);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder1.toString());
      
      String string2 = "Ca~<6)B`F~U7V8*i";
      String string3 = textNode0.attr(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string4 = textNode0.text();
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      assertSame(string4, string1);
      assertSame(string4, string3);
      assertNotSame(string4, string2);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "Integer94.xml";
      String string1 = ")$-N";
      String string2 = TextNode.normaliseWhitespace(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(")$-N", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode116();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("there", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      String string3 = textNode0.nodeName();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("#text", string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("there", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode308();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder290();
      assertNotNull(stringBuilder0);
      assertEquals("<!DOCTYPE html>\n<html>\n <head></head>\n <body>\n  OneTwoThree\n  <link />Four", stringBuilder0.toString());
      
      int int0 = 1199;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      
      textNode0.indent(stringBuilder0, int0, document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      
      int int1 = 0;
      String string0 = null;
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger15();
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Document.OutputSettings document_OutputSettings4 = null;
      textNode0.outerHtmlTail(stringBuilder0, document_OutputSettings1.indentAmount, document_OutputSettings4);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = 3737;
      // Undeclared exception!
      try { 
        textNode0.splitText(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode144();
      assertNotNull(textNode0);
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      
      String string0 = "AK";
      String string1 = "lx)lj~? l;WMzU-d/";
      TextNode textNode1 = (TextNode)textNode0.attr(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("Two", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      
      long long0 = 1L;
      String string2 = textNode0.outerHtml();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Two", string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      
      // Undeclared exception!
      try { 
        serializedObjectSupporter0.deserializeObjectDocument220();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Document$OutputSettings cannot be cast to org.jsoup.nodes.Document
         //
         verifyException("org.jsoup.nodes.SerializedObjectSupporter", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertNotNull(textNode0);
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string1 = textNode0.outerHtml();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string2 = textNode0.getWholeText();
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string3 = "E_w8<$m$ql8";
      int int0 = 24;
      textNode0.setSiblingIndex(int0);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(24, textNode0.siblingIndex());
      
      String string4 = TextNode.normaliseWhitespace(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("E_w8<$m$ql8", string4);
      assertSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      
      String string5 = null;
      TextNode textNode1 = TextNode.createFromEncoded(textNode0.text, string5);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(24, textNode0.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      
      // Undeclared exception!
      try { 
        textNode1.before((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      long long0 = (-495L);
      System.setCurrentTimeMillis(long0);
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode189();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("four", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      
      String string0 = "p:aWR,u$)[B";
      textNode0.text = string0;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      
      String string1 = "";
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      
      textNode0.remove();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      
      int int0 = 2404;
      String string2 = textNode0.attr(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      
      String string3 = textNode0.getTEXT_KEY();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("text", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder65();
      assertNotNull(stringBuilder0);
      assertEquals("<p title=\"&pi;\">", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      boolean boolean1 = true;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.forceAllElementAsBlock(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      boolean boolean2 = false;
      String string4 = "p6I@uu*=[T)Nnu{=";
      TextNode textNode1 = TextNode.createFromEncoded(string4, textNode0.text);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("<p title=\"&pi;\">false", stringBuilder1.toString());
      assertEquals("<p title=\"&pi;\">false", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(document_OutputSettings1.forceAllElementAsBlock);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      document_OutputSettings4.forceAllElementAsBlock = document_OutputSettings2.forceAllElementAsBlock;
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings4);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals("<p title=\"&pi;\">falsep&colon;aWR&comma;u&dollar;&rpar;&lsqb;B", stringBuilder0.toString());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string1 = textNode0.outerHtml();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string2 = textNode0.getWholeText();
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      int int0 = 24;
      textNode0.setSiblingIndex(int0);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(24, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      
      String string3 = TextNode.normaliseWhitespace(string2);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(24, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      
      String string4 = null;
      TextNode textNode1 = TextNode.createFromEncoded(textNode0.text, string4);
      assertTrue(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(24, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNull(textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.gettext());
      
      // Undeclared exception!
      try { 
        textNode1.before((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode189();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("four", textNode0.gettext());
      
      String string0 = "p:aWR,u$)[B";
      textNode0.text = string0;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string1 = "";
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      textNode0.remove();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      int int0 = 2404;
      textNode0.setSiblingIndex(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string2 = textNode0.attr(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string3 = textNode0.getTEXT_KEY();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("text", string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder65();
      assertNotNull(stringBuilder0);
      assertEquals("<p title=\"&pi;\">", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      
      boolean boolean1 = true;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.forceAllElementAsBlock(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      
      boolean boolean2 = false;
      String string4 = "p6I@uu*=[T)Nnu{=";
      TextNode textNode1 = TextNode.createFromEncoded(string4, textNode0.text);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(textNode1, textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("<p title=\"&pi;\">false", stringBuilder1.toString());
      assertEquals("<p title=\"&pi;\">false", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(document_OutputSettings1.forceAllElementAsBlock);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      
      document_OutputSettings4.forceAllElementAsBlock = document_OutputSettings2.forceAllElementAsBlock;
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings4);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertEquals("<p title=\"&pi;\">falsep&colon;aWR&comma;u&dollar;&rpar;&lsqb;B", stringBuilder0.toString());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      
      boolean boolean3 = textNode0.isBlank();
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertNotSame(textNode0, textNode1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string5 = textNode0.getTEXT_KEY();
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("text", string5);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      TextNode textNode2 = TextNode.createFromEncoded(textNode0.TEXT_KEY, string3);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotNull(textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertSame(string3, string5);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("text", textNode2.gettext());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("text", textNode2.baseUri());
      
      String string6 = textNode2.toString();
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("text", string6);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertSame(string3, string5);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("text", textNode2.gettext());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("text", textNode2.baseUri());
      
      String string7 = textNode0.getTEXT_KEY();
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("text", string7);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertSame(string7, string3);
      assertNotSame(string7, string0);
      assertSame(string7, string5);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string8 = textNode0.toString();
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("p:aWR,u$)[B", string8);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string8, string0);
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      TextNode textNode3 = textNode0.text(textNode2.TEXT_KEY);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertTrue(string3.equals((Object)string6));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode1));
      assertNotNull(textNode3);
      assertSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string8);
      assertSame(string3, string7);
      assertNotSame(string3, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertSame(string3, string5);
      assertNotSame(textNode2, textNode3);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode2);
      assertNotSame(textNode3, textNode1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.gettext());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("text", textNode2.gettext());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("text", textNode2.baseUri());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("text", textNode3.gettext());
      assertEquals(2404, textNode3.siblingIndex());
      assertEquals("", textNode3.baseUri());
      assertEquals("#text", textNode3.nodeName());
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      long long0 = (-495L);
      System.setCurrentTimeMillis(long0);
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode189();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("four", textNode0.gettext());
      
      String string0 = "p:aWR,u$)[B";
      textNode0.text = string0;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      
      String string1 = "";
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      
      textNode0.remove();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      
      int int0 = (-1);
      textNode0.setSiblingIndex(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      
      String string2 = textNode0.attr(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      
      String string3 = textNode0.getTEXT_KEY();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("text", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder65();
      assertNotNull(stringBuilder0);
      assertEquals("<p title=\"&pi;\">", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      boolean boolean1 = true;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.forceAllElementAsBlock(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      boolean boolean2 = false;
      String string4 = "p6I@uu*=[T)Nnu{=";
      TextNode textNode1 = TextNode.createFromEncoded(string4, textNode0.text);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(textNode1, textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("<p title=\"&pi;\">false", stringBuilder1.toString());
      assertEquals("<p title=\"&pi;\">false", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(document_OutputSettings1.forceAllElementAsBlock);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      document_OutputSettings4.forceAllElementAsBlock = document_OutputSettings2.forceAllElementAsBlock;
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings4);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals("<p title=\"&pi;\">falsep&colon;aWR&comma;u&dollar;&rpar;&lsqb;B", stringBuilder0.toString());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      String string0 = null;
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder114();
      assertNotNull(stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(">p<\n ;tg& won ;pma& ereht\n", stringBuilder0.toString());
      assertEquals(">p<\n ;tg& won ;pma& ereht\n", stringBuilder1.toString());
      
      int int1 = 32;
      Document.OutputSettings document_OutputSettings0 = null;
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(">p<\n ;tg& won ;pma& ereht\n", stringBuilder0.toString());
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode139();
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("One", textNode0.gettext());
      
      int int2 = 1161;
      // Undeclared exception!
      try { 
        textNode0.splitText(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder314();
      assertNotNull(stringBuilder0);
      assertEquals("<a>Hello \n <div>", stringBuilder0.toString());
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode244();
      assertNotNull(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Hello", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string0 = "org.jsoup.nodes.TextNode";
      TextNode textNode1 = textNode0.text(string0);
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("org.jsoup.nodes.TextNode", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("org.jsoup.nodes.TextNode", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      
      String string1 = textNode0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.jsoup.nodes.TextNode", string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("org.jsoup.nodes.TextNode", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string2 = textNode0.attr(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("org.jsoup.nodes.TextNode", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      int int0 = 1;
      TextNode textNode2 = textNode1.splitText(int0);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotNull(textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("o", textNode0.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("o", textNode1.gettext());
      assertEquals(1, textNode2.siblingIndex());
      assertEquals("rg.jsoup.nodes.TextNode", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertEquals("<a>Hello \n <div>", stringBuilder0.toString());
      
      int int1 = 2;
      textNode2.siblingIndex = int1;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("o", textNode0.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("o", textNode1.gettext());
      assertEquals(2, textNode2.siblingIndex());
      assertEquals("rg.jsoup.nodes.TextNode", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      
      // Undeclared exception!
      try { 
        textNode2.splitText(int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode151();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("code\n\ncode", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      
      String string0 = "#text";
      textNode0.settext(string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.gettext());
      
      String string1 = "Split offset must be not be negative";
      textNode0.settext(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      
      String string2 = "StringBuilder331.xml";
      TextNode textNode1 = textNode0.text(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(textNode1, textNode0);
      assertEquals("StringBuilder331.xml", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("StringBuilder331.xml", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      
      textNode1.settext(string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals("Split offset must be not be negative", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      
      StringBuilder stringBuilder0 = null;
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.charset.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertSame(textNode0, textNode1);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      
      document_OutputSettings0.setcharsetEncoder(charsetEncoder0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertNotNull(textNode0);
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string0 = textNode0.text();
      assertNotNull(string0);
      assertEquals("Two", string0);
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string1 = textNode0.getTEXT_KEY();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("text", string1);
      assertNotSame(string1, string0);
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      boolean boolean0 = textNode0.hasAttr(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) textNode0;
      nodeArray0[3] = (Node) textNode0;
      nodeArray0[4] = (Node) textNode0;
      nodeArray0[5] = (Node) textNode0;
      nodeArray0[6] = (Node) textNode0;
      nodeArray0[7] = (Node) textNode0;
      nodeArray0[8] = (Node) textNode0;
      textNode0.addChildren(nodeArray0);
      assertEquals(9, nodeArray0.length);
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder97();
      assertNotNull(stringBuilder0);
      assertEquals("<p><span>Two</span><span>", stringBuilder0.toString());
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("<p><span>Two</span><span>", stringBuilder0.toString());
      
      String string2 = "Integer94.xml";
      String string3 = textNode0.absUrl(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string4 = "6re67w d5>H";
      String string5 = TextNode.normaliseWhitespace(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("6re67w d5>H", string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      
      String string6 = textNode0.nodeName();
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("#text", string6);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      // Undeclared exception!
      textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode173();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("there", textNode0.gettext());
      
      String string0 = "";
      textNode0.settext(string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      
      String string1 = textNode0.gettext();
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      long long0 = (-495L);
      System.setCurrentTimeMillis(long0);
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode189();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("four", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string0 = "p:aWR,u$)[B";
      textNode0.text = string0;
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string1 = "y";
      textNode0.remove();
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      int int0 = 2404;
      textNode0.setSiblingIndex(int0);
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2404, textNode0.siblingIndex());
      
      String string2 = textNode0.attr(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2404, textNode0.siblingIndex());
      
      String string3 = textNode0.getTEXT_KEY();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("text", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2404, textNode0.siblingIndex());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder65();
      assertNotNull(stringBuilder0);
      assertEquals("<p title=\"&pi;\">", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.forceAllElementAsBlock(boolean0);
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      document_OutputSettings0.charset = document_OutputSettings1.charset;
      assertEquals("UTF-8", document_OutputSettings0.charset.toString());
      assertTrue(document_OutputSettings0.charset.isRegistered());
      assertEquals("UTF-8", document_OutputSettings0.charset.name());
      assertEquals("UTF-8", document_OutputSettings0.charset.displayName());
      assertTrue(document_OutputSettings0.charset.canEncode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      
      boolean boolean1 = false;
      String string4 = "p6I@uu*=[T)Nnu{=";
      TextNode textNode1 = TextNode.createFromEncoded(string4, textNode0.text);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(textNode1, textNode0);
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("<p title=\"&pi;\">false", stringBuilder1.toString());
      assertEquals("<p title=\"&pi;\">false", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      document_OutputSettings1.charsetEncoder = document_OutputSettings2.charsetEncoder;
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(3.0F, document_OutputSettings1.charsetEncoder.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, document_OutputSettings1.charsetEncoder.averageBytesPerChar(), 0.01F);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      
      document_OutputSettings4.forceAllElementAsBlock = document_OutputSettings2.forceAllElementAsBlock;
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings4);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertNotSame(textNode0, textNode1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2404, textNode0.siblingIndex());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.getescapeMode());
      assertTrue(document_OutputSettings4.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals("<p title=\"&pi;\">falsep&colon;aWR&comma;u&dollar;&rpar;&lsqb;B", stringBuilder0.toString());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertTrue(document_OutputSettings4.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      String string5 = "c&gyjxC";
      String string6 = "kJUaC";
      TextNode textNode2 = (TextNode)textNode1.attr(string5, string6);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode2);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string6);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      
      Node node0 = textNode2.nextSibling();
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNull(node0);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string6);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      
      TextNode textNode3 = (TextNode)textNode1.removeAttr(string3);
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(textNode3);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode0);
      assertSame(textNode3, textNode2);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string6);
      assertSame(textNode1, textNode3);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode3.gettext());
      assertEquals("p:aWR,u$)[B", textNode3.baseUri());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      
      TextNode textNode4 = (TextNode)textNode0.removeAttr(string1);
      assertFalse(textNode4.equals((Object)textNode3));
      assertFalse(textNode4.equals((Object)textNode2));
      assertFalse(textNode4.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertNotNull(textNode4);
      assertSame(textNode4, textNode0);
      assertNotSame(textNode4, textNode3);
      assertNotSame(textNode4, textNode2);
      assertNotSame(textNode4, textNode1);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode4);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertEquals("", textNode4.baseUri());
      assertEquals(2404, textNode4.siblingIndex());
      assertEquals("text", textNode4.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode4.gettext());
      assertEquals("#text", textNode4.nodeName());
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2404, textNode0.siblingIndex());
      
      Attributes attributes0 = textNode2.attributes();
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertFalse(textNode1.equals((Object)textNode4));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode4));
      assertNotNull(attributes0);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode4);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string6);
      assertNotSame(textNode1, textNode4);
      assertSame(textNode1, textNode3);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode4);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode3);
      assertEquals("p:aWR,u$)[B", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode1.gettext());
      assertEquals("p:aWR,u$)[B", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("p6I@uu*=[T)Nnu{=", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("p:aWR,u$)[B", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      
      TextNode textNode5 = textNode4.splitText(document_OutputSettings1.indentAmount);
      assertFalse(textNode4.equals((Object)textNode3));
      assertFalse(textNode4.equals((Object)textNode2));
      assertFalse(textNode4.equals((Object)textNode1));
      assertFalse(textNode5.equals((Object)textNode1));
      assertFalse(textNode5.equals((Object)textNode0));
      assertFalse(textNode5.equals((Object)textNode2));
      assertFalse(textNode5.equals((Object)textNode4));
      assertFalse(textNode5.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertNotNull(textNode5);
      assertSame(textNode4, textNode0);
      assertNotSame(textNode4, textNode3);
      assertNotSame(textNode4, textNode2);
      assertNotSame(textNode4, textNode1);
      assertNotSame(textNode4, textNode5);
      assertNotSame(textNode5, textNode1);
      assertNotSame(textNode5, textNode0);
      assertNotSame(textNode5, textNode2);
      assertNotSame(textNode5, textNode4);
      assertNotSame(textNode5, textNode3);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode4);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertEquals("", textNode4.baseUri());
      assertEquals(2404, textNode4.siblingIndex());
      assertEquals("text", textNode4.getTEXT_KEY());
      assertEquals("#text", textNode4.nodeName());
      assertEquals("p", textNode4.gettext());
      assertEquals(":aWR,u$)[B", textNode5.gettext());
      assertEquals("#text", textNode5.nodeName());
      assertEquals(0, textNode5.siblingIndex());
      assertEquals("text", textNode5.getTEXT_KEY());
      assertEquals("", textNode5.baseUri());
      assertEquals("p", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2404, textNode0.siblingIndex());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode225();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\u00B9\u00B2\u00B3\u00BC\u00BD\u00BE", textNode0.gettext());
      
      String string0 = "#text";
      textNode0.settext(string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string1 = "i";
      textNode0.settext(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("i", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string2 = "StringBuilder331.xml";
      TextNode textNode1 = textNode0.text(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("StringBuilder331.xml", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("StringBuilder331.xml", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      
      textNode1.settext(string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("i", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("i", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      
      StringBuilder stringBuilder0 = null;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.charset.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertSame(textNode0, textNode1);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("i", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      document_OutputSettings0.setcharsetEncoder(charsetEncoder0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      String string3 = textNode0.gettext();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("i", string3);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(textNode0, textNode1);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("i", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        textNode1.splitText(document_OutputSettings0.indentAmount);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode225();
      assertNotNull(textNode0);
      assertEquals("\u00B9\u00B2\u00B3\u00BC\u00BD\u00BE", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      
      String string0 = "#text";
      textNode0.settext(string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      String string1 = "G\\";
      textNode0.settext(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("G\\", textNode0.gettext());
      
      String string2 = "StringBuilder331.xml";
      TextNode textNode1 = textNode0.text(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("StringBuilder331.xml", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("StringBuilder331.xml", textNode1.gettext());
      
      textNode1.settext(string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("G\\", textNode0.gettext());
      assertEquals("G\\", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      
      StringBuilder stringBuilder0 = null;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.charset.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertSame(textNode0, textNode1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("G\\", textNode0.gettext());
      
      document_OutputSettings0.setcharsetEncoder(charsetEncoder0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      textNode1.setParentNode(textNode0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("G\\", textNode0.gettext());
      assertEquals("G\\", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      
      String string3 = textNode0.gettext();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("G\\", string3);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(textNode0, textNode1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("G\\", textNode0.gettext());
      
      // Undeclared exception!
      try { 
        textNode1.splitText(document_OutputSettings0.indentAmount);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode308();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      String string0 = null;
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger15();
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      String string1 = "";
      textNode0.settext(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder114();
      assertNotNull(stringBuilder0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      int int1 = 0;
      Document.OutputSettings document_OutputSettings0 = null;
      textNode0.outerHtmlTail(stringBuilder0, int1, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertEquals("\nthere &amp; now &gt; \n<p>", stringBuilder0.toString());
      
      String string2 = "Ca~<6)B`F~U7V8*i";
      String string3 = "org.xmlpull.v1.XmlPullParser";
      String string4 = "\\l]:svVv\" D*cEv]M;";
      String string5 = textNode0.toString();
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode134();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Check", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      String string0 = textNode0.text();
      assertNotNull(string0);
      assertEquals("Check", string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Check", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      String string1 = textNode0.getTEXT_KEY();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("text", string1);
      assertNotSame(string1, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Check", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      boolean boolean0 = textNode0.hasAttr(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Check", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder97();
      assertNotNull(stringBuilder0);
      assertEquals("<p><span>Two</span><span>", stringBuilder0.toString());
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("<p><span>Two</span><span>", stringBuilder0.toString());
      
      String string2 = "Integer94.xml";
      String string3 = textNode0.absUrl(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Check", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      String string4 = "6re67w d5>H";
      String string5 = TextNode.normaliseWhitespace(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("6re67w d5>H", string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertSame(string5, string4);
      
      String string6 = TextNode.normaliseWhitespace(textNode0.text);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("Check", string6);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertSame(string6, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Check", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      String string7 = textNode0.toString();
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("Check", string7);
      assertNotSame(string7, string4);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Check", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      String string8 = textNode0.gettext();
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals("Check", string8);
      assertNotSame(string8, string3);
      assertSame(string8, string6);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertSame(string8, string0);
      assertNotSame(string8, string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Check", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string1);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string8);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Check", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Check", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string7);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string6);
      assertSame(string4, string5);
      assertNotSame(string4, string8);
      assertNotSame(string4, string2);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Check", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("Check", textNode2.gettext());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        textNode2.splitText(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode63();
      assertNotNull(textNode0);
      assertEquals("\u03C0 & < > ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      
      String string0 = "#text";
      String string1 = "";
      String string2 = "";
      TextNode textNode1 = textNode0.text(string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(textNode1, textNode0);
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      
      textNode1.settext(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertSame(textNode0, textNode1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(textNode1, textNode0);
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      
      StringBuilder stringBuilder0 = null;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.charset.newEncoder();
      assertNotNull(charsetEncoder0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertSame(textNode0, textNode1);
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      
      document_OutputSettings0.setcharsetEncoder(charsetEncoder0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      String string3 = textNode0.gettext();
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertSame(string3, string1);
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      
      TextNode textNode2 = serializedObjectSupporter0.deserializeObjectTextNode430();
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("<p>Jsoup</p>", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("", textNode2.baseUri());
      
      TextNode textNode3 = TextNode.createFromEncoded(textNode2.text, textNode1.TEXT_KEY);
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode3);
      assertNotSame(textNode3, textNode2);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode3);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(textNode1, textNode3);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode3);
      assertNotSame(textNode2, textNode0);
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("<p>Jsoup</p>", textNode3.gettext());
      assertEquals("text", textNode3.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("<p>Jsoup</p>", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("", textNode2.baseUri());
      
      TextNode textNode4 = textNode3.splitText(document_OutputSettings0.indentAmount);
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode4.equals((Object)textNode3));
      assertFalse(textNode4.equals((Object)textNode0));
      assertFalse(textNode4.equals((Object)textNode1));
      assertFalse(textNode4.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode3));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode3));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode4);
      assertNotSame(textNode3, textNode2);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode4);
      assertNotSame(textNode4, textNode3);
      assertNotSame(textNode4, textNode0);
      assertNotSame(textNode4, textNode1);
      assertNotSame(textNode4, textNode2);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode4);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(textNode1, textNode3);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode3);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode4);
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("<", textNode3.gettext());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("text", textNode3.baseUri());
      assertEquals("text", textNode4.getTEXT_KEY());
      assertEquals("p>Jsoup</p>", textNode4.gettext());
      assertEquals(0, textNode4.siblingIndex());
      assertEquals("#text", textNode4.nodeName());
      assertEquals("text", textNode4.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("<p>Jsoup</p>", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("", textNode2.baseUri());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      System.setCurrentTimeMillis(document_OutputSettings0.indentAmount);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode292();
      assertNotNull(textNode0);
      assertEquals(7, textNode0.siblingIndex());
      assertEquals("Seven ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      
      int int0 = (-28);
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder310();
      assertNotNull(stringBuilder0);
      assertEquals("<span>Hello \n <div>\n  there\n </div>", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      int int1 = 4428;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int1);
      assertFalse(int1 == int0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(4428, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(4428, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(4428, document_OutputSettings1.indentAmount());
      assertEquals(4428, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(4428, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(4428, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.forceAllElementAsBlock(boolean0);
      assertFalse(int1 == int0);
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(4428, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(4428, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(4428, document_OutputSettings1.indentAmount());
      assertEquals(4428, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(4428, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(4428, document_OutputSettings2.getindentAmount());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(4428, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock);
      assertEquals(4428, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(4428, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode308();
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder290();
      assertNotNull(stringBuilder0);
      assertEquals("<!DOCTYPE html>\n<html>\n <head></head>\n <body>\n  OneTwoThree\n  <link />Four", stringBuilder0.toString());
      
      int int0 = 1199;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.forceAllElementAsBlock(document_OutputSettings2.prettyPrint);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings3.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      
      document_OutputSettings0.setprettyPrint(document_OutputSettings2.forceAllElementAsBlock);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      
      textNode0.indent(stringBuilder0, int0, document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      
      int int1 = 0;
      String string0 = null;
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger15();
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      textNode0.outerHtmlTail(stringBuilder0, document_OutputSettings1.indentAmount, document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Hello ", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean0);
      
      String string1 = null;
      TextNode textNode1 = textNode0.text(string1);
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.gettext());
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test83()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode11();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("foo", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      int int0 = (-641);
      textNode0.setSiblingIndex(int0);
      assertEquals("", textNode0.baseUri());
      assertEquals((-641), textNode0.siblingIndex());
      assertEquals("foo", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string0 = "";
      textNode0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals("", textNode0.baseUri());
      assertEquals((-641), textNode0.siblingIndex());
      assertEquals("foo", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      boolean boolean0 = textNode0.hasAttr(string0);
      assertFalse(boolean0);
      assertEquals("", textNode0.baseUri());
      assertEquals((-641), textNode0.siblingIndex());
      assertEquals("foo", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string1 = "";
      String string2 = textNode0.attr(string1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("", textNode0.baseUri());
      assertEquals((-641), textNode0.siblingIndex());
      assertEquals("foo", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      TextNode textNode1 = textNode0.text(string0);
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals((-641), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-641), textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.gettext());
      
      // Undeclared exception!
      try { 
        textNode1.attr(string1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test84()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string0 = "p:aWR,u$)[B";
      String string1 = "";
      int int0 = 2404;
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder65();
      assertNotNull(stringBuilder0);
      assertEquals("<p title=\"&pi;\">", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      boolean boolean0 = true;
      String string2 = "p6I@uu*=[T)Nnu{=";
      StringBuilder stringBuilder1 = stringBuilder0.append(document_OutputSettings0.forceAllElementAsBlock);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("<p title=\"&pi;\">false", stringBuilder0.toString());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertEquals("<p title=\"&pi;\">false", stringBuilder1.toString());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      
      document_OutputSettings2.forceAllElementAsBlock = document_OutputSettings0.forceAllElementAsBlock;
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      
      String string3 = "c&gyjxC";
      String string4 = "kJUaC";
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode318();
      assertNotNull(textNode0);
      assertEquals("there", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      
      document_OutputSettings1.indentAmount = int0;
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(2404, document_OutputSettings1.getindentAmount());
      assertEquals(2404, document_OutputSettings1.indentAmount());
      
      String string5 = textNode0.gettext();
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("there", string5);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertEquals("there", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      
      int int1 = 1282;
      // Undeclared exception!
      textNode0.outerHtmlHead(stringBuilder0, int1, document_OutputSettings2);
  }

  @Test(timeout = 11000)
  public void test85()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string0 = "p:aWR,u$)[B";
      String string1 = "";
      int int0 = 2404;
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder65();
      assertNotNull(stringBuilder0);
      assertEquals("<p title=\"&pi;\">", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      boolean boolean0 = true;
      String string2 = "p6I@uu*=[T)Nnu{=";
      StringBuilder stringBuilder1 = stringBuilder0.append(document_OutputSettings0.forceAllElementAsBlock);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("<p title=\"&pi;\">false", stringBuilder0.toString());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals("<p title=\"&pi;\">false", stringBuilder1.toString());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      
      document_OutputSettings2.forceAllElementAsBlock = document_OutputSettings0.forceAllElementAsBlock;
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      
      String string3 = "DRD[J-";
      String string4 = "kJUaC";
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode318();
      assertNotNull(textNode0);
      assertEquals("there", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string5 = textNode0.gettext();
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("there", string5);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertEquals("there", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string6 = "";
      textNode0.settext(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertSame(string6, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      int int1 = 1282;
      textNode0.outerHtmlHead(stringBuilder0, int1, document_OutputSettings2);
      assertFalse(int1 == int0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals("<p title=\"&pi;\">false", stringBuilder0.toString());
      assertFalse(document_OutputSettings0.getforceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getforceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertFalse(document_OutputSettings2.getforceAllElementAsBlock());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings2.forceAllElementAsBlock);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      
      String string7 = textNode0.gettext();
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("", string7);
      assertSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
  }

  @Test(timeout = 11000)
  public void test86()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode2();
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("This", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      
      String string0 = null;
      TextNode textNode1 = textNode0.text(string0);
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      
      String string1 = "";
      String string2 = null;
      TextNode textNode2 = TextNode.createFromEncoded(textNode1.TEXT_KEY, string2);
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertEquals("", textNode0.baseUri());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertNull(textNode2.baseUri());
      assertEquals("text", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(0, textNode2.siblingIndex());
      
      String string3 = TextNode.stripLeadingWhitespace(string1);
      assertNotNull(string3);
      assertEquals("", string3);
      assertSame(string1, string3);
      assertSame(string3, string1);
      
      // Undeclared exception!
      try { 
        textNode1.attributes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
