/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 09:27:18 GMT 2021
 */

package org.elasticsearch.river.mongodb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.DBCollection;
import com.mongodb.ServerAddress;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.SynchronousQueue;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.collect.ImmutableList;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.settings.ImmutableSettings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.river.RiverSettings;
import org.elasticsearch.river.mongodb.MongoDBRiver;
import org.elasticsearch.river.mongodb.MongoDBRiverDefinition;
import org.elasticsearch.river.mongodb.SharedContext;
import org.elasticsearch.river.mongodb.Slurper;
import org.elasticsearch.river.mongodb.Status;
import org.elasticsearch.script.ScriptService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Slurper_ESTest extends Slurper_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      String string0 = "tmp.mr.";
      RiverSettings riverSettings0 = null;
      ScriptService scriptService0 = null;
      // Undeclared exception!
      try { 
        MongoDBRiverDefinition.parseSettings(string0, string0, riverSettings0, scriptService0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No settings specified
         //
         verifyException("org.elasticsearch.common.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      ArrayList<ServerAddress> arrayList0 = new ArrayList<ServerAddress>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      MongoDBRiverDefinition mongoDBRiverDefinition0 = null;
      SynchronousQueue<MongoDBRiver.QueueEntry> synchronousQueue0 = new SynchronousQueue<MongoDBRiver.QueueEntry>();
      assertNotNull(synchronousQueue0);
      
      Status status0 = Status.UNKNOWN;
      SharedContext sharedContext0 = new SharedContext(synchronousQueue0, status0);
      assertNotNull(sharedContext0);
      assertEquals(Status.UNKNOWN, sharedContext0.getStatus());
      
      Client client0 = null;
      Slurper slurper0 = null;
      try {
        slurper0 = new Slurper(arrayList0, mongoDBRiverDefinition0, sharedContext0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      String string0 = "[cluster.routing.allocation.allow_rebalance] has a wrong value {}, defaulting to 'indices_all_active'";
      int int0 = 0;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(string0, int0);
      assertNotNull(mockInetSocketAddress0);
      
      ServerAddress serverAddress0 = new ServerAddress(mockInetSocketAddress0);
      assertNotNull(serverAddress0);
      assertEquals("200.42.42.0/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals("127.0.0.1", serverAddress0.defaultHost());
      assertEquals(0, serverAddress0.getPort());
      assertEquals(27017, serverAddress0.defaultPort());
      assertEquals("200.42.42.0", serverAddress0.getHost());
      
      ServerAddress serverAddress1 = new ServerAddress(string0, int0);
      assertFalse(serverAddress1.equals((Object)serverAddress0));
      assertNotNull(serverAddress1);
      assertEquals(27017, serverAddress1.defaultPort());
      assertEquals("127.0.0.1", serverAddress1.defaultHost());
      assertEquals(0, serverAddress1.getPort());
      assertEquals("cluster.routing.allocation.allow_rebalance", serverAddress1.getHost());
      
      ImmutableList<ServerAddress> immutableList0 = ImmutableList.of(serverAddress0, serverAddress0, serverAddress0, serverAddress1);
      assertFalse(serverAddress0.equals((Object)serverAddress1));
      assertFalse(serverAddress1.equals((Object)serverAddress0));
      assertNotNull(immutableList0);
      assertNotSame(serverAddress0, serverAddress1);
      assertNotSame(serverAddress1, serverAddress0);
      assertEquals("200.42.42.0/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals("127.0.0.1", serverAddress0.defaultHost());
      assertEquals(0, serverAddress0.getPort());
      assertEquals(27017, serverAddress0.defaultPort());
      assertEquals("200.42.42.0", serverAddress0.getHost());
      assertEquals(27017, serverAddress1.defaultPort());
      assertEquals("127.0.0.1", serverAddress1.defaultHost());
      assertEquals(0, serverAddress1.getPort());
      assertEquals("cluster.routing.allocation.allow_rebalance", serverAddress1.getHost());
      assertEquals(4, immutableList0.size());
      assertTrue(immutableList0.contains(serverAddress1));
      
      MongoDBRiverDefinition mongoDBRiverDefinition0 = null;
      SynchronousQueue<MongoDBRiver.QueueEntry> synchronousQueue0 = new SynchronousQueue<MongoDBRiver.QueueEntry>();
      assertNotNull(synchronousQueue0);
      
      Status status0 = Status.RIVER_STALE;
      SharedContext sharedContext0 = new SharedContext(synchronousQueue0, status0);
      assertNotNull(sharedContext0);
      assertEquals(Status.RIVER_STALE, sharedContext0.getStatus());
      
      Client client0 = null;
      Slurper slurper0 = null;
      try {
        slurper0 = new Slurper(immutableList0, mongoDBRiverDefinition0, sharedContext0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }
}
