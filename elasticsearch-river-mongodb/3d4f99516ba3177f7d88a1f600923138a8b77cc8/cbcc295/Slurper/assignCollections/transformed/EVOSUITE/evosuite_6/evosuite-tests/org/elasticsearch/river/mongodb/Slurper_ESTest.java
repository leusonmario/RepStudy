/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 09:45:22 GMT 2021
 */

package org.elasticsearch.river.mongodb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.BasicDBObject;
import com.mongodb.CommandResult;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.LazyDBList;
import com.mongodb.Mongo;
import com.mongodb.ServerAddress;
import com.mongodb.WriteConcern;
import java.io.EOFException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import org.bson.BasicBSONObject;
import org.bson.LazyBSONCallback;
import org.bson.io.BSONByteBuffer;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.bytes.ReleasablePagedBytesReference;
import org.elasticsearch.common.collect.ImmutableList;
import org.elasticsearch.common.collect.ImmutableSortedMap;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.io.stream.BytesStreamInput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.settings.ImmutableSettings;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.DummyTransportAddress;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.ByteArray;
import org.elasticsearch.env.Environment;
import org.elasticsearch.node.settings.NodeSettingsService;
import org.elasticsearch.river.RiverSettings;
import org.elasticsearch.river.mongodb.MongoDBRiver;
import org.elasticsearch.river.mongodb.MongoDBRiverDefinition;
import org.elasticsearch.river.mongodb.SharedContext;
import org.elasticsearch.river.mongodb.Slurper;
import org.elasticsearch.river.mongodb.Status;
import org.elasticsearch.script.ScriptEngineService;
import org.elasticsearch.script.ScriptService;
import org.elasticsearch.search.aggregations.metrics.tophits.TopHitsContext;
import org.elasticsearch.search.internal.InternalSearchHit;
import org.elasticsearch.search.internal.InternalSearchHits;
import org.elasticsearch.search.internal.SearchContext;
import org.elasticsearch.threadpool.ThreadPool;
import org.elasticsearch.watcher.ResourceWatcherService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Slurper_ESTest extends Slurper_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-16);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-112);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-31);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-86);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-32);
      byteArray0[7] = byte7;
      int int0 = 0;
      LazyBSONCallback lazyBSONCallback0 = new LazyBSONCallback();
      assertNotNull(lazyBSONCallback0);
      
      LazyDBList lazyDBList0 = new LazyDBList(byteArray0, int0, lazyBSONCallback0);
      assertFalse(lazyDBList0.isPartialObject());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-16), (byte) (-112), (byte) (-31), (byte) (-86), (byte) (-32)}, byteArray0);
      assertNotNull(lazyDBList0);
      assertEquals(8, byteArray0.length);
      
      String string0 = "index.refresh_interval";
      String string1 = "p*eG";
      boolean boolean0 = true;
      BytesStreamInput bytesStreamInput0 = new BytesStreamInput(byteArray0, boolean0);
      assertEquals(0, bytesStreamInput0.position());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-16), (byte) (-112), (byte) (-31), (byte) (-86), (byte) (-32)}, byteArray0);
      assertNotNull(bytesStreamInput0);
      assertEquals(8, byteArray0.length);
      
      Settings settings0 = ImmutableSettings.readSettingsFromStream(bytesStreamInput0);
      assertEquals(1, bytesStreamInput0.position());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-16), (byte) (-112), (byte) (-31), (byte) (-86), (byte) (-32)}, byteArray0);
      assertNotNull(settings0);
      assertEquals(8, byteArray0.length);
      
      InternalSearchHits.StreamContext internalSearchHits_StreamContext0 = new InternalSearchHits.StreamContext();
      assertEquals(InternalSearchHits.StreamContext.ShardTargetType.STREAM, internalSearchHits_StreamContext0.streamShardTarget());
      assertNotNull(internalSearchHits_StreamContext0);
      
      try { 
        InternalSearchHit.readSearchHit(bytesStreamInput0, internalSearchHits_StreamContext0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.BytesStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      List<ServerAddress> list0 = null;
      String string0 = "nI?eF|iea(|P2>I";
      Settings settings0 = NodeSettingsService.getGlobalSettings();
      assertNotNull(settings0);
      
      ImmutableSortedMap<String, Object> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      String string1 = "{F38)8=";
      ImmutableSortedMap<String, Object> immutableSortedMap1 = immutableSortedMap0.tailMap(string1);
      assertSame(immutableSortedMap0, immutableSortedMap1);
      assertNotSame(string1, string0);
      assertSame(immutableSortedMap1, immutableSortedMap0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(immutableSortedMap1);
      
      RiverSettings riverSettings0 = new RiverSettings(settings0, immutableSortedMap1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(riverSettings0);
      
      Environment environment0 = new Environment();
      assertNotNull(environment0);
      
      TreeSet<ScriptEngineService> treeSet0 = new TreeSet<ScriptEngineService>();
      assertNotNull(treeSet0);
      
      ImmutableSettings immutableSettings0 = (ImmutableSettings)ImmutableSettings.Builder.EMPTY_SETTINGS;
      assertSame(immutableSettings0, settings0);
      assertNotNull(immutableSettings0);
      
      NodeSettingsService nodeSettingsService0 = null;
      ThreadPool threadPool0 = new ThreadPool(immutableSettings0, nodeSettingsService0);
      assertNotNull(threadPool0);
      
      ResourceWatcherService resourceWatcherService0 = new ResourceWatcherService(immutableSettings0, threadPool0);
      assertEquals(Lifecycle.State.INITIALIZED, resourceWatcherService0.lifecycleState());
      assertNotNull(resourceWatcherService0);
      
      ScriptService scriptService0 = new ScriptService(settings0, environment0, treeSet0, resourceWatcherService0);
      assertEquals(Lifecycle.State.INITIALIZED, resourceWatcherService0.lifecycleState());
      assertNotNull(scriptService0);
      
      MongoDBRiverDefinition mongoDBRiverDefinition0 = MongoDBRiverDefinition.parseSettings(string0, string0, riverSettings0, scriptService0);
      assertEquals(Lifecycle.State.INITIALIZED, resourceWatcherService0.lifecycleState());
      assertEquals(0, mongoDBRiverDefinition0.getSocketTimeout());
      assertFalse(mongoDBRiverDefinition0.isMongoSecondaryReadPreference());
      assertEquals(0, mongoDBRiverDefinition0.getConnectTimeout());
      assertEquals("", mongoDBRiverDefinition0.getIncludeCollection());
      assertEquals("nI?eF|iea(|P2>I", mongoDBRiverDefinition0.getMongoDb());
      assertNull(mongoDBRiverDefinition0.isMongos());
      assertEquals(0, mongoDBRiverDefinition0.getThrottleSize());
      assertEquals("", mongoDBRiverDefinition0.getMongoAdminUser());
      assertEquals("", mongoDBRiverDefinition0.getMongoAdminPassword());
      assertNull(mongoDBRiverDefinition0.getScript());
      assertFalse(mongoDBRiverDefinition0.isDisableIndexRefresh());
      assertEquals("nI?eF|iea(|P2>I", mongoDBRiverDefinition0.getIndexName());
      assertEquals("", mongoDBRiverDefinition0.getMongoLocalUser());
      assertFalse(mongoDBRiverDefinition0.isMongoUseSSL());
      assertEquals("nI?eF|iea(|P2>I", mongoDBRiverDefinition0.getRiverIndexName());
      assertNull(mongoDBRiverDefinition0.getStatisticsTypeName());
      assertEquals("nI?eF|iea(|P2>I", mongoDBRiverDefinition0.getTypeName());
      assertFalse(mongoDBRiverDefinition0.isMongoSSLVerifyCertificate());
      assertFalse(mongoDBRiverDefinition0.isAdvancedTransformation());
      assertEquals("nI?eF|iea(|P2>I", mongoDBRiverDefinition0.getRiverName());
      assertNull(mongoDBRiverDefinition0.getScriptType());
      assertNull(mongoDBRiverDefinition0.getStatisticsIndexName());
      assertFalse(mongoDBRiverDefinition0.isSkipInitialImport());
      assertEquals("", mongoDBRiverDefinition0.getMongoLocalPassword());
      assertFalse(mongoDBRiverDefinition0.isMongoGridFS());
      assertFalse(mongoDBRiverDefinition0.isImportAllCollections());
      assertFalse(mongoDBRiverDefinition0.isDropCollection());
      assertEquals("nI?eF|iea(|P2>I", mongoDBRiverDefinition0.getMongoCollection());
      assertFalse(mongoDBRiverDefinition0.isStoreStatistics());
      assertEquals(60000, MongoDBRiverDefinition.DEFAULT_SOCKET_TIMEOUT);
      assertEquals(1, MongoDBRiverDefinition.DEFAULT_CONCURRENT_REQUESTS);
      assertEquals(1000, MongoDBRiverDefinition.DEFAULT_BULK_ACTIONS);
      assertEquals(30000, MongoDBRiverDefinition.DEFAULT_CONNECT_TIMEOUT);
      assertEquals(27017, MongoDBRiverDefinition.DEFAULT_DB_PORT);
      assertNotSame(string0, string1);
      assertSame(settings0, immutableSettings0);
      assertSame(immutableSortedMap0, immutableSortedMap1);
      assertNotSame(string1, string0);
      assertSame(immutableSortedMap1, immutableSortedMap0);
      assertSame(immutableSettings0, settings0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mongoDBRiverDefinition0);
      
      LinkedBlockingQueue<MongoDBRiver.QueueEntry> linkedBlockingQueue0 = new LinkedBlockingQueue<MongoDBRiver.QueueEntry>();
      assertNotNull(linkedBlockingQueue0);
      
      Status status0 = Status.UNKNOWN;
      SharedContext sharedContext0 = new SharedContext(linkedBlockingQueue0, status0);
      assertEquals(Status.UNKNOWN, sharedContext0.getStatus());
      assertNotNull(sharedContext0);
      
      Client client0 = null;
      Slurper slurper0 = null;
      try {
        slurper0 = new Slurper(list0, mongoDBRiverDefinition0, sharedContext0, client0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // serverAddresses can not be null
         //
         verifyException("com.mongodb.MongoAuthority", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 958;
      int int1 = 471;
      // Undeclared exception!
      try { 
        BSONByteBuffer.wrap(byteArray0, int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)19;
      byteArray0[0] = byte0;
      byte byte1 = (byte)40;
      byteArray0[1] = byte1;
      LazyBSONCallback lazyBSONCallback0 = new LazyBSONCallback();
      assertNotNull(lazyBSONCallback0);
      
      LazyDBList lazyDBList0 = new LazyDBList(byteArray0, lazyBSONCallback0);
      assertFalse(lazyDBList0.isPartialObject());
      assertArrayEquals(new byte[] {(byte)19, (byte)40}, byteArray0);
      assertNotNull(lazyDBList0);
      assertEquals(2, byteArray0.length);
      
      String string0 = "";
      ImmutableSettings immutableSettings0 = (ImmutableSettings)ImmutableSettings.EMPTY;
      assertNotNull(immutableSettings0);
      
      BasicBSONObject basicBSONObject0 = new BasicBSONObject(byteArray0[0]);
      assertEquals(0, basicBSONObject0.size());
      assertTrue(basicBSONObject0.isEmpty());
      assertArrayEquals(new byte[] {(byte)19, (byte)40}, byteArray0);
      assertNotNull(basicBSONObject0);
      assertEquals(2, byteArray0.length);
      
      RiverSettings riverSettings0 = new RiverSettings(immutableSettings0, basicBSONObject0);
      assertEquals(0, basicBSONObject0.size());
      assertTrue(basicBSONObject0.isEmpty());
      assertArrayEquals(new byte[] {(byte)19, (byte)40}, byteArray0);
      assertNotNull(riverSettings0);
      assertEquals(2, byteArray0.length);
      
      SearchContext searchContext0 = SearchContext.current();
      assertNull(searchContext0);
      
      TopHitsContext topHitsContext0 = new TopHitsContext(searchContext0);
      assertFalse(topHitsContext0.hasFieldNames());
      assertFalse(topHitsContext0.hasFieldDataFields());
      assertFalse(topHitsContext0.version());
      assertFalse(topHitsContext0.explain());
      assertEquals(0, topHitsContext0.from());
      assertFalse(topHitsContext0.trackScores());
      assertFalse(topHitsContext0.hasPartialFields());
      assertEquals(0, topHitsContext0.docIdsToLoadFrom());
      assertFalse(topHitsContext0.hasScriptFields());
      assertFalse(topHitsContext0.hasFetchSourceContext());
      assertEquals(0, topHitsContext0.docIdsToLoadSize());
      assertEquals(3, topHitsContext0.size());
      assertFalse(topHitsContext0.sourceRequested());
      assertNotNull(topHitsContext0);
      
      // Undeclared exception!
      try { 
        topHitsContext0.scriptService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.search.aggregations.metrics.tophits.TopHitsContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      ServerAddress serverAddress0 = null;
      // Undeclared exception!
      try { 
        ImmutableList.of(serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("org.elasticsearch.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      List<ServerAddress> list0 = null;
      String string0 = "";
      Settings settings0 = NodeSettingsService.getGlobalSettings();
      assertNotNull(settings0);
      
      BasicBSONObject basicBSONObject0 = new BasicBSONObject();
      assertEquals(0, basicBSONObject0.size());
      assertTrue(basicBSONObject0.isEmpty());
      assertNotNull(basicBSONObject0);
      
      RiverSettings riverSettings0 = new RiverSettings(settings0, basicBSONObject0);
      assertEquals(0, basicBSONObject0.size());
      assertTrue(basicBSONObject0.isEmpty());
      assertNotNull(riverSettings0);
      
      ScriptService scriptService0 = null;
      MongoDBRiverDefinition mongoDBRiverDefinition0 = MongoDBRiverDefinition.parseSettings(string0, string0, riverSettings0, scriptService0);
      assertEquals(0, basicBSONObject0.size());
      assertTrue(basicBSONObject0.isEmpty());
      assertEquals(0, mongoDBRiverDefinition0.getConnectTimeout());
      assertEquals("", mongoDBRiverDefinition0.getRiverName());
      assertNull(mongoDBRiverDefinition0.isMongos());
      assertEquals("", mongoDBRiverDefinition0.getMongoCollection());
      assertEquals(0, mongoDBRiverDefinition0.getSocketTimeout());
      assertNull(mongoDBRiverDefinition0.getScript());
      assertEquals("", mongoDBRiverDefinition0.getMongoAdminUser());
      assertEquals("", mongoDBRiverDefinition0.getMongoAdminPassword());
      assertFalse(mongoDBRiverDefinition0.isMongoUseSSL());
      assertEquals(0, mongoDBRiverDefinition0.getThrottleSize());
      assertEquals("", mongoDBRiverDefinition0.getMongoLocalUser());
      assertEquals("", mongoDBRiverDefinition0.getTypeName());
      assertFalse(mongoDBRiverDefinition0.isDisableIndexRefresh());
      assertFalse(mongoDBRiverDefinition0.isMongoSecondaryReadPreference());
      assertNull(mongoDBRiverDefinition0.getScriptType());
      assertNull(mongoDBRiverDefinition0.getStatisticsTypeName());
      assertFalse(mongoDBRiverDefinition0.isMongoSSLVerifyCertificate());
      assertFalse(mongoDBRiverDefinition0.isStoreStatistics());
      assertFalse(mongoDBRiverDefinition0.isMongoGridFS());
      assertEquals("", mongoDBRiverDefinition0.getRiverIndexName());
      assertFalse(mongoDBRiverDefinition0.isAdvancedTransformation());
      assertFalse(mongoDBRiverDefinition0.isImportAllCollections());
      assertEquals("", mongoDBRiverDefinition0.getIncludeCollection());
      assertNull(mongoDBRiverDefinition0.getStatisticsIndexName());
      assertFalse(mongoDBRiverDefinition0.isSkipInitialImport());
      assertEquals("", mongoDBRiverDefinition0.getMongoDb());
      assertEquals("", mongoDBRiverDefinition0.getMongoLocalPassword());
      assertEquals("", mongoDBRiverDefinition0.getIndexName());
      assertFalse(mongoDBRiverDefinition0.isDropCollection());
      assertEquals(1, MongoDBRiverDefinition.DEFAULT_CONCURRENT_REQUESTS);
      assertEquals(27017, MongoDBRiverDefinition.DEFAULT_DB_PORT);
      assertEquals(60000, MongoDBRiverDefinition.DEFAULT_SOCKET_TIMEOUT);
      assertEquals(1000, MongoDBRiverDefinition.DEFAULT_BULK_ACTIONS);
      assertEquals(30000, MongoDBRiverDefinition.DEFAULT_CONNECT_TIMEOUT);
      assertNotNull(mongoDBRiverDefinition0);
      
      SynchronousQueue<MongoDBRiver.QueueEntry> synchronousQueue0 = new SynchronousQueue<MongoDBRiver.QueueEntry>();
      assertNotNull(synchronousQueue0);
      
      Status status0 = Status.INITIAL_IMPORT_FAILED;
      SharedContext sharedContext0 = new SharedContext(synchronousQueue0, status0);
      assertEquals(Status.INITIAL_IMPORT_FAILED, sharedContext0.getStatus());
      assertNotNull(sharedContext0);
      
      Client client0 = null;
      Slurper slurper0 = null;
      try {
        slurper0 = new Slurper(list0, mongoDBRiverDefinition0, sharedContext0, client0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // serverAddresses can not be null
         //
         verifyException("com.mongodb.MongoAuthority", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      ServerAddress serverAddress0 = new ServerAddress();
      assertEquals(27017, serverAddress0.defaultPort());
      assertEquals("127.0.0.1", serverAddress0.defaultHost());
      assertEquals("127.0.0.1", serverAddress0.getHost());
      assertEquals(27017, serverAddress0.getPort());
      assertNotNull(serverAddress0);
      
      ImmutableList<ServerAddress> immutableList0 = ImmutableList.of(serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0);
      assertEquals(27017, serverAddress0.defaultPort());
      assertEquals("127.0.0.1", serverAddress0.defaultHost());
      assertEquals("127.0.0.1", serverAddress0.getHost());
      assertEquals(27017, serverAddress0.getPort());
      assertEquals(9, immutableList0.size());
      assertTrue(immutableList0.contains(serverAddress0));
      assertNotNull(immutableList0);
      
      MongoDBRiverDefinition mongoDBRiverDefinition0 = null;
      LinkedBlockingQueue<MongoDBRiver.QueueEntry> linkedBlockingQueue0 = new LinkedBlockingQueue<MongoDBRiver.QueueEntry>();
      assertNotNull(linkedBlockingQueue0);
      
      Status status0 = Status.SCRIPT_IMPORT_FAILED;
      LinkedList<ServerAddress> linkedList0 = new LinkedList<ServerAddress>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(serverAddress0));
      assertNotNull(linkedList0);
      
      Status status1 = Status.SCRIPT_IMPORT_FAILED;
      SharedContext sharedContext0 = new SharedContext(linkedBlockingQueue0, status1);
      assertEquals(Status.SCRIPT_IMPORT_FAILED, sharedContext0.getStatus());
      assertNotNull(sharedContext0);
      
      Client client0 = null;
      Slurper slurper0 = null;
      try {
        slurper0 = new Slurper(linkedList0, mongoDBRiverDefinition0, sharedContext0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }
}
