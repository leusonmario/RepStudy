/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 09:39:00 GMT 2021
 */

package org.elasticsearch.river.mongodb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.BasicDBObject;
import com.mongodb.ServerAddress;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import org.bson.LazyBSONCallback;
import org.bson.LazyBSONList;
import org.bson.io.BSONByteBuffer;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.collect.ImmutableList;
import org.elasticsearch.common.settings.ImmutableSettings;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.LocalTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.node.settings.NodeSettingsService;
import org.elasticsearch.river.RiverSettings;
import org.elasticsearch.river.mongodb.MongoDBRiver;
import org.elasticsearch.river.mongodb.MongoDBRiverDefinition;
import org.elasticsearch.river.mongodb.SharedContext;
import org.elasticsearch.river.mongodb.Slurper;
import org.elasticsearch.river.mongodb.Status;
import org.elasticsearch.script.ScriptService;
import org.elasticsearch.search.aggregations.metrics.tophits.TopHitsContext;
import org.elasticsearch.search.internal.SearchContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Slurper_ESTest extends Slurper_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      ServerAddress serverAddress0 = new ServerAddress();
      assertNotNull(serverAddress0);
      assertEquals("127.0.0.1", serverAddress0.getHost());
      assertEquals("127.0.0.1", serverAddress0.defaultHost());
      assertEquals(27017, serverAddress0.getPort());
      assertEquals(27017, serverAddress0.defaultPort());
      
      ImmutableList<ServerAddress> immutableList0 = ImmutableList.of(serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0, serverAddress0);
      assertNotNull(immutableList0);
      assertEquals("127.0.0.1", serverAddress0.getHost());
      assertEquals("127.0.0.1", serverAddress0.defaultHost());
      assertEquals(27017, serverAddress0.getPort());
      assertEquals(27017, serverAddress0.defaultPort());
      assertEquals(9, immutableList0.size());
      assertTrue(immutableList0.contains(serverAddress0));
      
      MongoDBRiverDefinition mongoDBRiverDefinition0 = null;
      LinkedBlockingDeque<MongoDBRiver.QueueEntry> linkedBlockingDeque0 = new LinkedBlockingDeque<MongoDBRiver.QueueEntry>();
      assertNotNull(linkedBlockingDeque0);
      
      Status status0 = Status.UNKNOWN;
      SharedContext sharedContext0 = new SharedContext(linkedBlockingDeque0, status0);
      assertNotNull(sharedContext0);
      assertEquals(Status.UNKNOWN, sharedContext0.getStatus());
      
      Settings.Builder settings_Builder0 = null;
      boolean boolean0 = true;
      TransportClient transportClient0 = null;
      try {
        transportClient0 = new TransportClient(settings_Builder0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.client.transport.TransportClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      BSONByteBuffer bSONByteBuffer0 = BSONByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bSONByteBuffer0);
      assertEquals(1, byteArray0.length);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", bSONByteBuffer0.toString());
      
      int int0 = (-795);
      LazyBSONCallback lazyBSONCallback0 = new LazyBSONCallback();
      assertNotNull(lazyBSONCallback0);
      
      LazyBSONList lazyBSONList0 = new LazyBSONList(bSONByteBuffer0, int0, lazyBSONCallback0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(lazyBSONList0);
      assertEquals(1, byteArray0.length);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", bSONByteBuffer0.toString());
      
      MongoDBRiverDefinition mongoDBRiverDefinition0 = null;
      LinkedBlockingDeque<MongoDBRiver.QueueEntry> linkedBlockingDeque0 = new LinkedBlockingDeque<MongoDBRiver.QueueEntry>();
      assertNotNull(linkedBlockingDeque0);
      
      Status status0 = Status.INITIAL_IMPORT_FAILED;
      SharedContext sharedContext0 = new SharedContext(linkedBlockingDeque0, status0);
      assertNotNull(sharedContext0);
      assertEquals(Status.INITIAL_IMPORT_FAILED, sharedContext0.getStatus());
      
      Client client0 = null;
      Slurper slurper0 = null;
      try {
        slurper0 = new Slurper(lazyBSONList0, mongoDBRiverDefinition0, sharedContext0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      Stack<ServerAddress> stack0 = new Stack<ServerAddress>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      String string0 = "jK{Q(";
      String string1 = "";
      ImmutableSettings immutableSettings0 = (ImmutableSettings)ImmutableSettings.Builder.EMPTY_SETTINGS;
      assertNotNull(immutableSettings0);
      
      BasicDBObject basicDBObject0 = new BasicDBObject();
      assertNotNull(basicDBObject0);
      assertFalse(basicDBObject0.isPartialObject());
      assertTrue(basicDBObject0.isEmpty());
      assertEquals(0, basicDBObject0.size());
      
      RiverSettings riverSettings0 = new RiverSettings(immutableSettings0, basicDBObject0);
      assertNotNull(riverSettings0);
      assertFalse(basicDBObject0.isPartialObject());
      assertTrue(basicDBObject0.isEmpty());
      assertEquals(0, basicDBObject0.size());
      
      SearchContext searchContext0 = SearchContext.current();
      assertNull(searchContext0);
      
      TopHitsContext topHitsContext0 = new TopHitsContext(searchContext0);
      assertNotNull(topHitsContext0);
      assertFalse(topHitsContext0.hasFieldNames());
      assertFalse(topHitsContext0.version());
      assertFalse(topHitsContext0.explain());
      assertFalse(topHitsContext0.hasFieldDataFields());
      assertFalse(topHitsContext0.hasPartialFields());
      assertFalse(topHitsContext0.trackScores());
      assertEquals(0, topHitsContext0.docIdsToLoadSize());
      assertFalse(topHitsContext0.hasFetchSourceContext());
      assertEquals(0, topHitsContext0.docIdsToLoadFrom());
      assertEquals(0, topHitsContext0.from());
      assertFalse(topHitsContext0.hasScriptFields());
      assertEquals(3, topHitsContext0.size());
      assertFalse(topHitsContext0.sourceRequested());
      
      // Undeclared exception!
      try { 
        topHitsContext0.scriptService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.search.aggregations.metrics.tophits.TopHitsContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      Vector<ServerAddress> vector0 = new Vector<ServerAddress>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      ImmutableList<ServerAddress> immutableList0 = ImmutableList.copyOf((Collection<? extends ServerAddress>) vector0);
      assertNotNull(immutableList0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, immutableList0.size());
      
      LinkedList<ServerAddress> linkedList0 = new LinkedList<ServerAddress>(immutableList0);
      assertNotNull(linkedList0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, immutableList0.size());
      assertEquals(0, linkedList0.size());
      
      Iterator<ServerAddress> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, immutableList0.size());
      assertEquals(0, linkedList0.size());
      
      ImmutableList<ServerAddress> immutableList1 = ImmutableList.copyOf((Iterator<? extends ServerAddress>) iterator0);
      assertSame(immutableList0, immutableList1);
      assertSame(immutableList1, immutableList0);
      assertNotNull(immutableList1);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, immutableList0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, immutableList1.size());
      
      String string0 = "#4.,!-8|Q-K9Pje:QX";
      Settings settings0 = NodeSettingsService.getGlobalSettings();
      assertNotNull(settings0);
      
      BasicDBObject basicDBObject0 = new BasicDBObject();
      assertNotNull(basicDBObject0);
      assertEquals(0, basicDBObject0.size());
      assertFalse(basicDBObject0.isPartialObject());
      assertTrue(basicDBObject0.isEmpty());
      
      RiverSettings riverSettings0 = new RiverSettings(settings0, basicDBObject0);
      assertNotNull(riverSettings0);
      assertEquals(0, basicDBObject0.size());
      assertFalse(basicDBObject0.isPartialObject());
      assertTrue(basicDBObject0.isEmpty());
      
      ScriptService scriptService0 = null;
      MongoDBRiverDefinition mongoDBRiverDefinition0 = MongoDBRiverDefinition.parseSettings(string0, string0, riverSettings0, scriptService0);
      assertEquals(60000, MongoDBRiverDefinition.DEFAULT_SOCKET_TIMEOUT);
      assertEquals(30000, MongoDBRiverDefinition.DEFAULT_CONNECT_TIMEOUT);
      assertEquals(1, MongoDBRiverDefinition.DEFAULT_CONCURRENT_REQUESTS);
      assertEquals(1000, MongoDBRiverDefinition.DEFAULT_BULK_ACTIONS);
      assertEquals(27017, MongoDBRiverDefinition.DEFAULT_DB_PORT);
      assertNotNull(mongoDBRiverDefinition0);
      assertEquals(0, basicDBObject0.size());
      assertFalse(basicDBObject0.isPartialObject());
      assertTrue(basicDBObject0.isEmpty());
      assertNull(mongoDBRiverDefinition0.isMongos());
      assertEquals("#4.,!-8|Q-K9Pje:QX", mongoDBRiverDefinition0.getTypeName());
      assertEquals(0, mongoDBRiverDefinition0.getConnectTimeout());
      assertNull(mongoDBRiverDefinition0.getScript());
      assertEquals(0, mongoDBRiverDefinition0.getSocketTimeout());
      assertEquals("#4.,!-8|Q-K9Pje:QX", mongoDBRiverDefinition0.getRiverIndexName());
      assertEquals("#4.,!-8|Q-K9Pje:QX", mongoDBRiverDefinition0.getMongoCollection());
      assertFalse(mongoDBRiverDefinition0.isSkipInitialImport());
      assertFalse(mongoDBRiverDefinition0.isDisableIndexRefresh());
      assertEquals("", mongoDBRiverDefinition0.getMongoAdminUser());
      assertEquals("", mongoDBRiverDefinition0.getMongoLocalUser());
      assertFalse(mongoDBRiverDefinition0.isMongoSecondaryReadPreference());
      assertEquals("#4.,!-8|Q-K9Pje:QX", mongoDBRiverDefinition0.getRiverName());
      assertEquals("", mongoDBRiverDefinition0.getMongoAdminPassword());
      assertEquals(0, mongoDBRiverDefinition0.getThrottleSize());
      assertFalse(mongoDBRiverDefinition0.isMongoSSLVerifyCertificate());
      assertFalse(mongoDBRiverDefinition0.isStoreStatistics());
      assertNull(mongoDBRiverDefinition0.getScriptType());
      assertNull(mongoDBRiverDefinition0.getStatisticsTypeName());
      assertEquals("", mongoDBRiverDefinition0.getMongoLocalAuthDatabase());
      assertFalse(mongoDBRiverDefinition0.isMongoGridFS());
      assertFalse(mongoDBRiverDefinition0.isAdvancedTransformation());
      assertFalse(mongoDBRiverDefinition0.isImportAllCollections());
      assertFalse(mongoDBRiverDefinition0.isMongoUseSSL());
      assertNull(mongoDBRiverDefinition0.getStatisticsIndexName());
      assertEquals("", mongoDBRiverDefinition0.getMongoAdminAuthDatabase());
      assertFalse(mongoDBRiverDefinition0.isDropCollection());
      assertEquals("#4.,!-8|Q-K9Pje:QX", mongoDBRiverDefinition0.getIndexName());
      assertEquals("#4.,!-8|Q-K9Pje:QX", mongoDBRiverDefinition0.getMongoDb());
      assertEquals("", mongoDBRiverDefinition0.getMongoLocalPassword());
      assertEquals("", mongoDBRiverDefinition0.getIncludeCollection());
      
      LinkedBlockingQueue<MongoDBRiver.QueueEntry> linkedBlockingQueue0 = new LinkedBlockingQueue<MongoDBRiver.QueueEntry>();
      assertNotNull(linkedBlockingQueue0);
      
      Status status0 = Status.IMPORT_FAILED;
      SharedContext sharedContext0 = new SharedContext(linkedBlockingQueue0, status0);
      assertNotNull(sharedContext0);
      assertEquals(Status.IMPORT_FAILED, sharedContext0.getStatus());
      
      Client client0 = null;
      Slurper slurper0 = null;
      try {
        slurper0 = new Slurper(immutableList1, mongoDBRiverDefinition0, sharedContext0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.MongoOptions", e);
      }
  }
}
