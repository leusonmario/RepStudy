/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 22:45:24 GMT 2021
 */

package org.elasticsearch.river.mongodb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.BasicDBObject;
import com.mongodb.ServerAddress;
import java.io.EOFException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.TreeSet;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import org.bson.LazyBSONCallback;
import org.bson.LazyBSONList;
import org.bson.LazyDBList;
import org.bson.io.BSONByteBuffer;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.collect.ImmutableList;
import org.elasticsearch.common.collect.ImmutableMap;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamInput;
import org.elasticsearch.common.settings.ImmutableSettings;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.util.BigFloatArrayList;
import org.elasticsearch.env.Environment;
import org.elasticsearch.index.fielddata.plain.FloatArrayAtomicFieldData;
import org.elasticsearch.node.settings.NodeSettingsService;
import org.elasticsearch.river.RiverSettings;
import org.elasticsearch.river.mongodb.MongoDBRiver;
import org.elasticsearch.river.mongodb.MongoDBRiverDefinition;
import org.elasticsearch.river.mongodb.SharedContext;
import org.elasticsearch.river.mongodb.Slurper;
import org.elasticsearch.river.mongodb.Status;
import org.elasticsearch.script.ScriptEngineService;
import org.elasticsearch.script.ScriptService;
import org.elasticsearch.threadpool.ThreadPool;
import org.elasticsearch.watcher.ResourceWatcherService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Slurper_ESTest extends Slurper_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved(string0, int0);
      assertNotNull(inetSocketAddress0);
      assertEquals(":0", inetSocketAddress0.toString());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      
      ServerAddress serverAddress0 = new ServerAddress(inetSocketAddress0);
      assertNotNull(serverAddress0);
      assertEquals(":0", inetSocketAddress0.toString());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", serverAddress0.getHost());
      assertEquals(":0", serverAddress0.toString());
      assertEquals("127.0.0.1", serverAddress0.defaultHost());
      assertEquals(27017, serverAddress0.defaultPort());
      assertEquals(0, serverAddress0.getPort());
      
      ImmutableList<ServerAddress> immutableList0 = ImmutableList.of(serverAddress0, serverAddress0, serverAddress0, serverAddress0);
      assertNotNull(immutableList0);
      assertEquals(":0", inetSocketAddress0.toString());
      assertEquals("", inetSocketAddress0.getHostString());
      assertEquals(0, inetSocketAddress0.getPort());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("", serverAddress0.getHost());
      assertEquals(":0", serverAddress0.toString());
      assertEquals("127.0.0.1", serverAddress0.defaultHost());
      assertEquals(27017, serverAddress0.defaultPort());
      assertEquals(0, serverAddress0.getPort());
      assertEquals(4, immutableList0.size());
      assertTrue(immutableList0.contains(serverAddress0));
      
      MongoDBRiverDefinition mongoDBRiverDefinition0 = null;
      LinkedBlockingQueue<MongoDBRiver.QueueEntry> linkedBlockingQueue0 = new LinkedBlockingQueue<MongoDBRiver.QueueEntry>();
      assertNotNull(linkedBlockingQueue0);
      
      Status status0 = Status.IMPORT_FAILED;
      SharedContext sharedContext0 = new SharedContext(linkedBlockingQueue0, status0);
      assertNotNull(sharedContext0);
      assertEquals(Status.IMPORT_FAILED, sharedContext0.getStatus());
      
      Client client0 = null;
      Slurper slurper0 = null;
      try {
        slurper0 = new Slurper(immutableList0, mongoDBRiverDefinition0, sharedContext0, client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.river.mongodb.Slurper", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      ServerAddress serverAddress0 = null;
      // Undeclared exception!
      try { 
        ImmutableList.of(serverAddress0, serverAddress0, serverAddress0, serverAddress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("org.elasticsearch.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)124;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      LazyBSONCallback lazyBSONCallback0 = new LazyBSONCallback();
      assertNotNull(lazyBSONCallback0);
      
      LazyDBList lazyDBList0 = new LazyDBList(byteArray0, lazyBSONCallback0);
      assertNotNull(lazyDBList0);
      assertFalse(lazyDBList0.isPartialObject());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)0}, byteArray0);
      
      String string0 = null;
      String string1 = ")RXx7XugT\\:@5]j!g";
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(byteArray0[0]);
      assertNotNull(byteBuffer0);
      assertEquals(124, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=124 cap=124]", byteBuffer0.toString());
      assertEquals(124, byteBuffer0.capacity());
      assertEquals(124, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)0}, byteArray0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertEquals(124, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=124 cap=124]", byteBuffer0.toString());
      assertEquals(124, byteBuffer0.capacity());
      assertEquals(124, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)0}, byteArray0);
      
      Settings settings0 = ImmutableSettings.readSettingsFromStream(byteBufferStreamInput0);
      assertNotNull(settings0);
      assertEquals(124, byteBuffer0.limit());
      assertEquals(1, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(124, byteBuffer0.capacity());
      assertEquals(123, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=1 lim=124 cap=124]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)0}, byteArray0);
      
      int int0 = 276;
      long long0 = (-1904L);
      BigFloatArrayList bigFloatArrayList0 = null;
      try {
        bigFloatArrayList0 = new BigFloatArrayList(int0, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pageSize must be a power of two
         //
         verifyException("org.elasticsearch.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      List<ServerAddress> list0 = null;
      String string0 = "";
      ImmutableSettings immutableSettings0 = (ImmutableSettings)ImmutableSettings.EMPTY;
      assertNotNull(immutableSettings0);
      
      int int0 = 0;
      BasicDBObject basicDBObject0 = new BasicDBObject(int0);
      assertNotNull(basicDBObject0);
      assertEquals(0, basicDBObject0.size());
      assertFalse(basicDBObject0.isPartialObject());
      assertTrue(basicDBObject0.isEmpty());
      
      RiverSettings riverSettings0 = new RiverSettings(immutableSettings0, basicDBObject0);
      assertNotNull(riverSettings0);
      assertEquals(0, basicDBObject0.size());
      assertFalse(basicDBObject0.isPartialObject());
      assertTrue(basicDBObject0.isEmpty());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)84;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)115;
      byteArray0[2] = byte2;
      boolean boolean0 = true;
      BytesStreamInput bytesStreamInput0 = new BytesStreamInput(byteArray0, boolean0);
      assertNotNull(bytesStreamInput0);
      assertEquals(0, bytesStreamInput0.position());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)115}, byteArray0);
      
      try { 
        ImmutableSettings.readSettingsFromStream(bytesStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.BytesStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)117;
      byteArray0[1] = byte1;
      byte byte2 = (byte)74;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)91;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-66);
      byteArray0[7] = byte7;
      byte byte8 = (byte)5;
      byteArray0[8] = byte8;
      int int0 = 653;
      int int1 = 0;
      // Undeclared exception!
      try { 
        BSONByteBuffer.wrap(byteArray0, int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }
}
