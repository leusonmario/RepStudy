import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test8001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8001");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        builder12.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        builder21.skipInitialImport = false;
        builder21.setscriptType("script");
        java.lang.String[] strArray43 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder21.excludeFields((java.util.Set<java.lang.String>) strSet44);
        builder12.setparentTypes((java.util.Set<java.lang.String>) strSet44);
        builder5.excludeFields = strSet44;
        builder5.throttleSize = 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder5.socketTimeout(27017);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test8002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8002");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition1.isMongos();
        int int11 = mongoDBRiverDefinition1.throttleSize;
        int int12 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.common.logging.ESLogger eSLogger13 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str14 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "type" + "'", str9, "type");
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNotNull(eSLogger13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "admin" + "'", str14, "admin");
    }

    @Test
    public void test8003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8003");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoDb("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoCollection("script.default_lang");
        boolean boolean22 = builder21.getimportAllCollections();
        boolean boolean23 = builder21.skipInitialImport;
        boolean boolean24 = builder21.mongoGridFS;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test8004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8004");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoSecondaryReadPreference(true);
        builder0.advancedTransformation = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.script("hi!");
        builder0.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.dropCollection(false);
        builder18.setmongoLocalUser("db");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test8005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8005");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.typeName;
        java.lang.String str12 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "filter" + "'", str12, "filter");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "is_mongos" + "'", str14, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8006");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str9 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.importAllCollections;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "exclude_fields" + "'", str9, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "local" + "'", str10, "local");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_size" + "'", str11, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8007");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder9.throttleSize = (byte) 10;
        boolean boolean12 = builder9.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.riverIndexName("ssl_verify_certificate");
        builder14.importAllCollections = false;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.mongoClientOptions;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(mongoClientOptions17);
    }

    @Test
    public void test8008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8008");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.advancedTransformation;
        boolean boolean13 = mongoDBRiverDefinition1.importAllCollections;
        int int14 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str15 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "exclude_fields" + "'", str11, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "socket_timeout" + "'", str15, "socket_timeout");
    }

    @Test
    public void test8009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8009");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str7 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.scriptType;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "host" + "'", str7, "host");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test8010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8010");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory40 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        builder3.mongoCollectionFilter = basicDBObject45;
        boolean boolean48 = builder3.disableIndexRefresh;
        builder3.statisticsTypeName = "type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder3.statisticsIndexName("mongodb-1638820218299");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test8011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8011");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.riverIndexName("socket_timeout");
        java.lang.String str10 = builder9.mongoLocalPassword;
        builder9.setmongoGridFS(false);
        java.lang.Boolean boolean13 = builder9.getisMongos();
        builder9.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.riverName("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test8012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8012");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean8 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        boolean boolean9 = mongoDBRiverDefinition1.getimportAllCollections();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test8013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8013");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        builder5.setmongoAdminUser(".scripts");
        java.lang.String str13 = builder5.mongoDb;
        java.lang.String str14 = builder5.gettypeName();
        builder5.setskipInitialImport(true);
        builder5.setskipInitialImport(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test8014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8014");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoDb();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "drop_collection" + "'", str6, "drop_collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test8015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8015");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory40 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        builder3.mongoCollectionFilter = basicDBObject45;
        java.lang.String str48 = builder3.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet49 = builder3.getexcludeFields();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strSet49);
    }

    @Test
    public void test8016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8016");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean6 = mongoDBRiverDefinition1.isDropCollection();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getBULK_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str12 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "type" + "'", str8, "type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "user" + "'", str9, "user");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk" + "'", str10, "bulk");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "advanced_transformation" + "'", str12, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "skip_initial_import" + "'", str13, "skip_initial_import");
    }

    @Test
    public void test8017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8017");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "type" + "'", str5, "type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "is_mongos" + "'", str6, "is_mongos");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "initial_timestamp" + "'", str7, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_fields" + "'", str8, "include_fields");
    }

    @Test
    public void test8018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8018");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        int int6 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean8 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str9 = mongoDBRiverDefinition1.riverName;
        java.lang.String str10 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondary_read_preference" + "'", str10, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 60000 + "'", int11 == 60000);
    }

    @Test
    public void test8019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8019");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str11 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.Boolean boolean12 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str13 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getFILTER_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "db" + "'", str11, "db");
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "initial_timestamp" + "'", str13, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "concurrent_requests" + "'", str14, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "filter" + "'", str15, "filter");
    }

    @Test
    public void test8020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8020");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str9 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str11 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str12 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "parent_types" + "'", str9, "parent_types");
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_bulk_requests" + "'", str12, "concurrent_bulk_requests");
    }

    @Test
    public void test8021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8021");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("filter", "host");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?host?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test8022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8022");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = mongoDBRiverDefinition1.initialTimestamp;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertNull(wildcardTimestamp11);
    }

    @Test
    public void test8023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8023");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean2 = builder1.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.script("bulk");
        com.mongodb.BasicDBObject basicDBObject5 = builder4.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = null;
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory0.newScript(strMap7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean10 = builder9.getdropCollection();
        java.lang.String str11 = builder9.getscript();
        boolean boolean12 = builder9.dropCollection;
        builder9.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory15 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.script("bulk");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder9.mongoOplogFilter(basicDBObject20);
        builder9.storeStatistics = true;
        com.mongodb.BasicDBObject basicDBObject25 = builder9.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript26 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = builder27.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList29 = mongoDBRiverDefinition28.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue30 = mongoDBRiverDefinition28.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean31 = mongoDBRiverDefinition28.dropCollection;
        java.lang.String str32 = mongoDBRiverDefinition28.getDB_FIELD();
        java.util.Set<java.lang.String> strSet33 = mongoDBRiverDefinition28.getExcludeFields();
        int int34 = mongoDBRiverDefinition28.getDEFAULT_DB_PORT();
        boolean boolean35 = mongoDBRiverDefinition28.isMongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject36 = mongoDBRiverDefinition28.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript37 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(executableScript26);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition28);
        org.junit.Assert.assertNotNull(serverAddressList29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "db" + "'", str32, "db");
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 27017 + "'", int34 == 27017);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(executableScript37);
    }

    @Test
    public void test8024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8024");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str10 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue11 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str12 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str14 = mongoDBRiverDefinition1.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "is_mongos" + "'", str10, "is_mongos");
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "db" + "'", str12, "db");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test8025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8025");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString5();
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString17();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString13();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter11.deserializeObjectRiverSettings7();
        java.lang.String str18 = serializedObjectSupporter11.deserializeObjectString12();
        java.lang.String str19 = serializedObjectSupporter11.deserializeObjectString12();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218299" + "'", str13, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218449" + "'", str14, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218408" + "'", str15, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218264" + "'", str16, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_river" + "'", str18, "_river");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_river" + "'", str19, "_river");
    }

    @Test
    public void test8026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8026");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder0.mongoAdminUser;
        java.lang.String str7 = builder0.getmongoAdminUser();
        int int8 = builder0.connectTimeout;
        builder0.setconnectTimeout(8);
        boolean boolean11 = builder0.getmongoGridFS();
        builder0.mongoCollection = "options";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8027");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        builder0.setthrottleSize(8);
        boolean boolean6 = builder0.getmongoGridFS();
        builder0.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition9.mongoClientOptions;
        java.lang.String str11 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_bulk_requests" + "'", str11, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "skip_initial_import" + "'", str12, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "socket_timeout" + "'", str13, "socket_timeout");
    }

    @Test
    public void test8028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8028");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getHOST_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean10 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        org.elasticsearch.common.unit.TimeValue timeValue11 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "admin" + "'", str6, "admin");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeValue11);
    }

    @Test
    public void test8029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8029");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.riverIndexName("secondary_read_preference");
        builder13.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = builder13.build();
        boolean boolean17 = builder13.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str19 = builder13.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder13.build();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
    }

    @Test
    public void test8030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8030");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str9 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str10 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "socket_timeout" + "'", str9, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
    }

    @Test
    public void test8031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8031");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        java.lang.String str38 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder3.includeCollection("bulk_size");
        builder3.setmongoGridFS(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test8032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8032");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminUser();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoDb;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "type" + "'", str9, "type");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test8033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8033");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.indexName = "script.default_lang";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        java.lang.String str12 = builder10.getscript();
        boolean boolean13 = builder10.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray14 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList15 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList15, serverAddressArray14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        java.lang.String str20 = builder18.getscript();
        boolean boolean21 = builder18.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray22 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList23 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList23, serverAddressArray22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder18.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList23);
        builder10.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList23);
        java.util.Set<java.lang.String> strSet27 = builder10.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.riverName("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean31 = builder30.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.script("bulk");
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder33.setmongoOplogFilter(basicDBObject34);
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder33.setmongoOplogFilter(basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder41.skipInitialImport = false;
        builder41.setscriptType("script");
        java.lang.String[] strArray63 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder41.excludeFields((java.util.Set<java.lang.String>) strSet64);
        builder33.setexcludeFields((java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder33.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder33.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet72 = builder33.getexcludeFields();
        builder10.setexcludeFields(strSet72);
        builder5.setexcludeFields(strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder5.dropCollection(false);
        java.lang.String str77 = builder76.getincludeCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serverAddressArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serverAddressArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test8034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8034");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.getstatisticsIndexName();
        boolean boolean4 = builder2.mongoSSLVerifyCertificate;
        builder2.indexName = "drop_collection";
        int int7 = builder2.connectTimeout;
        boolean boolean8 = builder2.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test8035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8035");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str9 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.getstoreStatistics();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.includeFields;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.excludeFields;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "drop_collection" + "'", str9, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test8036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8036");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray4 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList5 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList5, serverAddressArray4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray12 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList13 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList13, serverAddressArray12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet17 = builder16.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.mongoLocalUser("credentials");
        java.lang.String str20 = builder19.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder24.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder24.setmongoOplogFilter(basicDBObject27);
        builder24.statisticsIndexName = "socket_timeout";
        builder24.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean34 = builder33.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.script("bulk");
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder36.setmongoOplogFilter(basicDBObject37);
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder36.setmongoOplogFilter(basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        builder44.skipInitialImport = false;
        builder44.setscriptType("script");
        java.lang.String[] strArray66 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder44.excludeFields((java.util.Set<java.lang.String>) strSet67);
        builder36.setexcludeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder24.includeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet67);
        builder8.parentTypes = strSet67;
        builder0.parentTypes = strSet67;
        java.lang.String str75 = builder0.getstatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject76 = builder0.mongoOplogFilter;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serverAddressArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(serverAddressArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(basicDBObject76);
    }

    @Test
    public void test8037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8037");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.connectTimeout = 27017;
        builder3.setconnectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.script("bulk");
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder19.setmongoOplogFilter(basicDBObject20);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder19.setmongoOplogFilter(basicDBObject22);
        boolean boolean24 = builder19.mongoGridFS;
        java.lang.String[] strArray67 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder19.includeFields((java.util.Set<java.lang.String>) strSet68);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet68);
        boolean boolean72 = builder3.importAllCollections;
        java.lang.Class<?> wildcardClass73 = builder3.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test8038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8038");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoAdminUser("advanced_transformation");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter20 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str21 = serializedObjectSupporter20.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings22 = serializedObjectSupporter20.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter20.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings24 = serializedObjectSupporter20.deserializeObjectRiverSettings9();
        builder5.serializedObjectSupporter = serializedObjectSupporter20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder5.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoLocalUser("mydatabase");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_river" + "'", str21, "_river");
        org.junit.Assert.assertNotNull(riverSettings22);
        org.junit.Assert.assertNotNull(riverSettings23);
        org.junit.Assert.assertNotNull(riverSettings24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test8039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8039");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) 1);
        java.lang.Object obj13 = null;
        java.lang.Object obj14 = docScoreSearchScript0.unwrap(obj13);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test8040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8040");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("concurrent_requests", (java.lang.Object) (-1));
        docScoreSearchScript0.setNextVar("skip_initial_import", (java.lang.Object) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition9.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue11 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean12 = mongoDBRiverDefinition9.dropCollection;
        boolean boolean13 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        int int15 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = mongoDBRiverDefinition9.getInitialTimestamp();
        boolean boolean17 = mongoDBRiverDefinition9.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.lang.String str19 = mongoDBRiverDefinition9.riverName;
        docScoreSearchScript0.setNextVar("", (java.lang.Object) mongoDBRiverDefinition9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = builder22.build();
        java.lang.String str24 = mongoDBRiverDefinition23.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet25 = mongoDBRiverDefinition23.parentTypes;
        java.lang.String str26 = mongoDBRiverDefinition23.riverName;
        boolean boolean27 = mongoDBRiverDefinition23.getimportAllCollections();
        java.lang.String str28 = mongoDBRiverDefinition23.getBULK_SIZE_FIELD();
        boolean boolean29 = mongoDBRiverDefinition23.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet30 = mongoDBRiverDefinition23.getExcludeFields();
        docScoreSearchScript0.setNextVar("mycollection", (java.lang.Object) strSet30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean34 = builder33.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.script("bulk");
        builder36.skipInitialImport = false;
        builder36.setscriptType("script");
        java.lang.String[] strArray58 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder36.excludeFields((java.util.Set<java.lang.String>) strSet59);
        java.lang.String str62 = builder61.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder61.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoSSLVerifyCertificate(true);
        boolean boolean67 = builder64.advancedTransformation;
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) boolean67);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext69 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(basicDBObject18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "index" + "'", str24, "index");
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bulk_size" + "'", str28, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test8041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8041");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) true);
        java.lang.String str15 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder5.storeStatistics(false);
        int int18 = builder17.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.mongoSecondaryReadPreference(false);
        java.lang.String str21 = builder17.getmongoCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test8042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8042");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        int int11 = mongoDBRiverDefinition1.getConnectTimeout();
        boolean boolean12 = mongoDBRiverDefinition1.advancedTransformation;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8043");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        java.lang.String str14 = builder13.getmongoAdminUser();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test8044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8044");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.throttleSize((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoSSLVerifyCertificate(false);
        builder11.setimportAllCollections(true);
        java.util.Set<java.lang.String> strSet18 = builder11.getincludeFields();
        boolean boolean19 = builder11.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder11.importAllCollections(true);
        builder11.storeStatistics = false;
        builder11.mongoDb = "script.default_lang";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test8045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8045");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoDb("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoCollection("script.default_lang");
        java.util.Set<java.lang.String> strSet22 = builder21.parentTypes;
        boolean boolean23 = builder21.getskipInitialImport();
        boolean boolean24 = builder21.getdisableIndexRefresh();
        builder21.setdropCollection(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test8046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8046");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str10 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str12 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script_type" + "'", str13, "script_type");
    }

    @Test
    public void test8047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8047");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index" + "'", str5, "index");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_requests" + "'", str6, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "password" + "'", str7, "password");
    }

    @Test
    public void test8048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8048");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        java.lang.String str14 = builder3.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder3.indexName("user");
        boolean boolean17 = builder16.getstoreStatistics();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test8049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8049");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString7();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter2.deserializeObjectRiverSettings6();
        java.lang.String str6 = serializedObjectSupporter2.deserializeObjectString5();
        java.lang.String str7 = serializedObjectSupporter2.deserializeObjectString10();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        org.elasticsearch.script.ScriptService scriptService9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("hi!", "throttle_size", riverSettings8, scriptService9);
        java.lang.Boolean boolean11 = mongoDBRiverDefinition10.isMongos;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218299" + "'", str6, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test8050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8050");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "db" + "'", str6, "db");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl_verify_certificate" + "'", str7, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "collection" + "'", str8, "collection");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
    }

    @Test
    public void test8051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8051");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsTypeName;
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.getExcludeFields();
        int int13 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "initial_timestamp" + "'", str10, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gridfs" + "'", str11, "gridfs");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000);
    }

    @Test
    public void test8052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8052");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setmongoUseSSL(false);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder3.mongoClientOptions = mongoClientOptions12;
        builder3.setscriptType("");
        builder3.mongoUseSSL = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder3.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoDb("servers");
        com.mongodb.BasicDBObject basicDBObject22 = builder19.mongoCollectionFilter;
        java.lang.String str23 = builder19.getstatisticsTypeName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test8053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8053");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) (short) 1);
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test8054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8054");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str8 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "actions" + "'", str8, "actions");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "is_mongos" + "'", str9, "is_mongos");
    }

    @Test
    public void test8055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8055");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean6 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "socket_timeout" + "'", str7, "socket_timeout");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 60000 + "'", int8 == 60000);
    }

    @Test
    public void test8056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8056");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.getRiverName();
        int int14 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str15 = mongoDBRiverDefinition1.getMongoDb();
        boolean boolean16 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test8057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8057");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) true);
        builder5.setindexName("script.default_lang");
        java.lang.String str17 = builder5.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = builder5.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.connectTimeout(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test8058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8058");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str9 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "exclude_fields" + "'", str9, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "store_statistics" + "'", str10, "store_statistics");
    }

    @Test
    public void test8059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8059");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.setindexName("initial_timestamp");
        boolean boolean11 = builder3.advancedTransformation;
        java.lang.String str12 = builder3.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder3.riverName("filter");
        java.lang.Boolean boolean15 = builder3.getisMongos();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(boolean15);
    }

    @Test
    public void test8060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8060");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        builder39.mongoSecondaryReadPreference = false;
        builder39.setriverIndexName("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.disableIndexRefresh(false);
        boolean boolean48 = builder39.mongoSSLVerifyCertificate;
        java.lang.String str49 = builder39.mongoAdminUser;
        java.lang.String str50 = builder39.riverName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test8061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8061");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.excludeFields;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "collection" + "'", str7, "collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test8062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8062");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820217755" + "'", str6, "mongodb-1638820217755");
    }

    @Test
    public void test8063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8063");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString4();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString15();
        java.lang.String str11 = serializedObjectSupporter8.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter8.deserializeObjectRiverSettings1();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter8;
        java.lang.String str14 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str15 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        int int16 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        int int17 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str18 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "port" + "'", str7, "port");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218424" + "'", str10, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_river" + "'", str11, "_river");
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "collection" + "'", str15, "collection");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1000 + "'", int16 == 1000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "drop_collection" + "'", str18, "drop_collection");
    }

    @Test
    public void test8064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8064");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean6 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.disableIndexRefresh(false);
        java.lang.String str11 = builder10.getstatisticsTypeName();
        java.lang.String str12 = builder10.riverName;
        builder10.indexName = "script.default_lang";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        java.lang.String str17 = builder15.getscript();
        boolean boolean18 = builder15.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder15.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getdropCollection();
        java.lang.String str25 = builder23.getscript();
        boolean boolean26 = builder23.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray27 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList28 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList28, serverAddressArray27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder23.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList28);
        builder15.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList28);
        java.util.Set<java.lang.String> strSet32 = builder15.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder15.riverName("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean36 = builder35.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.script("bulk");
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder38.setmongoOplogFilter(basicDBObject39);
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder38.setmongoOplogFilter(basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean44 = builder43.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.script("bulk");
        builder46.skipInitialImport = false;
        builder46.setscriptType("script");
        java.lang.String[] strArray68 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder46.excludeFields((java.util.Set<java.lang.String>) strSet69);
        builder38.setexcludeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder38.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder38.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet77 = builder38.getexcludeFields();
        builder15.setexcludeFields(strSet77);
        builder10.setexcludeFields(strSet77);
        builder4.setincludeFields(strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition81 = builder4.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(serverAddressArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition81);
    }

    @Test
    public void test8065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8065");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218424" + "'", str2, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218326" + "'", str6, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings7);
    }

    @Test
    public void test8066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8066");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        builder3.riverName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder3.connectTimeout((int) (byte) 10);
        builder17.setconnectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.mongoAdminUser("name");
        java.lang.String str22 = builder21.getmongoCollection();
        java.lang.String str23 = builder21.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.includeCollection("mongodb-1638820218387");
        builder25.setdisableIndexRefresh(false);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.mongoLocalPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean32 = builder31.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.script("bulk");
        com.mongodb.BasicDBObject basicDBObject35 = null;
        builder34.setmongoOplogFilter(basicDBObject35);
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder34.setmongoOplogFilter(basicDBObject37);
        java.lang.String str39 = builder34.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean41 = builder40.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoAdminUser("socket_timeout");
        java.lang.String str46 = builder45.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject49 = builder45.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder34.mongoCollectionFilter(basicDBObject49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean52 = builder51.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder51.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder51.disableIndexRefresh(false);
        java.lang.String str57 = builder56.getstatisticsTypeName();
        java.lang.String str58 = builder56.riverName;
        builder56.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder56.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet65 = builder64.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder64.importAllCollections(false);
        java.util.Set<java.lang.String> strSet68 = builder67.includeFields;
        boolean boolean69 = builder67.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder67.mongoAdminUser("initial_timestamp");
        builder67.indexName = "secondary_read_preference";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter76 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str77 = serializedObjectSupporter76.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings78 = serializedObjectSupporter76.deserializeObjectRiverSettings4();
        java.lang.String str79 = serializedObjectSupporter76.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings80 = serializedObjectSupporter76.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService81 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings80, scriptService81);
        java.lang.String str83 = mongoDBRiverDefinition82.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions84 = mongoDBRiverDefinition82.mongoClientOptions;
        builder67.mongoClientOptions = mongoClientOptions84;
        builder50.mongoClientOptions = mongoClientOptions84;
        builder25.mongoClientOptions = mongoClientOptions84;
        builder25.socketTimeout = 0;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "include_fields" + "'", str23, "include_fields");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "mongodb-1638820218326" + "'", str77, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "mongodb-1638820218326" + "'", str79, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings80);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "mycollection" + "'", str83, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions84);
    }

    @Test
    public void test8067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8067");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.riverName("");
        builder58.setmongoDb("mongodb-1638820218299");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test8068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8068");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        boolean boolean9 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "bulk_timeout" + "'", str12, "bulk_timeout");
    }

    @Test
    public void test8069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8069");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        boolean boolean12 = builder5.importAllCollections;
        java.lang.String str13 = builder5.mongoCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test8070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8070");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.importAllCollections(true);
        builder5.settypeName("size");
        java.lang.String str13 = builder5.getmongoCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test8071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8071");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        boolean boolean6 = builder3.getdropCollection();
        builder3.advancedTransformation = false;
        builder3.mongoLocalPassword = "credentials";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test8072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8072");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        builder11.includeCollection = "credentials";
        java.lang.String str14 = builder11.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.advancedTransformation(true);
        java.lang.String str17 = builder16.getmongoCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test8073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8073");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.importAllCollections(true);
        builder10.mongoUseSSL = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test8074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8074");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str10 = mongoDBRiverDefinition1.riverIndexName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str12 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str13 = mongoDBRiverDefinition1.indexName;
        int int14 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str15 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "credentials" + "'", str15, "credentials");
    }

    @Test
    public void test8075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8075");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        builder8.mongoSSLVerifyCertificate = false;
        boolean boolean11 = builder8.mongoSecondaryReadPreference;
        java.lang.String str12 = builder8.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoDb("script.default_lang");
        boolean boolean15 = builder14.getskipInitialImport();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8076");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        int int6 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean7 = mongoDBRiverDefinition1.disableIndexRefresh;
        boolean boolean8 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean9 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test8077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8077");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString5();
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter11.deserializeObjectRiverSettings1();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString2();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter11.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter11.deserializeObjectRiverSettings6();
        java.lang.String str19 = serializedObjectSupporter11.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings20 = serializedObjectSupporter11.deserializeObjectRiverSettings1();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218299" + "'", str13, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218449" + "'", str14, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_river" + "'", str16, "_river");
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertNotNull(riverSettings18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb-1638820218299" + "'", str19, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings20);
    }

    @Test
    public void test8078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8078");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean6 = mongoDBRiverDefinition1.isDropCollection();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getBULK_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str12 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition1.initialTimestamp;
        boolean boolean14 = mongoDBRiverDefinition1.getadvancedTransformation();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "type" + "'", str8, "type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "user" + "'", str9, "user");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk" + "'", str10, "bulk");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "advanced_transformation" + "'", str12, "advanced_transformation");
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test8079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8079");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.dropCollection(true);
        builder13.mongoAdminPassword = "_river";
        int int16 = builder13.getsocketTimeout();
        builder13.mongoGridFS = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test8080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8080");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.riverIndexName("socket_timeout");
        java.lang.String str10 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.throttleSize(1000);
        builder9.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.skipInitialImport(true);
        java.util.Set<java.lang.String> strSet19 = null;
        builder18.setparentTypes(strSet19);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test8081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8081");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str6 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalPassword;
        boolean boolean8 = mongoDBRiverDefinition1.mongoUseSSL;
        int int9 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str10 = mongoDBRiverDefinition1.riverName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "advanced_transformation" + "'", str6, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8082");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.includeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str15 = mongoDBRiverDefinition1.script;
        int int16 = mongoDBRiverDefinition1.socketTimeout;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "skip_initial_import" + "'", str11, "skip_initial_import");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test8083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8083");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        builder3.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        java.lang.String str43 = builder3.statisticsIndexName;
        builder3.includeCollection = "throttle_size";
        int int46 = builder3.getconnectTimeout();
        java.util.Set<java.lang.String> strSet47 = builder3.excludeFields;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(strSet47);
    }

    @Test
    public void test8084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8084");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoAdminUser("advanced_transformation");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter20 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str21 = serializedObjectSupporter20.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings22 = serializedObjectSupporter20.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter20.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings24 = serializedObjectSupporter20.deserializeObjectRiverSettings9();
        builder5.serializedObjectSupporter = serializedObjectSupporter20;
        java.lang.String str26 = serializedObjectSupporter20.deserializeObjectString12();
        java.lang.String str27 = serializedObjectSupporter20.deserializeObjectString11();
        java.lang.String str28 = serializedObjectSupporter20.deserializeObjectString8();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_river" + "'", str21, "_river");
        org.junit.Assert.assertNotNull(riverSettings22);
        org.junit.Assert.assertNotNull(riverSettings23);
        org.junit.Assert.assertNotNull(riverSettings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "_river" + "'", str26, "_river");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb-1638820218387" + "'", str27, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_river" + "'", str28, "_river");
    }

    @Test
    public void test8085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8085");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.socketTimeout = (byte) -1;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder2.mongoOplogFilter = basicDBObject5;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.typeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder2.build();
        java.lang.String str10 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        boolean boolean11 = mongoDBRiverDefinition9.disableIndexRefresh;
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalUser();
        java.lang.String str13 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl" + "'", str10, "ssl");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "credentials" + "'", str13, "credentials");
    }

    @Test
    public void test8086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8086");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        int int10 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean11 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str12 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "flush_interval" + "'", str12, "flush_interval");
    }

    @Test
    public void test8087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8087");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = builder0.mongoLocalPassword;
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        builder0.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalUser("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoSSLVerifyCertificate(true);
        builder0.setriverIndexName("sandbox");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test8088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8088");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "exclude_fields" + "'", str9, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "port" + "'", str10, "port");
    }

    @Test
    public void test8089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8089");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.throttleSize((int) (byte) 0);
        java.lang.String str57 = builder3.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder3.mongoAdminUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder3.disableIndexRefresh(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test8090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8090");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.connectTimeout(30000);
        java.lang.String str14 = builder11.getmongoCollection();
        builder11.mongoGridFS = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test8091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8091");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString5();
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString17();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString13();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter11.deserializeObjectRiverSettings7();
        java.lang.String str18 = serializedObjectSupporter11.deserializeObjectString5();
        java.lang.String str19 = serializedObjectSupporter11.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings20 = serializedObjectSupporter11.deserializeObjectRiverSettings9();
        java.lang.String str21 = serializedObjectSupporter11.deserializeObjectString4();
        java.lang.String str22 = serializedObjectSupporter11.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter11.deserializeObjectRiverSettings1();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218299" + "'", str13, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218449" + "'", str14, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218408" + "'", str15, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218264" + "'", str16, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218299" + "'", str18, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_river" + "'", str19, "_river");
        org.junit.Assert.assertNotNull(riverSettings20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_river" + "'", str21, "_river");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_river" + "'", str22, "_river");
        org.junit.Assert.assertNotNull(riverSettings23);
    }

    @Test
    public void test8092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8092");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.mongoUseSSL;
        boolean boolean7 = mongoDBRiverDefinition1.disableIndexRefresh;
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test8093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8093");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str5 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "exclude_fields" + "'", str5, "exclude_fields");
    }

    @Test
    public void test8094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8094");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        org.elasticsearch.common.logging.ESLogger eSLogger8 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str9 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(eSLogger8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "drop_collection" + "'", str9, "drop_collection");
    }

    @Test
    public void test8095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8095");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder0.getscript();
        java.lang.String str4 = builder0.getstatisticsTypeName();
        java.lang.String str5 = builder0.scriptType;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "store_statistics" + "'", str3, "store_statistics");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test8096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8096");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str7 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        int int8 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.indexName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "advanced_transformation" + "'", str7, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8097");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        java.lang.String str23 = builder22.getmongoCollection();
        builder22.throttleSize = 1000;
        boolean boolean26 = builder22.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test8098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8098");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.dropCollection(true);
        java.lang.String str14 = builder13.getmongoAdminUser();
        java.lang.String str15 = builder13.mongoLocalUser;
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.mongoClientOptions;
        builder13.setindexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.disableIndexRefresh(false);
        int int25 = builder19.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.dropCollection(true);
        java.lang.String str28 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder19.script("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean32 = builder31.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoAdminUser("socket_timeout");
        java.lang.String str37 = builder36.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.connectTimeout((int) (short) 1);
        boolean boolean40 = builder36.skipInitialImport;
        builder36.mongoLocalUser = "type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.statisticsTypeName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean46 = builder45.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.script("bulk");
        com.mongodb.BasicDBObject basicDBObject49 = null;
        builder48.setmongoOplogFilter(basicDBObject49);
        com.mongodb.BasicDBObject basicDBObject51 = null;
        builder48.setmongoOplogFilter(basicDBObject51);
        builder48.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder48.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder48.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean60 = builder59.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder59.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder59.disableIndexRefresh(false);
        java.lang.String str65 = builder64.getstatisticsTypeName();
        builder64.scriptType = "user";
        builder64.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory70 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean72 = builder71.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder71.script("bulk");
        com.mongodb.BasicDBObject basicDBObject75 = builder74.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript76 = docScoreNativeScriptFactory70.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject75);
        builder64.setmongoCollectionFilter(basicDBObject75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder48.mongoOplogFilter(basicDBObject75);
        java.lang.String str79 = builder78.getriverIndexName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList80 = builder78.getmongoServers();
        builder36.setmongoServers(serverAddressList80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder30.mongoServers(serverAddressList80);
        builder13.setmongoServers(serverAddressList80);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(basicDBObject75);
        org.junit.Assert.assertNotNull(executableScript76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(serverAddressList80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test8099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8099");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsIndexName;
        int int8 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 60000 + "'", int8 == 60000);
    }

    @Test
    public void test8100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8100");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean11 = mongoDBRiverDefinition1.getskipInitialImport();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.lang.String str13 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter14 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str15 = serializedObjectSupporter14.deserializeObjectString4();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter14.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter14.deserializeObjectRiverSettings2();
        java.lang.String str19 = serializedObjectSupporter14.deserializeObjectString6();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter14;
        java.lang.String str21 = serializedObjectSupporter14.deserializeObjectString1();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index" + "'", str13, "index");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218363" + "'", str16, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertNotNull(riverSettings18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_river" + "'", str19, "_river");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb-1638820217755" + "'", str21, "mongodb-1638820217755");
    }

    @Test
    public void test8101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8101");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        boolean boolean23 = builder22.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean25 = builder24.getdropCollection();
        java.lang.String str26 = builder24.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean28 = builder27.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.script("bulk");
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder30.setmongoOplogFilter(basicDBObject31);
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder30.setmongoOplogFilter(basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean36 = builder35.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.script("bulk");
        builder38.skipInitialImport = false;
        builder38.setscriptType("script");
        java.lang.String[] strArray60 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder38.excludeFields((java.util.Set<java.lang.String>) strSet61);
        builder30.setexcludeFields((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder30.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder30.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet69 = builder30.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder24.parentTypes(strSet69);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory71 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean73 = builder72.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder72.script("bulk");
        com.mongodb.BasicDBObject basicDBObject76 = builder75.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript77 = docScoreNativeScriptFactory71.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject76);
        builder24.setmongoCollectionFilter(basicDBObject76);
        builder22.setmongoOplogFilter(basicDBObject76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder22.storeStatistics(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList82 = builder81.mongoServers;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(basicDBObject76);
        org.junit.Assert.assertNotNull(executableScript77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(serverAddressList82);
    }

    @Test
    public void test8102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8102");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        builder3.riverName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder3.connectTimeout((int) (byte) 10);
        builder17.setconnectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.mongoAdminUser("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder25.setmongoOplogFilter(basicDBObject26);
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder25.setmongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean31 = builder30.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.script("bulk");
        builder33.skipInitialImport = false;
        builder33.setscriptType("script");
        java.lang.String[] strArray55 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder33.excludeFields((java.util.Set<java.lang.String>) strSet56);
        builder25.setexcludeFields((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder25.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory62 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean64 = builder63.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder63.script("bulk");
        com.mongodb.BasicDBObject basicDBObject67 = builder66.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript68 = docScoreNativeScriptFactory62.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject67);
        builder25.mongoCollectionFilter = basicDBObject67;
        builder25.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder25.socketTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition75 = builder74.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList76 = mongoDBRiverDefinition75.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue77 = mongoDBRiverDefinition75.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean78 = mongoDBRiverDefinition75.dropCollection;
        boolean boolean79 = mongoDBRiverDefinition75.getmongoSecondaryReadPreference();
        boolean boolean80 = mongoDBRiverDefinition75.isMongoSecondaryReadPreference();
        int int81 = mongoDBRiverDefinition75.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp82 = mongoDBRiverDefinition75.getInitialTimestamp();
        java.lang.String str83 = mongoDBRiverDefinition75.getMongoDb();
        java.lang.String str84 = mongoDBRiverDefinition75.riverIndexName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList85 = mongoDBRiverDefinition75.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder25.mongoServers(serverAddressList85);
        builder17.mongoServers = serverAddressList85;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(basicDBObject67);
        org.junit.Assert.assertNotNull(executableScript68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition75);
        org.junit.Assert.assertNotNull(serverAddressList76);
        org.junit.Assert.assertNotNull(timeValue77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 27017 + "'", int81 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(serverAddressList85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test8103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8103");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder9.setmongoCollection("advanced_transformation");
        boolean boolean12 = builder9.getdropCollection();
        boolean boolean13 = builder9.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.mongoCollection("admin");
        builder9.setsocketTimeout(30000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder9.mongoAdminPassword("skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test8104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8104");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str12 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str13 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str14 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getMongoAdminPassword();
        int int16 = mongoDBRiverDefinition1.getConnectTimeout();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "user" + "'", str14, "user");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test8105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8105");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218424" + "'", str2, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218408" + "'", str5, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
    }

    @Test
    public void test8106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8106");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.setindexName("initial_timestamp");
        boolean boolean11 = builder3.dropCollection;
        builder3.importAllCollections = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8107");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("options");
        builder7.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.scriptType("bulk");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test8108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8108");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        java.lang.String str4 = builder3.script;
        builder3.connectTimeout = (short) 0;
        com.mongodb.BasicDBObject basicDBObject7 = builder3.getmongoCollectionFilter();
        boolean boolean8 = builder3.getadvancedTransformation();
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test8109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8109");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.lang.Class<?> wildcardClass9 = basicDBObject8.getClass();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test8110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8110");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        int int10 = builder5.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.scriptType("advanced_transformation");
        builder12.riverName = "";
        builder12.setadvancedTransformation(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test8111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8111");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder3.typeName;
        builder3.setstatisticsIndexName("name");
        builder3.setmongoLocalPassword("filter");
        java.lang.String str34 = builder3.mongoCollection;
        java.lang.String str35 = builder3.getmongoDb();
        builder3.setmongoLocalPassword("");
        builder3.setadvancedTransformation(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test8112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8112");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        boolean boolean12 = builder11.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("index");
        java.lang.String str17 = builder14.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.statisticsTypeName("index");
        java.util.Set<java.lang.String> strSet20 = builder19.includeFields;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet20);
    }

    @Test
    public void test8113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8113");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        int int6 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean8 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str9 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gridfs" + "'", str9, "gridfs");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
    }

    @Test
    public void test8114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8114");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str6 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "actions" + "'", str6, "actions");
    }

    @Test
    public void test8115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8115");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = mongoDBRiverDefinition1.serializedObjectSupporter;
        int int11 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str12 = mongoDBRiverDefinition1.riverName;
        java.lang.Boolean boolean13 = mongoDBRiverDefinition1.isMongos();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "collection" + "'", str7, "collection");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk_size" + "'", str9, "bulk_size");
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test8116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8116");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        java.lang.String str38 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder3.includeCollection("bulk_size");
        java.lang.String str41 = builder40.getriverIndexName();
        java.lang.String str42 = builder40.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean44 = builder43.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder43.disableIndexRefresh(false);
        java.lang.String str49 = builder48.getstatisticsTypeName();
        java.lang.String str50 = builder48.riverName;
        builder48.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder48.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet57 = builder56.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = builder58.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList60 = mongoDBRiverDefinition59.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue61 = mongoDBRiverDefinition59.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean62 = mongoDBRiverDefinition59.dropCollection;
        boolean boolean63 = mongoDBRiverDefinition59.getmongoSecondaryReadPreference();
        boolean boolean64 = mongoDBRiverDefinition59.isMongoSecondaryReadPreference();
        int int65 = mongoDBRiverDefinition59.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp66 = mongoDBRiverDefinition59.getInitialTimestamp();
        java.lang.String str67 = mongoDBRiverDefinition59.getMongoDb();
        java.lang.String str68 = mongoDBRiverDefinition59.riverIndexName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList69 = mongoDBRiverDefinition59.getMongoServers();
        builder56.mongoServers = serverAddressList69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder40.mongoServers(serverAddressList69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.mongoSecondaryReadPreference(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition59);
        org.junit.Assert.assertNotNull(serverAddressList60);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 27017 + "'", int65 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(serverAddressList69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test8117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8117");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString10();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test8118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8118");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.scriptType("type");
        java.lang.String str14 = builder3.getscriptType();
        builder3.mongoUseSSL = true;
        java.lang.String str17 = builder3.gettypeName();
        int int18 = builder3.throttleSize;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "type" + "'", str14, "type");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test8119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8119");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet42 = builder3.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean44 = builder43.getdropCollection();
        java.lang.String str45 = builder43.getscript();
        boolean boolean46 = builder43.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray47 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList48 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList48, serverAddressArray47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder43.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean52 = builder51.getdropCollection();
        java.lang.String str53 = builder51.getscript();
        boolean boolean54 = builder51.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray55 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList56 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList56, serverAddressArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder51.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        builder43.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        builder3.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        java.lang.String str61 = builder3.getmongoLocalUser();
        builder3.mongoAdminUser = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder3.isMongos((java.lang.Boolean) true);
        java.lang.String str66 = builder3.getindexName();
        boolean boolean67 = builder3.skipInitialImport;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serverAddressArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serverAddressArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test8120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8120");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.setscriptType("local");
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder2.mongoServers;
        builder2.riverName = "admin";
        java.lang.String str8 = builder2.getmongoLocalPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test8121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8121");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.indexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getStatisticsTypeName();
        boolean boolean8 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.statisticsIndexName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8122");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.throttleSize((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoSSLVerifyCertificate(false);
        builder15.mongoGridFS = true;
        java.util.Set<java.lang.String> strSet18 = builder15.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.indexName("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.isMongos((java.lang.Boolean) true);
        java.lang.String str23 = builder20.mongoAdminPassword;
        builder20.setadvancedTransformation(false);
        builder20.setstatisticsIndexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.mongoDb("");
        builder29.setriverIndexName("mycollection");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test8123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8123");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getScript();
        java.lang.String str14 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "concurrent_requests" + "'", str14, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "drop_collection" + "'", str15, "drop_collection");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "parent_types" + "'", str16, "parent_types");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "null.null" + "'", str17, "null.null");
    }

    @Test
    public void test8124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8124");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str8 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(byteSizeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "servers" + "'", str8, "servers");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
    }

    @Test
    public void test8125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8125");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder11.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.connectTimeout((int) (byte) 10);
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder18);
        java.lang.String str20 = builder18.getscript();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.mongoClientOptions;
        java.lang.String str22 = builder18.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoGridFS(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bulk" + "'", str20, "bulk");
        org.junit.Assert.assertNull(mongoClientOptions21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test8126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8126");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        java.util.Set<java.lang.String> strSet9 = builder0.getparentTypes();
        builder0.setscriptType("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.script("mongodb-1638820218299");
        builder13.setmongoLocalUser("_river");
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = builder13.getmongoServers();
        builder13.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(serverAddressList16);
    }

    @Test
    public void test8127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8127");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder6.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder6.setmongoOplogFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder6.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet45 = builder6.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.parentTypes(strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder0.riverName("throttle_size");
        builder48.setmongoUseSSL(true);
        builder48.script = "credentials";
        java.lang.String str53 = builder48.getscriptType();
        builder48.setmongoCollection("bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test8128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8128");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        java.lang.String str4 = builder3.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean6 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.script("bulk");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder8.setmongoOplogFilter(basicDBObject9);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        builder8.setmongoOplogFilter(basicDBObject11);
        builder8.statisticsIndexName = "socket_timeout";
        builder8.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder20.setmongoOplogFilter(basicDBObject21);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder20.setmongoOplogFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        builder28.skipInitialImport = false;
        builder28.setscriptType("script");
        java.lang.String[] strArray50 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder28.excludeFields((java.util.Set<java.lang.String>) strSet51);
        builder20.setexcludeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder8.includeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet51);
        builder56.typeName = "";
        builder56.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder56.script("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder56.statisticsTypeName("bulk_size");
        java.lang.String str65 = builder56.getscript();
        boolean boolean66 = builder56.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "user" + "'", str65, "user");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test8129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8129");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.connectTimeout((int) (short) 1);
        boolean boolean9 = builder5.skipInitialImport;
        java.lang.String str10 = builder5.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.advancedTransformation(true);
        builder12.statisticsTypeName = "ssl_verify_certificate";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoAdminPassword("");
        builder12.isMongos = false;
        builder12.setmongoGridFS(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test8130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8130");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.storeStatistics(true);
        java.lang.String str15 = builder14.mongoDb;
        builder14.setimportAllCollections(false);
        boolean boolean18 = builder14.getmongoSecondaryReadPreference();
        java.lang.String str19 = builder14.getmongoDb();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test8131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8131");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218408" + "'", str4, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test8132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8132");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.getSIZE_FIELD();
        int int7 = mongoDBRiverDefinition1.getConnectTimeout();
        java.lang.String str8 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "flush_interval" + "'", str8, "flush_interval");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "size" + "'", str9, "size");
    }

    @Test
    public void test8133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8133");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        boolean boolean12 = builder11.dropCollection;
        builder11.setmongoLocalUser("admin");
        builder11.riverName = "name";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter17 = builder11.serializedObjectSupporter;
        java.lang.String str18 = builder11.mongoLocalPassword;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test8134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8134");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str6 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str8 = mongoDBRiverDefinition1.getDB_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoUseSSL();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk_timeout" + "'", str6, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "db" + "'", str8, "db");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test8135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8135");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str12 = mongoDBRiverDefinition1.indexName;
        int int13 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "parent_types" + "'", str10, "parent_types");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 60000 + "'", int13 == 60000);
    }

    @Test
    public void test8136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8136");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.lang.String str13 = mongoDBRiverDefinition1.getNAME_FIELD();
        boolean boolean14 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str16 = mongoDBRiverDefinition1.mongoCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "name" + "'", str13, "name");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteSizeValue15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test8137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8137");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.indexName;
        java.lang.String str14 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str15 = mongoDBRiverDefinition1.typeName;
        int int16 = mongoDBRiverDefinition1.connectTimeout;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test8138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8138");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        java.lang.String str13 = builder3.getmongoLocalPassword();
        boolean boolean14 = builder3.importAllCollections;
        builder3.mongoUseSSL = false;
        int int17 = builder3.getthrottleSize();
        java.lang.String str18 = builder3.typeName;
        builder3.importAllCollections = false;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp21 = builder3.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder3.mongoAdminUser("mongodb-1638820218387");
        builder23.setmongoAdminPassword("mongodb-1638820218387");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(wildcardTimestamp21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test8139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8139");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.indexName = "options";
        boolean boolean11 = builder3.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder15.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        java.lang.String str20 = builder15.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("socket_timeout");
        java.lang.String str27 = builder26.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject30 = builder26.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder15.mongoCollectionFilter(basicDBObject30);
        builder31.riverName = "mongodb-1638820218264";
        builder31.mongoGridFS = true;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter38 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str39 = serializedObjectSupporter38.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings40 = serializedObjectSupporter38.deserializeObjectRiverSettings4();
        java.lang.String str41 = serializedObjectSupporter38.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings42 = serializedObjectSupporter38.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings42, scriptService43);
        java.lang.String str45 = mongoDBRiverDefinition44.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions46 = mongoDBRiverDefinition44.mongoClientOptions;
        builder31.mongoClientOptions = mongoClientOptions46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder3.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.riverName("ssl");
        java.lang.String str51 = builder48.getriverIndexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb-1638820218326" + "'", str39, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "mongodb-1638820218326" + "'", str41, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings42);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "mycollection" + "'", str45, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test8140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8140");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.throttleSize((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoSSLVerifyCertificate(false);
        builder15.mongoGridFS = true;
        java.util.Set<java.lang.String> strSet18 = builder15.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.indexName("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.isMongos((java.lang.Boolean) true);
        java.lang.String str23 = builder20.mongoAdminPassword;
        builder20.setadvancedTransformation(false);
        builder20.setstatisticsIndexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.mongoDb("");
        java.lang.String str30 = builder20.scriptType;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test8141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8141");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script_type" + "'", str7, "script_type");
    }

    @Test
    public void test8142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8142");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.mongoAdminPassword;
        boolean boolean16 = mongoDBRiverDefinition1.storeStatistics;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test8143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8143");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder6.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder6.setmongoOplogFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder6.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet45 = builder6.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.parentTypes(strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder0.riverName("throttle_size");
        builder48.setmongoUseSSL(true);
        boolean boolean51 = builder48.advancedTransformation;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test8144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8144");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition1.riverName;
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_bulk_requests" + "'", str6, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
    }

    @Test
    public void test8145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8145");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet7 = builder5.excludeFields;
        builder5.setisMongos((java.lang.Boolean) true);
        builder5.setconnectTimeout((int) 'a');
        java.util.Set<java.lang.String> strSet12 = builder5.getparentTypes();
        boolean boolean13 = builder5.getskipInitialImport();
        java.lang.String str14 = builder5.getindexName();
        builder5.setmongoDb("mongodb-1638820218449");
        com.mongodb.BasicDBObject basicDBObject17 = builder5.getmongoOplogFilter();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(basicDBObject17);
    }

    @Test
    public void test8146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8146");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.throttleSize((int) (byte) 0);
        java.lang.String str57 = builder3.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder3.mongoAdminUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder3.storeStatistics(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test8147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8147");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218387" + "'", str3, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
    }

    @Test
    public void test8148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8148");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition1.mongoClientOptions;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str14 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        boolean boolean15 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str16 = mongoDBRiverDefinition1.includeCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_collection" + "'", str14, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test8149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8149");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition1.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition1.getMongoClientOptions();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(mongoClientOptions8);
    }

    @Test
    public void test8150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8150");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        int int9 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.mongoLocalPassword("include_fields");
        java.lang.String str12 = builder11.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder11.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.statisticsTypeName("skip_initial_import");
        builder15.includeCollection = "include_fields";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test8151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8151");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean6 = mongoDBRiverDefinition1.disableIndexRefresh;
        int int7 = mongoDBRiverDefinition1.getConnectTimeout();
        boolean boolean8 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "null.null" + "'", str9, "null.null");
    }

    @Test
    public void test8152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8152");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.importAllCollections(false);
        java.util.Set<java.lang.String> strSet17 = builder16.includeFields;
        boolean boolean18 = builder16.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoAdminUser("initial_timestamp");
        builder20.advancedTransformation = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.disableIndexRefresh(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test8153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8153");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str8 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        boolean boolean10 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str11 = mongoDBRiverDefinition1.indexName;
        java.lang.String str12 = mongoDBRiverDefinition1.statisticsTypeName;
        boolean boolean13 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "drop_collection" + "'", str8, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test8154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8154");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        int int8 = builder5.connectTimeout;
        java.lang.String str9 = builder5.getmongoDb();
        builder5.mongoAdminUser = "type";
        builder5.importAllCollections = false;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder5.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.includeCollection("localhost");
        builder18.setstoreStatistics(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test8155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8155");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        int int21 = builder20.connectTimeout;
        java.lang.String str22 = builder20.includeCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test8156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8156");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        java.lang.String str4 = builder3.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.scriptType("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.script("mongodb-1638820218449");
        java.util.Set<java.lang.String> strSet9 = builder6.includeFields;
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test8157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8157");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isDropCollection();
        com.mongodb.MongoClientOptions mongoClientOptions4 = mongoDBRiverDefinition1.getMongoClientOptions();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int6 = mongoDBRiverDefinition1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test8158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8158");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str8 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getdropCollection();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoLocalUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "flush_interval" + "'", str8, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test8159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8159");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        com.mongodb.BasicDBObject basicDBObject7 = builder5.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.includeCollection("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoAdminPassword("advanced_transformation");
        boolean boolean12 = builder11.importAllCollections;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8160");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.common.settings.Settings settings6 = riverSettings5.globalSettings();
        org.elasticsearch.common.settings.Settings settings7 = riverSettings5.globalSettings();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218264" + "'", str3, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
    }

    @Test
    public void test8161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8161");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        java.lang.String str12 = builder11.getmongoLocalPassword();
        boolean boolean13 = builder11.dropCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test8162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8162");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String str9 = builder3.includeCollection;
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder3.mongoClientOptions;
        boolean boolean11 = builder3.getskipInitialImport();
        builder3.setisMongos((java.lang.Boolean) false);
        java.lang.String str14 = builder3.getmongoCollection();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = builder3.getmongoServers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(serverAddressList15);
    }

    @Test
    public void test8163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8163");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        boolean boolean7 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str10 = mongoDBRiverDefinition1.indexName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8164");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.getParentTypes();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str11 = mongoDBRiverDefinition1.riverIndexName;
        boolean boolean12 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str13 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.Boolean boolean15 = mongoDBRiverDefinition1.isMongos();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "actions" + "'", str7, "actions");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "parent_types" + "'", str8, "parent_types");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "concurrent_requests" + "'", str13, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null.null" + "'", str14, "null.null");
        org.junit.Assert.assertNull(boolean15);
    }

    @Test
    public void test8165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8165");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str4 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "exclude_fields" + "'", str4, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_bulk_requests" + "'", str6, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl_verify_certificate" + "'", str7, "ssl_verify_certificate");
    }

    @Test
    public void test8166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8166");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString14();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218424" + "'", str5, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
    }

    @Test
    public void test8167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8167");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalUser("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = builder9.build();
        java.lang.String str11 = builder9.getriverName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test8168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8168");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        java.lang.String str7 = builder5.gettypeName();
        java.lang.String str8 = builder5.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.includeCollection("include_fields");
        builder10.settypeName("index");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test8169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8169");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.setmongoGridFS(true);
        java.lang.String str9 = builder5.mongoAdminUser;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test8170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8170");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str10 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.isMongoGridFS();
        boolean boolean12 = mongoDBRiverDefinition1.getimportAllCollections();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "connect_timeout" + "'", str10, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8171");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        builder0.setthrottleSize(8);
        boolean boolean6 = builder0.getmongoGridFS();
        builder0.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str10 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition9.includeCollection;
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "parent_types" + "'", str10, "parent_types");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test8172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8172");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoLocalPassword("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoGridFS(false);
        builder6.setscriptType("mongodb-1638820218363");
        java.lang.String str11 = builder6.indexName;
        boolean boolean12 = builder6.getskipInitialImport();
        java.lang.String str13 = builder6.getmongoDb();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test8173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8173");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str11 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "advanced_transformation" + "'", str9, "advanced_transformation");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "flush_interval" + "'", str11, "flush_interval");
    }

    @Test
    public void test8174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8174");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition1.mongoCollectionFilter;
        boolean boolean13 = mongoDBRiverDefinition1.mongoUseSSL;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test8175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8175");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218424" + "'", str4, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
    }

    @Test
    public void test8176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8176");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder6.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder6.setmongoOplogFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder6.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet45 = builder6.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.parentTypes(strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder0.riverName("throttle_size");
        boolean boolean49 = builder0.getdisableIndexRefresh();
        java.util.Set<java.lang.String> strSet50 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter51 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str52 = serializedObjectSupporter51.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings53 = serializedObjectSupporter51.deserializeObjectRiverSettings4();
        java.lang.String str54 = serializedObjectSupporter51.deserializeObjectString3();
        java.lang.String str55 = serializedObjectSupporter51.deserializeObjectString11();
        java.lang.String str56 = serializedObjectSupporter51.deserializeObjectString14();
        builder0.serializedObjectSupporter = serializedObjectSupporter51;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "mongodb-1638820218326" + "'", str52, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "mongodb-1638820218264" + "'", str54, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "mongodb-1638820218387" + "'", str55, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "_river" + "'", str56, "_river");
    }

    @Test
    public void test8177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8177");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoGridFS(false);
        java.util.Set<java.lang.String> strSet7 = builder6.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder11.setmongoOplogFilter(basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder11.setmongoOplogFilter(basicDBObject14);
        builder11.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = builder11.initialTimestamp;
        builder11.setmongoAdminUser("concurrent_requests");
        builder11.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.disableIndexRefresh(false);
        java.lang.String str29 = builder28.getstatisticsTypeName();
        java.lang.String str30 = builder28.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean34 = builder33.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.script("bulk");
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder36.setmongoOplogFilter(basicDBObject37);
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder36.setmongoOplogFilter(basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        builder44.skipInitialImport = false;
        builder44.setscriptType("script");
        java.lang.String[] strArray66 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder44.excludeFields((java.util.Set<java.lang.String>) strSet67);
        builder36.setexcludeFields((java.util.Set<java.lang.String>) strSet67);
        builder28.includeFields = strSet67;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder6.excludeFields((java.util.Set<java.lang.String>) strSet67);
        boolean boolean74 = builder6.getmongoSecondaryReadPreference();
        builder6.riverIndexName = "mongodb-1638820218387";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter77 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings78 = serializedObjectSupporter77.deserializeObjectRiverSettings4();
        java.lang.String str79 = serializedObjectSupporter77.deserializeObjectString5();
        java.lang.String str80 = serializedObjectSupporter77.deserializeObjectString1();
        builder6.serializedObjectSupporter = serializedObjectSupporter77;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = serializedObjectSupporter77.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(riverSettings78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "mongodb-1638820218299" + "'", str79, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "mongodb-1638820217755" + "'", str80, "mongodb-1638820217755");
    }

    @Test
    public void test8178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8178");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder13.setscript("advanced_transformation");
        java.lang.String str16 = builder13.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoLocalUser("is_mongos");
        java.lang.String str19 = builder18.getmongoDb();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test8179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8179");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.includeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str15 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean17 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str18 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "skip_initial_import" + "'", str11, "skip_initial_import");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "include_fields" + "'", str15, "include_fields");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "local" + "'", str18, "local");
    }

    @Test
    public void test8180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8180");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.mongoAdminUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        int int15 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str16 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str17 = mongoDBRiverDefinition1.getUSER_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_fields" + "'", str14, "include_fields");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "user" + "'", str17, "user");
    }

    @Test
    public void test8181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8181");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str7 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str10 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getRiverName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "type" + "'", str7, "type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "index" + "'", str9, "index");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "host" + "'", str10, "host");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "options" + "'", str11, "options");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test8182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8182");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean6 = mongoDBRiverDefinition1.disableIndexRefresh;
        int int7 = mongoDBRiverDefinition1.getConnectTimeout();
        java.lang.String str8 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str10 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getstoreStatistics();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "drop_collection" + "'", str8, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "connect_timeout" + "'", str10, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8183");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder14.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder14.setmongoOplogFilter(basicDBObject17);
        builder14.statisticsIndexName = "socket_timeout";
        builder14.setmongoUseSSL(false);
        java.lang.Object obj23 = docScoreSearchScript0.unwrap((java.lang.Object) builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        com.mongodb.BasicDBObject basicDBObject29 = null;
        builder28.setmongoOplogFilter(basicDBObject29);
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder28.setmongoOplogFilter(basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean34 = builder33.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.script("bulk");
        builder36.skipInitialImport = false;
        builder36.setscriptType("script");
        java.lang.String[] strArray58 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder36.excludeFields((java.util.Set<java.lang.String>) strSet59);
        builder28.setexcludeFields((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder28.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder28.riverIndexName("bulk_timeout");
        builder28.riverName = "bulk";
        java.util.Set<java.lang.String> strSet69 = builder28.getparentTypes();
        builder28.mongoSSLVerifyCertificate = false;
        docScoreSearchScript0.setNextVar("local", (java.lang.Object) builder28);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter73 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str74 = serializedObjectSupporter73.deserializeObjectString7();
        java.lang.String str75 = serializedObjectSupporter73.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings76 = serializedObjectSupporter73.deserializeObjectRiverSettings6();
        java.lang.String str77 = serializedObjectSupporter73.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings78 = serializedObjectSupporter73.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings79 = serializedObjectSupporter73.deserializeObjectRiverSettings1();
        java.lang.String str80 = serializedObjectSupporter73.deserializeObjectString2();
        java.lang.String str81 = serializedObjectSupporter73.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings82 = serializedObjectSupporter73.deserializeObjectRiverSettings4();
        java.lang.String str83 = serializedObjectSupporter73.deserializeObjectString3();
        java.lang.String str84 = serializedObjectSupporter73.deserializeObjectString6();
        java.lang.Object obj85 = docScoreSearchScript0.unwrap((java.lang.Object) serializedObjectSupporter73);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "mongodb-1638820218326" + "'", str74, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "mongodb-1638820218449" + "'", str75, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "mongodb-1638820218326" + "'", str77, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings78);
        org.junit.Assert.assertNotNull(riverSettings79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "_river" + "'", str80, "_river");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "_river" + "'", str81, "_river");
        org.junit.Assert.assertNotNull(riverSettings82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "mongodb-1638820218264" + "'", str83, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "_river" + "'", str84, "_river");
        org.junit.Assert.assertNotNull(obj85);
    }

    @Test
    public void test8184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8184");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition1.statisticsIndexName;
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.excludeFields;
        org.elasticsearch.common.logging.ESLogger eSLogger7 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.Boolean boolean9 = mongoDBRiverDefinition1.isMongos;
        java.lang.String str10 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(eSLogger7);
        org.junit.Assert.assertNotNull(byteSizeValue8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flush_interval" + "'", str10, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8185");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        com.mongodb.BasicDBObject basicDBObject7 = builder5.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.connectTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder13.setmongoOplogFilter(basicDBObject14);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder13.setmongoOplogFilter(basicDBObject16);
        builder13.statisticsIndexName = "socket_timeout";
        java.lang.String str20 = builder13.riverIndexName;
        boolean boolean21 = builder13.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.dropCollection(true);
        builder23.mongoAdminPassword = "_river";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = builder26.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = mongoDBRiverDefinition27.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue29 = mongoDBRiverDefinition27.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean30 = mongoDBRiverDefinition27.dropCollection;
        boolean boolean31 = mongoDBRiverDefinition27.isMongoSecondaryReadPreference();
        java.lang.String str32 = mongoDBRiverDefinition27.getStatisticsTypeName();
        java.lang.String str33 = mongoDBRiverDefinition27.getMongoLocalPassword();
        java.lang.String str34 = mongoDBRiverDefinition27.getCONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet35 = mongoDBRiverDefinition27.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject36 = mongoDBRiverDefinition27.mongoCollectionFilter;
        builder23.setmongoCollectionFilter(basicDBObject36);
        builder9.mongoOplogFilter = basicDBObject36;
        builder9.setdropCollection(false);
        builder9.socketTimeout = 97;
        builder9.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "connect_timeout" + "'", str34, "connect_timeout");
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(basicDBObject36);
    }

    @Test
    public void test8186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8186");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.storeStatistics = false;
        builder5.setmongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.typeName("socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test8187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8187");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.riverIndexName("mongodb-1638820218299");
        builder33.typeName = "host";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter36 = builder33.serializedObjectSupporter;
        builder33.setmongoSSLVerifyCertificate(false);
        builder33.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(serializedObjectSupporter36);
    }

    @Test
    public void test8188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8188");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        boolean boolean23 = builder5.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder5.connectTimeout((int) 'a');
        java.lang.String str26 = builder5.getincludeCollection();
        java.lang.String str27 = builder5.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder5.mongoAdminUser("script.default_lang");
        builder5.socketTimeout = (byte) 100;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter32 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str33 = serializedObjectSupporter32.deserializeObjectString7();
        java.lang.String str34 = serializedObjectSupporter32.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings35 = serializedObjectSupporter32.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings36 = serializedObjectSupporter32.deserializeObjectRiverSettings4();
        builder5.serializedObjectSupporter = serializedObjectSupporter32;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "mongodb-1638820218326" + "'", str33, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "_river" + "'", str34, "_river");
        org.junit.Assert.assertNotNull(riverSettings35);
        org.junit.Assert.assertNotNull(riverSettings36);
    }

    @Test
    public void test8189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8189");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("stats", "_river");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?_river?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test8190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8190");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.getMongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str9 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean10 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test8191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8191");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean5 = builder4.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.disableIndexRefresh(false);
        java.lang.String str10 = builder9.getstatisticsTypeName();
        java.lang.String str11 = builder9.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        java.lang.String str14 = builder12.getscript();
        boolean boolean15 = builder12.dropCollection;
        builder12.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        com.mongodb.BasicDBObject basicDBObject23 = builder22.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript24 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder12.mongoOplogFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder9.mongoCollectionFilter(basicDBObject23);
        builder26.setmongoCollection("type");
        java.lang.String[] strArray75 = new java.lang.String[] { "db", "actions", "store_statistics", "bulk", "sandbox", "drop_collection", "ssl_verify_certificate", "include_fields", "connect_timeout", "script.disable_dynamic", "initial_timestamp", "hi!", "port", ".scripts", "drop_collection", "filter", "bulk_size", "store_statistics", "include_fields", "local", "disable_index_refresh", "socket_timeout", "connect_timeout", "host", "mongodb-1638820218363", "mongodb-1638820218449", "mongodb-1638820218387", "script.default_lang", "hi!", "concurrent_bulk_requests", "mongodb-1638820218264", "port", "type", "", "port", "advanced_transformation", "script_type", "host", "mongodb-1638820218449", "db", "mongodb-1638820217755", "advanced_transformation", "host", "sandbox", "localhost", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        builder26.excludeFields = strSet76;
        builder0.parentTypes = strSet76;
        java.lang.String str80 = builder0.getriverName();
        boolean boolean81 = builder0.importAllCollections;
        builder0.setmongoCollection("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder0.script("concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(executableScript24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test8192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8192");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger8 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.getIncludeFields();
        boolean boolean11 = mongoDBRiverDefinition1.disableIndexRefresh;
        boolean boolean12 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "admin" + "'", str7, "admin");
        org.junit.Assert.assertNotNull(eSLogger8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_requests" + "'", str9, "concurrent_requests");
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8193");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str10 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str11 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str12 = mongoDBRiverDefinition1.getRiverIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test8194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8194");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.mongoAdminUser = "mongodb-1638820217755";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.typeName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.riverIndexName("mongodb-1638820218264");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test8195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8195");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.includeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str15 = mongoDBRiverDefinition1.riverName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "skip_initial_import" + "'", str11, "skip_initial_import");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test8196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8196");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.scriptType("type");
        java.lang.String str14 = builder3.getscriptType();
        builder3.mongoUseSSL = true;
        com.mongodb.BasicDBObject basicDBObject17 = builder3.getmongoCollectionFilter();
        builder3.setdisableIndexRefresh(false);
        java.lang.String str20 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder21.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = mongoDBRiverDefinition22.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue24 = mongoDBRiverDefinition22.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean25 = mongoDBRiverDefinition22.dropCollection;
        java.lang.String str26 = mongoDBRiverDefinition22.getDB_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition22.getHOST_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition22.getRiverName();
        boolean boolean29 = mongoDBRiverDefinition22.isMongoSecondaryReadPreference();
        java.lang.String str30 = mongoDBRiverDefinition22.getRiverIndexName();
        boolean boolean31 = mongoDBRiverDefinition22.mongoGridFS;
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition22.mongoCollectionFilter;
        builder3.setmongoOplogFilter(basicDBObject32);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "type" + "'", str14, "type");
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertNotNull(serverAddressList23);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "db" + "'", str26, "db");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "host" + "'", str27, "host");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(basicDBObject32);
    }

    @Test
    public void test8197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8197");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) true);
        java.lang.String str15 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder5.storeStatistics(false);
        builder17.setstoreStatistics(false);
        builder17.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test8198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8198");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str9 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        int int10 = mongoDBRiverDefinition1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "socket_timeout" + "'", str9, "socket_timeout");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test8199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8199");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("concurrent_requests", (java.lang.Object) (-1));
        docScoreSearchScript0.setNextVar("skip_initial_import", (java.lang.Object) 100);
        docScoreSearchScript0.setNextScore((float) (byte) 1);
    }

    @Test
    public void test8200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8200");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = builder5.mongoServers;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(serverAddressList10);
    }

    @Test
    public void test8201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8201");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoAdminUser;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str11 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.Boolean boolean13 = mongoDBRiverDefinition1.isMongos();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_timeout" + "'", str11, "bulk_timeout");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test8202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8202");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218264" + "'", str3, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218264" + "'", str5, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
    }

    @Test
    public void test8203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8203");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setmongoUseSSL(false);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder3.mongoClientOptions = mongoClientOptions12;
        builder3.setscriptType("");
        builder3.mongoUseSSL = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder3.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.statisticsTypeName("include_collection");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test8204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8204");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str9 = mongoDBRiverDefinition1.getRiverIndexName();
        boolean boolean10 = mongoDBRiverDefinition1.mongoGridFS;
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition1.mongoCollectionFilter;
        boolean boolean12 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str13 = mongoDBRiverDefinition1.getTypeName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test8205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8205");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        java.lang.String str31 = mongoDBRiverDefinition19.scriptType;
        java.util.Set<java.lang.String> strSet32 = mongoDBRiverDefinition19.getExcludeFields();
        boolean boolean33 = mongoDBRiverDefinition19.importAllCollections;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test8206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8206");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        java.lang.String str10 = builder9.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = builder14.getinitialTimestamp();
        builder14.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoLocalPassword("mongodb-1638820218264");
        builder19.setstatisticsIndexName("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test8207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8207");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString10();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218408" + "'", str4, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test8208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8208");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        java.util.Set<java.lang.String> strSet6 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) (short) 0);
        builder8.storeStatistics = true;
        builder8.setmongoAdminPassword("bulk");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test8209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8209");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        builder39.mongoSecondaryReadPreference = false;
        builder39.setriverIndexName("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.disableIndexRefresh(false);
        java.lang.String str48 = builder47.mongoLocalPassword;
        builder47.mongoCollection = "mongodb-1638820218326";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test8210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8210");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str9 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition1.mongoServers;
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str12 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        boolean boolean13 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str14 = mongoDBRiverDefinition1.getBULK_FIELD();
        boolean boolean15 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str16 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "port" + "'", str9, "port");
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "null.null" + "'", str12, "null.null");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk" + "'", str14, "bulk");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gridfs" + "'", str16, "gridfs");
    }

    @Test
    public void test8211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8211");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        int int12 = mongoDBRiverDefinition1.connectTimeout;
        boolean boolean13 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str15 = mongoDBRiverDefinition1.mongoDb;
        int int16 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition1.getParentTypes();
        org.elasticsearch.common.logging.ESLogger eSLogger18 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp19 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 30000 + "'", int16 == 30000);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(eSLogger18);
        org.junit.Assert.assertNull(wildcardTimestamp19);
    }

    @Test
    public void test8212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8212");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str4 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "exclude_fields" + "'", str4, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "gridfs" + "'", str6, "gridfs");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script_type" + "'", str7, "script_type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "flush_interval" + "'", str8, "flush_interval");
    }

    @Test
    public void test8213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8213");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition1.getMongoClientOptions();
        boolean boolean11 = mongoDBRiverDefinition1.getskipInitialImport();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_collection" + "'", str8, "include_collection");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8214");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.connectTimeout((int) (short) 1);
        boolean boolean9 = builder5.skipInitialImport;
        builder5.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = builder5.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder5.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.isMongos((java.lang.Boolean) true);
        boolean boolean16 = builder15.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test8215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8215");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        java.lang.String str30 = builder28.getmongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter31 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str32 = serializedObjectSupporter31.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings33 = serializedObjectSupporter31.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings34 = serializedObjectSupporter31.deserializeObjectRiverSettings8();
        builder28.serializedObjectSupporter = serializedObjectSupporter31;
        org.elasticsearch.river.RiverSettings riverSettings36 = serializedObjectSupporter31.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings37 = serializedObjectSupporter31.deserializeObjectRiverSettings9();
        java.lang.String str38 = serializedObjectSupporter31.deserializeObjectString15();
        java.lang.String str39 = serializedObjectSupporter31.deserializeObjectString17();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb-1638820218326" + "'", str32, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings33);
        org.junit.Assert.assertNotNull(riverSettings34);
        org.junit.Assert.assertNotNull(riverSettings36);
        org.junit.Assert.assertNotNull(riverSettings37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "mongodb-1638820218424" + "'", str38, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb-1638820218449" + "'", str39, "mongodb-1638820218449");
    }

    @Test
    public void test8216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8216");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
    }

    @Test
    public void test8217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8217");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str13 = mongoDBRiverDefinition1.getTypeName();
        int int14 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean15 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str16 = mongoDBRiverDefinition1.getIncludeCollection();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test8218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8218");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        java.lang.String str14 = builder3.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder3.indexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminPassword("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test8219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8219");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        java.util.Set<java.lang.String> strSet5 = builder2.getparentTypes();
        builder2.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.riverIndexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoGridFS(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test8220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8220");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.isMongos((java.lang.Boolean) false);
        int int10 = builder7.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.throttleSize((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet14 = builder13.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoLocalUser("credentials");
        builder13.setthrottleSize(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        java.lang.String str21 = builder19.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder25.setmongoOplogFilter(basicDBObject26);
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder25.setmongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean31 = builder30.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.script("bulk");
        builder33.skipInitialImport = false;
        builder33.setscriptType("script");
        java.lang.String[] strArray55 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder33.excludeFields((java.util.Set<java.lang.String>) strSet56);
        builder25.setexcludeFields((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder25.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder25.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet64 = builder25.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder19.parentTypes(strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder19.riverName("throttle_size");
        boolean boolean68 = builder19.getdisableIndexRefresh();
        java.util.Set<java.lang.String> strSet69 = builder19.getparentTypes();
        builder13.includeFields = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder12.includeFields(strSet69);
        java.lang.String str72 = builder71.getstatisticsIndexName();
        java.lang.Class<?> wildcardClass73 = builder71.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test8221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8221");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str12 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.Boolean boolean13 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str14 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "actions" + "'", str14, "actions");
    }

    @Test
    public void test8222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8222");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        java.lang.Boolean boolean10 = builder5.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.statisticsIndexName("secondary_read_preference");
        boolean boolean13 = builder12.mongoUseSSL;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test8223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8223");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.riverIndexName("hi!");
        java.lang.String str8 = builder7.mongoAdminUser;
        builder7.scriptType = "servers";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test8224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8224");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        java.lang.String str32 = builder3.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = builder33.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList35 = mongoDBRiverDefinition34.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue36 = mongoDBRiverDefinition34.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean37 = mongoDBRiverDefinition34.dropCollection;
        boolean boolean38 = mongoDBRiverDefinition34.getmongoSecondaryReadPreference();
        boolean boolean39 = mongoDBRiverDefinition34.isMongoSecondaryReadPreference();
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = mongoDBRiverDefinition34.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.mongoServers(serverAddressList40);
        java.lang.String str42 = builder41.getriverIndexName();
        com.mongodb.BasicDBObject basicDBObject43 = builder41.mongoOplogFilter;
        builder41.storeStatistics = true;
        java.lang.String str46 = builder41.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder41.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalUser("script_type");
        java.util.Set<java.lang.String> strSet51 = builder48.parentTypes;
        boolean boolean52 = builder48.skipInitialImport;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition34);
        org.junit.Assert.assertNotNull(serverAddressList35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(serverAddressList40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(basicDBObject43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test8225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8225");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getHOST_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getskipInitialImport();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str13 = mongoDBRiverDefinition1.statisticsTypeName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "null.null" + "'", str11, "null.null");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test8226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8226");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.setmongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoLocalPassword("index");
        boolean boolean11 = builder10.getdropCollection();
        builder10.setmongoDb("script_type");
        builder10.setisMongos((java.lang.Boolean) false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8227");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str7 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        int int8 = mongoDBRiverDefinition1.throttleSize;
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str10 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.lang.String str12 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "advanced_transformation" + "'", str7, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 30000 + "'", int9 == 30000);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_fields" + "'", str10, "include_fields");
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "actions" + "'", str12, "actions");
    }

    @Test
    public void test8228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8228");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.Boolean boolean9 = mongoDBRiverDefinition1.isMongos;
        java.lang.String str10 = mongoDBRiverDefinition1.getBULK_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk" + "'", str10, "bulk");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8229");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.throttleSize((int) (short) 10);
        builder3.setthrottleSize((int) 'a');
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test8230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8230");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsTypeName;
        com.mongodb.MongoClientOptions mongoClientOptions9 = mongoDBRiverDefinition1.mongoClientOptions;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(mongoClientOptions9);
    }

    @Test
    public void test8231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8231");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean3 = mongoDBRiverDefinition1.mongoUseSSL;
        boolean boolean4 = mongoDBRiverDefinition1.getadvancedTransformation();
        boolean boolean5 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getTypeName();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.getMongoOplogFilter();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(basicDBObject8);
    }

    @Test
    public void test8232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8232");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        boolean boolean23 = builder22.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean25 = builder24.getdropCollection();
        java.lang.String str26 = builder24.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean28 = builder27.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.script("bulk");
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder30.setmongoOplogFilter(basicDBObject31);
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder30.setmongoOplogFilter(basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean36 = builder35.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.script("bulk");
        builder38.skipInitialImport = false;
        builder38.setscriptType("script");
        java.lang.String[] strArray60 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder38.excludeFields((java.util.Set<java.lang.String>) strSet61);
        builder30.setexcludeFields((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder30.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder30.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet69 = builder30.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder24.parentTypes(strSet69);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory71 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean73 = builder72.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder72.script("bulk");
        com.mongodb.BasicDBObject basicDBObject76 = builder75.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript77 = docScoreNativeScriptFactory71.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject76);
        builder24.setmongoCollectionFilter(basicDBObject76);
        builder22.setmongoOplogFilter(basicDBObject76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder22.storeStatistics(true);
        java.lang.String str82 = builder81.typeName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(basicDBObject76);
        org.junit.Assert.assertNotNull(executableScript77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test8233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8233");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218299" + "'", str5, "mongodb-1638820218299");
    }

    @Test
    public void test8234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8234");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("hi!", ".scripts", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?.scripts?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test8235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8235");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str8 = mongoDBRiverDefinition1.indexName;
        java.lang.String str9 = mongoDBRiverDefinition1.getIncludeCollection();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str12 = mongoDBRiverDefinition1.getScript();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test8236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8236");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean7 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoDb();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test8237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8237");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.riverIndexName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet15 = builder14.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.mongoLocalUser("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoAdminUser("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.script("bulk");
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder23.setmongoOplogFilter(basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder23.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean29 = builder28.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.script("bulk");
        builder31.skipInitialImport = false;
        builder31.setscriptType("script");
        java.lang.String[] strArray53 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder31.excludeFields((java.util.Set<java.lang.String>) strSet54);
        builder23.setexcludeFields((java.util.Set<java.lang.String>) strSet54);
        builder19.setincludeFields((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder13.excludeFields((java.util.Set<java.lang.String>) strSet54);
        java.util.List<com.mongodb.ServerAddress> serverAddressList60 = builder13.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder13.mongoAdminUser("disable_index_refresh");
        java.lang.Boolean boolean63 = builder13.getisMongos();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(serverAddressList60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(boolean63);
    }

    @Test
    public void test8238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8238");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder5.indexName(".scripts");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = builder5.build();
        java.lang.String str26 = mongoDBRiverDefinition25.indexName;
        boolean boolean27 = mongoDBRiverDefinition25.isMongoGridFS();
        java.lang.Boolean boolean28 = mongoDBRiverDefinition25.isMongos();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + ".scripts" + "'", str26, ".scripts");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(boolean28);
    }

    @Test
    public void test8239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8239");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.mongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.includeFields(strSet15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.disableIndexRefresh(false);
        java.lang.String str23 = builder22.getstatisticsTypeName();
        java.lang.String str24 = builder22.riverName;
        int int25 = builder22.connectTimeout;
        java.lang.String[] strArray72 = new java.lang.String[] { "type", "index", "", "db", "null.null", "_river", "mongodb-1638820217755", "mongodb-1638820218449", "local", "script.default_lang", "bulk_size", "host", "size", ".scripts", "secondary_read_preference", "script", "script_type", "mongodb-1638820218424", "script", "bulk_timeout", "collection", "mongodb-1638820218424", "initial_timestamp", "skip_initial_import", "", "port", "initial_timestamp", "mongodb-1638820217755", ".scripts", "index", "password", ".scripts", "flush_interval", "is_mongos", "ssl_verify_certificate", "servers", "localhost", "script.disable_dynamic", "ssl_verify_certificate", "bulk", "connect_timeout", "mongodb-1638820218449", "", "skip_initial_import", "mongodb-1638820218449", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet73);
        builder5.setexcludeFields((java.util.Set<java.lang.String>) strSet73);
        java.util.Set<java.lang.String> strSet77 = builder5.excludeFields;
        builder5.storeStatistics = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strSet77);
    }

    @Test
    public void test8240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8240");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("concurrent_requests", (java.lang.Object) (-1));
        docScoreSearchScript0.setNextVar("skip_initial_import", (java.lang.Object) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.disableIndexRefresh(false);
        java.lang.String str14 = builder13.getstatisticsTypeName();
        builder13.setmongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoLocalPassword("index");
        docScoreSearchScript0.setNextVar("local", (java.lang.Object) builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder21.build();
        java.lang.String str23 = mongoDBRiverDefinition22.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet24 = mongoDBRiverDefinition22.parentTypes;
        java.lang.String str25 = mongoDBRiverDefinition22.riverName;
        boolean boolean26 = mongoDBRiverDefinition22.disableIndexRefresh;
        java.lang.String str27 = mongoDBRiverDefinition22.riverIndexName;
        boolean boolean28 = mongoDBRiverDefinition22.getadvancedTransformation();
        java.lang.String str29 = mongoDBRiverDefinition22.getSSL_CONNECTION_FIELD();
        java.lang.String str30 = mongoDBRiverDefinition22.mongoLocalUser;
        docScoreSearchScript0.setNextVar("drop_collection", (java.lang.Object) mongoDBRiverDefinition22);
        java.lang.String str32 = mongoDBRiverDefinition22.getCOLLECTION_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp33 = mongoDBRiverDefinition22.initialTimestamp;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "index" + "'", str23, "index");
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ssl" + "'", str29, "ssl");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "collection" + "'", str32, "collection");
        org.junit.Assert.assertNull(wildcardTimestamp33);
    }

    @Test
    public void test8241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8241");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str11 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ssl_verify_certificate" + "'", str12, "ssl_verify_certificate");
    }

    @Test
    public void test8242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8242");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = riverSettings4.settings();
        org.elasticsearch.common.settings.Settings settings6 = riverSettings4.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = riverSettings4.settings();
        org.elasticsearch.script.ScriptService scriptService8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("servers", "password", riverSettings4, scriptService8);
        java.lang.String str10 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str11 = mongoDBRiverDefinition9.getRiverIndexName();
        int int12 = mongoDBRiverDefinition9.socketTimeout;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "stats" + "'", str10, "stats");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "password" + "'", str11, "password");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 60000 + "'", int12 == 60000);
    }

    @Test
    public void test8243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8243");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setconnectTimeout((int) (byte) 1);
        builder3.mongoLocalPassword = "script_type";
        java.lang.String str14 = builder3.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder3.connectTimeout((int) (byte) 1);
        boolean boolean17 = builder16.mongoGridFS;
        builder16.indexName = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.disableIndexRefresh(false);
        java.lang.String str26 = builder25.getstatisticsTypeName();
        java.lang.String str27 = builder25.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean29 = builder28.getdropCollection();
        java.lang.String str30 = builder28.getscript();
        boolean boolean31 = builder28.dropCollection;
        builder28.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory34 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean36 = builder35.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.script("bulk");
        com.mongodb.BasicDBObject basicDBObject39 = builder38.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript40 = docScoreNativeScriptFactory34.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder28.mongoOplogFilter(basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder25.mongoCollectionFilter(basicDBObject39);
        com.mongodb.BasicDBObject basicDBObject43 = builder25.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder16.mongoCollectionFilter(basicDBObject43);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(executableScript40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test8244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8244");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsTypeName("credentials");
        boolean boolean10 = builder9.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.riverName("type");
        java.lang.String str13 = builder12.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject14 = builder12.getmongoOplogFilter();
        java.lang.String str15 = builder12.mongoCollection;
        boolean boolean16 = builder12.getmongoGridFS();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test8245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8245");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str14 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "servers" + "'", str14, "servers");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
    }

    @Test
    public void test8246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8246");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        int int5 = builder4.connectTimeout;
        java.util.Set<java.lang.String> strSet6 = builder4.getexcludeFields();
        java.lang.String str7 = builder4.getstatisticsIndexName();
        builder4.setmongoSSLVerifyCertificate(true);
        builder4.mongoLocalUser = "drop_collection";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test8247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8247");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean10 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str12 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.mongoUseSSL;
        boolean boolean14 = mongoDBRiverDefinition1.getmongoGridFS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test8248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8248");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        int int4 = mongoDBRiverDefinition1.getConnectTimeout();
        int int5 = mongoDBRiverDefinition1.socketTimeout;
        int int6 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str8 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "servers" + "'", str8, "servers");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test8249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8249");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter42 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str43 = serializedObjectSupporter42.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings44 = serializedObjectSupporter42.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings45 = riverSettings44.globalSettings();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory46 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter47 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str48 = serializedObjectSupporter47.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings49 = serializedObjectSupporter47.deserializeObjectRiverSettings3();
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = riverSettings49.settings();
        org.elasticsearch.script.ExecutableScript executableScript51 = docScoreNativeScriptFactory46.newScript(strMap50);
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings45, strMap50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.script("store_statistics");
        java.lang.String str56 = builder55.mongoCollection;
        java.lang.String str57 = builder55.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder55.mongoGridFS(false);
        com.mongodb.BasicDBObject basicDBObject60 = builder59.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings61 = new org.elasticsearch.river.RiverSettings(settings45, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder39.mongoCollectionFilter(basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder39.socketTimeout(2000);
        java.lang.String str65 = builder39.mongoLocalUser;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "mongodb-1638820218326" + "'", str43, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "_river" + "'", str48, "_river");
        org.junit.Assert.assertNotNull(riverSettings49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(executableScript51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test8250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8250");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.getRiverName();
        int int14 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str15 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str16 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "secondary_read_preference" + "'", str16, "secondary_read_preference");
    }

    @Test
    public void test8251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8251");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) true);
        java.lang.String str15 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder5.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.disableIndexRefresh(true);
        java.lang.String str20 = builder5.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test8252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8252");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.setmongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoLocalPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.dropCollection(false);
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoOplogFilter;
        builder12.script = "localhost";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(basicDBObject13);
    }

    @Test
    public void test8253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8253");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoAdminUser("advanced_transformation");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoOplogFilter();
        java.lang.String str21 = builder19.script;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(basicDBObject20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bulk" + "'", str21, "bulk");
    }

    @Test
    public void test8254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8254");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder11.mongoServers;
        builder11.setisMongos((java.lang.Boolean) false);
        builder11.setscriptType("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.scriptType("name");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test8255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8255");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoGridFS(false);
        java.util.Set<java.lang.String> strSet7 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.typeName("import_all_collections");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test8256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8256");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        java.lang.String str8 = builder5.getriverName();
        builder5.connectTimeout = 100;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet12 = builder11.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoLocalUser("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.script("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        builder17.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter23 = builder17.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        builder17.mongoClientOptions = mongoClientOptions24;
        builder17.settypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder17.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean31 = builder30.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.script("bulk");
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder33.setmongoOplogFilter(basicDBObject34);
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder33.setmongoOplogFilter(basicDBObject36);
        java.lang.String str38 = builder33.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean40 = builder39.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder39.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoAdminUser("socket_timeout");
        java.lang.String str45 = builder44.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject48 = builder44.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder33.mongoCollectionFilter(basicDBObject48);
        builder49.riverName = "mongodb-1638820218264";
        builder49.mongoGridFS = true;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter56 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str57 = serializedObjectSupporter56.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings58 = serializedObjectSupporter56.deserializeObjectRiverSettings4();
        java.lang.String str59 = serializedObjectSupporter56.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings60 = serializedObjectSupporter56.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings60, scriptService61);
        java.lang.String str63 = mongoDBRiverDefinition62.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions64 = mongoDBRiverDefinition62.mongoClientOptions;
        builder49.mongoClientOptions = mongoClientOptions64;
        builder17.setmongoClientOptions(mongoClientOptions64);
        builder14.setmongoClientOptions(mongoClientOptions64);
        builder5.setmongoClientOptions(mongoClientOptions64);
        boolean boolean69 = builder5.getmongoGridFS();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(serializedObjectSupporter23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "mongodb-1638820218326" + "'", str57, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "mongodb-1638820218326" + "'", str59, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings60);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "mycollection" + "'", str63, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test8257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8257");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString18();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218424" + "'", str2, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820217755" + "'", str4, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test8258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8258");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        java.util.Set<java.lang.String> strSet5 = builder2.getparentTypes();
        builder2.setadvancedTransformation(false);
        java.lang.String str8 = builder2.getincludeCollection();
        builder2.includeCollection = "script";
        builder2.storeStatistics = false;
        builder2.setstatisticsTypeName("db");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test8259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8259");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        builder39.skipInitialImport = false;
        builder39.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.importAllCollections(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test8260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8260");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str7 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getDB_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.lang.String str11 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "advanced_transformation" + "'", str7, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "port" + "'", str8, "port");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "db" + "'", str9, "db");
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_size" + "'", str11, "bulk_size");
    }

    @Test
    public void test8261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8261");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean11 = mongoDBRiverDefinition1.getskipInitialImport();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.lang.String str13 = mongoDBRiverDefinition1.getMongoAdminUser();
        java.lang.String str14 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.typeName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test8262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8262");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.mongoSecondaryReadPreference = true;
        builder5.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test8263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8263");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.riverIndexName("socket_timeout");
        java.lang.String str10 = builder9.mongoLocalPassword;
        builder9.setmongoGridFS(false);
        java.lang.String str13 = builder9.getstatisticsTypeName();
        builder9.socketTimeout = 32;
        java.lang.String str16 = builder9.riverIndexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "socket_timeout" + "'", str16, "socket_timeout");
    }

    @Test
    public void test8264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.socketTimeout = (byte) -1;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder2.mongoOplogFilter = basicDBObject5;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.storeStatistics(false);
        java.lang.String str9 = builder8.includeCollection;
        builder8.throttleSize = 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder14.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition15.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue17 = mongoDBRiverDefinition15.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean18 = mongoDBRiverDefinition15.dropCollection;
        boolean boolean19 = mongoDBRiverDefinition15.isMongoSecondaryReadPreference();
        java.lang.String str20 = mongoDBRiverDefinition15.getStatisticsTypeName();
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition15.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str22 = mongoDBRiverDefinition15.getPARENT_TYPES_FIELD();
        java.lang.String str23 = mongoDBRiverDefinition15.getSSL_VERIFY_CERT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = mongoDBRiverDefinition15.mongoServers;
        builder8.setmongoServers(serverAddressList24);
        builder8.disableIndexRefresh = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "parent_types" + "'", str22, "parent_types");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ssl_verify_certificate" + "'", str23, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(serverAddressList24);
    }

    @Test
    public void test8265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8265");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str10 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = mongoDBRiverDefinition1.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "initial_timestamp" + "'", str8, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "local" + "'", str10, "local");
        org.junit.Assert.assertNull(serializedObjectSupporter11);
    }

    @Test
    public void test8266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8266");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        java.lang.String str14 = builder3.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder3.indexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder19.build();
        java.lang.String str21 = mongoDBRiverDefinition20.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet22 = mongoDBRiverDefinition20.parentTypes;
        int int23 = mongoDBRiverDefinition20.getConnectTimeout();
        int int24 = mongoDBRiverDefinition20.socketTimeout;
        int int25 = mongoDBRiverDefinition20.getDEFAULT_DB_PORT();
        java.lang.Boolean boolean26 = mongoDBRiverDefinition20.isMongos;
        java.util.List<com.mongodb.ServerAddress> serverAddressList27 = mongoDBRiverDefinition20.mongoServers;
        builder3.setmongoServers(serverAddressList27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder3.throttleSize((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "index" + "'", str21, "index");
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 27017 + "'", int25 == 27017);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(serverAddressList27);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test8267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8267");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        boolean boolean21 = builder20.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.statisticsIndexName("throttle_size");
        java.util.Set<java.lang.String> strSet24 = builder20.getincludeFields();
        builder20.disableIndexRefresh = true;
        builder20.setisMongos((java.lang.Boolean) true);
        java.lang.String str29 = builder20.statisticsIndexName;
        builder20.setmongoDb("admin");
        java.lang.String str32 = builder20.mongoDb;
        builder20.importAllCollections = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "throttle_size" + "'", str29, "throttle_size");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "admin" + "'", str32, "admin");
    }

    @Test
    public void test8268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8268");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.riverIndexName("socket_timeout");
        java.lang.String str10 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.throttleSize(1000);
        builder9.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.importAllCollections(false);
        java.lang.String str17 = builder9.getmongoLocalUser();
        builder9.settypeName("concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test8269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8269");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str9 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str10 = mongoDBRiverDefinition1.statisticsIndexName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exclude_fields" + "'", str7, "exclude_fields");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8270");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isAdvancedTransformation();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.getExcludeFields();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "db" + "'", str6, "db");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl_verify_certificate" + "'", str7, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test8271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8271");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str7 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getNAME_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "name" + "'", str7, "name");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "name" + "'", str9, "name");
    }

    @Test
    public void test8272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8272");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoAdminUser("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder5.mongoSecondaryReadPreference(true);
        builder5.setstatisticsTypeName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str25 = serializedObjectSupporter24.deserializeObjectString7();
        java.lang.String str26 = serializedObjectSupporter24.deserializeObjectString11();
        java.lang.String str27 = serializedObjectSupporter24.deserializeObjectString3();
        java.lang.String str28 = serializedObjectSupporter24.deserializeObjectString18();
        java.lang.String str29 = serializedObjectSupporter24.deserializeObjectString7();
        builder5.serializedObjectSupporter = serializedObjectSupporter24;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb-1638820218326" + "'", str25, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb-1638820218387" + "'", str26, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb-1638820218264" + "'", str27, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_river" + "'", str28, "_river");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb-1638820218326" + "'", str29, "mongodb-1638820218326");
    }

    @Test
    public void test8273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8273");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoOplogFilter();
        builder0.setthrottleSize((int) (short) 1);
        boolean boolean7 = builder0.mongoUseSSL;
        java.lang.String str8 = builder0.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.socketTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject11 = builder0.getmongoCollectionFilter();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
    }

    @Test
    public void test8274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8274");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str8 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "drop_collection" + "'", str8, "drop_collection");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "drop_collection" + "'", str10, "drop_collection");
    }

    @Test
    public void test8275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8275");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.riverIndexName("secondary_read_preference");
        builder13.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoLocalUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.disableIndexRefresh(true);
        builder13.setmongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.skipInitialImport(false);
        builder13.setscript("import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test8276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8276");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition1.statisticsIndexName;
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.excludeFields;
        org.elasticsearch.common.logging.ESLogger eSLogger7 = mongoDBRiverDefinition1.getlogger();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoLocalPassword();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(eSLogger7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test8277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8277");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) true);
        builder5.setindexName("script.default_lang");
        builder5.mongoDb = "actions";
        boolean boolean19 = builder5.mongoUseSSL;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test8278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8278");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.getstatisticsIndexName();
        java.lang.String str4 = builder2.typeName;
        java.lang.String str5 = builder2.getmongoAdminPassword();
        java.lang.String str6 = builder2.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.script("store_statistics");
        java.lang.String str9 = builder8.statisticsTypeName;
        java.lang.String str10 = builder8.getriverIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8279");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        int int6 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str7 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.initialTimestamp;
        boolean boolean11 = mongoDBRiverDefinition1.isDropCollection();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_timeout" + "'", str7, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8280");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter2.deserializeObjectString12();
        java.lang.String str6 = serializedObjectSupporter2.deserializeObjectString10();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter2.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("throttle_size", "mongodb-1638820218387", riverSettings7, scriptService8);
        java.lang.String str10 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "credentials" + "'", str10, "credentials");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
    }

    @Test
    public void test8281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8281");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        boolean boolean21 = builder20.dropCollection;
        builder20.setriverName("collection");
        builder20.mongoGridFS = true;
        java.lang.String str26 = builder20.getmongoAdminPassword();
        boolean boolean27 = builder20.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.skipInitialImport(true);
        builder29.setmongoCollection("null.null");
        boolean boolean32 = builder29.getmongoUseSSL();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test8282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8282");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("concurrent_requests", "connect_timeout");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?connect_timeout?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test8283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8283");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        org.elasticsearch.common.logging.ESLogger eSLogger4 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str5 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoCollectionFilter;
        boolean boolean8 = mongoDBRiverDefinition1.mongoGridFS;
        int int9 = mongoDBRiverDefinition1.throttleSize;
        int int10 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(eSLogger4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "socket_timeout" + "'", str5, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000);
    }

    @Test
    public void test8284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8284");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 0);
        java.lang.String str7 = builder6.getscript();
        builder6.setmongoAdminPassword("mongodb-1638820218408");
        boolean boolean10 = builder6.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "store_statistics" + "'", str7, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test8285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8285");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str9 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str10 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script_type" + "'", str7, "script_type");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flush_interval" + "'", str10, "flush_interval");
    }

    @Test
    public void test8286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8286");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder13.mongoCollection = "";
        builder13.statisticsIndexName = "localhost";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test8287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8287");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str8 = mongoDBRiverDefinition1.indexName;
        java.lang.String str9 = mongoDBRiverDefinition1.getIncludeCollection();
        boolean boolean10 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str11 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str12 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getSIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "filter" + "'", str12, "filter");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "size" + "'", str13, "size");
    }

    @Test
    public void test8288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8288");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.includeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str15 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition1.getMongoClientOptions();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "skip_initial_import" + "'", str11, "skip_initial_import");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script_type" + "'", str15, "script_type");
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test8289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8289");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder6.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder6.setmongoOplogFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory43 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        com.mongodb.BasicDBObject basicDBObject48 = builder47.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript49 = docScoreNativeScriptFactory43.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        builder6.mongoCollectionFilter = basicDBObject48;
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        org.elasticsearch.common.settings.Settings settings52 = riverSettings51.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = riverSettings51.settings();
        org.elasticsearch.script.ScriptService scriptService54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("is_mongos", "mongodb-1638820218408", riverSettings51, scriptService54);
        java.lang.String str56 = mongoDBRiverDefinition55.getDEFAULT_DB_HOST();
        java.lang.String str57 = mongoDBRiverDefinition55.getNAME_FIELD();
        java.lang.String str58 = mongoDBRiverDefinition55.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(executableScript49);
        org.junit.Assert.assertNull(settings52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "localhost" + "'", str56, "localhost");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "name" + "'", str57, "name");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "initial_timestamp" + "'", str58, "initial_timestamp");
    }

    @Test
    public void test8290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8290");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        builder9.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoDb("throttle_size");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test8291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8291");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str4 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.getstoreStatistics();
        boolean boolean6 = mongoDBRiverDefinition1.mongoUseSSL;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "exclude_fields" + "'", str4, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test8292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8292");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString14();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218264" + "'", str3, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218363" + "'", str4, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test8293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8293");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.storeStatistics = false;
        builder5.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder14.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder14.setmongoOplogFilter(basicDBObject17);
        builder14.statisticsIndexName = "socket_timeout";
        java.lang.String str21 = builder14.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder14.skipInitialImport(false);
        java.lang.String str24 = builder14.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        com.mongodb.BasicDBObject basicDBObject29 = null;
        builder28.setmongoOplogFilter(basicDBObject29);
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder28.setmongoOplogFilter(basicDBObject31);
        boolean boolean33 = builder28.mongoGridFS;
        java.lang.String[] strArray76 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder28.includeFields((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet77);
        java.util.List<com.mongodb.ServerAddress> serverAddressList81 = builder14.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder5.mongoServers(serverAddressList81);
        builder82.setmongoGridFS(true);
        builder82.statisticsTypeName = "sandbox";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(serverAddressList81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test8294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8294");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.storeStatistics(true);
        int int16 = builder3.connectTimeout;
        builder3.setmongoLocalUser("size");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter19 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str20 = serializedObjectSupporter19.deserializeObjectString4();
        java.lang.String str21 = serializedObjectSupporter19.deserializeObjectString15();
        java.lang.String str22 = serializedObjectSupporter19.deserializeObjectString1();
        java.lang.String str23 = serializedObjectSupporter19.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings24 = serializedObjectSupporter19.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings25 = riverSettings24.globalSettings();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = builder26.build();
        java.lang.String str28 = mongoDBRiverDefinition27.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet29 = mongoDBRiverDefinition27.parentTypes;
        boolean boolean30 = mongoDBRiverDefinition27.isStoreStatistics();
        boolean boolean31 = mongoDBRiverDefinition27.dropCollection;
        java.lang.String str32 = mongoDBRiverDefinition27.getCOLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject33 = mongoDBRiverDefinition27.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings34 = new org.elasticsearch.river.RiverSettings(settings25, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder3.mongoOplogFilter(basicDBObject33);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_river" + "'", str20, "_river");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb-1638820218424" + "'", str21, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb-1638820217755" + "'", str22, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "mongodb-1638820218449" + "'", str23, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "index" + "'", str28, "index");
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "collection" + "'", str32, "collection");
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test8295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8295");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        java.util.Set<java.lang.String> strSet5 = builder2.getparentTypes();
        builder2.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder2.throttleSize((int) (byte) 100);
        builder2.setindexName("socket_timeout");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test8296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8296");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        boolean boolean8 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str9 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoAdminPassword();
        int int12 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean13 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(byteSizeValue7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null.null" + "'", str14, "null.null");
    }

    @Test
    public void test8297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8297");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str7 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str9 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "throttle_size" + "'", str7, "throttle_size");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "localhost" + "'", str8, "localhost");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
    }

    @Test
    public void test8298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8298");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        java.util.Set<java.lang.String> strSet5 = builder2.getparentTypes();
        builder2.throttleSize = 'a';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder2.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.disableIndexRefresh(false);
        builder17.setthrottleSize((int) ' ');
        java.lang.String str20 = builder17.getriverName();
        builder17.connectTimeout = 100;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet24 = builder23.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.mongoLocalUser("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.script("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        builder29.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter35 = builder29.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        builder29.mongoClientOptions = mongoClientOptions36;
        builder29.settypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder29.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean43 = builder42.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder42.script("bulk");
        com.mongodb.BasicDBObject basicDBObject46 = null;
        builder45.setmongoOplogFilter(basicDBObject46);
        com.mongodb.BasicDBObject basicDBObject48 = null;
        builder45.setmongoOplogFilter(basicDBObject48);
        java.lang.String str50 = builder45.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean52 = builder51.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder51.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoAdminUser("socket_timeout");
        java.lang.String str57 = builder56.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder56.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject60 = builder56.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder45.mongoCollectionFilter(basicDBObject60);
        builder61.riverName = "mongodb-1638820218264";
        builder61.mongoGridFS = true;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter68 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str69 = serializedObjectSupporter68.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings70 = serializedObjectSupporter68.deserializeObjectRiverSettings4();
        java.lang.String str71 = serializedObjectSupporter68.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings72 = serializedObjectSupporter68.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService73 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition74 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings72, scriptService73);
        java.lang.String str75 = mongoDBRiverDefinition74.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions76 = mongoDBRiverDefinition74.mongoClientOptions;
        builder61.mongoClientOptions = mongoClientOptions76;
        builder29.setmongoClientOptions(mongoClientOptions76);
        builder26.setmongoClientOptions(mongoClientOptions76);
        builder17.setmongoClientOptions(mongoClientOptions76);
        builder11.setmongoClientOptions(mongoClientOptions76);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(serializedObjectSupporter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "mongodb-1638820218326" + "'", str69, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "mongodb-1638820218326" + "'", str71, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings72);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "mycollection" + "'", str75, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions76);
    }

    @Test
    public void test8299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getIncludeCollection();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str13 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test8300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8300");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str9 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str11 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getMongoLocalUser();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index" + "'", str10, "index");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondary_read_preference" + "'", str11, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test8301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8301");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        java.lang.String str14 = builder3.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder18.setmongoOplogFilter(basicDBObject19);
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder18.setmongoOplogFilter(basicDBObject21);
        builder18.statisticsIndexName = "socket_timeout";
        java.lang.String str25 = builder18.riverIndexName;
        boolean boolean26 = builder18.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder18.dropCollection(true);
        builder18.skipInitialImport = true;
        boolean boolean31 = builder18.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = builder32.build();
        java.lang.String str34 = mongoDBRiverDefinition33.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet35 = mongoDBRiverDefinition33.parentTypes;
        boolean boolean36 = mongoDBRiverDefinition33.isStoreStatistics();
        boolean boolean37 = mongoDBRiverDefinition33.dropCollection;
        java.lang.String str38 = mongoDBRiverDefinition33.getCOLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject39 = mongoDBRiverDefinition33.getMongoCollectionFilter();
        builder18.mongoCollectionFilter = basicDBObject39;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = builder41.build();
        com.mongodb.BasicDBObject basicDBObject43 = builder41.getmongoCollectionFilter();
        builder18.setmongoCollectionFilter(basicDBObject43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder3.mongoCollectionFilter(basicDBObject43);
        java.lang.String str46 = builder3.scriptType;
        builder3.mongoSSLVerifyCertificate = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "index" + "'", str34, "index");
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "collection" + "'", str38, "collection");
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition42);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test8302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8302");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        int int6 = mongoDBRiverDefinition1.socketTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.dropCollection;
        java.lang.Boolean boolean9 = mongoDBRiverDefinition1.getisMongos();
        int int10 = mongoDBRiverDefinition1.socketTimeout;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "admin" + "'", str7, "admin");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test8303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8303");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.getRiverName();
        int int14 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        org.elasticsearch.common.logging.ESLogger eSLogger15 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str16 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str17 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition1.getDB_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 60000 + "'", int14 == 60000);
        org.junit.Assert.assertNotNull(eSLogger15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "is_mongos" + "'", str17, "is_mongos");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "db" + "'", str18, "db");
    }

    @Test
    public void test8304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8304");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.excludeFields;
        boolean boolean7 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str8 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger9 = mongoDBRiverDefinition1.getlogger();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition1.mongoClientOptions;
        java.lang.String str11 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "store_statistics" + "'", str8, "store_statistics");
        org.junit.Assert.assertNotNull(eSLogger9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_collection" + "'", str11, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8305");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        int int9 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.mongoLocalPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.script("store_statistics");
        java.lang.String str15 = builder12.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder21.setmongoOplogFilter(basicDBObject22);
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder21.setmongoOplogFilter(basicDBObject24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("bulk");
        builder29.skipInitialImport = false;
        builder29.setscriptType("script");
        java.lang.String[] strArray51 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder29.excludeFields((java.util.Set<java.lang.String>) strSet52);
        builder21.setexcludeFields((java.util.Set<java.lang.String>) strSet52);
        builder12.setexcludeFields((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        com.mongodb.BasicDBObject basicDBObject58 = builder57.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.riverName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.indexName("socket_timeout");
        boolean boolean63 = builder60.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = builder64.build();
        java.lang.String str66 = mongoDBRiverDefinition65.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet67 = mongoDBRiverDefinition65.parentTypes;
        boolean boolean68 = mongoDBRiverDefinition65.isStoreStatistics();
        boolean boolean69 = mongoDBRiverDefinition65.importAllCollections;
        java.lang.String str70 = mongoDBRiverDefinition65.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject71 = mongoDBRiverDefinition65.getMongoCollectionFilter();
        int int72 = mongoDBRiverDefinition65.getDEFAULT_SOCKET_TIMEOUT();
        com.mongodb.BasicDBObject basicDBObject73 = mongoDBRiverDefinition65.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder60.mongoOplogFilter(basicDBObject73);
        java.lang.String str75 = builder74.gettypeName();
        java.lang.String str76 = builder74.getmongoDb();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "store_statistics" + "'", str15, "store_statistics");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(basicDBObject58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "index" + "'", str66, "index");
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 60000 + "'", int72 == 60000);
        org.junit.Assert.assertNotNull(basicDBObject73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test8306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8306");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        builder13.setdropCollection(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test8307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8307");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoDb("admin");
        builder19.isMongos = false;
        builder19.setsocketTimeout((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test8308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8308");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString7();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString17();
        java.lang.String str12 = serializedObjectSupporter9.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter9.deserializeObjectRiverSettings1();
        java.lang.String str14 = serializedObjectSupporter9.deserializeObjectString10();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter9;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_bulk_requests" + "'", str8, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218326" + "'", str10, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820218449" + "'", str11, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218299" + "'", str12, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_river" + "'", str14, "_river");
    }

    @Test
    public void test8309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8309");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString15();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218424" + "'", str4, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218424" + "'", str6, "mongodb-1638820218424");
    }

    @Test
    public void test8310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8310");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        builder5.typeName = "socket_timeout";
        builder5.mongoAdminPassword = "filter";
        builder5.setmongoAdminPassword("mydatabase");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test8311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8311");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getBULK_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "type" + "'", str5, "type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "import_all_collections" + "'", str6, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk" + "'", str7, "bulk");
    }

    @Test
    public void test8312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8312");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.riverIndexName("hi!");
        java.lang.String str8 = builder3.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder3.includeCollection("script");
        builder3.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder3.script("gridfs");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test8313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8313");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        int int4 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str5 = mongoDBRiverDefinition1.includeCollection;
        boolean boolean6 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str7 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "exclude_fields" + "'", str3, "exclude_fields");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 60000 + "'", int4 == 60000);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "password" + "'", str7, "password");
    }

    @Test
    public void test8314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8314");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.getMongoServers();
        int int8 = mongoDBRiverDefinition1.throttleSize;
        int int9 = mongoDBRiverDefinition1.getThrottleSize();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 60000 + "'", int10 == 60000);
    }

    @Test
    public void test8315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8315");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) true);
        builder5.setindexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder5.disableIndexRefresh(false);
        builder5.setmongoAdminUser("mongodb-1638820218326");
        builder5.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.script("bulk");
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder26.setmongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.riverIndexName("hi!");
        builder26.setstatisticsIndexName("concurrent_requests");
        builder26.riverName = "concurrent_bulk_requests";
        java.lang.String str35 = builder26.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder26.statisticsTypeName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder41.setmongoOplogFilter(basicDBObject42);
        com.mongodb.BasicDBObject basicDBObject44 = null;
        builder41.setmongoOplogFilter(basicDBObject44);
        builder41.statisticsIndexName = "socket_timeout";
        java.lang.String str48 = builder41.riverIndexName;
        boolean boolean49 = builder41.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder41.dropCollection(true);
        boolean boolean52 = builder51.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean54 = builder53.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder53.script("bulk");
        builder53.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder53.connectTimeout((int) (byte) 10);
        builder53.disableIndexRefresh = true;
        boolean boolean63 = builder53.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean65 = builder64.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder64.script("bulk");
        builder67.skipInitialImport = false;
        builder67.setscriptType("script");
        java.lang.String[] strArray89 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder67.excludeFields((java.util.Set<java.lang.String>) strSet90);
        builder53.setparentTypes((java.util.Set<java.lang.String>) strSet90);
        builder51.parentTypes = strSet90;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder37.includeFields((java.util.Set<java.lang.String>) strSet90);
        builder5.excludeFields = strSet90;
        builder5.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test8316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8316");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalPassword;
        boolean boolean8 = mongoDBRiverDefinition1.skipInitialImport;
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test8317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8317");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        com.mongodb.BasicDBObject basicDBObject2 = builder0.getmongoCollectionFilter();
        builder0.indexName = "import_all_collections";
        java.util.Set<java.lang.String> strSet5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.parentTypes(strSet5);
        boolean boolean7 = builder6.mongoGridFS;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(basicDBObject2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test8318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8318");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder3.socketTimeout(1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test8319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8319");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str9 = mongoDBRiverDefinition1.getPORT_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoDb;
        boolean boolean12 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str13 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str14 = mongoDBRiverDefinition1.getTYPE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "port" + "'", str9, "port");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "type" + "'", str14, "type");
    }

    @Test
    public void test8320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8320");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        int int12 = mongoDBRiverDefinition1.connectTimeout;
        boolean boolean13 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.Boolean boolean15 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str16 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str17 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition1.getMongoDb();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null.null" + "'", str16, "null.null");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "actions" + "'", str17, "actions");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test8321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8321");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.socketTimeout = (byte) -1;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder5.mongoClientOptions;
        org.bson.types.BSONTimestamp bSONTimestamp10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.initialTimestamp(bSONTimestamp10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(mongoClientOptions9);
    }

    @Test
    public void test8322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8322");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.excludeFields;
        boolean boolean7 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "db" + "'", str9, "db");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disable_index_refresh" + "'", str10, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ssl_verify_certificate" + "'", str11, "ssl_verify_certificate");
    }

    @Test
    public void test8323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8323");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        int int8 = builder5.connectTimeout;
        java.lang.String[] strArray55 = new java.lang.String[] { "type", "index", "", "db", "null.null", "_river", "mongodb-1638820217755", "mongodb-1638820218449", "local", "script.default_lang", "bulk_size", "host", "size", ".scripts", "secondary_read_preference", "script", "script_type", "mongodb-1638820218424", "script", "bulk_timeout", "collection", "mongodb-1638820218424", "initial_timestamp", "skip_initial_import", "", "port", "initial_timestamp", "mongodb-1638820217755", ".scripts", "index", "password", ".scripts", "flush_interval", "is_mongos", "ssl_verify_certificate", "servers", "localhost", "script.disable_dynamic", "ssl_verify_certificate", "bulk", "connect_timeout", "mongodb-1638820218449", "", "skip_initial_import", "mongodb-1638820218449", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder5.parentTypes((java.util.Set<java.lang.String>) strSet56);
        java.lang.String str59 = builder5.getscriptType();
        builder5.socketTimeout = 8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder5.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp64 = builder63.initialTimestamp;
        java.lang.String str65 = builder63.riverIndexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(wildcardTimestamp64);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test8324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8324");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        builder39.mongoSecondaryReadPreference = false;
        builder39.setriverIndexName("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.disableIndexRefresh(false);
        java.lang.String str48 = builder47.mongoLocalPassword;
        java.util.Set<java.lang.String> strSet49 = builder47.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder47.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test8325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8325");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition1.getlogger();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.parentTypes;
        java.lang.Boolean boolean7 = mongoDBRiverDefinition1.isMongos();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test8326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        boolean boolean21 = builder20.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.statisticsIndexName("throttle_size");
        java.util.Set<java.lang.String> strSet24 = builder20.getincludeFields();
        builder20.disableIndexRefresh = true;
        java.lang.String str27 = builder20.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.storeStatistics(false);
        boolean boolean30 = builder29.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test8327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8327");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        int int6 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsTypeName;
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition1.getMongoOplogFilter();
        java.lang.String str10 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "db" + "'", str10, "db");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "credentials" + "'", str11, "credentials");
    }

    @Test
    public void test8328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8328");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str6 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.Boolean boolean8 = mongoDBRiverDefinition1.isMongos;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "advanced_transformation" + "'", str6, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "collection" + "'", str7, "collection");
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test8329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8329");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        int int8 = builder5.connectTimeout;
        java.lang.String str9 = builder5.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoLocalPassword("include_collection");
        boolean boolean12 = builder5.dropCollection;
        java.lang.String str13 = builder5.typeName;
        builder5.isMongos = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test8330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8330");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder0.mongoAdminUser;
        java.lang.String str7 = builder0.getmongoAdminUser();
        int int8 = builder0.connectTimeout;
        builder0.statisticsTypeName = "db";
        java.lang.String str11 = builder0.mongoAdminPassword;
        int int12 = builder0.socketTimeout;
        builder0.dropCollection = false;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder0.mongoClientOptions;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(mongoClientOptions15);
    }

    @Test
    public void test8331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8331");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        int int6 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean8 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str11 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_requests" + "'", str9, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "options" + "'", str11, "options");
    }

    @Test
    public void test8332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8332");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean8 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str9 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoAdminPassword;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "db" + "'", str9, "db");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test8333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8333");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoSSLVerifyCertificate(true);
        boolean boolean34 = builder31.advancedTransformation;
        boolean boolean35 = builder31.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        java.lang.String str37 = mongoDBRiverDefinition36.getEXCLUDE_FIELDS_FIELD();
        int int38 = mongoDBRiverDefinition36.getDEFAULT_DB_PORT();
        java.lang.String str39 = mongoDBRiverDefinition36.getTYPE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "exclude_fields" + "'", str37, "exclude_fields");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 27017 + "'", int38 == 27017);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "type" + "'", str39, "type");
    }

    @Test
    public void test8334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8334");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str9 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str11 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.indexName;
        int int13 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 27017 + "'", int13 == 27017);
    }

    @Test
    public void test8335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8335");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.Boolean boolean12 = mongoDBRiverDefinition1.getisMongos();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test8336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8336");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getScriptType();
        boolean boolean8 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean10 = mongoDBRiverDefinition1.isMongoGridFS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = mongoDBRiverDefinition1.initialTimestamp;
        boolean boolean12 = mongoDBRiverDefinition1.getskipInitialImport();
        boolean boolean13 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test8337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8337");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("password");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?password?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test8338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8338");
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean6 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.script("bulk");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder8.setmongoOplogFilter(basicDBObject9);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        builder8.setmongoOplogFilter(basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean14 = builder13.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("bulk");
        builder16.skipInitialImport = false;
        builder16.setscriptType("script");
        java.lang.String[] strArray38 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder16.excludeFields((java.util.Set<java.lang.String>) strSet39);
        builder8.setexcludeFields((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder8.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory45 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean47 = builder46.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.script("bulk");
        com.mongodb.BasicDBObject basicDBObject50 = builder49.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript51 = docScoreNativeScriptFactory45.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        builder8.mongoCollectionFilter = basicDBObject50;
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.common.settings.Settings settings54 = riverSettings53.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap55 = riverSettings53.settings();
        org.elasticsearch.script.ScriptService scriptService56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("is_mongos", "mongodb-1638820218408", riverSettings53, scriptService56);
        org.elasticsearch.script.ScriptService scriptService58 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("parent_types", "actions", riverSettings53, scriptService58);
        boolean boolean60 = mongoDBRiverDefinition59.skipInitialImport;
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(basicDBObject50);
        org.junit.Assert.assertNotNull(executableScript51);
        org.junit.Assert.assertNull(settings54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition57);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test8339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8339");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder9.setmongoCollection("advanced_transformation");
        boolean boolean12 = builder9.getdropCollection();
        boolean boolean13 = builder9.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet15 = builder14.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.mongoLocalUser("credentials");
        java.lang.String str18 = builder17.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder22.setmongoOplogFilter(basicDBObject23);
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder22.setmongoOplogFilter(basicDBObject25);
        builder22.statisticsIndexName = "socket_timeout";
        builder22.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean32 = builder31.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.script("bulk");
        com.mongodb.BasicDBObject basicDBObject35 = null;
        builder34.setmongoOplogFilter(basicDBObject35);
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder34.setmongoOplogFilter(basicDBObject37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean40 = builder39.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder39.script("bulk");
        builder42.skipInitialImport = false;
        builder42.setscriptType("script");
        java.lang.String[] strArray64 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder42.excludeFields((java.util.Set<java.lang.String>) strSet65);
        builder34.setexcludeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder22.includeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder17.excludeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet65);
        builder9.storeStatistics = false;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp74 = builder9.getinitialTimestamp();
        java.lang.String str75 = builder9.riverName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(wildcardTimestamp74);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test8340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8340");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str10 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
    }

    @Test
    public void test8341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8341");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        java.lang.String str7 = builder5.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoCollection("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.disableIndexRefresh(false);
        java.lang.String str16 = builder15.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet17 = builder15.excludeFields;
        java.lang.String str18 = builder15.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.disableIndexRefresh(false);
        builder24.setthrottleSize((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean28 = builder27.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.script("bulk");
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder30.setmongoOplogFilter(basicDBObject31);
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder30.setmongoOplogFilter(basicDBObject33);
        boolean boolean35 = builder30.mongoGridFS;
        java.lang.String[] strArray78 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder30.includeFields((java.util.Set<java.lang.String>) strSet79);
        builder24.setincludeFields((java.util.Set<java.lang.String>) strSet79);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet79);
        builder84.statisticsIndexName = "";
        builder84.setscript("exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test8342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8342");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.mongoDb("bulk_timeout");
        java.lang.String str44 = builder43.getincludeCollection();
        java.lang.String str45 = builder43.statisticsIndexName;
        boolean boolean46 = builder43.disableIndexRefresh;
        builder43.connectTimeout = 60000;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test8343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8343");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean8 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition1.getScriptType();
        boolean boolean10 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean11 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        boolean boolean12 = mongoDBRiverDefinition1.dropCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "servers" + "'", str5, "servers");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8344");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString10();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
    }

    @Test
    public void test8345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8345");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str6 = mongoDBRiverDefinition1.getUSER_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "user" + "'", str6, "user");
    }

    @Test
    public void test8346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8346");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        int int55 = builder54.throttleSize;
        builder54.mongoSecondaryReadPreference = false;
        java.util.Set<java.lang.String> strSet58 = builder54.getexcludeFields();
        com.mongodb.BasicDBObject basicDBObject59 = builder54.mongoOplogFilter;
        builder54.dropCollection = true;
        boolean boolean62 = builder54.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder54.mongoDb("servers");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertNull(basicDBObject59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test8347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8347");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        boolean boolean11 = mongoDBRiverDefinition1.isMongoGridFS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8348");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.riverIndexName("socket_timeout");
        java.lang.String str10 = builder3.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        boolean boolean12 = mongoDBRiverDefinition11.isMongoGridFS();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8349");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder9.throttleSize = (byte) 10;
        boolean boolean12 = builder9.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.riverIndexName("ssl_verify_certificate");
        builder14.importAllCollections = false;
        java.lang.String str17 = builder14.mongoAdminUser;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test8350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8350");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.includeFields;
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        org.elasticsearch.common.unit.TimeValue timeValue8 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean9 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test8351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8351");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        java.lang.String str7 = builder5.getstatisticsIndexName();
        boolean boolean8 = builder5.getmongoGridFS();
        java.lang.String str9 = builder5.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.storeStatistics(true);
        boolean boolean12 = builder5.mongoSSLVerifyCertificate;
        java.lang.String str13 = builder5.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.riverIndexName("user");
        builder5.scriptType = "mydatabase";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test8352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8352");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean10 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str12 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "null.null" + "'", str12, "null.null");
    }

    @Test
    public void test8353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8353");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        builder3.riverName = "bulk";
        java.util.Set<java.lang.String> strSet44 = builder3.getparentTypes();
        builder3.mongoSSLVerifyCertificate = false;
        java.lang.String str47 = builder3.getmongoDb();
        builder3.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test8354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8354");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test8355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8355");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.indexName;
        java.lang.String str14 = mongoDBRiverDefinition1.getScriptType();
        int int15 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str17 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition1.getNAME_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "actions" + "'", str17, "actions");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "name" + "'", str18, "name");
    }

    @Test
    public void test8356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8356");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str4 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ssl" + "'", str4, "ssl");
    }

    @Test
    public void test8357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8357");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = builder15.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition16.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue18 = mongoDBRiverDefinition16.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean19 = mongoDBRiverDefinition16.dropCollection;
        boolean boolean20 = mongoDBRiverDefinition16.getmongoSecondaryReadPreference();
        boolean boolean21 = mongoDBRiverDefinition16.isMongoSecondaryReadPreference();
        int int22 = mongoDBRiverDefinition16.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp23 = mongoDBRiverDefinition16.getInitialTimestamp();
        java.lang.String str24 = mongoDBRiverDefinition16.getMongoDb();
        java.lang.String str25 = mongoDBRiverDefinition16.riverIndexName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = mongoDBRiverDefinition16.getMongoServers();
        builder13.mongoServers = serverAddressList26;
        java.lang.String str28 = builder13.getmongoDb();
        builder13.isMongos = true;
        int int31 = builder13.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder13.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 27017 + "'", int22 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test8358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8358");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoAdminUser("advanced_transformation");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter20 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str21 = serializedObjectSupporter20.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings22 = serializedObjectSupporter20.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter20.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings24 = serializedObjectSupporter20.deserializeObjectRiverSettings9();
        builder5.serializedObjectSupporter = serializedObjectSupporter20;
        builder5.mongoSecondaryReadPreference = false;
        builder5.includeCollection = "mongodb-1638820218408";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_river" + "'", str21, "_river");
        org.junit.Assert.assertNotNull(riverSettings22);
        org.junit.Assert.assertNotNull(riverSettings23);
        org.junit.Assert.assertNotNull(riverSettings24);
    }

    @Test
    public void test8359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8359");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.storeStatistics;
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.getExcludeFields();
        java.lang.String str7 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "script_type" + "'", str3, "script_type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "advanced_transformation" + "'", str4, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "collection" + "'", str7, "collection");
    }

    @Test
    public void test8360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8360");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.riverIndexName("socket_timeout");
        java.lang.String str10 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.advancedTransformation(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder9.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.riverIndexName("mongodb-1638820218408");
        java.lang.String str16 = builder15.includeCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test8361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8361");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean6 = mongoDBRiverDefinition1.isDropCollection();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue9 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str10 = mongoDBRiverDefinition1.getScript();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test8362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8362");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.getskipInitialImport();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test8363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoUseSSL();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test8364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8364");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        boolean boolean21 = builder20.dropCollection;
        builder20.setriverName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.importAllCollections(true);
        boolean boolean26 = builder25.importAllCollections;
        com.mongodb.BasicDBObject basicDBObject27 = builder25.getmongoCollectionFilter();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(basicDBObject27);
    }

    @Test
    public void test8365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8365");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.storeStatistics(true);
        java.lang.String str15 = builder14.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.throttleSize(1000);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test8366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8366");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        int int6 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str7 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "password" + "'", str7, "password");
    }

    @Test
    public void test8367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8367");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str13 = mongoDBRiverDefinition1.getTypeName();
        boolean boolean14 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str15 = mongoDBRiverDefinition1.getScript();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition1.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(basicDBObject16);
    }

    @Test
    public void test8368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8368");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str6 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str9 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "parent_types" + "'", str9, "parent_types");
    }

    @Test
    public void test8369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8369");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoAdminUser("advanced_transformation");
        builder5.mongoCollection = "mongodb-1638820218264";
        boolean boolean22 = builder5.mongoSecondaryReadPreference;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test8370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8370");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.lang.Boolean boolean11 = mongoDBRiverDefinition1.getisMongos();
        org.elasticsearch.common.logging.ESLogger eSLogger12 = mongoDBRiverDefinition1.getlogger();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(eSLogger12);
    }

    @Test
    public void test8371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8371");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.common.settings.Settings settings3 = riverSettings2.globalSettings();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean5 = builder4.getdropCollection();
        java.lang.String str6 = builder4.getscript();
        boolean boolean7 = builder4.dropCollection;
        builder4.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory10 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        com.mongodb.BasicDBObject basicDBObject15 = builder14.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder4.mongoOplogFilter(basicDBObject15);
        builder4.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder4.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject22 = builder21.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.BasicDBObject basicDBObject25 = builder24.mongoOplogFilter;
        org.elasticsearch.river.RiverSettings riverSettings26 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject25);
        java.lang.Class<?> wildcardClass27 = riverSettings26.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test8372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8372");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean2 = builder1.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.disableIndexRefresh(false);
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder11.setmongoOplogFilter(basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder11.setmongoOplogFilter(basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.script("bulk");
        builder19.skipInitialImport = false;
        builder19.setscriptType("script");
        java.lang.String[] strArray41 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet42);
        builder11.setexcludeFields((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder11.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder11.riverIndexName("bulk_timeout");
        builder11.riverName = "bulk";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder11.mongoLocalUser("_river");
        builder53.mongoDb = "credentials";
        java.lang.String str56 = builder53.getmongoDb();
        int int57 = builder53.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = builder58.build();
        java.lang.String str60 = mongoDBRiverDefinition59.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet61 = mongoDBRiverDefinition59.parentTypes;
        boolean boolean62 = mongoDBRiverDefinition59.isStoreStatistics();
        boolean boolean63 = mongoDBRiverDefinition59.importAllCollections;
        boolean boolean64 = mongoDBRiverDefinition59.isDropCollection();
        boolean boolean65 = mongoDBRiverDefinition59.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet66 = mongoDBRiverDefinition59.includeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList67 = mongoDBRiverDefinition59.mongoServers;
        builder53.mongoServers = serverAddressList67;
        java.lang.Object obj69 = docScoreSearchScript0.unwrap((java.lang.Object) serverAddressList67);
        docScoreSearchScript0.setNextScore((-1.0f));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "credentials" + "'", str56, "credentials");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "index" + "'", str60, "index");
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertNotNull(serverAddressList67);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "[]");
    }

    @Test
    public void test8373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8373");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.connectTimeout((int) (short) 1);
        boolean boolean9 = builder5.skipInitialImport;
        java.lang.String str10 = builder5.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.advancedTransformation(true);
        builder12.statisticsTypeName = "ssl_verify_certificate";
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = builder12.getmongoServers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressList15);
    }

    @Test
    public void test8374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8374");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.riverName;
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "null.null" + "'", str10, "null.null");
    }

    @Test
    public void test8375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8375");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getstatisticsIndexName();
        int int13 = builder5.getthrottleSize();
        com.mongodb.BasicDBObject basicDBObject14 = builder5.getmongoCollectionFilter();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
        org.junit.Assert.assertNotNull(basicDBObject14);
    }

    @Test
    public void test8376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8376");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.statisticsTypeName("");
        boolean boolean11 = builder6.getskipInitialImport();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder6.riverIndexName("password");
        int int16 = builder6.throttleSize;
        builder6.setmongoLocalPassword("mongodb-1638820218299");
        builder6.mongoLocalUser = "host";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test8377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8377");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setmongoAdminUser("bulk");
        builder5.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoLocalPassword("disable_index_refresh");
        builder11.setdropCollection(true);
        builder11.setriverName("disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test8378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8378");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        java.lang.String str12 = builder11.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoLocalPassword("mongodb-1638820218424");
        boolean boolean15 = builder14.dropCollection;
        builder14.mongoAdminPassword = "";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8379");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString17();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218424" + "'", str5, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218449" + "'", str7, "mongodb-1638820218449");
    }

    @Test
    public void test8380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8380");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        com.mongodb.BasicDBObject basicDBObject7 = builder5.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.connectTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder13.setmongoOplogFilter(basicDBObject14);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder13.setmongoOplogFilter(basicDBObject16);
        builder13.statisticsIndexName = "socket_timeout";
        java.lang.String str20 = builder13.riverIndexName;
        boolean boolean21 = builder13.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.dropCollection(true);
        builder23.mongoAdminPassword = "_river";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = builder26.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = mongoDBRiverDefinition27.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue29 = mongoDBRiverDefinition27.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean30 = mongoDBRiverDefinition27.dropCollection;
        boolean boolean31 = mongoDBRiverDefinition27.isMongoSecondaryReadPreference();
        java.lang.String str32 = mongoDBRiverDefinition27.getStatisticsTypeName();
        java.lang.String str33 = mongoDBRiverDefinition27.getMongoLocalPassword();
        java.lang.String str34 = mongoDBRiverDefinition27.getCONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet35 = mongoDBRiverDefinition27.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject36 = mongoDBRiverDefinition27.mongoCollectionFilter;
        builder23.setmongoCollectionFilter(basicDBObject36);
        builder9.mongoOplogFilter = basicDBObject36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder9.statisticsIndexName("concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "connect_timeout" + "'", str34, "connect_timeout");
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test8381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8381");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean2 = builder1.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.disableIndexRefresh(false);
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        java.lang.String str10 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition9.parentTypes;
        boolean boolean12 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean13 = mongoDBRiverDefinition9.dropCollection;
        java.lang.String str14 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.Object obj16 = docScoreSearchScript0.unwrap((java.lang.Object) str15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoAdminUser("socket_timeout");
        java.lang.String str24 = builder23.riverName;
        com.mongodb.BasicDBObject basicDBObject25 = builder23.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.includeCollection("disable_index_refresh");
        java.lang.String str28 = builder27.mongoAdminPassword;
        docScoreSearchScript0.setNextVar("password", (java.lang.Object) builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean32 = builder31.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder31.disableIndexRefresh(false);
        int int37 = builder31.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.dropCollection(true);
        java.util.Set<java.lang.String> strSet40 = builder31.getparentTypes();
        builder31.setscriptType("gridfs");
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.script("store_statistics");
        java.lang.String str47 = builder46.mongoCollection;
        java.lang.String str48 = builder46.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.mongoGridFS(false);
        builder50.scriptType = "flush_interval";
        boolean boolean53 = builder50.storeStatistics;
        builder50.socketTimeout = 27017;
        builder50.setscriptType("mongodb-1638820218264");
        java.lang.Object obj58 = docScoreSearchScript0.unwrap((java.lang.Object) "mongodb-1638820218264");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index" + "'", str10, "index");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "throttle_size" + "'", obj16, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + "mongodb-1638820218264" + "'", obj58, "mongodb-1638820218264");
    }

    @Test
    public void test8382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8382");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition1.getlogger();
        boolean boolean6 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str8 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str10 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_bulk_requests" + "'", str8, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "credentials" + "'", str10, "credentials");
    }

    @Test
    public void test8383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8383");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
    }

    @Test
    public void test8384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8384");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.riverIndexName("socket_timeout");
        java.lang.String str10 = builder9.mongoLocalPassword;
        builder9.setmongoGridFS(false);
        java.lang.String str13 = builder9.getstatisticsTypeName();
        builder9.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.mongoLocalPassword("store_statistics");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test8385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8385");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str10 = mongoDBRiverDefinition1.riverName;
        java.lang.String str11 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition1.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "actions" + "'", str7, "actions");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "parent_types" + "'", str8, "parent_types");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "port" + "'", str11, "port");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "gridfs" + "'", str12, "gridfs");
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test8386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8386");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str10 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str12 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "servers" + "'", str12, "servers");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
    }

    @Test
    public void test8387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.getPORT_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition1.mongoClientOptions;
        com.mongodb.MongoClientOptions mongoClientOptions9 = mongoDBRiverDefinition1.mongoClientOptions;
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoCollection;
        boolean boolean12 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "port" + "'", str7, "port");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8388");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.storeStatistics(true);
        java.lang.String str15 = builder14.mongoDb;
        builder14.setimportAllCollections(false);
        boolean boolean18 = builder14.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.mongoGridFS(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test8389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8389");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        java.lang.String str7 = builder5.getstatisticsIndexName();
        boolean boolean8 = builder5.getmongoGridFS();
        java.lang.String str9 = builder5.scriptType;
        builder5.statisticsIndexName = "mongodb-1638820218387";
        builder5.setthrottleSize(30000);
        java.lang.String str14 = builder5.getriverIndexName();
        boolean boolean15 = builder5.mongoSecondaryReadPreference;
        builder5.setstatisticsTypeName("sandbox");
        builder5.setisMongos((java.lang.Boolean) true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8390");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder11.setmongoOplogFilter(basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder11.setmongoOplogFilter(basicDBObject14);
        boolean boolean16 = builder11.mongoGridFS;
        java.lang.String[] strArray59 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder11.includeFields((java.util.Set<java.lang.String>) strSet60);
        builder5.setincludeFields((java.util.Set<java.lang.String>) strSet60);
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder5.getmongoClientOptions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(mongoClientOptions64);
    }

    @Test
    public void test8391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8391");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminUser();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str10 = mongoDBRiverDefinition1.getSIZE_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        int int12 = mongoDBRiverDefinition1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 30000 + "'", int9 == 30000);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "size" + "'", str10, "size");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test8392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8392");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        java.util.Set<java.lang.String> strSet6 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) (short) 0);
        builder8.statisticsTypeName = "include_collection";
        builder8.settypeName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean14 = builder13.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.disableIndexRefresh(false);
        builder18.setthrottleSize((int) ' ');
        boolean boolean21 = builder18.getadvancedTransformation();
        java.lang.String str22 = builder18.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter23 = null;
        builder18.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str25 = builder18.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder18.isMongos((java.lang.Boolean) true);
        builder18.setindexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder18.disableIndexRefresh(false);
        builder18.setmongoAdminUser("mongodb-1638820218326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean35 = builder34.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.script("bulk");
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder37.setmongoOplogFilter(basicDBObject38);
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder37.setmongoOplogFilter(basicDBObject40);
        builder37.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder37.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.throttleSize((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.mongoSSLVerifyCertificate(false);
        builder49.storeStatistics = true;
        builder49.setmongoCollection("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean55 = builder54.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.script("bulk");
        builder57.skipInitialImport = false;
        builder57.setscriptType("script");
        java.lang.String[] strArray79 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder57.excludeFields((java.util.Set<java.lang.String>) strSet80);
        builder57.setscript("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition86 = builder85.build();
        java.lang.String str87 = mongoDBRiverDefinition86.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet88 = mongoDBRiverDefinition86.parentTypes;
        java.lang.String str89 = mongoDBRiverDefinition86.riverName;
        boolean boolean90 = mongoDBRiverDefinition86.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList91 = mongoDBRiverDefinition86.mongoServers;
        builder57.mongoServers = serverAddressList91;
        builder57.mongoLocalPassword = "disable_index_refresh";
        java.util.Set<java.lang.String> strSet95 = builder57.parentTypes;
        java.util.Set<java.lang.String> strSet96 = builder57.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder97 = builder49.includeFields(strSet96);
        builder18.excludeFields = strSet96;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder99 = builder8.includeFields(strSet96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "index" + "'", str87, "index");
        org.junit.Assert.assertNull(strSet88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(serverAddressList91);
        org.junit.Assert.assertNull(strSet95);
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test8393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8393");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        boolean boolean8 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "disable_index_refresh" + "'", str9, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000);
    }

    @Test
    public void test8394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8394");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.statisticsIndexName;
        int int7 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 30000 + "'", int7 == 30000);
    }

    @Test
    public void test8395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8395");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        java.lang.String str2 = builder0.getstatisticsIndexName();
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test8396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8396");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.mongoLocalPassword;
        int int9 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "type" + "'", str5, "type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "is_mongos" + "'", str6, "is_mongos");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondary_read_preference" + "'", str7, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
    }

    @Test
    public void test8397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8397");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString14();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218264" + "'", str4, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings5);
    }

    @Test
    public void test8398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8398");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue8 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition1.mongoOplogFilter;
        int int10 = mongoDBRiverDefinition1.socketTimeout;
        java.lang.String str11 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.Boolean boolean13 = mongoDBRiverDefinition1.isMongos;
        java.lang.String str14 = mongoDBRiverDefinition1.riverName;
        java.lang.String str15 = mongoDBRiverDefinition1.mongoCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index" + "'", str12, "index");
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test8399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8399");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean2 = builder1.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.disableIndexRefresh(false);
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.disableIndexRefresh(false);
        java.lang.String str14 = builder13.getstatisticsTypeName();
        builder13.setmongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.common.settings.Settings settings18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder22.setmongoOplogFilter(basicDBObject23);
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder22.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean28 = builder27.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.script("bulk");
        builder30.skipInitialImport = false;
        builder30.setscriptType("script");
        java.lang.String[] strArray52 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder30.excludeFields((java.util.Set<java.lang.String>) strSet53);
        builder22.setexcludeFields((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder22.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory59 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean61 = builder60.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder60.script("bulk");
        com.mongodb.BasicDBObject basicDBObject64 = builder63.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript65 = docScoreNativeScriptFactory59.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject64);
        builder22.mongoCollectionFilter = basicDBObject64;
        org.elasticsearch.river.RiverSettings riverSettings67 = new org.elasticsearch.river.RiverSettings(settings18, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject64);
        org.elasticsearch.river.RiverSettings riverSettings68 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject64);
        builder13.mongoOplogFilter = basicDBObject64;
        builder13.throttleSize = '#';
        java.lang.Object obj72 = docScoreSearchScript0.unwrap((java.lang.Object) builder13);
        builder13.scriptType = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder13.isMongos((java.lang.Boolean) true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(basicDBObject64);
        org.junit.Assert.assertNotNull(executableScript65);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test8400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8400");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.riverName;
        java.lang.String str11 = mongoDBRiverDefinition1.getTYPE_FIELD();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition1.getMongoOplogFilter();
        java.lang.String str13 = mongoDBRiverDefinition1.typeName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "type" + "'", str11, "type");
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test8401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8401");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.indexName = "script.default_lang";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder15.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.script("bulk");
        builder23.skipInitialImport = false;
        builder23.setscriptType("script");
        java.lang.String[] strArray45 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder23.excludeFields((java.util.Set<java.lang.String>) strSet46);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean51 = builder50.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.script("bulk");
        builder50.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean57 = builder56.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder56.script("bulk");
        builder59.skipInitialImport = false;
        builder59.setscriptType("script");
        java.lang.String[] strArray81 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder59.excludeFields((java.util.Set<java.lang.String>) strSet82);
        builder50.setparentTypes((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder15.includeFields((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder5.excludeFields((java.util.Set<java.lang.String>) strSet82);
        java.util.Set<java.lang.String> strSet88 = builder87.getparentTypes();
        java.util.List<com.mongodb.ServerAddress> serverAddressList89 = builder87.getmongoServers();
        int int90 = builder87.getthrottleSize();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(strSet88);
        org.junit.Assert.assertNotNull(serverAddressList89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test8402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8402");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.getRiverName();
        int int14 = mongoDBRiverDefinition1.getSocketTimeout();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition1.getMongoOplogFilter();
        boolean boolean16 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test8403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8403");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.connectTimeout(30000);
        java.lang.String str14 = builder11.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.typeName("mongodb-1638820218387");
        builder11.mongoCollection = "script.default_lang";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.disableIndexRefresh(false);
        java.lang.String str25 = builder19.mongoAdminUser;
        boolean boolean26 = builder19.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = builder27.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList29 = mongoDBRiverDefinition28.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue30 = mongoDBRiverDefinition28.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean31 = mongoDBRiverDefinition28.dropCollection;
        java.lang.String str32 = mongoDBRiverDefinition28.getDB_FIELD();
        java.lang.String str33 = mongoDBRiverDefinition28.getMongoCollection();
        java.lang.String str34 = mongoDBRiverDefinition28.getCONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet35 = mongoDBRiverDefinition28.getIncludeFields();
        java.lang.String str36 = mongoDBRiverDefinition28.getPORT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = mongoDBRiverDefinition28.mongoServers;
        builder19.mongoServers = serverAddressList37;
        builder11.setmongoServers(serverAddressList37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder11.typeName("sandbox");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition28);
        org.junit.Assert.assertNotNull(serverAddressList29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "db" + "'", str32, "db");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "connect_timeout" + "'", str34, "connect_timeout");
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "port" + "'", str36, "port");
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test8404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8404");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        boolean boolean23 = builder5.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder5.connectTimeout((int) 'a');
        java.lang.String str26 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder5.socketTimeout((int) (short) 100);
        java.lang.String str29 = builder5.getmongoLocalPassword();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test8405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8405");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        boolean boolean6 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder3.mongoUseSSL(false);
        java.lang.String str9 = builder3.getmongoCollection();
        boolean boolean10 = builder3.getmongoSSLVerifyCertificate();
        java.lang.Class<?> wildcardClass11 = builder3.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test8406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8406");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        docScoreSearchScript0.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter37 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str38 = serializedObjectSupporter37.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings39 = serializedObjectSupporter37.deserializeObjectRiverSettings3();
        java.lang.String str40 = serializedObjectSupporter37.deserializeObjectString2();
        java.lang.Object obj41 = docScoreSearchScript0.unwrap((java.lang.Object) serializedObjectSupporter37);
        java.lang.String str42 = serializedObjectSupporter37.deserializeObjectString8();
        java.lang.String str43 = serializedObjectSupporter37.deserializeObjectString14();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "_river" + "'", str38, "_river");
        org.junit.Assert.assertNotNull(riverSettings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "_river" + "'", str40, "_river");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "_river" + "'", str42, "_river");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "_river" + "'", str43, "_river");
    }

    @Test
    public void test8407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8407");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        builder39.mongoSecondaryReadPreference = false;
        builder39.setriverIndexName("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = builder48.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList50 = mongoDBRiverDefinition49.mongoServers;
        java.lang.String str51 = mongoDBRiverDefinition49.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet52 = mongoDBRiverDefinition49.getParentTypes();
        int int53 = mongoDBRiverDefinition49.throttleSize;
        java.lang.Boolean boolean54 = mongoDBRiverDefinition49.getisMongos();
        java.lang.String str55 = mongoDBRiverDefinition49.getPORT_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter56 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str57 = serializedObjectSupporter56.deserializeObjectString4();
        java.lang.String str58 = serializedObjectSupporter56.deserializeObjectString15();
        java.lang.String str59 = serializedObjectSupporter56.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings60 = serializedObjectSupporter56.deserializeObjectRiverSettings1();
        mongoDBRiverDefinition49.serializedObjectSupporter = serializedObjectSupporter56;
        java.lang.String str62 = serializedObjectSupporter56.deserializeObjectString4();
        builder47.serializedObjectSupporter = serializedObjectSupporter56;
        java.lang.String str64 = serializedObjectSupporter56.deserializeObjectString2();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition49);
        org.junit.Assert.assertNotNull(serverAddressList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "bulk_timeout" + "'", str51, "bulk_timeout");
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(boolean54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "port" + "'", str55, "port");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "_river" + "'", str57, "_river");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "mongodb-1638820218424" + "'", str58, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "_river" + "'", str59, "_river");
        org.junit.Assert.assertNotNull(riverSettings60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_river" + "'", str62, "_river");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_river" + "'", str64, "_river");
    }

    @Test
    public void test8408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8408");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
    }

    @Test
    public void test8409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8409");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        java.util.Set<java.lang.String> strSet9 = builder0.getparentTypes();
        builder0.setscriptType("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.socketTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.script("store_statistics");
        java.lang.String str17 = builder16.mongoCollection;
        java.lang.String str18 = builder16.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoGridFS(false);
        java.util.Set<java.lang.String> strSet21 = builder20.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder25.setmongoOplogFilter(basicDBObject26);
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder25.setmongoOplogFilter(basicDBObject28);
        builder25.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder25.initialTimestamp;
        builder25.setmongoAdminUser("concurrent_requests");
        builder25.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean38 = builder37.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder37.disableIndexRefresh(false);
        java.lang.String str43 = builder42.getstatisticsTypeName();
        java.lang.String str44 = builder42.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder42.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean48 = builder47.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder47.script("bulk");
        com.mongodb.BasicDBObject basicDBObject51 = null;
        builder50.setmongoOplogFilter(basicDBObject51);
        com.mongodb.BasicDBObject basicDBObject53 = null;
        builder50.setmongoOplogFilter(basicDBObject53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean56 = builder55.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder55.script("bulk");
        builder58.skipInitialImport = false;
        builder58.setscriptType("script");
        java.lang.String[] strArray80 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder58.excludeFields((java.util.Set<java.lang.String>) strSet81);
        builder50.setexcludeFields((java.util.Set<java.lang.String>) strSet81);
        builder42.includeFields = strSet81;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder25.excludeFields((java.util.Set<java.lang.String>) strSet81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder20.excludeFields((java.util.Set<java.lang.String>) strSet81);
        builder13.setincludeFields((java.util.Set<java.lang.String>) strSet81);
        builder13.importAllCollections = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test8410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8410");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("type");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?type? ^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test8411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8411");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory40 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        builder3.mongoCollectionFilter = basicDBObject45;
        builder3.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder3.socketTimeout(0);
        java.util.Set<java.lang.String> strSet52 = builder3.getexcludeFields();
        boolean boolean53 = builder3.getstoreStatistics();
        builder3.socketTimeout = '#';
        boolean boolean56 = builder3.advancedTransformation;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test8412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8412");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("actions");
        builder20.typeName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        com.mongodb.BasicDBObject basicDBObject29 = null;
        builder28.setmongoOplogFilter(basicDBObject29);
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder28.setmongoOplogFilter(basicDBObject31);
        boolean boolean33 = builder28.mongoGridFS;
        builder28.settypeName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder39.setmongoOplogFilter(basicDBObject40);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder39.setmongoOplogFilter(basicDBObject42);
        boolean boolean44 = builder39.mongoGridFS;
        int int45 = builder39.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.mongoLocalPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.script("store_statistics");
        java.lang.String str51 = builder48.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder48.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean55 = builder54.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.script("bulk");
        com.mongodb.BasicDBObject basicDBObject58 = null;
        builder57.setmongoOplogFilter(basicDBObject58);
        com.mongodb.BasicDBObject basicDBObject60 = null;
        builder57.setmongoOplogFilter(basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean63 = builder62.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder62.script("bulk");
        builder65.skipInitialImport = false;
        builder65.setscriptType("script");
        java.lang.String[] strArray87 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet88 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet88, strArray87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder65.excludeFields((java.util.Set<java.lang.String>) strSet88);
        builder57.setexcludeFields((java.util.Set<java.lang.String>) strSet88);
        builder48.setexcludeFields((java.util.Set<java.lang.String>) strSet88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder39.includeFields((java.util.Set<java.lang.String>) strSet88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder20.includeFields((java.util.Set<java.lang.String>) strSet88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "store_statistics" + "'", str51, "store_statistics");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test8413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8413");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.skipInitialImport(false);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder16.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.isMongos((java.lang.Boolean) true);
        builder16.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = builder22.build();
        java.lang.String str24 = mongoDBRiverDefinition23.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet25 = mongoDBRiverDefinition23.parentTypes;
        java.lang.String str26 = mongoDBRiverDefinition23.riverName;
        boolean boolean27 = mongoDBRiverDefinition23.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = mongoDBRiverDefinition23.mongoServers;
        boolean boolean29 = mongoDBRiverDefinition23.isMongoUseSSL();
        boolean boolean30 = mongoDBRiverDefinition23.isImportAllCollections();
        java.util.List<com.mongodb.ServerAddress> serverAddressList31 = mongoDBRiverDefinition23.mongoServers;
        builder16.setmongoServers(serverAddressList31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str34 = mongoDBRiverDefinition33.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "index" + "'", str24, "index");
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serverAddressList31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "flush_interval" + "'", str34, "flush_interval");
    }

    @Test
    public void test8414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8414");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getRiverIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exclude_fields" + "'", str7, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk" + "'", str8, "bulk");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test8415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8415");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        builder13.setskipInitialImport(true);
        boolean boolean16 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoLocalUser("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.disableIndexRefresh(false);
        java.lang.String str25 = builder19.mongoAdminUser;
        java.lang.String str26 = builder19.getmongoAdminUser();
        int int27 = builder19.connectTimeout;
        int int28 = builder19.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder32.setmongoOplogFilter(basicDBObject33);
        com.mongodb.BasicDBObject basicDBObject35 = null;
        builder32.setmongoOplogFilter(basicDBObject35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean38 = builder37.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.script("bulk");
        builder40.skipInitialImport = false;
        builder40.setscriptType("script");
        java.lang.String[] strArray62 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder40.excludeFields((java.util.Set<java.lang.String>) strSet63);
        builder32.setexcludeFields((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder32.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder32.riverIndexName("bulk_timeout");
        builder32.riverName = "bulk";
        java.util.Set<java.lang.String> strSet73 = builder32.excludeFields;
        builder19.setparentTypes(strSet73);
        builder13.setincludeFields(strSet73);
        java.lang.String str76 = builder13.mongoAdminUser;
        builder13.mongoLocalUser = "type";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test8416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8416");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        java.lang.String str14 = builder3.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder3.indexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoCollection("type");
        java.lang.String str19 = builder18.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.indexName("script.disable_dynamic");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test8417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8417");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        boolean boolean7 = builder5.getmongoSSLVerifyCertificate();
        boolean boolean8 = builder5.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject9 = builder5.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoAdminUser("admin");
        builder11.setisMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.connectTimeout((-1));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test8418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8418");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.getNAME_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "exclude_fields" + "'", str13, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "name" + "'", str14, "name");
    }

    @Test
    public void test8419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8419");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder0.mongoAdminUser;
        java.lang.String str7 = builder0.getmongoAdminUser();
        int int8 = builder0.connectTimeout;
        int int9 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.includeCollection("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test8420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8420");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        int int12 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str13 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean14 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disable_index_refresh" + "'", str11, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "initial_timestamp" + "'", str13, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test8421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8421");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str9 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean11 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str12 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str13 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index" + "'", str10, "index");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script" + "'", str13, "script");
    }

    @Test
    public void test8422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8422");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        java.util.Set<java.lang.String> strSet9 = builder0.getparentTypes();
        builder0.setscriptType("gridfs");
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoClientOptions(mongoClientOptions12);
        builder13.statisticsIndexName = "bulk_size";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test8423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8423");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        boolean boolean9 = builder8.getadvancedTransformation();
        java.lang.String str10 = builder8.mongoLocalUser;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter11.deserializeObjectRiverSettings4();
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter11.deserializeObjectRiverSettings7();
        builder8.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter11.deserializeObjectRiverSettings4();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = serializedObjectSupporter11.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218449" + "'", str13, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218424" + "'", str16, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings17);
    }

    @Test
    public void test8424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setriverName("store_statistics");
        java.lang.String str12 = builder3.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder3.indexName("drop_collection");
        builder14.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoCollection("admin");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test8425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8425");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.includeFields;
        boolean boolean6 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str8 = mongoDBRiverDefinition1.getIncludeCollection();
        java.lang.String str9 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gridfs" + "'", str9, "gridfs");
    }

    @Test
    public void test8426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8426");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.riverName("script.disable_dynamic");
        boolean boolean9 = builder5.dropCollection;
        builder5.mongoLocalPassword = "name";
        java.util.Set<java.lang.String> strSet12 = builder5.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.mongoSecondaryReadPreference(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test8427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8427");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean6 = mongoDBRiverDefinition1.disableIndexRefresh;
        int int7 = mongoDBRiverDefinition1.getConnectTimeout();
        java.lang.String str8 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.advancedTransformation;
        int int11 = mongoDBRiverDefinition1.getThrottleSize();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "is_mongos" + "'", str8, "is_mongos");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test8428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8428");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean11 = mongoDBRiverDefinition1.getskipInitialImport();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.lang.String str13 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter14 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str15 = serializedObjectSupporter14.deserializeObjectString4();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter14.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter14.deserializeObjectRiverSettings2();
        java.lang.String str19 = serializedObjectSupporter14.deserializeObjectString6();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter14;
        java.lang.String str21 = serializedObjectSupporter14.deserializeObjectString3();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index" + "'", str13, "index");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218363" + "'", str16, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertNotNull(riverSettings18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_river" + "'", str19, "_river");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb-1638820218264" + "'", str21, "mongodb-1638820218264");
    }

    @Test
    public void test8429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8429");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean8 = mongoDBRiverDefinition1.disableIndexRefresh;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test8430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8430");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder3.riverName("admin");
        int int34 = builder33.getsocketTimeout();
        java.lang.String str35 = builder33.getstatisticsTypeName();
        builder33.advancedTransformation = false;
        java.lang.String str38 = builder33.getmongoLocalPassword();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test8431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8431");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        builder5.skipInitialImport = true;
        builder5.indexName = "ssl_verify_certificate";
        builder5.setmongoUseSSL(false);
        boolean boolean14 = builder5.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder5.mongoUseSSL(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test8432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8432");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str11 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str12 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str13 = mongoDBRiverDefinition1.getPORT_FIELD();
        boolean boolean14 = mongoDBRiverDefinition1.getskipInitialImport();
        boolean boolean15 = mongoDBRiverDefinition1.mongoGridFS;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "port" + "'", str13, "port");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8433");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.scriptType("type");
        java.lang.String str14 = builder3.getscriptType();
        builder3.connectTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder20.setmongoOplogFilter(basicDBObject21);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder20.setmongoOplogFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        builder28.skipInitialImport = false;
        builder28.setscriptType("script");
        java.lang.String[] strArray50 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder28.excludeFields((java.util.Set<java.lang.String>) strSet51);
        builder20.setexcludeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder20.throttleSize(100);
        builder20.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder20.statisticsTypeName("name");
        java.lang.String str61 = builder60.scriptType;
        builder60.setscriptType("hi!");
        builder60.setmongoLocalUser("mongodb-1638820218387");
        com.mongodb.BasicDBObject basicDBObject66 = builder60.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder3.mongoCollectionFilter(basicDBObject66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean69 = builder68.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder68.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder68.disableIndexRefresh(false);
        java.lang.String str74 = builder73.getstatisticsTypeName();
        java.lang.String str75 = builder73.riverName;
        builder73.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder73.connectTimeout(27017);
        boolean boolean80 = builder79.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder79.mongoSecondaryReadPreference(true);
        java.lang.String str83 = builder79.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition85 = builder84.build();
        java.lang.String str86 = mongoDBRiverDefinition85.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet87 = mongoDBRiverDefinition85.parentTypes;
        boolean boolean88 = mongoDBRiverDefinition85.isStoreStatistics();
        boolean boolean89 = mongoDBRiverDefinition85.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter90 = null;
        mongoDBRiverDefinition85.serializedObjectSupporter = serializedObjectSupporter90;
        java.lang.String str92 = mongoDBRiverDefinition85.getSOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList93 = mongoDBRiverDefinition85.getMongoServers();
        builder79.setmongoServers(serverAddressList93);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder67.mongoServers(serverAddressList93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "type" + "'", str14, "type");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "index" + "'", str86, "index");
        org.junit.Assert.assertNull(strSet87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "socket_timeout" + "'", str92, "socket_timeout");
        org.junit.Assert.assertNotNull(serverAddressList93);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test8434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8434");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str7 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isAdvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "throttle_size" + "'", str7, "throttle_size");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "credentials" + "'", str10, "credentials");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8435");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.setindexName("initial_timestamp");
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.disableIndexRefresh(false);
        java.lang.String str18 = builder17.getstatisticsTypeName();
        java.lang.String str19 = builder17.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.mongoAdminPassword("size");
        builder21.setmongoCollection("advanced_transformation");
        boolean boolean24 = builder21.getdropCollection();
        boolean boolean25 = builder21.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet27 = builder26.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.mongoLocalUser("credentials");
        java.lang.String str30 = builder29.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean32 = builder31.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.script("bulk");
        com.mongodb.BasicDBObject basicDBObject35 = null;
        builder34.setmongoOplogFilter(basicDBObject35);
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder34.setmongoOplogFilter(basicDBObject37);
        builder34.statisticsIndexName = "socket_timeout";
        builder34.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean44 = builder43.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.script("bulk");
        com.mongodb.BasicDBObject basicDBObject47 = null;
        builder46.setmongoOplogFilter(basicDBObject47);
        com.mongodb.BasicDBObject basicDBObject49 = null;
        builder46.setmongoOplogFilter(basicDBObject49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean52 = builder51.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder51.script("bulk");
        builder54.skipInitialImport = false;
        builder54.setscriptType("script");
        java.lang.String[] strArray76 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder54.excludeFields((java.util.Set<java.lang.String>) strSet77);
        builder46.setexcludeFields((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder34.includeFields((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder29.excludeFields((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder21.excludeFields((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet77);
        java.lang.String str85 = builder3.getmongoLocalUser();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test8436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8436");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218387" + "'", str3, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218363" + "'", str5, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218408" + "'", str7, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertNotNull(riverSettings10);
    }

    @Test
    public void test8437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8437");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name" + "'", str5, "name");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test8438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8438");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        java.lang.String str23 = builder22.getmongoCollection();
        builder22.throttleSize = 1000;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp26 = builder22.initialTimestamp;
        java.lang.String str27 = builder22.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean29 = builder28.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.disableIndexRefresh(false);
        java.lang.String str34 = builder28.getstatisticsTypeName();
        java.lang.String str35 = builder28.script;
        java.lang.String str36 = builder28.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean38 = builder37.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.script("bulk");
        builder37.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter43 = builder37.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions44 = null;
        builder37.mongoClientOptions = mongoClientOptions44;
        builder37.settypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder37.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean51 = builder50.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.script("bulk");
        com.mongodb.BasicDBObject basicDBObject54 = null;
        builder53.setmongoOplogFilter(basicDBObject54);
        com.mongodb.BasicDBObject basicDBObject56 = null;
        builder53.setmongoOplogFilter(basicDBObject56);
        java.lang.String str58 = builder53.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean60 = builder59.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder59.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.mongoAdminUser("socket_timeout");
        java.lang.String str65 = builder64.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder64.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject68 = builder64.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder53.mongoCollectionFilter(basicDBObject68);
        builder69.riverName = "mongodb-1638820218264";
        builder69.mongoGridFS = true;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter76 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str77 = serializedObjectSupporter76.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings78 = serializedObjectSupporter76.deserializeObjectRiverSettings4();
        java.lang.String str79 = serializedObjectSupporter76.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings80 = serializedObjectSupporter76.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService81 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings80, scriptService81);
        java.lang.String str83 = mongoDBRiverDefinition82.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions84 = mongoDBRiverDefinition82.mongoClientOptions;
        builder69.mongoClientOptions = mongoClientOptions84;
        builder37.setmongoClientOptions(mongoClientOptions84);
        builder28.setmongoClientOptions(mongoClientOptions84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder22.mongoClientOptions(mongoClientOptions84);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(wildcardTimestamp26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "bulk" + "'", str35, "bulk");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(serializedObjectSupporter43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(basicDBObject68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "mongodb-1638820218326" + "'", str77, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "mongodb-1638820218326" + "'", str79, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings80);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "mycollection" + "'", str83, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions84);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test8439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8439");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str14 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str17 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "filter" + "'", str14, "filter");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ssl_verify_certificate" + "'", str15, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "advanced_transformation" + "'", str17, "advanced_transformation");
    }

    @Test
    public void test8440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8440");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.socketTimeout = (byte) -1;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder2.mongoOplogFilter = basicDBObject5;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.typeName("");
        boolean boolean9 = builder8.getmongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject10 = builder8.getmongoOplogFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
    }

    @Test
    public void test8441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8441");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.throttleSize((int) (short) 10);
        boolean boolean6 = builder5.skipInitialImport;
        java.lang.String str7 = builder5.getscriptType();
        builder5.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoDb("_river");
        builder11.setmongoLocalUser("password");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter14 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str15 = serializedObjectSupporter14.deserializeObjectString4();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString9();
        java.lang.String str17 = serializedObjectSupporter14.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter14.deserializeObjectRiverSettings7();
        java.lang.String str19 = serializedObjectSupporter14.deserializeObjectString9();
        java.lang.String str20 = serializedObjectSupporter14.deserializeObjectString15();
        java.lang.String str21 = serializedObjectSupporter14.deserializeObjectString18();
        java.lang.String str22 = serializedObjectSupporter14.deserializeObjectString8();
        java.lang.String str23 = serializedObjectSupporter14.deserializeObjectString16();
        java.lang.String str24 = serializedObjectSupporter14.deserializeObjectString11();
        builder11.serializedObjectSupporter = serializedObjectSupporter14;
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218363" + "'", str16, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb-1638820218387" + "'", str17, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb-1638820218363" + "'", str19, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb-1638820218424" + "'", str20, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_river" + "'", str21, "_river");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_river" + "'", str22, "_river");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_river" + "'", str23, "_river");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "mongodb-1638820218387" + "'", str24, "mongodb-1638820218387");
    }

    @Test
    public void test8442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8442");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder5.skipInitialImport(false);
        java.lang.String str18 = builder5.typeName;
        builder5.advancedTransformation = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoAdminUser("mongodb-1638820218387");
        builder5.setisMongos((java.lang.Boolean) false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test8443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8443");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str11 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
    }

    @Test
    public void test8444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8444");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet7 = builder5.excludeFields;
        builder5.setisMongos((java.lang.Boolean) true);
        builder5.setconnectTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject12 = builder5.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.scriptType("concurrent_bulk_requests");
        builder14.setadvancedTransformation(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test8445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8445");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder38.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder47.skipInitialImport = false;
        builder47.setscriptType("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder47.excludeFields((java.util.Set<java.lang.String>) strSet70);
        builder38.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder3.includeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder3.throttleSize(1000);
        java.lang.Boolean boolean77 = builder76.getisMongos();
        java.lang.String str78 = builder76.mongoCollection;
        java.lang.Boolean boolean79 = builder76.getisMongos();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder76.scriptType("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder81.mongoCollection("filter");
        builder81.importAllCollections = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(boolean79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test8446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8446");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str5 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "connect_timeout" + "'", str5, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "advanced_transformation" + "'", str6, "advanced_transformation");
    }

    @Test
    public void test8447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8447");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        boolean boolean12 = builder11.dropCollection;
        builder11.setmongoLocalUser("admin");
        builder11.setdropCollection(false);
        int int17 = builder11.getthrottleSize();
        boolean boolean18 = builder11.getstoreStatistics();
        builder11.setthrottleSize((int) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder11.mongoLocalPassword("mongodb-1638820218387");
        builder22.mongoGridFS = true;
        builder22.disableIndexRefresh = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test8448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8448");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str4 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str6 = mongoDBRiverDefinition1.indexName;
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "exclude_fields" + "'", str4, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test8449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8449");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        builder19.setthrottleSize((int) ' ');
        boolean boolean22 = builder19.getadvancedTransformation();
        java.lang.String str23 = builder19.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = null;
        builder19.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str26 = builder19.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.isMongos((java.lang.Boolean) true);
        builder19.setindexName("script.default_lang");
        java.lang.String str31 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder19.getinitialTimestamp();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder19);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder39.setmongoOplogFilter(basicDBObject40);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder39.setmongoOplogFilter(basicDBObject42);
        boolean boolean44 = builder39.mongoGridFS;
        int int45 = builder39.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.mongoLocalPassword("include_fields");
        java.lang.String str48 = builder47.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = builder47.getinitialTimestamp();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = builder51.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList53 = mongoDBRiverDefinition52.mongoServers;
        java.lang.String str54 = mongoDBRiverDefinition52.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition52.getParentTypes();
        java.lang.Object obj56 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition52);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = builder61.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList63 = mongoDBRiverDefinition62.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue64 = mongoDBRiverDefinition62.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean65 = mongoDBRiverDefinition62.dropCollection;
        boolean boolean66 = mongoDBRiverDefinition62.isMongoSecondaryReadPreference();
        java.lang.String str67 = mongoDBRiverDefinition62.getStatisticsTypeName();
        java.lang.String str68 = mongoDBRiverDefinition62.getMongoLocalPassword();
        java.lang.String str69 = mongoDBRiverDefinition62.getIndexName();
        boolean boolean70 = mongoDBRiverDefinition62.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp71 = mongoDBRiverDefinition62.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter72 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition62.serializedObjectSupporter = serializedObjectSupporter72;
        java.lang.String str74 = mongoDBRiverDefinition62.getPARENT_TYPES_FIELD();
        java.lang.String str75 = mongoDBRiverDefinition62.getStatisticsIndexName();
        java.lang.Object obj76 = docScoreSearchScript0.unwrap((java.lang.Object) str75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition79 = builder78.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList80 = mongoDBRiverDefinition79.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue81 = mongoDBRiverDefinition79.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean82 = mongoDBRiverDefinition79.dropCollection;
        java.lang.String str83 = mongoDBRiverDefinition79.getDB_FIELD();
        java.lang.String str84 = mongoDBRiverDefinition79.getHOST_FIELD();
        boolean boolean85 = mongoDBRiverDefinition79.isMongoSecondaryReadPreference();
        java.lang.Boolean boolean86 = mongoDBRiverDefinition79.isMongos();
        docScoreSearchScript0.setNextVar("mycollection", (java.lang.Object) mongoDBRiverDefinition79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj88 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(wildcardTimestamp49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition52);
        org.junit.Assert.assertNotNull(serverAddressList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "bulk_timeout" + "'", str54, "bulk_timeout");
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition62);
        org.junit.Assert.assertNotNull(serverAddressList63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(wildcardTimestamp71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "parent_types" + "'", str74, "parent_types");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition79);
        org.junit.Assert.assertNotNull(serverAddressList80);
        org.junit.Assert.assertNotNull(timeValue81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "db" + "'", str83, "db");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "host" + "'", str84, "host");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(boolean86);
    }

    @Test
    public void test8450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8450");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder3.initialTimestamp;
        builder3.setadvancedTransformation(true);
        java.lang.String str13 = builder3.getindexName();
        java.lang.String str14 = builder3.getscript();
        boolean boolean15 = builder3.mongoUseSSL;
        builder3.indexName = "bulk_timeout";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk" + "'", str14, "bulk");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8451");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str10 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str11 = mongoDBRiverDefinition1.getRiverName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gridfs" + "'", str8, "gridfs");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test8452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8452");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        boolean boolean42 = builder41.getmongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject43 = builder41.mongoCollectionFilter;
        boolean boolean44 = builder41.getdisableIndexRefresh();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test8453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8453");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        docScoreSearchScript0.setNextScore((float) (short) 1);
        org.apache.lucene.search.Scorer scorer37 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test8454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8454");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = builder2.build();
        java.lang.String str4 = mongoDBRiverDefinition3.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition3.parentTypes;
        boolean boolean6 = mongoDBRiverDefinition3.isStoreStatistics();
        boolean boolean7 = mongoDBRiverDefinition3.dropCollection;
        java.lang.String str8 = mongoDBRiverDefinition3.scriptType;
        java.lang.String str9 = mongoDBRiverDefinition3.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition3.getSCRIPT_TYPE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition3.getINITIAL_TIMESTAMP_FIELD();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder12.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition13.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue15 = mongoDBRiverDefinition13.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean16 = mongoDBRiverDefinition13.dropCollection;
        boolean boolean17 = mongoDBRiverDefinition13.isMongoSecondaryReadPreference();
        java.lang.String str18 = mongoDBRiverDefinition13.getStatisticsTypeName();
        java.lang.String str19 = mongoDBRiverDefinition13.getMongoLocalPassword();
        java.lang.String str20 = mongoDBRiverDefinition13.getIndexName();
        boolean boolean21 = mongoDBRiverDefinition13.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = mongoDBRiverDefinition13.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter23 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition13.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str25 = serializedObjectSupporter23.deserializeObjectString5();
        java.lang.String str26 = serializedObjectSupporter23.deserializeObjectString17();
        java.lang.String str27 = serializedObjectSupporter23.deserializeObjectString13();
        mongoDBRiverDefinition3.serializedObjectSupporter = serializedObjectSupporter23;
        org.elasticsearch.river.RiverSettings riverSettings29 = serializedObjectSupporter23.deserializeObjectRiverSettings8();
        org.elasticsearch.script.ScriptService scriptService30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("type", "script.default_lang", riverSettings29, scriptService30);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardTimestamp22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb-1638820218299" + "'", str25, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb-1638820218449" + "'", str26, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb-1638820218408" + "'", str27, "mongodb-1638820218408");
        org.junit.Assert.assertNotNull(riverSettings29);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition31);
    }

    @Test
    public void test8455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8455");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str11 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str12 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.riverName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "servers" + "'", str9, "servers");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "bulk" + "'", str12, "bulk");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test8456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8456");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString17();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218424" + "'", str5, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218449" + "'", str6, "mongodb-1638820218449");
    }

    @Test
    public void test8457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8457");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        boolean boolean8 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str9 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str11 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "options" + "'", str9, "options");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disable_index_refresh" + "'", str11, "disable_index_refresh");
    }

    @Test
    public void test8458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8458");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder3.initialTimestamp;
        builder3.setthrottleSize((int) (byte) 0);
        builder3.setscript("servers");
        builder3.typeName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.scriptType("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.isMongos((java.lang.Boolean) false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test8459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8459");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        builder5.setmongoAdminUser(".scripts");
        java.lang.String str13 = builder5.mongoDb;
        boolean boolean14 = builder5.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test8460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8460");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean3 = mongoDBRiverDefinition1.mongoUseSSL;
        boolean boolean4 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str5 = mongoDBRiverDefinition1.getFILTER_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.mongoUseSSL;
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str8 = mongoDBRiverDefinition1.includeCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test8461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8461");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        java.lang.String str20 = builder19.getstatisticsTypeName();
        builder19.scriptType = "user";
        builder19.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("bulk");
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        builder19.setmongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder3.mongoOplogFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.statisticsIndexName("local");
        builder33.includeCollection = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder33.mongoSSLVerifyCertificate(true);
        boolean boolean42 = builder33.mongoUseSSL;
        java.lang.String str43 = builder33.getmongoLocalUser();
        boolean boolean44 = builder33.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test8462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8462");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str9 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getSIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "type" + "'", str5, "type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "is_mongos" + "'", str6, "is_mongos");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "initial_timestamp" + "'", str7, "initial_timestamp");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "disable_index_refresh" + "'", str9, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "size" + "'", str10, "size");
    }

    @Test
    public void test8463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8463");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setmongoAdminUser("bulk");
        builder5.isMongos = true;
        boolean boolean10 = builder5.importAllCollections;
        builder5.setindexName("socket_timeout");
        boolean boolean13 = builder5.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder14.build();
        com.mongodb.BasicDBObject basicDBObject16 = builder14.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder5.mongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.dropCollection(false);
        builder17.throttleSize = 2000;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test8464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8464");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        int int10 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str11 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.riverName;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition1.getParentTypes();
        boolean boolean15 = mongoDBRiverDefinition1.isAdvancedTransformation();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_collection" + "'", str11, "include_collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "name" + "'", str12, "name");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8465");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean7 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str8 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean11 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str12 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str13 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "flush_interval" + "'", str13, "flush_interval");
    }

    @Test
    public void test8466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8466");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getPORT_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        boolean boolean12 = mongoDBRiverDefinition1.mongoUseSSL;
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition1.parentTypes;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "port" + "'", str10, "port");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test8467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8467");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setmongoAdminUser("bulk");
        com.mongodb.BasicDBObject basicDBObject8 = builder5.getmongoCollectionFilter();
        builder5.mongoSSLVerifyCertificate = true;
        builder5.skipInitialImport = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(basicDBObject8);
    }

    @Test
    public void test8468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8468");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet7 = builder5.excludeFields;
        builder5.setisMongos((java.lang.Boolean) true);
        builder5.setconnectTimeout((int) 'a');
        java.util.Set<java.lang.String> strSet12 = builder5.getparentTypes();
        boolean boolean13 = builder5.getskipInitialImport();
        builder5.mongoGridFS = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test8469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8469");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getmongoAdminPassword();
        java.util.Set<java.lang.String> strSet5 = builder2.getexcludeFields();
        builder2.mongoAdminPassword = "bulk_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.skipInitialImport(true);
        boolean boolean12 = builder9.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet13 = builder9.getparentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test8470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8470");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218387" + "'", str3, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test8471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8471");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        java.lang.String str55 = builder3.mongoLocalPassword;
        builder3.setconnectTimeout((int) ' ');
        builder3.setthrottleSize((int) (byte) 100);
        java.lang.String str60 = builder3.typeName;
        builder3.setstatisticsIndexName("is_mongos");
        java.lang.String str63 = builder3.riverName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test8472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8472");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.throttleSize((int) (short) 100);
        java.lang.String str14 = builder13.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.socketTimeout(1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoLocalPassword("include_collection");
        java.lang.String str19 = builder18.getmongoAdminUser();
        builder18.setadvancedTransformation(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test8473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8473");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        boolean boolean42 = builder41.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.mongoDb("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder41.mongoGridFS(false);
        builder41.throttleSize = (byte) 0;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test8474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8474");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.getMongoServers();
        int int8 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean9 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str10 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "options" + "'", str10, "options");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "admin" + "'", str11, "admin");
    }

    @Test
    public void test8475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8475");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        int int6 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean8 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str9 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.riverIndexName;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.lang.String str13 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str14 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "options" + "'", str9, "options");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "null.null" + "'", str13, "null.null");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_fields" + "'", str14, "include_fields");
    }

    @Test
    public void test8476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8476");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        java.lang.String str32 = builder3.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder3.mongoCollection("mongodb-1638820217755");
        builder34.includeCollection = "servers";
        builder34.setisMongos((java.lang.Boolean) true);
        builder34.setsocketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder34.skipInitialImport(false);
        java.lang.String str43 = builder34.mongoDb;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test8477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8477");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218387" + "'", str3, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218408" + "'", str5, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218424" + "'", str7, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
    }

    @Test
    public void test8478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8478");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        builder5.skipInitialImport = true;
        builder5.indexName = "ssl_verify_certificate";
        builder5.setmongoUseSSL(false);
        builder5.skipInitialImport = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test8479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8479");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean7 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str8 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str10 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "password" + "'", str10, "password");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disable_index_refresh" + "'", str11, "disable_index_refresh");
    }

    @Test
    public void test8480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8480");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.getExcludeFields();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "exclude_fields" + "'", str6, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "actions" + "'", str7, "actions");
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test8481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8481");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean2 = builder1.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.script("bulk");
        com.mongodb.BasicDBObject basicDBObject5 = builder4.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = null;
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory0.newScript(strMap7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        org.elasticsearch.script.ExecutableScript executableScript10 = docScoreNativeScriptFactory0.newScript(strMap9);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(executableScript10);
    }

    @Test
    public void test8482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8482");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str16 = mongoDBRiverDefinition1.getMongoDb();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test8483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8483");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString4();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString15();
        java.lang.String str11 = serializedObjectSupporter8.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter8.deserializeObjectRiverSettings1();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter8;
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter8.deserializeObjectRiverSettings3();
        java.lang.String str15 = serializedObjectSupporter8.deserializeObjectString15();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "port" + "'", str7, "port");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218424" + "'", str10, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_river" + "'", str11, "_river");
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertNotNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218424" + "'", str15, "mongodb-1638820218424");
    }

    @Test
    public void test8484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8484");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) true);
        builder5.setindexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder5.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.statisticsTypeName("options");
        java.lang.String str21 = builder20.mongoAdminPassword;
        java.lang.Boolean boolean22 = builder20.isMongos;
        builder20.dropCollection = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + true + "'", boolean22, true);
    }

    @Test
    public void test8485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8485");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
    }

    @Test
    public void test8486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8486");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.riverIndexName("socket_timeout");
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder12.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition13.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue15 = mongoDBRiverDefinition13.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean16 = mongoDBRiverDefinition13.dropCollection;
        boolean boolean17 = mongoDBRiverDefinition13.isMongoSecondaryReadPreference();
        java.lang.String str18 = mongoDBRiverDefinition13.getStatisticsTypeName();
        java.lang.String str19 = mongoDBRiverDefinition13.getMongoLocalPassword();
        java.lang.String str20 = mongoDBRiverDefinition13.getIndexName();
        boolean boolean21 = mongoDBRiverDefinition13.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = mongoDBRiverDefinition13.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter23 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition13.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str25 = serializedObjectSupporter23.deserializeObjectString5();
        java.lang.String str26 = serializedObjectSupporter23.deserializeObjectString17();
        java.lang.String str27 = serializedObjectSupporter23.deserializeObjectString13();
        java.lang.String str28 = serializedObjectSupporter23.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings29 = serializedObjectSupporter23.deserializeObjectRiverSettings7();
        java.lang.String str30 = serializedObjectSupporter23.deserializeObjectString5();
        java.lang.String str31 = serializedObjectSupporter23.deserializeObjectString16();
        java.lang.String str32 = serializedObjectSupporter23.deserializeObjectString14();
        java.lang.String str33 = serializedObjectSupporter23.deserializeObjectString11();
        java.lang.String str34 = serializedObjectSupporter23.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings35 = serializedObjectSupporter23.deserializeObjectRiverSettings4();
        builder11.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str37 = serializedObjectSupporter23.deserializeObjectString1();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = serializedObjectSupporter23.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardTimestamp22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb-1638820218299" + "'", str25, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb-1638820218449" + "'", str26, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb-1638820218408" + "'", str27, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb-1638820218264" + "'", str28, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mongodb-1638820218299" + "'", str30, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "_river" + "'", str31, "_river");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_river" + "'", str32, "_river");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "mongodb-1638820218387" + "'", str33, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "_river" + "'", str34, "_river");
        org.junit.Assert.assertNotNull(riverSettings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "mongodb-1638820217755" + "'", str37, "mongodb-1638820217755");
    }

    @Test
    public void test8487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8487");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.indexName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk" + "'", str8, "bulk");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "initial_timestamp" + "'", str9, "initial_timestamp");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8488");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        int int55 = builder54.throttleSize;
        builder54.mongoSecondaryReadPreference = false;
        builder54.setconnectTimeout((int) (byte) 1);
        builder54.setimportAllCollections(true);
        int int62 = builder54.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder54.socketTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.riverIndexName("script.disable_dynamic");
        boolean boolean67 = builder64.getmongoGridFS();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test8489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8489");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition1.getMongoServers();
        int int10 = mongoDBRiverDefinition1.connectTimeout;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test8490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8490");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int4 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str5 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.mongoCollection;
        boolean boolean9 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str10 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "script_type" + "'", str3, "script_type");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index" + "'", str5, "index");
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk_size" + "'", str10, "bulk_size");
    }

    @Test
    public void test8491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8491");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder3.initialTimestamp;
        boolean boolean11 = builder3.getmongoSSLVerifyCertificate();
        boolean boolean12 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet13 = builder3.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        builder17.skipInitialImport = false;
        builder17.setscriptType("script");
        java.lang.String[] strArray39 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder17.excludeFields((java.util.Set<java.lang.String>) strSet40);
        java.lang.String str43 = builder42.getriverIndexName();
        java.lang.String str44 = builder42.getmongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter45 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str46 = serializedObjectSupporter45.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings47 = serializedObjectSupporter45.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings48 = serializedObjectSupporter45.deserializeObjectRiverSettings8();
        builder42.serializedObjectSupporter = serializedObjectSupporter45;
        org.elasticsearch.river.RiverSettings riverSettings50 = serializedObjectSupporter45.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings51 = serializedObjectSupporter45.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings52 = serializedObjectSupporter45.deserializeObjectRiverSettings5();
        java.lang.String str53 = serializedObjectSupporter45.deserializeObjectString6();
        java.lang.String str54 = serializedObjectSupporter45.deserializeObjectString1();
        builder3.serializedObjectSupporter = serializedObjectSupporter45;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "mongodb-1638820218326" + "'", str46, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings47);
        org.junit.Assert.assertNotNull(riverSettings48);
        org.junit.Assert.assertNotNull(riverSettings50);
        org.junit.Assert.assertNotNull(riverSettings51);
        org.junit.Assert.assertNotNull(riverSettings52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "_river" + "'", str53, "_river");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "mongodb-1638820217755" + "'", str54, "mongodb-1638820217755");
    }

    @Test
    public void test8492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8492");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        builder19.setthrottleSize((int) ' ');
        boolean boolean22 = builder19.getadvancedTransformation();
        java.lang.String str23 = builder19.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = null;
        builder19.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str26 = builder19.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.isMongos((java.lang.Boolean) true);
        builder19.setindexName("script.default_lang");
        java.lang.String str31 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder19.getinitialTimestamp();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder19);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder39.setmongoOplogFilter(basicDBObject40);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder39.setmongoOplogFilter(basicDBObject42);
        boolean boolean44 = builder39.mongoGridFS;
        int int45 = builder39.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.mongoLocalPassword("include_fields");
        java.lang.String str48 = builder47.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = builder47.getinitialTimestamp();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = builder51.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList53 = mongoDBRiverDefinition52.mongoServers;
        java.lang.String str54 = mongoDBRiverDefinition52.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition52.getParentTypes();
        java.lang.Object obj56 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean58 = builder57.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.script("bulk");
        com.mongodb.BasicDBObject basicDBObject61 = null;
        builder60.setmongoOplogFilter(basicDBObject61);
        com.mongodb.BasicDBObject basicDBObject63 = null;
        builder60.setmongoOplogFilter(basicDBObject63);
        builder60.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder60.throttleSize((int) (short) 0);
        boolean boolean69 = builder68.getmongoUseSSL();
        java.lang.String str70 = builder68.includeCollection;
        java.lang.String str71 = builder68.mongoAdminUser;
        java.lang.Object obj72 = docScoreSearchScript0.unwrap((java.lang.Object) builder68);
        builder68.indexName = "mycollection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder68.disableIndexRefresh(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(wildcardTimestamp49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition52);
        org.junit.Assert.assertNotNull(serverAddressList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "bulk_timeout" + "'", str54, "bulk_timeout");
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test8493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8493");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        boolean boolean12 = builder11.dropCollection;
        builder11.setmongoLocalUser("admin");
        builder11.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.indexName("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.mongoSecondaryReadPreference(false);
        java.lang.String str21 = builder20.getstatisticsTypeName();
        builder20.disableIndexRefresh = false;
        java.lang.String str24 = builder20.getindexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "host" + "'", str24, "host");
    }

    @Test
    public void test8494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8494");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str8 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        int int10 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str11 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "connect_timeout" + "'", str9, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8495");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString2();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218424" + "'", str4, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertNotNull(riverSettings9);
    }

    @Test
    public void test8496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8496");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean35 = builder34.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoAdminUser("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.throttleSize(27017);
        docScoreSearchScript0.setNextVar(".scripts", (java.lang.Object) builder39);
        docScoreSearchScript0.setNextScore((float) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = builder46.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList48 = mongoDBRiverDefinition47.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue49 = mongoDBRiverDefinition47.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean50 = mongoDBRiverDefinition47.dropCollection;
        boolean boolean51 = mongoDBRiverDefinition47.getmongoSecondaryReadPreference();
        boolean boolean52 = mongoDBRiverDefinition47.isMongoSecondaryReadPreference();
        int int53 = mongoDBRiverDefinition47.getDEFAULT_DB_PORT();
        java.lang.String str54 = mongoDBRiverDefinition47.getBULK_TIMEOUT_FIELD();
        int int55 = mongoDBRiverDefinition47.getDEFAULT_CONCURRENT_REQUESTS();
        com.mongodb.BasicDBObject basicDBObject56 = mongoDBRiverDefinition47.mongoCollectionFilter;
        java.lang.String str57 = mongoDBRiverDefinition47.getStatisticsIndexName();
        docScoreSearchScript0.setNextVar("user", (java.lang.Object) str57);
        docScoreSearchScript0.setNextScore((float) (-1));
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition47);
        org.junit.Assert.assertNotNull(serverAddressList48);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 27017 + "'", int53 == 27017);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "bulk_timeout" + "'", str54, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test8497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8497");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.indexName;
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminUser();
        java.lang.String str11 = mongoDBRiverDefinition1.getTypeName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test8498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8498");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 0);
        java.lang.String str7 = builder6.getstatisticsIndexName();
        com.mongodb.BasicDBObject basicDBObject8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoOplogFilter(basicDBObject8);
        builder9.mongoCollection = "drop_collection";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test8499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8499");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.getMongoServers();
        boolean boolean8 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str9 = mongoDBRiverDefinition1.mongoCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.lang.String str11 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str12 = mongoDBRiverDefinition1.getRiverName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test8500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8500");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.connectTimeout((int) (short) 1);
        boolean boolean9 = builder5.skipInitialImport;
        java.lang.String str10 = builder5.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("socket_timeout");
        java.lang.String str17 = builder16.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject20 = builder16.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder5.mongoOplogFilter(basicDBObject20);
        java.lang.String str22 = builder5.scriptType;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
    }
}

