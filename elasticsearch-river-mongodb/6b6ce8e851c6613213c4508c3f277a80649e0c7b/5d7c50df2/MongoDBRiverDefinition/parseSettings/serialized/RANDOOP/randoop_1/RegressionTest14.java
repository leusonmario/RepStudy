import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest14 {

    public static boolean debug = false;

    @Test
    public void test7001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7001");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition1.disableIndexRefresh;
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        boolean boolean9 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        boolean boolean10 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_collection" + "'", str11, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7002");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) true);
        java.lang.String str15 = builder5.riverIndexName;
        builder5.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoAdminUser("socket_timeout");
        java.lang.String[] strArray65 = new java.lang.String[] { "user", "gridfs", "socket_timeout", "socket_timeout", "exclude_fields", "bulk_timeout", "actions", "disable_index_refresh", "bulk_size", "size", "script.disable_dynamic", "size", "index", "concurrent_requests", "type", "", "concurrent_requests", "script_type", "initial_timestamp", "import_all_collections", "throttle_size", "skip_initial_import", "ssl_verify_certificate", "script", "name", "concurrent_requests", "port", "bulk", "options", "script.disable_dynamic", "size", "", "script.disable_dynamic", "user", "parent_types", "bulk_size", "initial_timestamp", ".scripts", "sandbox", "script", "include_fields" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder5.includeFields((java.util.Set<java.lang.String>) strSet66);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test7003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7003");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        builder19.setthrottleSize((int) ' ');
        boolean boolean22 = builder19.getadvancedTransformation();
        java.lang.String str23 = builder19.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = null;
        builder19.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str26 = builder19.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.isMongos((java.lang.Boolean) true);
        builder19.setindexName("script.default_lang");
        java.lang.String str31 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder19.getinitialTimestamp();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder19);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter36 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str37 = serializedObjectSupporter36.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings38 = serializedObjectSupporter36.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings39 = serializedObjectSupporter36.deserializeObjectRiverSettings8();
        java.lang.String str40 = serializedObjectSupporter36.deserializeObjectString15();
        java.lang.Object obj41 = docScoreSearchScript0.unwrap((java.lang.Object) serializedObjectSupporter36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean43 = builder42.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder42.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder42.disableIndexRefresh(false);
        int int48 = builder42.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder42.dropCollection(true);
        boolean boolean51 = builder50.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.socketTimeout(60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean55 = builder54.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.script("bulk");
        com.mongodb.BasicDBObject basicDBObject58 = null;
        builder57.setmongoOplogFilter(basicDBObject58);
        com.mongodb.BasicDBObject basicDBObject60 = null;
        builder57.setmongoOplogFilter(basicDBObject60);
        builder57.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp64 = builder57.initialTimestamp;
        builder57.setadvancedTransformation(true);
        builder57.typeName = "gridfs";
        java.lang.String str69 = builder57.getindexName();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter70 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str71 = serializedObjectSupporter70.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings72 = serializedObjectSupporter70.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings73 = riverSettings72.globalSettings();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory74 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter75 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str76 = serializedObjectSupporter75.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings77 = serializedObjectSupporter75.deserializeObjectRiverSettings3();
        java.util.Map<java.lang.String, java.lang.Object> strMap78 = riverSettings77.settings();
        org.elasticsearch.script.ExecutableScript executableScript79 = docScoreNativeScriptFactory74.newScript(strMap78);
        org.elasticsearch.river.RiverSettings riverSettings80 = new org.elasticsearch.river.RiverSettings(settings73, strMap78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder81.script("store_statistics");
        java.lang.String str84 = builder83.mongoCollection;
        java.lang.String str85 = builder83.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder83.mongoGridFS(false);
        com.mongodb.BasicDBObject basicDBObject88 = builder87.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings89 = new org.elasticsearch.river.RiverSettings(settings73, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        builder57.setmongoOplogFilter(basicDBObject88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder50.mongoOplogFilter(basicDBObject88);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "mongodb-1638820218326" + "'", str37, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings38);
        org.junit.Assert.assertNotNull(riverSettings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "mongodb-1638820218424" + "'", str40, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(wildcardTimestamp64);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "mongodb-1638820218326" + "'", str71, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_river" + "'", str76, "_river");
        org.junit.Assert.assertNotNull(riverSettings77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(executableScript79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(basicDBObject88);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test7004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7004");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.common.unit.TimeValue timeValue8 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str9 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str11 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "throttle_size" + "'", str11, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7005");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        boolean boolean12 = builder5.importAllCollections;
        builder5.mongoCollection = "advanced_transformation";
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.mongoClientOptions(mongoClientOptions15);
        builder5.setmongoLocalUser("include_fields");
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = builder5.getmongoServers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(serverAddressList19);
    }

    @Test
    public void test7006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7006");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition1.getlogger();
        boolean boolean6 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "null.null" + "'", str8, "null.null");
    }

    @Test
    public void test7007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7007");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder5.initialTimestamp;
        boolean boolean7 = builder5.getimportAllCollections();
        boolean boolean8 = builder5.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.riverIndexName("null.null");
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7008");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        org.elasticsearch.common.logging.ESLogger eSLogger4 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str5 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoCollectionFilter;
        boolean boolean8 = mongoDBRiverDefinition1.mongoGridFS;
        int int9 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str10 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str11 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(eSLogger4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "socket_timeout" + "'", str5, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "password" + "'", str11, "password");
    }

    @Test
    public void test7009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7009");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        boolean boolean12 = builder11.dropCollection;
        builder11.setmongoLocalUser("admin");
        builder11.setdropCollection(false);
        int int17 = builder11.getthrottleSize();
        builder11.advancedTransformation = true;
        builder11.mongoAdminUser = "skip_initial_import";
        java.lang.String str22 = builder11.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder11.dropCollection(false);
        boolean boolean25 = builder11.mongoGridFS;
        boolean boolean26 = builder11.mongoSecondaryReadPreference;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test7010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7010");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.getriverName();
        java.lang.String str10 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.dropCollection(false);
        builder12.mongoDb = "mongodb-1638820218424";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7011");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setscript("throttle_size");
        builder3.settypeName("concurrent_bulk_requests");
        java.lang.Boolean boolean42 = builder3.isMongos;
        java.lang.String str43 = builder3.getmongoLocalUser();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test7012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7012");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoAdminUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name" + "'", str5, "name");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "throttle_size" + "'", str6, "throttle_size");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test7013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7013");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoLocalUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test7014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7014");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        int int11 = mongoDBRiverDefinition1.getThrottleSize();
        int int12 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str13 = mongoDBRiverDefinition1.mongoLocalPassword;
        int int14 = mongoDBRiverDefinition1.socketTimeout;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test7015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7015");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        builder5.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean10 = builder9.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = null;
        builder9.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.mongoAdminPassword("options");
        boolean boolean17 = builder16.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        builder21.skipInitialImport = false;
        builder21.setscriptType("script");
        java.lang.String[] strArray43 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder21.excludeFields((java.util.Set<java.lang.String>) strSet44);
        builder16.setparentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder5.includeFields((java.util.Set<java.lang.String>) strSet44);
        boolean boolean49 = builder5.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder5.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder5.mongoAdminPassword("port");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test7016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7016");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        boolean boolean21 = builder20.dropCollection;
        builder20.setriverName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.riverIndexName("mongodb-1638820218326");
        builder25.setconnectTimeout((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test7017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7017");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder9.setmongoCollection("advanced_transformation");
        boolean boolean12 = builder9.getdropCollection();
        boolean boolean13 = builder9.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.mongoCollection("admin");
        builder9.setmongoSecondaryReadPreference(false);
        builder9.setthrottleSize(30000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.connectTimeout((int) '4');
        boolean boolean22 = builder21.skipInitialImport;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test7018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7018");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        builder0.disableIndexRefresh = true;
        boolean boolean10 = builder0.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.setmongoSSLVerifyCertificate(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test7019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7019");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        int int6 = mongoDBRiverDefinition1.getSocketTimeout();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str8 = mongoDBRiverDefinition1.getSIZE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoGridFS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "size" + "'", str8, "size");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7020");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean7 = builder6.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.script("bulk");
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder9.setmongoOplogFilter(basicDBObject10);
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder9.setmongoOplogFilter(basicDBObject12);
        builder9.statisticsIndexName = "socket_timeout";
        java.lang.String str16 = builder9.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder9.skipInitialImport(false);
        java.lang.String str19 = builder9.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.script("bulk");
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder23.setmongoOplogFilter(basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder23.setmongoOplogFilter(basicDBObject26);
        boolean boolean28 = builder23.mongoGridFS;
        java.lang.String[] strArray71 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder23.includeFields((java.util.Set<java.lang.String>) strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet72);
        java.util.List<com.mongodb.ServerAddress> serverAddressList76 = builder9.getmongoServers();
        boolean boolean77 = builder9.getskipInitialImport();
        builder9.script = "collection";
        builder9.scriptType = "parent_types";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter82 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str83 = serializedObjectSupporter82.deserializeObjectString4();
        java.lang.String str84 = serializedObjectSupporter82.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings85 = serializedObjectSupporter82.deserializeObjectRiverSettings2();
        builder9.serializedObjectSupporter = serializedObjectSupporter82;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter82;
        java.lang.String str88 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str89 = mongoDBRiverDefinition1.getScriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList90 = mongoDBRiverDefinition1.mongoServers;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(serverAddressList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "_river" + "'", str83, "_river");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "mongodb-1638820218363" + "'", str84, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "collection" + "'", str88, "collection");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(serverAddressList90);
    }

    @Test
    public void test7021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7021");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "actions" + "'", str7, "actions");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
    }

    @Test
    public void test7022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7022");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = builder0.mongoLocalPassword;
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        builder0.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("actions");
        boolean boolean8 = builder0.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7023");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray4 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList5 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList5, serverAddressArray4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder11.setmongoOplogFilter(basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder11.setmongoOplogFilter(basicDBObject14);
        builder11.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.throttleSize((int) (short) 0);
        builder11.connectTimeout = 27017;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder11.throttleSize(1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = builder23.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder0.mongoServers(serverAddressList24);
        boolean boolean26 = builder25.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.mongoAdminUser("mongodb-1638820218326");
        builder28.setconnectTimeout((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serverAddressArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test7024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7024");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.isMongos((java.lang.Boolean) false);
        builder9.throttleSize = (short) 100;
        builder9.mongoAdminUser = "local";
        builder9.setimportAllCollections(true);
        builder9.advancedTransformation = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7025");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.getExcludeFields();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str10 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.dropCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "advanced_transformation" + "'", str10, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7026");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder5.initialTimestamp;
        boolean boolean7 = builder5.getimportAllCollections();
        boolean boolean8 = builder5.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.script("store_statistics");
        builder13.setscriptType("local");
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = builder13.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder5.mongoServers(serverAddressList16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoDb("actions");
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test7027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7027");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean6 = mongoDBRiverDefinition1.isDropCollection();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition1.getTYPE_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = mongoDBRiverDefinition1.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "type" + "'", str8, "type");
        org.junit.Assert.assertNull(serializedObjectSupporter9);
    }

    @Test
    public void test7028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7028");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        builder3.setincludeCollection("name");
        java.lang.String str8 = builder3.includeCollection;
        builder3.setconnectTimeout(1000);
        java.lang.Boolean boolean11 = builder3.getisMongos();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.mongoLocalPassword("script.disable_dynamic");
        java.lang.String str14 = builder13.statisticsIndexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "name" + "'", str8, "name");
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test7029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7029");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsTypeName("credentials");
        java.lang.String str10 = builder0.getmongoAdminPassword();
        boolean boolean11 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(true);
        java.lang.String str14 = builder0.getscript();
        java.lang.String str15 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoLocalPassword("mongodb-1638820218408");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk" + "'", str14, "bulk");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7030");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder38.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder47.skipInitialImport = false;
        builder47.setscriptType("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder47.excludeFields((java.util.Set<java.lang.String>) strSet70);
        builder38.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder3.includeFields((java.util.Set<java.lang.String>) strSet70);
        java.lang.String str75 = builder3.mongoLocalUser;
        java.lang.String str76 = builder3.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder3.mongoLocalPassword("sandbox");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp79 = builder3.initialTimestamp;
        boolean boolean80 = builder3.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter81 = builder3.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder3.scriptType("advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(wildcardTimestamp79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test7031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7031");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString5();
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter11.deserializeObjectRiverSettings3();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString6();
        java.lang.String str17 = serializedObjectSupporter11.deserializeObjectString4();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218299" + "'", str13, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218299" + "'", str14, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_river" + "'", str16, "_river");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_river" + "'", str17, "_river");
    }

    @Test
    public void test7032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7032");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.typeName;
        java.lang.String str12 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str16 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition1.riverName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "filter" + "'", str12, "filter");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script" + "'", str16, "script");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test7033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7033");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str9 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondary_read_preference" + "'", str10, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "actions" + "'", str11, "actions");
    }

    @Test
    public void test7034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7034");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str6 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getFILTER_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.getIncludeFields();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "socket_timeout" + "'", str6, "socket_timeout");
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "filter" + "'", str9, "filter");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test7035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7035");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        boolean boolean8 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str9 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        int int12 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "is_mongos" + "'", str9, "is_mongos");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 60000 + "'", int10 == 60000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "localhost" + "'", str11, "localhost");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000);
    }

    @Test
    public void test7036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7036");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoSSLVerifyCertificate(true);
        boolean boolean34 = builder31.advancedTransformation;
        boolean boolean35 = builder31.mongoUseSSL;
        builder31.setmongoGridFS(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test7037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7037");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.getMongoServers();
        boolean boolean8 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str9 = mongoDBRiverDefinition1.mongoCollection;
        org.elasticsearch.common.unit.TimeValue timeValue10 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str11 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "local" + "'", str11, "local");
    }

    @Test
    public void test7038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7038");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder38.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder47.skipInitialImport = false;
        builder47.setscriptType("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder47.excludeFields((java.util.Set<java.lang.String>) strSet70);
        builder38.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder3.includeFields((java.util.Set<java.lang.String>) strSet70);
        java.lang.String str75 = builder3.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder3.mongoLocalUser("");
        java.lang.String str78 = builder77.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder77.indexName("admin");
        boolean boolean81 = builder77.getmongoGridFS();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test7039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7039");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        java.util.Set<java.lang.String> strSet9 = builder0.getparentTypes();
        builder0.setscriptType("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.socketTimeout((int) (short) 100);
        builder13.setindexName("include_collection");
        boolean boolean16 = builder13.mongoGridFS;
        java.lang.String str17 = builder13.getincludeCollection();
        org.bson.types.Binary binary18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.initialTimestamp(binary18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test7040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7040");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder3.typeName;
        builder3.setstatisticsIndexName("name");
        builder3.setmongoLocalPassword("filter");
        java.lang.String str34 = builder3.mongoCollection;
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder3.mongoClientOptions;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(mongoClientOptions35);
    }

    @Test
    public void test7041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7041");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        boolean boolean21 = builder20.dropCollection;
        builder20.setriverName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.importAllCollections(true);
        java.lang.String str26 = builder20.getmongoAdminPassword();
        java.lang.String str27 = builder20.includeCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test7042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7042");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.connectTimeout((int) (short) 1);
        boolean boolean9 = builder5.skipInitialImport;
        builder5.disableIndexRefresh = true;
        builder5.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.typeName("script");
        java.lang.String str16 = builder5.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.script("store_statistics");
        java.lang.String str20 = builder17.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.importAllCollections(true);
        builder22.setincludeCollection("script.disable_dynamic");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.advancedTransformation(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList27 = builder26.getmongoServers();
        builder5.setmongoServers(serverAddressList27);
        builder5.includeCollection = "null.null";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "store_statistics" + "'", str20, "store_statistics");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(serverAddressList27);
    }

    @Test
    public void test7043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7043");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoSecondaryReadPreference(true);
        builder10.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test7044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7044");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218264" + "'", str3, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218326" + "'", str5, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218264" + "'", str6, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218299" + "'", str7, "mongodb-1638820218299");
    }

    @Test
    public void test7045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7045");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.getExcludeFields();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.getmongoGridFS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7046");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str12 = mongoDBRiverDefinition1.indexName;
        java.lang.String str13 = mongoDBRiverDefinition1.getRiverIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "parent_types" + "'", str10, "parent_types");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7047");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoSSLVerifyCertificate(true);
        boolean boolean34 = builder31.getmongoSSLVerifyCertificate();
        builder31.setstoreStatistics(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test7048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7048");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        org.elasticsearch.common.logging.ESLogger eSLogger4 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str5 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoCollectionFilter;
        boolean boolean8 = mongoDBRiverDefinition1.mongoGridFS;
        int int9 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str10 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str11 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str12 = mongoDBRiverDefinition1.getDB_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(eSLogger4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "socket_timeout" + "'", str5, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "db" + "'", str12, "db");
    }

    @Test
    public void test7049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7049");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        builder3.setincludeCollection("name");
        java.lang.String str8 = builder3.includeCollection;
        builder3.setconnectTimeout(1000);
        builder3.setskipInitialImport(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "name" + "'", str8, "name");
    }

    @Test
    public void test7050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7050");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder9.setmongoCollection("advanced_transformation");
        boolean boolean12 = builder9.getdropCollection();
        boolean boolean13 = builder9.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.mongoCollection("admin");
        builder9.setmongoSecondaryReadPreference(false);
        boolean boolean18 = builder9.advancedTransformation;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test7051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7051");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str8 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoAdminUser;
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "password" + "'", str8, "password");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(basicDBObject10);
    }

    @Test
    public void test7052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7052");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        java.lang.String str30 = builder28.getmongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter31 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str32 = serializedObjectSupporter31.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings33 = serializedObjectSupporter31.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings34 = serializedObjectSupporter31.deserializeObjectRiverSettings8();
        builder28.serializedObjectSupporter = serializedObjectSupporter31;
        org.elasticsearch.river.RiverSettings riverSettings36 = serializedObjectSupporter31.deserializeObjectRiverSettings2();
        java.lang.String str37 = serializedObjectSupporter31.deserializeObjectString3();
        java.lang.String str38 = serializedObjectSupporter31.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings39 = serializedObjectSupporter31.deserializeObjectRiverSettings1();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb-1638820218326" + "'", str32, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings33);
        org.junit.Assert.assertNotNull(riverSettings34);
        org.junit.Assert.assertNotNull(riverSettings36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "mongodb-1638820218264" + "'", str37, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "mongodb-1638820218363" + "'", str38, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings39);
    }

    @Test
    public void test7053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7053");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsTypeName("credentials");
        java.lang.String str10 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.riverIndexName("mongodb-1638820218424");
        builder0.mongoAdminPassword = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.riverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoSSLVerifyCertificate(false);
        boolean boolean19 = builder16.getdropCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test7054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7054");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setmongoAdminUser("bulk");
        builder5.isMongos = true;
        builder5.mongoLocalPassword = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder15.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        builder15.statisticsIndexName = "socket_timeout";
        java.lang.String str22 = builder15.riverIndexName;
        boolean boolean23 = builder15.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder15.dropCollection(true);
        boolean boolean26 = builder25.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean28 = builder27.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.script("bulk");
        builder27.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder27.connectTimeout((int) (byte) 10);
        builder27.disableIndexRefresh = true;
        boolean boolean37 = builder27.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder41.skipInitialImport = false;
        builder41.setscriptType("script");
        java.lang.String[] strArray63 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder41.excludeFields((java.util.Set<java.lang.String>) strSet64);
        builder27.setparentTypes((java.util.Set<java.lang.String>) strSet64);
        builder25.parentTypes = strSet64;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter71 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str72 = serializedObjectSupporter71.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings73 = serializedObjectSupporter71.deserializeObjectRiverSettings4();
        java.lang.String str74 = serializedObjectSupporter71.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings75 = serializedObjectSupporter71.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService76 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings75, scriptService76);
        java.lang.String str78 = mongoDBRiverDefinition77.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions79 = mongoDBRiverDefinition77.mongoClientOptions;
        builder25.setmongoClientOptions(mongoClientOptions79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder5.mongoClientOptions(mongoClientOptions79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "mongodb-1638820218326" + "'", str72, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "mongodb-1638820218326" + "'", str74, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings75);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "mycollection" + "'", str78, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test7055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7055");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        java.lang.String str9 = builder5.indexName;
        boolean boolean10 = builder5.getadvancedTransformation();
        java.lang.String str11 = builder5.includeCollection;
        builder5.isMongos = false;
        java.lang.String str14 = builder5.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.mongoLocalPassword("mongodb-1638820218424");
        builder16.setmongoAdminPassword("servers");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test7056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7056");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.throttleSize(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        builder8.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder8.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject26 = builder25.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.socketTimeout((int) (byte) 0);
        com.mongodb.BasicDBObject basicDBObject29 = builder28.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder7.mongoOplogFilter(basicDBObject29);
        java.util.Set<java.lang.String> strSet31 = builder30.parentTypes;
        boolean boolean32 = builder30.getmongoSecondaryReadPreference();
        boolean boolean33 = builder30.mongoSecondaryReadPreference;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test7057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7057");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str10 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue11 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str12 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.mongoLocalUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "is_mongos" + "'", str10, "is_mongos");
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "advanced_transformation" + "'", str12, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test7058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7058");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString12();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820217755" + "'", str6, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
    }

    @Test
    public void test7059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7059");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.socketTimeout = (byte) -1;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder2.mongoOplogFilter = basicDBObject5;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.storeStatistics(false);
        java.lang.String str9 = builder8.includeCollection;
        builder8.throttleSize = 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.disableIndexRefresh(true);
        java.lang.String str14 = builder8.getmongoAdminUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test7060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7060");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        java.lang.String str32 = builder3.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = builder33.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList35 = mongoDBRiverDefinition34.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue36 = mongoDBRiverDefinition34.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean37 = mongoDBRiverDefinition34.dropCollection;
        boolean boolean38 = mongoDBRiverDefinition34.getmongoSecondaryReadPreference();
        boolean boolean39 = mongoDBRiverDefinition34.isMongoSecondaryReadPreference();
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = mongoDBRiverDefinition34.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.mongoServers(serverAddressList40);
        java.lang.String str42 = builder41.getriverIndexName();
        com.mongodb.BasicDBObject basicDBObject43 = builder41.mongoOplogFilter;
        builder41.storeStatistics = true;
        java.lang.String str46 = builder41.getstatisticsTypeName();
        builder41.setstatisticsIndexName("script.default_lang");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition34);
        org.junit.Assert.assertNotNull(serverAddressList35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(serverAddressList40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(basicDBObject43);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test7061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7061");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.socketTimeout = (byte) -1;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder2.mongoOplogFilter = basicDBObject5;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.typeName("");
        java.lang.String str9 = builder8.getscriptType();
        java.lang.Boolean boolean10 = builder8.getisMongos();
        builder8.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test7062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7062");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("concurrent_requests", (java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean6 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.script("bulk");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder8.setmongoOplogFilter(basicDBObject9);
        docScoreSearchScript0.setNextVar("script_type", (java.lang.Object) basicDBObject9);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str13 = serializedObjectSupporter12.deserializeObjectString7();
        java.lang.String str14 = serializedObjectSupporter12.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter12.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter12.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter12.deserializeObjectRiverSettings7();
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = riverSettings17.settings();
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) riverSettings17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet21 = builder20.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.mongoLocalUser("credentials");
        builder20.setthrottleSize(8);
        boolean boolean26 = builder20.getmongoGridFS();
        builder20.mongoUseSSL = false;
        java.util.List<com.mongodb.ServerAddress> serverAddressList29 = builder20.getmongoServers();
        builder20.setmongoAdminPassword("concurrent_bulk_requests");
        java.lang.Object obj32 = docScoreSearchScript0.unwrap((java.lang.Object) "concurrent_bulk_requests");
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext33 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218326" + "'", str13, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218449" + "'", str14, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertNotNull(riverSettings16);
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(serverAddressList29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + "concurrent_bulk_requests" + "'", obj32, "concurrent_bulk_requests");
    }

    @Test
    public void test7063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7063");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.throttleSize((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoSSLVerifyCertificate(false);
        builder15.storeStatistics = true;
        builder15.setmongoCollection("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.script("bulk");
        builder23.skipInitialImport = false;
        builder23.setscriptType("script");
        java.lang.String[] strArray45 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder23.excludeFields((java.util.Set<java.lang.String>) strSet46);
        builder23.setscript("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = builder51.build();
        java.lang.String str53 = mongoDBRiverDefinition52.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet54 = mongoDBRiverDefinition52.parentTypes;
        java.lang.String str55 = mongoDBRiverDefinition52.riverName;
        boolean boolean56 = mongoDBRiverDefinition52.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList57 = mongoDBRiverDefinition52.mongoServers;
        builder23.mongoServers = serverAddressList57;
        builder23.mongoLocalPassword = "disable_index_refresh";
        java.util.Set<java.lang.String> strSet61 = builder23.parentTypes;
        java.util.Set<java.lang.String> strSet62 = builder23.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder15.includeFields(strSet62);
        builder63.dropCollection = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "index" + "'", str53, "index");
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serverAddressList57);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test7064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7064");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString5();
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter11.deserializeObjectRiverSettings3();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString6();
        java.lang.String str17 = serializedObjectSupporter11.deserializeObjectString2();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218299" + "'", str13, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218299" + "'", str14, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_river" + "'", str16, "_river");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_river" + "'", str17, "_river");
    }

    @Test
    public void test7065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7065");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getScript();
        java.lang.String str10 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_collection" + "'", str8, "include_collection");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "credentials" + "'", str10, "credentials");
    }

    @Test
    public void test7066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7066");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.getSIZE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test7067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7067");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder3.initialTimestamp;
        builder3.setmongoAdminUser("concurrent_requests");
        builder3.mongoAdminUser = "disable_index_refresh";
        java.lang.String str15 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder3.typeName("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.disableIndexRefresh(false);
        builder23.setmongoAdminUser("name");
        boolean boolean26 = builder23.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean28 = builder27.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder27.disableIndexRefresh(false);
        java.lang.String str33 = builder32.getstatisticsTypeName();
        builder32.scriptType = "user";
        builder32.includeCollection = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder32.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder32.scriptType("gridfs");
        builder32.setstatisticsTypeName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = builder44.build();
        java.lang.String str46 = mongoDBRiverDefinition45.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition45.parentTypes;
        java.lang.String str48 = mongoDBRiverDefinition45.riverName;
        boolean boolean49 = mongoDBRiverDefinition45.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList50 = mongoDBRiverDefinition45.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList51 = mongoDBRiverDefinition45.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder32.mongoServers(serverAddressList51);
        builder23.mongoServers = serverAddressList51;
        builder3.mongoServers = serverAddressList51;
        builder3.riverIndexName = "throttle_size";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(serverAddressList50);
        org.junit.Assert.assertNotNull(serverAddressList51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test7068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7068");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        java.lang.String str55 = builder3.mongoLocalPassword;
        builder3.setmongoCollection("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test7069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7069");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        int int13 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        int int14 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str15 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        boolean boolean16 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str17 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 27017 + "'", int13 == 27017);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ssl_verify_certificate" + "'", str15, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index" + "'", str17, "index");
    }

    @Test
    public void test7070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7070");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoGridFS(false);
        java.util.Set<java.lang.String> strSet7 = builder6.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder11.setmongoOplogFilter(basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder11.setmongoOplogFilter(basicDBObject14);
        builder11.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = builder11.initialTimestamp;
        builder11.setmongoAdminUser("concurrent_requests");
        builder11.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.disableIndexRefresh(false);
        java.lang.String str29 = builder28.getstatisticsTypeName();
        java.lang.String str30 = builder28.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean34 = builder33.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.script("bulk");
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder36.setmongoOplogFilter(basicDBObject37);
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder36.setmongoOplogFilter(basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        builder44.skipInitialImport = false;
        builder44.setscriptType("script");
        java.lang.String[] strArray66 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder44.excludeFields((java.util.Set<java.lang.String>) strSet67);
        builder36.setexcludeFields((java.util.Set<java.lang.String>) strSet67);
        builder28.includeFields = strSet67;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder6.excludeFields((java.util.Set<java.lang.String>) strSet67);
        boolean boolean74 = builder6.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder6.riverName("mydatabase");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test7071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7071");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean6 = mongoDBRiverDefinition1.isDropCollection();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue9 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str11 = mongoDBRiverDefinition1.getIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7072");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.getadvancedTransformation();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoGridFS();
        org.elasticsearch.common.unit.TimeValue timeValue9 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name" + "'", str5, "name");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "throttle_size" + "'", str6, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeValue9);
    }

    @Test
    public void test7073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7073");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str7 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondary_read_preference" + "'", str7, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "exclude_fields" + "'", str8, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
    }

    @Test
    public void test7074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7074");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.getstatisticsIndexName();
        java.lang.String str4 = builder2.typeName;
        java.lang.String str5 = builder2.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.throttleSize((int) (short) 10);
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder2.mongoServers;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(serverAddressList8);
    }

    @Test
    public void test7075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7075");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        java.lang.String str31 = mongoDBRiverDefinition19.scriptType;
        java.util.Set<java.lang.String> strSet32 = mongoDBRiverDefinition19.getExcludeFields();
        boolean boolean33 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.String str34 = mongoDBRiverDefinition19.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "disable_index_refresh" + "'", str34, "disable_index_refresh");
    }

    @Test
    public void test7076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7076");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exclude_fields" + "'", str7, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "exclude_fields" + "'", str8, "exclude_fields");
    }

    @Test
    public void test7077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7077");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.mongoDb("bulk_timeout");
        java.lang.String str44 = builder43.getincludeCollection();
        builder43.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder43.mongoAdminUser("disable_index_refresh");
        boolean boolean49 = builder43.getstoreStatistics();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test7078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7078");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        builder3.riverName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder3.connectTimeout((int) (byte) 10);
        builder17.setconnectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.mongoAdminUser("name");
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        builder17.setmongoClientOptions(mongoClientOptions22);
        java.lang.String str24 = builder17.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder17.statisticsIndexName("initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "script.disable_dynamic" + "'", str24, "script.disable_dynamic");
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test7079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7079");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str7 = mongoDBRiverDefinition1.indexName;
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.getExcludeFields();
        boolean boolean9 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean10 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str11 = mongoDBRiverDefinition1.getSIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "size" + "'", str11, "size");
    }

    @Test
    public void test7080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7080");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder3.initialTimestamp;
        com.mongodb.BasicDBObject basicDBObject11 = builder3.mongoCollectionFilter;
        builder3.skipInitialImport = false;
        boolean boolean14 = builder3.advancedTransformation;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test7081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7081");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        builder19.setthrottleSize((int) ' ');
        boolean boolean22 = builder19.getadvancedTransformation();
        java.lang.String str23 = builder19.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = null;
        builder19.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str26 = builder19.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.isMongos((java.lang.Boolean) true);
        builder19.setindexName("script.default_lang");
        java.lang.String str31 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder19.getinitialTimestamp();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder19);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder39.setmongoOplogFilter(basicDBObject40);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder39.setmongoOplogFilter(basicDBObject42);
        boolean boolean44 = builder39.mongoGridFS;
        int int45 = builder39.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.mongoLocalPassword("include_fields");
        java.lang.String str48 = builder47.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = builder47.getinitialTimestamp();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = builder51.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList53 = mongoDBRiverDefinition52.mongoServers;
        java.lang.String str54 = mongoDBRiverDefinition52.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition52.getParentTypes();
        java.lang.Object obj56 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean59 = builder58.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder58.script("bulk");
        com.mongodb.BasicDBObject basicDBObject62 = null;
        builder61.setmongoOplogFilter(basicDBObject62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder61.riverIndexName("hi!");
        java.lang.String str66 = builder61.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder61.mongoAdminPassword("name");
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder61);
        org.apache.lucene.search.Scorer scorer70 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(wildcardTimestamp49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition52);
        org.junit.Assert.assertNotNull(serverAddressList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "bulk_timeout" + "'", str54, "bulk_timeout");
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test7082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7082");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = mongoDBRiverDefinition1.serializedObjectSupporter;
        boolean boolean11 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str12 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "local" + "'", str9, "local");
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "throttle_size" + "'", str12, "throttle_size");
    }

    @Test
    public void test7083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7083");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        int int38 = builder3.throttleSize;
        java.lang.String str39 = builder3.mongoLocalPassword;
        boolean boolean40 = builder3.mongoUseSSL;
        builder3.setriverName("gridfs");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test7084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7084");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        builder20.skipInitialImport = false;
        builder20.setscriptType("script");
        java.lang.String[] strArray42 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder20.excludeFields((java.util.Set<java.lang.String>) strSet43);
        builder20.setscript("local");
        java.util.Set<java.lang.String> strSet48 = builder20.getexcludeFields();
        builder16.parentTypes = strSet48;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder50.build();
        java.lang.String str52 = mongoDBRiverDefinition51.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition51.parentTypes;
        java.lang.String str54 = mongoDBRiverDefinition51.riverName;
        boolean boolean55 = mongoDBRiverDefinition51.disableIndexRefresh;
        java.lang.String str56 = mongoDBRiverDefinition51.riverIndexName;
        java.lang.String str57 = mongoDBRiverDefinition51.getRiverName();
        java.lang.String str58 = mongoDBRiverDefinition51.typeName;
        java.lang.String str59 = mongoDBRiverDefinition51.getMongoDb();
        int int60 = mongoDBRiverDefinition51.getDEFAULT_DB_PORT();
        com.mongodb.BasicDBObject basicDBObject61 = mongoDBRiverDefinition51.getMongoCollectionFilter();
        builder16.setmongoOplogFilter(basicDBObject61);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "index" + "'", str52, "index");
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 27017 + "'", int60 == 27017);
        org.junit.Assert.assertNotNull(basicDBObject61);
    }

    @Test
    public void test7085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7085");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter2.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.script.ScriptService scriptService6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("include_fields", "script", riverSettings4, scriptService6);
        boolean boolean8 = mongoDBRiverDefinition7.isAdvancedTransformation();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7086");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 60000 + "'", int10 == 60000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
    }

    @Test
    public void test7087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7087");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        boolean boolean9 = builder8.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.socketTimeout(60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminPassword("mongodb-1638820218326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.script("mycollection");
        builder15.setdropCollection(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7088");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_bulk_requests" + "'", str8, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
    }

    @Test
    public void test7089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7089");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue8 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str13 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str14 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "socket_timeout" + "'", str13, "socket_timeout");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test7090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7090");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl_verify_certificate" + "'", str3, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ssl" + "'", str4, "ssl");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_bulk_requests" + "'", str5, "concurrent_bulk_requests");
    }

    @Test
    public void test7091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7091");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        builder0.setthrottleSize(8);
        boolean boolean6 = builder0.getmongoGridFS();
        builder0.setstatisticsTypeName("index");
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test7092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7092");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        java.lang.String str14 = builder3.getmongoCollection();
        boolean boolean15 = builder3.mongoSSLVerifyCertificate;
        builder3.setstoreStatistics(true);
        builder3.storeStatistics = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test7093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7093");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str8 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean10 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str11 = mongoDBRiverDefinition1.getTypeName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7094");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.mongoUseSSL;
        boolean boolean7 = mongoDBRiverDefinition1.disableIndexRefresh;
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str10 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "throttle_size" + "'", str10, "throttle_size");
    }

    @Test
    public void test7095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7095");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "user" + "'", str6, "user");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test7096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7096");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        boolean boolean7 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = mongoDBRiverDefinition1.getMongoServers();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean10 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoLocalUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test7097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7097");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        builder3.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder3.statisticsTypeName("name");
        java.lang.String str44 = builder43.scriptType;
        builder43.scriptType = "user";
        builder43.mongoCollection = "mongodb-1638820218264";
        builder43.indexName = "exclude_fields";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test7098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7098");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition1.mongoServers;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(serverAddressList11);
    }

    @Test
    public void test7099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7099");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        int int9 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.mongoLocalPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.mongoAdminUser("script.default_lang");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7100");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.mongoSSLVerifyCertificate;
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoClientOptions(mongoClientOptions13);
        java.lang.String str15 = builder11.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder16.disableIndexRefresh(false);
        java.lang.String str22 = builder21.getstatisticsTypeName();
        java.lang.String str23 = builder21.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean25 = builder24.getdropCollection();
        java.lang.String str26 = builder24.getscript();
        boolean boolean27 = builder24.dropCollection;
        builder24.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory30 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean32 = builder31.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.script("bulk");
        com.mongodb.BasicDBObject basicDBObject35 = builder34.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript36 = docScoreNativeScriptFactory30.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder24.mongoOplogFilter(basicDBObject35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder21.mongoCollectionFilter(basicDBObject35);
        builder11.setmongoCollectionFilter(basicDBObject35);
        builder11.mongoAdminUser = "initial_timestamp";
        java.lang.String str42 = builder11.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder11.typeName("actions");
        boolean boolean45 = builder11.getmongoGridFS();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertNotNull(executableScript36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test7101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7101");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str8 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.lang.String str10 = mongoDBRiverDefinition1.mongoLocalUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertNull(serializedObjectSupporter9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test7102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7102");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory21 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript27 = docScoreNativeScriptFactory21.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder20.mongoCollectionFilter(basicDBObject26);
        java.lang.String str29 = builder20.mongoLocalPassword;
        java.lang.String str30 = builder20.getstatisticsIndexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(executableScript27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "socket_timeout" + "'", str30, "socket_timeout");
    }

    @Test
    public void test7103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7103");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean35 = builder34.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoAdminUser("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.throttleSize(27017);
        docScoreSearchScript0.setNextVar(".scripts", (java.lang.Object) builder39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        java.lang.String str46 = builder44.getscript();
        boolean boolean47 = builder44.dropCollection;
        builder44.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory50 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean52 = builder51.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder51.script("bulk");
        com.mongodb.BasicDBObject basicDBObject55 = builder54.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript56 = docScoreNativeScriptFactory50.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder44.mongoOplogFilter(basicDBObject55);
        builder44.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder44.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject62 = builder61.mongoOplogFilter;
        builder61.mongoLocalUser = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder61.mongoSecondaryReadPreference(false);
        com.mongodb.BasicDBObject basicDBObject67 = builder61.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = builder68.build();
        java.lang.String str70 = mongoDBRiverDefinition69.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet71 = mongoDBRiverDefinition69.parentTypes;
        boolean boolean72 = mongoDBRiverDefinition69.isStoreStatistics();
        boolean boolean73 = mongoDBRiverDefinition69.dropCollection;
        java.lang.String str74 = mongoDBRiverDefinition69.scriptType;
        java.lang.String str75 = mongoDBRiverDefinition69.getCREDENTIALS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp76 = mongoDBRiverDefinition69.getInitialTimestamp();
        java.lang.String str77 = mongoDBRiverDefinition69.getSSL_CONNECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject78 = mongoDBRiverDefinition69.mongoCollectionFilter;
        builder61.mongoCollectionFilter = basicDBObject78;
        builder61.mongoSecondaryReadPreference = true;
        docScoreSearchScript0.setNextVar("mongodb-1638820218264", (java.lang.Object) builder61);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNotNull(executableScript56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(basicDBObject62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(basicDBObject67);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "index" + "'", str70, "index");
        org.junit.Assert.assertNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "credentials" + "'", str75, "credentials");
        org.junit.Assert.assertNull(wildcardTimestamp76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ssl" + "'", str77, "ssl");
        org.junit.Assert.assertNotNull(basicDBObject78);
    }

    @Test
    public void test7104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7104");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean6 = mongoDBRiverDefinition1.isDropCollection();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue9 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30000 + "'", int10 == 30000);
    }

    @Test
    public void test7105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7105");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(basicDBObject6);
    }

    @Test
    public void test7106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7106");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.riverName;
        java.lang.String str11 = mongoDBRiverDefinition1.getTYPE_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str13 = mongoDBRiverDefinition1.getTypeName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "type" + "'", str11, "type");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7107");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        com.mongodb.MongoClientOptions mongoClientOptions6 = mongoDBRiverDefinition1.getMongoClientOptions();
        java.lang.String str7 = mongoDBRiverDefinition1.getDB_FIELD();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str10 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "db" + "'", str7, "db");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "port" + "'", str10, "port");
    }

    @Test
    public void test7108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7108");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue11 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str12 = mongoDBRiverDefinition1.script;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "port" + "'", str10, "port");
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7109");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.getmongoUseSSL();
        java.lang.String str13 = builder11.includeCollection;
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        builder11.mongoClientOptions = mongoClientOptions14;
        java.lang.String str16 = builder11.getmongoDb();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7110");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setmongoUseSSL(false);
        builder3.socketTimeout = (-1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        builder17.skipInitialImport = false;
        builder17.setscriptType("script");
        java.lang.String[] strArray39 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder17.excludeFields((java.util.Set<java.lang.String>) strSet40);
        builder17.setscript("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = builder45.build();
        java.lang.String str47 = mongoDBRiverDefinition46.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition46.parentTypes;
        java.lang.String str49 = mongoDBRiverDefinition46.riverName;
        boolean boolean50 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList51 = mongoDBRiverDefinition46.mongoServers;
        builder17.mongoServers = serverAddressList51;
        builder17.mongoLocalPassword = "disable_index_refresh";
        java.util.Set<java.lang.String> strSet55 = builder17.excludeFields;
        builder3.setparentTypes(strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean58 = builder57.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder57.disableIndexRefresh(false);
        java.lang.String str63 = builder62.getstatisticsTypeName();
        java.lang.String str64 = builder62.riverName;
        builder62.indexName = "script.default_lang";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder62.statisticsIndexName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean70 = builder69.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder69.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.mongoAdminUser("socket_timeout");
        java.lang.String str75 = builder74.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder74.connectTimeout((int) (short) 1);
        boolean boolean78 = builder74.skipInitialImport;
        java.lang.String str79 = builder74.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean81 = builder80.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder80.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder83.mongoAdminUser("socket_timeout");
        java.lang.String str86 = builder85.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder85.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject89 = builder85.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder74.mongoOplogFilter(basicDBObject89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder68.mongoOplogFilter(basicDBObject89);
        builder3.setmongoCollectionFilter(basicDBObject89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "index" + "'", str47, "index");
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(serverAddressList51);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(basicDBObject89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test7111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7111");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        builder39.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder39.scriptType("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.riverIndexName("servers");
        boolean boolean48 = builder39.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder39.riverName("bulk");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test7112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7112");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder3.typeName;
        builder3.setstatisticsIndexName("name");
        builder3.setmongoLocalPassword("filter");
        java.lang.String str34 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter35 = builder3.serializedObjectSupporter;
        int int36 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean38 = builder37.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.script("bulk");
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder40.setmongoOplogFilter(basicDBObject41);
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder40.setmongoOplogFilter(basicDBObject43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean46 = builder45.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.script("bulk");
        builder48.skipInitialImport = false;
        builder48.setscriptType("script");
        java.lang.String[] strArray70 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder48.excludeFields((java.util.Set<java.lang.String>) strSet71);
        builder40.setexcludeFields((java.util.Set<java.lang.String>) strSet71);
        int int75 = builder40.throttleSize;
        builder40.setadvancedTransformation(true);
        builder40.setincludeCollection("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition81 = builder80.build();
        java.lang.String str82 = mongoDBRiverDefinition81.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet83 = mongoDBRiverDefinition81.parentTypes;
        boolean boolean84 = mongoDBRiverDefinition81.isStoreStatistics();
        boolean boolean85 = mongoDBRiverDefinition81.importAllCollections;
        java.lang.String str86 = mongoDBRiverDefinition81.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject87 = mongoDBRiverDefinition81.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder40.mongoOplogFilter(basicDBObject87);
        com.mongodb.BasicDBObject basicDBObject89 = builder88.mongoOplogFilter;
        builder3.mongoOplogFilter = basicDBObject89;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(serializedObjectSupporter35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "index" + "'", str82, "index");
        org.junit.Assert.assertNull(strSet83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(basicDBObject87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(basicDBObject89);
    }

    @Test
    public void test7113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7113");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.storeStatistics(true);
        builder15.dropCollection = false;
        builder15.mongoAdminUser = "mongodb-1638820218264";
        java.lang.String str20 = builder15.getscript();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bulk" + "'", str20, "bulk");
    }

    @Test
    public void test7114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7114");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.connectTimeout = 27017;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.throttleSize(1);
        builder15.mongoLocalPassword = "mongodb-1638820218326";
        boolean boolean18 = builder15.getdisableIndexRefresh();
        java.lang.String str19 = builder15.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.advancedTransformation(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7115");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        boolean boolean11 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str12 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getStatisticsIndexName();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition1.getMongoOplogFilter();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "is_mongos" + "'", str12, "is_mongos");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(basicDBObject14);
    }

    @Test
    public void test7116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7116");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.setindexName("initial_timestamp");
        builder3.setthrottleSize(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition14.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue16 = mongoDBRiverDefinition14.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean17 = mongoDBRiverDefinition14.dropCollection;
        java.lang.String str18 = mongoDBRiverDefinition14.getDB_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition14.getINCLUDE_FIELDS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition14.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder3.mongoServers(serverAddressList20);
        boolean boolean22 = builder21.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "db" + "'", str18, "db");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "include_fields" + "'", str19, "include_fields");
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test7117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7117");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        builder7.setincludeCollection("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.indexName("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.disableIndexRefresh(false);
        java.lang.String str18 = builder17.getstatisticsTypeName();
        java.lang.String str19 = builder17.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        java.lang.String str22 = builder20.getscript();
        boolean boolean23 = builder20.dropCollection;
        builder20.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory26 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean28 = builder27.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.script("bulk");
        com.mongodb.BasicDBObject basicDBObject31 = builder30.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript32 = docScoreNativeScriptFactory26.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder20.mongoOplogFilter(basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder17.mongoCollectionFilter(basicDBObject31);
        builder34.setmongoCollection("type");
        java.lang.String[] strArray83 = new java.lang.String[] { "db", "actions", "store_statistics", "bulk", "sandbox", "drop_collection", "ssl_verify_certificate", "include_fields", "connect_timeout", "script.disable_dynamic", "initial_timestamp", "hi!", "port", ".scripts", "drop_collection", "filter", "bulk_size", "store_statistics", "include_fields", "local", "disable_index_refresh", "socket_timeout", "connect_timeout", "host", "mongodb-1638820218363", "mongodb-1638820218449", "mongodb-1638820218387", "script.default_lang", "hi!", "concurrent_bulk_requests", "mongodb-1638820218264", "port", "type", "", "port", "advanced_transformation", "script_type", "host", "mongodb-1638820218449", "db", "mongodb-1638820217755", "advanced_transformation", "host", "sandbox", "localhost", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        builder34.excludeFields = strSet84;
        builder7.includeFields = strSet84;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder7.socketTimeout((int) (byte) 10);
        java.lang.String str90 = builder89.script;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(executableScript32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "bulk" + "'", str90, "bulk");
    }

    @Test
    public void test7118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7118");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean6 = mongoDBRiverDefinition1.isDropCollection();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getNAME_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "type" + "'", str8, "type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "filter" + "'", str9, "filter");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_collection" + "'", str11, "include_collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "name" + "'", str12, "name");
    }

    @Test
    public void test7119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7119");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.getadvancedTransformation();
        boolean boolean8 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean9 = mongoDBRiverDefinition1.mongoGridFS;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str11 = serializedObjectSupporter10.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter10.deserializeObjectRiverSettings3();
        java.lang.String str13 = serializedObjectSupporter10.deserializeObjectString12();
        java.lang.String str14 = serializedObjectSupporter10.deserializeObjectString12();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str16 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str18 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition1.getExcludeFields();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name" + "'", str5, "name");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "throttle_size" + "'", str6, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_river" + "'", str11, "_river");
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_river" + "'", str13, "_river");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_river" + "'", str14, "_river");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ssl_verify_certificate" + "'", str16, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "script_type" + "'", str18, "script_type");
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test7120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7120");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        java.lang.String str30 = builder28.getmongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter31 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str32 = serializedObjectSupporter31.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings33 = serializedObjectSupporter31.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings34 = serializedObjectSupporter31.deserializeObjectRiverSettings8();
        builder28.serializedObjectSupporter = serializedObjectSupporter31;
        org.elasticsearch.river.RiverSettings riverSettings36 = serializedObjectSupporter31.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings37 = serializedObjectSupporter31.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings38 = serializedObjectSupporter31.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings39 = serializedObjectSupporter31.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings40 = serializedObjectSupporter31.deserializeObjectRiverSettings3();
        java.lang.String str41 = serializedObjectSupporter31.deserializeObjectString16();
        java.lang.String str42 = serializedObjectSupporter31.deserializeObjectString14();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb-1638820218326" + "'", str32, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings33);
        org.junit.Assert.assertNotNull(riverSettings34);
        org.junit.Assert.assertNotNull(riverSettings36);
        org.junit.Assert.assertNotNull(riverSettings37);
        org.junit.Assert.assertNotNull(riverSettings38);
        org.junit.Assert.assertNotNull(riverSettings39);
        org.junit.Assert.assertNotNull(riverSettings40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "_river" + "'", str41, "_river");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "_river" + "'", str42, "_river");
    }

    @Test
    public void test7121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7121");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        java.lang.String str20 = builder19.getstatisticsTypeName();
        builder19.scriptType = "user";
        builder19.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("bulk");
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        builder19.setmongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder3.mongoOplogFilter(basicDBObject30);
        builder33.storeStatistics = false;
        com.mongodb.BasicDBObject basicDBObject36 = builder33.mongoOplogFilter;
        builder33.setstoreStatistics(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(basicDBObject36);
    }

    @Test
    public void test7122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7122");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder38.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder47.skipInitialImport = false;
        builder47.setscriptType("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder47.excludeFields((java.util.Set<java.lang.String>) strSet70);
        builder38.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder3.includeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder3.throttleSize(1000);
        builder76.setskipInitialImport(false);
        boolean boolean79 = builder76.getdropCollection();
        java.lang.String str80 = builder76.getindexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test7123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7123");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.disableIndexRefresh;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test7124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7124");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str11 = mongoDBRiverDefinition1.getRiverIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7125");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoCollection("ssl_verify_certificate");
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder11.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoDb("gridfs");
        int int15 = builder14.getsocketTimeout();
        builder14.setscriptType("filter");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test7126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7126");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        org.elasticsearch.common.unit.TimeValue timeValue10 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.parentTypes;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str13 = serializedObjectSupporter12.deserializeObjectString7();
        java.lang.String str14 = serializedObjectSupporter12.deserializeObjectString4();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString8();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString16();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = serializedObjectSupporter12.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218326" + "'", str13, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_river" + "'", str14, "_river");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_river" + "'", str17, "_river");
    }

    @Test
    public void test7127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7127");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.mongoSecondaryReadPreference = true;
        boolean boolean11 = builder5.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7128");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString9();
        java.lang.String str5 = serializedObjectSupporter2.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter2.deserializeObjectRiverSettings7();
        org.elasticsearch.common.settings.Settings settings7 = riverSettings6.globalSettings();
        org.elasticsearch.script.ScriptService scriptService8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("host", "null.null", riverSettings6, scriptService8);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218363" + "'", str4, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218387" + "'", str5, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
    }

    @Test
    public void test7129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7129");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoAdminUser("advanced_transformation");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter20 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str21 = serializedObjectSupporter20.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings22 = serializedObjectSupporter20.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter20.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings24 = serializedObjectSupporter20.deserializeObjectRiverSettings9();
        builder5.serializedObjectSupporter = serializedObjectSupporter20;
        java.lang.String str26 = serializedObjectSupporter20.deserializeObjectString12();
        java.lang.String str27 = serializedObjectSupporter20.deserializeObjectString11();
        java.lang.String str28 = serializedObjectSupporter20.deserializeObjectString17();
        java.lang.String str29 = serializedObjectSupporter20.deserializeObjectString13();
        java.lang.String str30 = serializedObjectSupporter20.deserializeObjectString11();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_river" + "'", str21, "_river");
        org.junit.Assert.assertNotNull(riverSettings22);
        org.junit.Assert.assertNotNull(riverSettings23);
        org.junit.Assert.assertNotNull(riverSettings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "_river" + "'", str26, "_river");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb-1638820218387" + "'", str27, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb-1638820218449" + "'", str28, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb-1638820218408" + "'", str29, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mongodb-1638820218387" + "'", str30, "mongodb-1638820218387");
    }

    @Test
    public void test7130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7130");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getTypeName();
        int int10 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str11 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.indexName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gridfs" + "'", str8, "gridfs");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "actions" + "'", str11, "actions");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7131");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        org.elasticsearch.common.logging.ESLogger eSLogger8 = mongoDBRiverDefinition1.getlogger();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str11 = mongoDBRiverDefinition1.typeName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertNotNull(eSLogger8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7132");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("concurrent_requests", (java.lang.Object) (-1));
        docScoreSearchScript0.setNextVar("skip_initial_import", (java.lang.Object) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.disableIndexRefresh(false);
        java.lang.String str14 = builder13.getstatisticsTypeName();
        builder13.setmongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoLocalPassword("index");
        docScoreSearchScript0.setNextVar("local", (java.lang.Object) builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder21.build();
        java.lang.String str23 = mongoDBRiverDefinition22.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet24 = mongoDBRiverDefinition22.parentTypes;
        java.lang.String str25 = mongoDBRiverDefinition22.riverName;
        boolean boolean26 = mongoDBRiverDefinition22.disableIndexRefresh;
        java.lang.String str27 = mongoDBRiverDefinition22.riverIndexName;
        boolean boolean28 = mongoDBRiverDefinition22.getadvancedTransformation();
        java.lang.String str29 = mongoDBRiverDefinition22.getSSL_CONNECTION_FIELD();
        java.lang.String str30 = mongoDBRiverDefinition22.mongoLocalUser;
        docScoreSearchScript0.setNextVar("drop_collection", (java.lang.Object) mongoDBRiverDefinition22);
        java.lang.String str32 = mongoDBRiverDefinition22.getStatisticsIndexName();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "index" + "'", str23, "index");
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ssl" + "'", str29, "ssl");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test7133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7133");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean12 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str13 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str15 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition1.getMongoClientOptions();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "connect_timeout" + "'", str13, "connect_timeout");
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "connect_timeout" + "'", str15, "connect_timeout");
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test7134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7134");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str9 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        boolean boolean13 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition1.mongoClientOptions;
        java.lang.String str15 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_size" + "'", str11, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "host" + "'", str15, "host");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "port" + "'", str16, "port");
    }

    @Test
    public void test7135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7135");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str7 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str9 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        boolean boolean11 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "credentials" + "'", str7, "credentials");
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "initial_timestamp" + "'", str9, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7136");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        java.lang.String str8 = builder5.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.statisticsIndexName("ssl_verify_certificate");
        builder10.skipInitialImport = false;
        builder10.mongoLocalUser = "is_mongos";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test7137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7137");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString13();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218299" + "'", str5, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218408" + "'", str6, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218408" + "'", str7, "mongodb-1638820218408");
    }

    @Test
    public void test7138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7138");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = mongoDBRiverDefinition1.serializedObjectSupporter;
        boolean boolean11 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str12 = mongoDBRiverDefinition1.mongoAdminUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "local" + "'", str9, "local");
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test7139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7139");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder18.setmongoOplogFilter(basicDBObject19);
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder18.setmongoOplogFilter(basicDBObject21);
        builder18.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder18.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.disableIndexRefresh(false);
        java.lang.String str35 = builder34.getstatisticsTypeName();
        builder34.scriptType = "user";
        builder34.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory40 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        builder34.setmongoCollectionFilter(basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder18.mongoOplogFilter(basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder13.mongoCollectionFilter(basicDBObject45);
        builder13.statisticsTypeName = "mongodb-1638820218326";
        builder13.setstatisticsIndexName("flush_interval");
        boolean boolean54 = builder13.dropCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test7140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7140");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean12 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str13 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.Boolean boolean14 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str15 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "connect_timeout" + "'", str15, "connect_timeout");
    }

    @Test
    public void test7141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7141");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter2.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.script.ScriptService scriptService6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("include_fields", "script", riverSettings4, scriptService6);
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition7.getMongoCollectionFilter();
        java.lang.String str9 = mongoDBRiverDefinition7.getGRIDFS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition7.isAdvancedTransformation();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gridfs" + "'", str9, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7142");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        builder0.setmongoLocalPassword("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoSecondaryReadPreference(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test7143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7143");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder6.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder6.setmongoOplogFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory43 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        com.mongodb.BasicDBObject basicDBObject48 = builder47.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript49 = docScoreNativeScriptFactory43.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        builder6.mongoCollectionFilter = basicDBObject48;
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = riverSettings51.settings();
        org.elasticsearch.script.ScriptService scriptService53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("skip_initial_import", "mongodb-1638820218424", riverSettings51, scriptService53);
        java.lang.String str55 = mongoDBRiverDefinition54.getMongoDb();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(executableScript49);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "skip_initial_import" + "'", str55, "skip_initial_import");
    }

    @Test
    public void test7144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7144");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test7145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7145");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter2.deserializeObjectRiverSettings4();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter2.deserializeObjectString14();
        java.lang.String str6 = serializedObjectSupporter2.deserializeObjectString6();
        java.lang.String str7 = serializedObjectSupporter2.deserializeObjectString18();
        java.lang.String str8 = serializedObjectSupporter2.deserializeObjectString14();
        java.lang.String str9 = serializedObjectSupporter2.deserializeObjectString5();
        java.lang.String str10 = serializedObjectSupporter2.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter2.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("mongodb-1638820218408", "script.disable_dynamic", riverSettings11, scriptService12);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218299" + "'", str9, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218449" + "'", str10, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings11);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
    }

    @Test
    public void test7146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7146");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        int int55 = builder54.throttleSize;
        builder54.mongoSecondaryReadPreference = false;
        builder54.setimportAllCollections(true);
        boolean boolean60 = builder54.getadvancedTransformation();
        builder54.setmongoAdminUser("");
        builder54.setriverName("store_statistics");
        boolean boolean65 = builder54.getmongoUseSSL();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test7147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7147");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder9.throttleSize = (byte) 10;
        boolean boolean12 = builder9.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.riverIndexName("ssl_verify_certificate");
        builder14.scriptType = "mycollection";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7148");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        boolean boolean21 = builder20.dropCollection;
        int int22 = builder20.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.connectTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        com.mongodb.BasicDBObject basicDBObject29 = null;
        builder28.setmongoOplogFilter(basicDBObject29);
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder28.setmongoOplogFilter(basicDBObject31);
        builder28.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder28.throttleSize((int) (short) 0);
        builder28.mongoLocalPassword = "script.disable_dynamic";
        builder28.riverName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder28.connectTimeout((int) (byte) 10);
        builder42.setconnectTimeout((int) (short) -1);
        int int45 = builder42.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = builder46.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList48 = mongoDBRiverDefinition47.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue49 = mongoDBRiverDefinition47.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean50 = mongoDBRiverDefinition47.dropCollection;
        java.lang.String str51 = mongoDBRiverDefinition47.getDB_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition47.getMongoCollection();
        java.lang.String str53 = mongoDBRiverDefinition47.getCONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet54 = mongoDBRiverDefinition47.getIncludeFields();
        java.lang.String str55 = mongoDBRiverDefinition47.getPORT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList56 = mongoDBRiverDefinition47.mongoServers;
        com.mongodb.BasicDBObject basicDBObject57 = mongoDBRiverDefinition47.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder42.mongoOplogFilter(basicDBObject57);
        builder20.setmongoCollectionFilter(basicDBObject57);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition47);
        org.junit.Assert.assertNotNull(serverAddressList48);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "db" + "'", str51, "db");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "connect_timeout" + "'", str53, "connect_timeout");
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "port" + "'", str55, "port");
        org.junit.Assert.assertNotNull(serverAddressList56);
        org.junit.Assert.assertNotNull(basicDBObject57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test7149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7149");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str10 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.Boolean boolean11 = mongoDBRiverDefinition1.isMongos();
        boolean boolean12 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str13 = mongoDBRiverDefinition1.mongoAdminUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "filter" + "'", str10, "filter");
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test7150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7150");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoLocalUser;
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str12 = mongoDBRiverDefinition1.getUSER_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "connect_timeout" + "'", str9, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "user" + "'", str12, "user");
    }

    @Test
    public void test7151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7151");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str7 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(basicDBObject8);
    }

    @Test
    public void test7152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7152");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.throttleSize((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoSSLVerifyCertificate(false);
        builder11.setimportAllCollections(true);
        java.util.Set<java.lang.String> strSet18 = builder11.getincludeFields();
        boolean boolean19 = builder11.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder11.importAllCollections(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        builder11.setmongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean25 = builder24.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.script("bulk");
        builder27.skipInitialImport = false;
        builder27.setscriptType("script");
        java.lang.String[] strArray49 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder27.excludeFields((java.util.Set<java.lang.String>) strSet50);
        java.lang.String str53 = builder27.typeName;
        builder27.setstatisticsIndexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean57 = builder56.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder56.script("bulk");
        com.mongodb.BasicDBObject basicDBObject60 = null;
        builder59.setmongoOplogFilter(basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder59.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean65 = builder64.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder64.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder64.disableIndexRefresh(false);
        java.lang.String str70 = builder69.getstatisticsTypeName();
        java.lang.String str71 = builder69.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean73 = builder72.getdropCollection();
        java.lang.String str74 = builder72.getscript();
        boolean boolean75 = builder72.dropCollection;
        builder72.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory78 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean80 = builder79.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder79.script("bulk");
        com.mongodb.BasicDBObject basicDBObject83 = builder82.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript84 = docScoreNativeScriptFactory78.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder72.mongoOplogFilter(basicDBObject83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder69.mongoCollectionFilter(basicDBObject83);
        builder63.mongoOplogFilter = basicDBObject83;
        builder27.mongoOplogFilter = basicDBObject83;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder11.mongoOplogFilter(basicDBObject83);
        builder11.setconnectTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder11.includeCollection("bulk_size");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(basicDBObject83);
        org.junit.Assert.assertNotNull(executableScript84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test7153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7153");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder6.build();
        java.lang.String str8 = mongoDBRiverDefinition7.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition7.parentTypes;
        java.lang.String str10 = mongoDBRiverDefinition7.riverName;
        boolean boolean11 = mongoDBRiverDefinition7.disableIndexRefresh;
        java.lang.String str12 = mongoDBRiverDefinition7.riverIndexName;
        java.lang.String str13 = mongoDBRiverDefinition7.getRiverName();
        java.lang.String str14 = mongoDBRiverDefinition7.typeName;
        java.lang.String str15 = mongoDBRiverDefinition7.getMongoDb();
        int int16 = mongoDBRiverDefinition7.getDEFAULT_DB_PORT();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition7.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings18 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder19.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = mongoDBRiverDefinition20.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue22 = mongoDBRiverDefinition20.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean23 = mongoDBRiverDefinition20.dropCollection;
        boolean boolean24 = mongoDBRiverDefinition20.isMongoSecondaryReadPreference();
        java.lang.String str25 = mongoDBRiverDefinition20.getStatisticsTypeName();
        java.lang.String str26 = mongoDBRiverDefinition20.getMongoLocalPassword();
        java.lang.String str27 = mongoDBRiverDefinition20.getIndexName();
        boolean boolean28 = mongoDBRiverDefinition20.mongoUseSSL;
        java.lang.String str29 = mongoDBRiverDefinition20.getSOCKET_TIMEOUT();
        boolean boolean30 = mongoDBRiverDefinition20.getmongoSecondaryReadPreference();
        java.lang.String str31 = mongoDBRiverDefinition20.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition20.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = riverSettings33.settings();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index" + "'", str8, "index");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "socket_timeout" + "'", str29, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(strMap34);
    }

    @Test
    public void test7154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7154");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder17.mongoOplogFilter;
        builder17.mongoLocalUser = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = builder23.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList25 = mongoDBRiverDefinition24.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.mongoServers(serverAddressList25);
        builder22.setindexName("include_fields");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
        org.junit.Assert.assertNotNull(serverAddressList25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test7155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7155");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        int int6 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str7 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str11 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_timeout" + "'", str7, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "servers" + "'", str11, "servers");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7156");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        builder19.setthrottleSize((int) ' ');
        boolean boolean22 = builder19.getadvancedTransformation();
        java.lang.String str23 = builder19.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = null;
        builder19.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str26 = builder19.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.isMongos((java.lang.Boolean) true);
        builder19.setindexName("script.default_lang");
        java.lang.String str31 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder19.getinitialTimestamp();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder19);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder39.setmongoOplogFilter(basicDBObject40);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder39.setmongoOplogFilter(basicDBObject42);
        boolean boolean44 = builder39.mongoGridFS;
        int int45 = builder39.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.mongoLocalPassword("include_fields");
        java.lang.String str48 = builder47.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = builder47.getinitialTimestamp();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) builder47);
        // The following exception was thrown during execution in test generation
        try {
            float float51 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(wildcardTimestamp49);
        org.junit.Assert.assertNotNull(obj50);
    }

    @Test
    public void test7157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7157");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoUseSSL();
        int int12 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str13 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean14 = mongoDBRiverDefinition1.getimportAllCollections();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test7158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7158");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "admin" + "'", str6, "admin");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7159");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.riverIndexName("servers");
        java.util.Set<java.lang.String> strSet12 = builder9.parentTypes;
        builder9.setstatisticsTypeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.disableIndexRefresh(false);
        java.lang.String str21 = builder20.statisticsTypeName;
        builder20.mongoUseSSL = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoAdminUser("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("bulk");
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder29.setmongoOplogFilter(basicDBObject30);
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder29.setmongoOplogFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean35 = builder34.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.script("bulk");
        builder37.skipInitialImport = false;
        builder37.setscriptType("script");
        java.lang.String[] strArray59 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder37.excludeFields((java.util.Set<java.lang.String>) strSet60);
        builder29.setexcludeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder29.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder29.riverIndexName("bulk_timeout");
        builder29.riverName = "bulk";
        java.util.Set<java.lang.String> strSet70 = builder29.getparentTypes();
        builder29.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition74 = builder73.build();
        java.lang.String str75 = mongoDBRiverDefinition74.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet76 = mongoDBRiverDefinition74.parentTypes;
        boolean boolean77 = mongoDBRiverDefinition74.isStoreStatistics();
        boolean boolean78 = mongoDBRiverDefinition74.importAllCollections;
        java.lang.String str79 = mongoDBRiverDefinition74.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject80 = mongoDBRiverDefinition74.getMongoCollectionFilter();
        int int81 = mongoDBRiverDefinition74.getDEFAULT_SOCKET_TIMEOUT();
        com.mongodb.BasicDBObject basicDBObject82 = mongoDBRiverDefinition74.getMongoCollectionFilter();
        builder29.setmongoCollectionFilter(basicDBObject82);
        com.mongodb.BasicDBObject basicDBObject84 = builder29.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder20.mongoOplogFilter(basicDBObject84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder9.mongoOplogFilter(basicDBObject84);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "index" + "'", str75, "index");
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(basicDBObject80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 60000 + "'", int81 == 60000);
        org.junit.Assert.assertNotNull(basicDBObject82);
        org.junit.Assert.assertNotNull(basicDBObject84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test7160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7160");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        builder3.riverName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder3.connectTimeout((int) (byte) 10);
        builder17.setconnectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.mongoAdminUser("name");
        java.lang.String str22 = builder21.getmongoCollection();
        java.lang.String str23 = builder21.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.includeCollection("mongodb-1638820218387");
        builder25.setdisableIndexRefresh(false);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.mongoClientOptions;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "include_fields" + "'", str23, "include_fields");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(mongoClientOptions28);
    }

    @Test
    public void test7161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7161");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str10 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoAdminUser();
        java.lang.String str12 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7162");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218299" + "'", str7, "mongodb-1638820218299");
    }

    @Test
    public void test7163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7163");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.Boolean boolean15 = mongoDBRiverDefinition1.isMongos();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "password" + "'", str14, "password");
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
    }

    @Test
    public void test7164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7164");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder13.setmongoOplogFilter(basicDBObject14);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder13.setmongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        builder21.skipInitialImport = false;
        builder21.setscriptType("script");
        java.lang.String[] strArray43 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder21.excludeFields((java.util.Set<java.lang.String>) strSet44);
        builder13.setexcludeFields((java.util.Set<java.lang.String>) strSet44);
        builder5.includeFields = strSet44;
        builder5.includeCollection = "secondary_read_preference";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test7165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7165");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoSecondaryReadPreference(true);
        builder0.advancedTransformation = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.script("hi!");
        java.lang.String str15 = builder14.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.mongoSecondaryReadPreference(true);
        builder17.setstoreStatistics(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7166");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.indexName;
        java.lang.String str14 = mongoDBRiverDefinition1.getScriptType();
        int int15 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str17 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        boolean boolean18 = mongoDBRiverDefinition1.getmongoGridFS();
        boolean boolean19 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "actions" + "'", str17, "actions");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test7167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7167");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        builder4.setmongoUseSSL(true);
        java.lang.String str7 = builder4.statisticsTypeName;
        boolean boolean8 = builder4.skipInitialImport;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7168");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        java.lang.String str23 = builder22.getmongoCollection();
        boolean boolean24 = builder22.storeStatistics;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test7169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7169");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        boolean boolean8 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str9 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str12 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.mongoLocalUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(byteSizeValue7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test7170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7170");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str11 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "flush_interval" + "'", str11, "flush_interval");
    }

    @Test
    public void test7171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7171");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.indexName = "script.default_lang";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.statisticsIndexName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        java.lang.String str14 = builder12.getscript();
        boolean boolean15 = builder12.dropCollection;
        builder12.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        com.mongodb.BasicDBObject basicDBObject23 = builder22.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript24 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder12.mongoOplogFilter(basicDBObject23);
        builder12.storeStatistics = true;
        com.mongodb.BasicDBObject basicDBObject28 = builder12.getmongoCollectionFilter();
        builder11.setmongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder11.mongoUseSSL(true);
        java.lang.Boolean boolean32 = builder11.isMongos;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(executableScript24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(boolean32);
    }

    @Test
    public void test7172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7172");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.riverName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_fields" + "'", str9, "include_fields");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test7173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7173");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        builder0.riverName = "mongodb-1638820218264";
        builder0.typeName = "admin";
        builder0.setsocketTimeout(32);
        java.lang.String str13 = builder0.getmongoLocalUser();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test7174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7174");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.mongoDb("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder39.mongoLocalPassword("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.mongoLocalPassword(".scripts");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean49 = builder48.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder48.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder48.disableIndexRefresh(false);
        builder53.setmongoAdminUser("bulk");
        builder53.settypeName("drop_collection");
        java.lang.String str58 = builder53.getmongoCollection();
        java.util.List<com.mongodb.ServerAddress> serverAddressList59 = builder53.getmongoServers();
        builder47.mongoServers = serverAddressList59;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(serverAddressList59);
    }

    @Test
    public void test7175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7175");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str6 = mongoDBRiverDefinition1.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str8 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "exclude_fields" + "'", str3, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script_type" + "'", str4, "script_type");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "port" + "'", str8, "port");
    }

    @Test
    public void test7176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7176");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        builder8.setriverIndexName("credentials");
        java.lang.String str11 = builder8.mongoAdminPassword;
        builder8.mongoAdminUser = "";
        boolean boolean14 = builder8.getmongoSecondaryReadPreference();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test7177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7177");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int4 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str5 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str7 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "script_type" + "'", str3, "script_type");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index" + "'", str5, "index");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "advanced_transformation" + "'", str7, "advanced_transformation");
    }

    @Test
    public void test7178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7178");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setmongoAdminUser("bulk");
        builder5.isMongos = true;
        boolean boolean10 = builder5.importAllCollections;
        builder5.setindexName("socket_timeout");
        builder5.setscriptType("connect_timeout");
        boolean boolean15 = builder5.mongoUseSSL;
        java.lang.String str16 = builder5.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder5.mongoUseSSL(true);
        builder5.setmongoLocalUser("mongodb-1638820218363");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk" + "'", str16, "bulk");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test7179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7179");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean12 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "type" + "'", str9, "type");
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7180");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("null.null", "script_type");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?script_type?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test7181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7181");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str12 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str13 = mongoDBRiverDefinition1.getHOST_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index" + "'", str12, "index");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "host" + "'", str13, "host");
    }

    @Test
    public void test7182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7182");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet7 = builder5.excludeFields;
        builder5.setconnectTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        builder5.setmongoClientOptions(mongoClientOptions10);
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.socketTimeout((int) (short) 0);
        boolean boolean17 = builder5.storeStatistics;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test7183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7183");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        boolean boolean21 = builder20.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.statisticsIndexName("throttle_size");
        java.util.Set<java.lang.String> strSet24 = builder20.getincludeFields();
        builder20.disableIndexRefresh = true;
        java.lang.String str27 = builder20.scriptType;
        builder20.setmongoAdminPassword("is_mongos");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test7184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7184");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        java.lang.String str18 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.disableIndexRefresh(true);
        builder22.throttleSize = 30000;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        java.lang.String str27 = builder25.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean29 = builder28.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.script("bulk");
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder31.setmongoOplogFilter(basicDBObject32);
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder31.setmongoOplogFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        builder39.skipInitialImport = false;
        builder39.setscriptType("script");
        java.lang.String[] strArray61 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder39.excludeFields((java.util.Set<java.lang.String>) strSet62);
        builder31.setexcludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder31.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder31.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet70 = builder31.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder25.parentTypes(strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder25.riverName("throttle_size");
        java.lang.String str74 = builder73.indexName;
        builder73.setstatisticsIndexName("advanced_transformation");
        builder73.script = "actions";
        java.util.List<com.mongodb.ServerAddress> serverAddressList79 = builder73.getmongoServers();
        builder22.setmongoServers(serverAddressList79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(serverAddressList79);
    }

    @Test
    public void test7185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7185");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        builder5.skipInitialImport = true;
        builder5.indexName = "ssl_verify_certificate";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoCollection("mongodb-1638820218449");
        java.lang.String str14 = builder5.getscriptType();
        builder5.setriverName("connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test7186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7186");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.statisticsIndexName;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = mongoDBRiverDefinition1.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "admin" + "'", str8, "admin");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(serializedObjectSupporter10);
    }

    @Test
    public void test7187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7187");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.riverIndexName("secondary_read_preference");
        builder13.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoLocalUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.disableIndexRefresh(true);
        builder13.setmongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.skipInitialImport(false);
        builder23.setscript("connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test7188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7188");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.setindexName("initial_timestamp");
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.disableIndexRefresh(false);
        java.lang.String str18 = builder17.getstatisticsTypeName();
        java.lang.String str19 = builder17.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.socketTimeout(100);
        boolean boolean22 = builder17.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.disableIndexRefresh(false);
        java.lang.String str29 = builder28.getstatisticsTypeName();
        java.lang.String str30 = builder28.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean34 = builder33.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.script("bulk");
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder36.setmongoOplogFilter(basicDBObject37);
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder36.setmongoOplogFilter(basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        builder44.skipInitialImport = false;
        builder44.setscriptType("script");
        java.lang.String[] strArray66 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder44.excludeFields((java.util.Set<java.lang.String>) strSet67);
        builder36.setexcludeFields((java.util.Set<java.lang.String>) strSet67);
        builder28.includeFields = strSet67;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder17.excludeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder3.includeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory74 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean76 = builder75.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder75.script("bulk");
        com.mongodb.BasicDBObject basicDBObject79 = builder78.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript80 = docScoreNativeScriptFactory74.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        builder3.setmongoCollectionFilter(basicDBObject79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder3.dropCollection(false);
        java.lang.String str84 = builder83.mongoCollection;
        builder83.riverName = "store_statistics";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNotNull(executableScript80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test7189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7189");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder0.mongoClientOptions;
        builder0.mongoSecondaryReadPreference = false;
        builder0.connectTimeout = 100;
        boolean boolean11 = builder0.storeStatistics;
        builder0.socketTimeout = 0;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7190");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        boolean boolean7 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoLocalUser;
        boolean boolean10 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str11 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIncludeCollection();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ssl" + "'", str8, "ssl");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "db" + "'", str11, "db");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test7191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7191");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.dropCollection(true);
        java.lang.String str14 = builder13.getmongoAdminUser();
        java.lang.String str15 = builder13.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.riverIndexName("actions");
        java.lang.String str18 = builder17.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.lang.String str24 = mongoDBRiverDefinition23.script;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "bulk" + "'", str24, "bulk");
    }

    @Test
    public void test7192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7192");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218387" + "'", str3, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
    }

    @Test
    public void test7193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7193");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder6.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder6.setmongoOplogFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder6.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet45 = builder6.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.parentTypes(strSet45);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory47 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean49 = builder48.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder48.script("bulk");
        com.mongodb.BasicDBObject basicDBObject52 = builder51.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript53 = docScoreNativeScriptFactory47.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        builder0.setmongoCollectionFilter(basicDBObject52);
        builder0.script = "size";
        boolean boolean57 = builder0.dropCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertNotNull(executableScript53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test7194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7194");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder12.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition13.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue15 = mongoDBRiverDefinition13.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean16 = mongoDBRiverDefinition13.dropCollection;
        boolean boolean17 = mongoDBRiverDefinition13.getmongoSecondaryReadPreference();
        boolean boolean18 = mongoDBRiverDefinition13.isMongoSecondaryReadPreference();
        int int19 = mongoDBRiverDefinition13.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp20 = mongoDBRiverDefinition13.getInitialTimestamp();
        java.lang.String str21 = mongoDBRiverDefinition13.getMongoDb();
        java.lang.String str22 = mongoDBRiverDefinition13.riverIndexName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = mongoDBRiverDefinition13.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder3.mongoServers(serverAddressList23);
        java.lang.String str25 = builder3.getmongoAdminPassword();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 27017 + "'", int19 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(serverAddressList23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test7195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7195");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString5();
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString17();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString13();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter11.deserializeObjectRiverSettings7();
        java.lang.String str18 = serializedObjectSupporter11.deserializeObjectString5();
        java.lang.String str19 = serializedObjectSupporter11.deserializeObjectString16();
        java.lang.String str20 = serializedObjectSupporter11.deserializeObjectString14();
        java.lang.String str21 = serializedObjectSupporter11.deserializeObjectString11();
        java.lang.String str22 = serializedObjectSupporter11.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter11.deserializeObjectRiverSettings4();
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = riverSettings23.settings();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218299" + "'", str13, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218449" + "'", str14, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218408" + "'", str15, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218264" + "'", str16, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218299" + "'", str18, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_river" + "'", str19, "_river");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_river" + "'", str20, "_river");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb-1638820218387" + "'", str21, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_river" + "'", str22, "_river");
        org.junit.Assert.assertNotNull(riverSettings23);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test7196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7196");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.indexName = "script.default_lang";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder15.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.script("bulk");
        builder23.skipInitialImport = false;
        builder23.setscriptType("script");
        java.lang.String[] strArray45 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder23.excludeFields((java.util.Set<java.lang.String>) strSet46);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean51 = builder50.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.script("bulk");
        builder50.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean57 = builder56.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder56.script("bulk");
        builder59.skipInitialImport = false;
        builder59.setscriptType("script");
        java.lang.String[] strArray81 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder59.excludeFields((java.util.Set<java.lang.String>) strSet82);
        builder50.setparentTypes((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder15.includeFields((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder5.excludeFields((java.util.Set<java.lang.String>) strSet82);
        boolean boolean88 = builder87.skipInitialImport;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test7197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7197");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        java.lang.String str10 = builder5.getscriptType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test7198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7198");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.dropCollection(true);
        builder3.skipInitialImport = true;
        builder3.setisMongos((java.lang.Boolean) false);
        builder3.mongoAdminUser = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder3.mongoAdminUser("mongodb-1638820218363");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7199");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString14();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218387" + "'", str3, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
    }

    @Test
    public void test7200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7200");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getTypeName();
        int int10 = mongoDBRiverDefinition1.getThrottleSize();
        boolean boolean11 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition1.getIncludeFields();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gridfs" + "'", str8, "gridfs");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "admin" + "'", str12, "admin");
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test7201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7201");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.advancedTransformation;
        boolean boolean13 = mongoDBRiverDefinition1.importAllCollections;
        int int14 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean15 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str16 = mongoDBRiverDefinition1.statisticsTypeName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "exclude_fields" + "'", str11, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7202");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.lang.Boolean boolean11 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str12 = mongoDBRiverDefinition1.getStatisticsIndexName();
        int int13 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str14 = mongoDBRiverDefinition1.riverName;
        java.lang.String str15 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str16 = mongoDBRiverDefinition1.getHOST_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 27017 + "'", int13 == 27017);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "host" + "'", str16, "host");
    }

    @Test
    public void test7203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7203");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setconnectTimeout((int) (byte) 1);
        builder3.mongoLocalPassword = "script_type";
        java.lang.String str14 = builder3.mongoLocalPassword;
        builder3.setstatisticsTypeName("initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
    }

    @Test
    public void test7204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7204");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoLocalPassword;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "initial_timestamp" + "'", str5, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test7205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7205");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        builder39.mongoSecondaryReadPreference = false;
        boolean boolean44 = builder39.disableIndexRefresh;
        builder39.mongoAdminUser = "drop_collection";
        boolean boolean47 = builder39.getmongoUseSSL();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test7206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7206");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminUser();
        java.lang.String str11 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str12 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        int int14 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.common.unit.TimeValue timeValue15 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str16 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str18 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "bulk" + "'", str12, "bulk");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "localhost" + "'", str13, "localhost");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "credentials" + "'", str16, "credentials");
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "store_statistics" + "'", str18, "store_statistics");
    }

    @Test
    public void test7207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7207");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.storeStatistics(true);
        boolean boolean15 = builder14.disableIndexRefresh;
        java.lang.String str16 = builder14.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoAdminUser("store_statistics");
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.mongoDb("concurrent_requests");
        boolean boolean22 = builder21.advancedTransformation;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test7208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7208");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        builder5.setdropCollection(false);
        java.lang.String str8 = builder5.statisticsTypeName;
        com.mongodb.BasicDBObject basicDBObject9 = builder5.getmongoCollectionFilter();
        java.lang.String str10 = builder5.mongoAdminUser;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
    }

    @Test
    public void test7209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7209");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.indexName = "script.default_lang";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.statisticsIndexName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoAdminUser("socket_timeout");
        java.lang.String str18 = builder17.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.connectTimeout((int) (short) 1);
        boolean boolean21 = builder17.skipInitialImport;
        java.lang.String str22 = builder17.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoAdminUser("socket_timeout");
        java.lang.String str29 = builder28.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject32 = builder28.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder17.mongoOplogFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder11.mongoOplogFilter(basicDBObject32);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.getmongoClientOptions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(mongoClientOptions35);
    }

    @Test
    public void test7210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7210");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        java.lang.String str4 = builder3.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean6 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.script("bulk");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder8.setmongoOplogFilter(basicDBObject9);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        builder8.setmongoOplogFilter(basicDBObject11);
        builder8.statisticsIndexName = "socket_timeout";
        builder8.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder20.setmongoOplogFilter(basicDBObject21);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder20.setmongoOplogFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        builder28.skipInitialImport = false;
        builder28.setscriptType("script");
        java.lang.String[] strArray50 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder28.excludeFields((java.util.Set<java.lang.String>) strSet51);
        builder20.setexcludeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder8.includeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder3.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test7211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7211");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        java.util.Set<java.lang.String> strSet5 = builder2.getparentTypes();
        builder2.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoLocalPassword("hi!");
        builder11.riverIndexName = "skip_initial_import";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test7212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7212");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoDb();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "admin" + "'", str6, "admin");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7213");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str10 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        int int11 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean12 = mongoDBRiverDefinition1.isStoreStatistics();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition1.getIncludeFields();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test7214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7214");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.disableIndexRefresh(false);
        java.lang.String str17 = builder16.getstatisticsTypeName();
        java.lang.String str18 = builder16.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder24.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder24.setmongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        builder32.skipInitialImport = false;
        builder32.setscriptType("script");
        java.lang.String[] strArray54 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder32.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet55);
        builder16.includeFields = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder5.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder60.setriverIndexName("password");
        builder60.mongoCollection = "include_collection";
        builder60.setisMongos((java.lang.Boolean) true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test7215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7215");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218424" + "'", str4, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820217755" + "'", str7, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(riverSettings8);
    }

    @Test
    public void test7216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7216");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_requests" + "'", str6, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ssl" + "'", str8, "ssl");
    }

    @Test
    public void test7217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7217");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoLocalPassword("ssl");
        java.util.Set<java.lang.String> strSet7 = builder6.excludeFields;
        builder6.mongoDb = "admin";
        boolean boolean10 = builder6.getadvancedTransformation();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7218");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        docScoreSearchScript0.setNextScore((float) 10);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter37 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str38 = serializedObjectSupporter37.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings39 = serializedObjectSupporter37.deserializeObjectRiverSettings3();
        java.lang.String str40 = serializedObjectSupporter37.deserializeObjectString2();
        java.lang.Object obj41 = docScoreSearchScript0.unwrap((java.lang.Object) serializedObjectSupporter37);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter43 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str44 = serializedObjectSupporter43.deserializeObjectString7();
        java.lang.String str45 = serializedObjectSupporter43.deserializeObjectString17();
        java.lang.String str46 = serializedObjectSupporter43.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings47 = serializedObjectSupporter43.deserializeObjectRiverSettings1();
        docScoreSearchScript0.setNextVar("options", (java.lang.Object) serializedObjectSupporter43);
        docScoreSearchScript0.setNextScore((float) 27017);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "_river" + "'", str38, "_river");
        org.junit.Assert.assertNotNull(riverSettings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "_river" + "'", str40, "_river");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "mongodb-1638820218326" + "'", str44, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "mongodb-1638820218449" + "'", str45, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "mongodb-1638820218299" + "'", str46, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings47);
    }

    @Test
    public void test7219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7219");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        builder0.riverName = "mongodb-1638820218264";
        builder0.typeName = "admin";
        builder0.setsocketTimeout(32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean14 = builder13.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("bulk");
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder16.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder16.setmongoOplogFilter(basicDBObject19);
        builder16.statisticsIndexName = "socket_timeout";
        java.lang.String str23 = builder16.riverIndexName;
        java.util.Set<java.lang.String> strSet24 = builder16.parentTypes;
        com.mongodb.BasicDBObject basicDBObject25 = builder16.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder0.scriptType("local");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test7220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7220");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getTypeName();
        int int10 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str11 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.mongoLocalPassword;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gridfs" + "'", str8, "gridfs");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_requests" + "'", str11, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test7221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7221");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        com.mongodb.MongoClientOptions mongoClientOptions7 = mongoDBRiverDefinition1.getMongoClientOptions();
        java.lang.String str8 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoUseSSL();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "connect_timeout" + "'", str6, "connect_timeout");
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7222");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.isAdvancedTransformation();
        boolean boolean10 = mongoDBRiverDefinition1.dropCollection;
        int int11 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str12 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "password" + "'", str12, "password");
    }

    @Test
    public void test7223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7223");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = builder2.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = mongoDBRiverDefinition3.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue5 = mongoDBRiverDefinition3.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean6 = mongoDBRiverDefinition3.dropCollection;
        boolean boolean7 = mongoDBRiverDefinition3.isMongoSecondaryReadPreference();
        java.lang.String str8 = mongoDBRiverDefinition3.getStatisticsTypeName();
        java.lang.String str9 = mongoDBRiverDefinition3.getMongoLocalPassword();
        java.lang.String str10 = mongoDBRiverDefinition3.getIndexName();
        boolean boolean11 = mongoDBRiverDefinition3.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = mongoDBRiverDefinition3.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition3.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter13.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter13.deserializeObjectRiverSettings3();
        org.elasticsearch.script.ScriptService scriptService17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("credentials", "secondary_read_preference", riverSettings16, scriptService17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition3);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertNotNull(riverSettings16);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition18);
    }

    @Test
    public void test7224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7224");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.lang.String str11 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str12 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str14 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "port" + "'", str12, "port");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "socket_timeout" + "'", str13, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "skip_initial_import" + "'", str14, "skip_initial_import");
    }

    @Test
    public void test7225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7225");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218326" + "'", str2, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
    }

    @Test
    public void test7226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7226");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder3.riverName("admin");
        builder33.connectTimeout = 'a';
        boolean boolean36 = builder33.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = builder33.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition37);
    }

    @Test
    public void test7227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7227");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str9 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str11 = mongoDBRiverDefinition1.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "parent_types" + "'", str9, "parent_types");
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7228");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        java.lang.String str10 = builder5.riverIndexName;
        builder5.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test7229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7229");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean12 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str13 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str14 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str16 = mongoDBRiverDefinition1.typeName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "advanced_transformation" + "'", str14, "advanced_transformation");
        org.junit.Assert.assertNotNull(byteSizeValue15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7230");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoAdminUser("advanced_transformation");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter20 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str21 = serializedObjectSupporter20.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings22 = serializedObjectSupporter20.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter20.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings24 = serializedObjectSupporter20.deserializeObjectRiverSettings9();
        builder5.serializedObjectSupporter = serializedObjectSupporter20;
        java.lang.String str26 = serializedObjectSupporter20.deserializeObjectString12();
        java.lang.String str27 = serializedObjectSupporter20.deserializeObjectString11();
        java.lang.String str28 = serializedObjectSupporter20.deserializeObjectString4();
        java.lang.String str29 = serializedObjectSupporter20.deserializeObjectString13();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_river" + "'", str21, "_river");
        org.junit.Assert.assertNotNull(riverSettings22);
        org.junit.Assert.assertNotNull(riverSettings23);
        org.junit.Assert.assertNotNull(riverSettings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "_river" + "'", str26, "_river");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb-1638820218387" + "'", str27, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_river" + "'", str28, "_river");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb-1638820218408" + "'", str29, "mongodb-1638820218408");
    }

    @Test
    public void test7231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7231");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "exclude_fields" + "'", str6, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "actions" + "'", str7, "actions");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7232");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str10 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition1.getMongoOplogFilter();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "connect_timeout" + "'", str10, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(basicDBObject12);
    }

    @Test
    public void test7233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7233");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.util.Set<java.lang.String> strSet2 = builder0.parentTypes;
        builder0.connectTimeout = (short) -1;
        builder0.mongoAdminUser = "_river";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strSet2);
    }

    @Test
    public void test7234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7234");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str10 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "host" + "'", str10, "host");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "import_all_collections" + "'", str11, "import_all_collections");
    }

    @Test
    public void test7235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7235");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder6.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder6.setmongoOplogFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder6.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet45 = builder6.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.parentTypes(strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder0.riverName("throttle_size");
        builder48.setmongoAdminPassword("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.connectTimeout(10);
        com.mongodb.BasicDBObject basicDBObject53 = builder48.mongoCollectionFilter;
        java.util.Set<java.lang.String> strSet54 = builder48.getexcludeFields();
        int int55 = builder48.getsocketTimeout();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test7236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7236");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setmongoAdminUser("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.statisticsIndexName("script.disable_dynamic");
        builder9.connectTimeout = (byte) -1;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7237");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.dropCollection(true);
        builder3.skipInitialImport = true;
        boolean boolean16 = builder3.dropCollection;
        java.lang.String str17 = builder3.scriptType;
        builder3.mongoLocalPassword = "parent_types";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test7238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7238");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = builder4.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition5.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition5.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean8 = mongoDBRiverDefinition5.dropCollection;
        boolean boolean9 = mongoDBRiverDefinition5.isMongoSecondaryReadPreference();
        java.lang.String str10 = mongoDBRiverDefinition5.getStatisticsTypeName();
        java.lang.String str11 = mongoDBRiverDefinition5.getMongoLocalPassword();
        java.lang.String str12 = mongoDBRiverDefinition5.getIndexName();
        boolean boolean13 = mongoDBRiverDefinition5.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = mongoDBRiverDefinition5.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter15 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition5.serializedObjectSupporter = serializedObjectSupporter15;
        java.lang.String str17 = serializedObjectSupporter15.deserializeObjectString5();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString17();
        builder2.serializedObjectSupporter = serializedObjectSupporter15;
        org.elasticsearch.river.RiverSettings riverSettings20 = serializedObjectSupporter15.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings21 = serializedObjectSupporter15.deserializeObjectRiverSettings3();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition5);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb-1638820218299" + "'", str17, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218449" + "'", str18, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings20);
        org.junit.Assert.assertNotNull(riverSettings21);
    }

    @Test
    public void test7239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7239");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.riverIndexName("secondary_read_preference");
        builder13.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoLocalUser("exclude_fields");
        builder13.mongoSecondaryReadPreference = true;
        builder13.setstoreStatistics(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7240");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        int int55 = builder54.throttleSize;
        java.lang.String str56 = builder54.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean58 = builder57.getdropCollection();
        java.lang.String str59 = builder57.getscript();
        boolean boolean60 = builder57.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray61 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList62 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList62, serverAddressArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder57.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList62);
        builder54.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList62);
        boolean boolean66 = builder54.disableIndexRefresh;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter67 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str68 = serializedObjectSupporter67.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings69 = serializedObjectSupporter67.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings70 = serializedObjectSupporter67.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings71 = serializedObjectSupporter67.deserializeObjectRiverSettings2();
        java.lang.String str72 = serializedObjectSupporter67.deserializeObjectString16();
        builder54.serializedObjectSupporter = serializedObjectSupporter67;
        java.lang.String str74 = serializedObjectSupporter67.deserializeObjectString11();
        java.lang.String str75 = serializedObjectSupporter67.deserializeObjectString7();
        java.lang.String str76 = serializedObjectSupporter67.deserializeObjectString13();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(serverAddressArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "_river" + "'", str68, "_river");
        org.junit.Assert.assertNotNull(riverSettings69);
        org.junit.Assert.assertNotNull(riverSettings70);
        org.junit.Assert.assertNotNull(riverSettings71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "_river" + "'", str72, "_river");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "mongodb-1638820218387" + "'", str74, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "mongodb-1638820218326" + "'", str75, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "mongodb-1638820218408" + "'", str76, "mongodb-1638820218408");
    }

    @Test
    public void test7241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7241");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean11 = mongoDBRiverDefinition1.getskipInitialImport();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.lang.String str13 = mongoDBRiverDefinition1.getMongoAdminUser();
        java.lang.String str14 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        boolean boolean15 = mongoDBRiverDefinition1.isMongoGridFS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test7242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7242");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet42 = builder3.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean44 = builder43.getdropCollection();
        java.lang.String str45 = builder43.getscript();
        boolean boolean46 = builder43.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray47 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList48 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList48, serverAddressArray47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder43.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean52 = builder51.getdropCollection();
        java.lang.String str53 = builder51.getscript();
        boolean boolean54 = builder51.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray55 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList56 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList56, serverAddressArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder51.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        builder43.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        builder3.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        boolean boolean61 = builder3.getdropCollection();
        java.lang.String str62 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder3.storeStatistics(false);
        java.lang.String str65 = builder64.getmongoDb();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serverAddressArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serverAddressArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test7243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7243");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString5();
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter11.deserializeObjectRiverSettings3();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString6();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = serializedObjectSupporter11.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218299" + "'", str13, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218299" + "'", str14, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_river" + "'", str16, "_river");
    }

    @Test
    public void test7244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7244");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder9.throttleSize = (byte) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder12.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition13.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue15 = mongoDBRiverDefinition13.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean16 = mongoDBRiverDefinition13.dropCollection;
        boolean boolean17 = mongoDBRiverDefinition13.isMongoSecondaryReadPreference();
        java.lang.String str18 = mongoDBRiverDefinition13.getStatisticsTypeName();
        java.lang.String str19 = mongoDBRiverDefinition13.getMongoLocalPassword();
        java.lang.String str20 = mongoDBRiverDefinition13.getIndexName();
        boolean boolean21 = mongoDBRiverDefinition13.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = mongoDBRiverDefinition13.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter23 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition13.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str25 = serializedObjectSupporter23.deserializeObjectString5();
        java.lang.String str26 = serializedObjectSupporter23.deserializeObjectString17();
        java.lang.String str27 = serializedObjectSupporter23.deserializeObjectString13();
        builder9.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str29 = serializedObjectSupporter23.deserializeObjectString14();
        java.lang.String str30 = serializedObjectSupporter23.deserializeObjectString15();
        java.lang.String str31 = serializedObjectSupporter23.deserializeObjectString18();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardTimestamp22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb-1638820218299" + "'", str25, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb-1638820218449" + "'", str26, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb-1638820218408" + "'", str27, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "_river" + "'", str29, "_river");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mongodb-1638820218424" + "'", str30, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "_river" + "'", str31, "_river");
    }

    @Test
    public void test7245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7245");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        boolean boolean8 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str9 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str11 = mongoDBRiverDefinition1.mongoCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(byteSizeValue7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7246");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        builder5.setdropCollection(false);
        java.lang.String str10 = builder5.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.typeName("mongodb-1638820218363");
        builder12.riverName = "concurrent_requests";
        builder12.socketTimeout = (byte) 10;
        builder12.setthrottleSize((int) (short) 10);
        java.util.Set<java.lang.String> strSet19 = builder12.getincludeFields();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test7247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7247");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoAdminUser("advanced_transformation");
        builder5.mongoCollection = "mongodb-1638820218264";
        builder5.mongoUseSSL = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test7248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7248");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        int int11 = mongoDBRiverDefinition1.getThrottleSize();
        int int12 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str13 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str14 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str15 = mongoDBRiverDefinition1.getRiverName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test7249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7249");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str7 = mongoDBRiverDefinition1.mongoAdminUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test7250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7250");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder3.riverName("admin");
        builder3.setmongoLocalUser("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder3.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoAdminPassword("type");
        java.lang.String str40 = builder39.mongoDb;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter41 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings42 = serializedObjectSupporter41.deserializeObjectRiverSettings4();
        java.lang.String str43 = serializedObjectSupporter41.deserializeObjectString5();
        java.lang.String str44 = serializedObjectSupporter41.deserializeObjectString10();
        builder39.serializedObjectSupporter = serializedObjectSupporter41;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(riverSettings42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "mongodb-1638820218299" + "'", str43, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "_river" + "'", str44, "_river");
    }

    @Test
    public void test7251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7251");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder0.getscript();
        java.lang.String str4 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout(1000);
        com.mongodb.BasicDBObject basicDBObject8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoOplogFilter(basicDBObject8);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "store_statistics" + "'", str3, "store_statistics");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7252");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("mongodb-1638820218449");
        java.lang.String str6 = builder5.getriverIndexName();
        java.lang.String str7 = builder5.getmongoDb();
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test7253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7253");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.isMongos((java.lang.Boolean) true);
        builder11.riverName = "localhost";
        java.lang.String str17 = builder11.getmongoLocalPassword();
        java.lang.String str18 = builder11.getindexName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp19 = builder11.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder11.mongoGridFS(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(wildcardTimestamp19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7254");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory40 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        builder3.mongoCollectionFilter = basicDBObject45;
        builder3.disableIndexRefresh = true;
        builder3.setdropCollection(true);
        int int52 = builder3.throttleSize;
        builder3.setincludeCollection("mongodb-1638820218363");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
    }

    @Test
    public void test7255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7255");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str10 = mongoDBRiverDefinition1.riverIndexName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str12 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str13 = mongoDBRiverDefinition1.statisticsIndexName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7256");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString14();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
    }

    @Test
    public void test7257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7257");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString7();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218424" + "'", str2, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218408" + "'", str5, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218326" + "'", str6, "mongodb-1638820218326");
    }

    @Test
    public void test7258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7258");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218264" + "'", str3, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218299" + "'", str6, "mongodb-1638820218299");
    }

    @Test
    public void test7259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7259");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        int int10 = mongoDBRiverDefinition1.getThrottleSize();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "import_all_collections" + "'", str9, "import_all_collections");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test7260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7260");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        int int8 = builder5.connectTimeout;
        java.lang.String[] strArray55 = new java.lang.String[] { "type", "index", "", "db", "null.null", "_river", "mongodb-1638820217755", "mongodb-1638820218449", "local", "script.default_lang", "bulk_size", "host", "size", ".scripts", "secondary_read_preference", "script", "script_type", "mongodb-1638820218424", "script", "bulk_timeout", "collection", "mongodb-1638820218424", "initial_timestamp", "skip_initial_import", "", "port", "initial_timestamp", "mongodb-1638820217755", ".scripts", "index", "password", ".scripts", "flush_interval", "is_mongos", "ssl_verify_certificate", "servers", "localhost", "script.disable_dynamic", "ssl_verify_certificate", "bulk", "connect_timeout", "mongodb-1638820218449", "", "skip_initial_import", "mongodb-1638820218449", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder5.parentTypes((java.util.Set<java.lang.String>) strSet56);
        java.lang.String str59 = builder5.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder5.socketTimeout(0);
        builder61.setskipInitialImport(false);
        boolean boolean64 = builder61.getimportAllCollections();
        builder61.scriptType = "is_mongos";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test7261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7261");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str9 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str11 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition1.mongoServers;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNotNull(serverAddressList12);
    }

    @Test
    public void test7262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7262");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.connectTimeout((int) (short) 1);
        boolean boolean9 = builder5.skipInitialImport;
        java.lang.String str10 = builder5.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("socket_timeout");
        java.lang.String str17 = builder16.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject20 = builder16.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder5.mongoOplogFilter(basicDBObject20);
        builder21.setmongoCollection("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean25 = builder24.getdropCollection();
        java.lang.String str26 = builder24.getscript();
        boolean boolean27 = builder24.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder24.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet33 = builder32.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.mongoLocalUser("credentials");
        java.lang.String str36 = builder35.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean38 = builder37.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.script("bulk");
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder40.setmongoOplogFilter(basicDBObject41);
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder40.setmongoOplogFilter(basicDBObject43);
        builder40.statisticsIndexName = "socket_timeout";
        builder40.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean50 = builder49.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder49.script("bulk");
        com.mongodb.BasicDBObject basicDBObject53 = null;
        builder52.setmongoOplogFilter(basicDBObject53);
        com.mongodb.BasicDBObject basicDBObject55 = null;
        builder52.setmongoOplogFilter(basicDBObject55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean58 = builder57.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.script("bulk");
        builder60.skipInitialImport = false;
        builder60.setscriptType("script");
        java.lang.String[] strArray82 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder60.excludeFields((java.util.Set<java.lang.String>) strSet83);
        builder52.setexcludeFields((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder40.includeFields((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder35.excludeFields((java.util.Set<java.lang.String>) strSet83);
        builder24.parentTypes = strSet83;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder21.parentTypes((java.util.Set<java.lang.String>) strSet83);
        boolean boolean91 = builder21.getimportAllCollections();
        boolean boolean92 = builder21.getskipInitialImport();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test7263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7263");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str14 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "type" + "'", str9, "type");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index" + "'", str11, "index");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_fields" + "'", str14, "include_fields");
    }

    @Test
    public void test7264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoAdminUser;
        boolean boolean10 = mongoDBRiverDefinition1.advancedTransformation;
        boolean boolean11 = mongoDBRiverDefinition1.getstoreStatistics();
        boolean boolean12 = mongoDBRiverDefinition1.isStoreStatistics();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7265");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str12 = mongoDBRiverDefinition1.mongoCollection;
        boolean boolean13 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str14 = mongoDBRiverDefinition1.getRiverIndexName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition1.initialTimestamp;
        boolean boolean16 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str17 = mongoDBRiverDefinition1.getPORT_FIELD();
        boolean boolean18 = mongoDBRiverDefinition1.storeStatistics;
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition1.getIncludeFields();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "port" + "'", str17, "port");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test7266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7266");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str7 = mongoDBRiverDefinition1.indexName;
        java.lang.String str8 = mongoDBRiverDefinition1.mongoDb;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test7267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7267");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString11();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218387" + "'", str6, "mongodb-1638820218387");
    }

    @Test
    public void test7268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7268");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("local", "dummy-stats");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?dummy-stats?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test7269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7269");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.storeStatistics = false;
        builder5.setadvancedTransformation(false);
        boolean boolean11 = builder5.getdisableIndexRefresh();
        int int12 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSSLVerifyCertificate(true);
        java.lang.Class<?> wildcardClass16 = builder15.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test7270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7270");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition1.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertNotNull(basicDBObject11);
    }

    @Test
    public void test7271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7271");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.scriptType("type");
        boolean boolean14 = builder3.getmongoUseSSL();
        java.util.Set<java.lang.String> strSet15 = builder3.includeFields;
        builder3.isMongos = true;
        builder3.setmongoCollection("flush_interval");
        java.lang.Boolean boolean20 = builder3.isMongos;
        java.lang.String str21 = builder3.getindexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + true + "'", boolean20, true);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test7272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7272");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str10 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str11 = mongoDBRiverDefinition1.includeCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "admin" + "'", str8, "admin");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test7273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7273");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        org.elasticsearch.common.logging.ESLogger eSLogger4 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str5 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoCollectionFilter;
        boolean boolean8 = mongoDBRiverDefinition1.mongoGridFS;
        int int9 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str10 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str11 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition1.mongoClientOptions;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(eSLogger4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "socket_timeout" + "'", str5, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(mongoClientOptions12);
    }

    @Test
    public void test7274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7274");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.scriptType("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.disableIndexRefresh(false);
        builder20.setthrottleSize((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.script("bulk");
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder26.setmongoOplogFilter(basicDBObject27);
        com.mongodb.BasicDBObject basicDBObject29 = null;
        builder26.setmongoOplogFilter(basicDBObject29);
        boolean boolean31 = builder26.mongoGridFS;
        java.lang.String[] strArray74 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder26.includeFields((java.util.Set<java.lang.String>) strSet75);
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder14.connectTimeout((int) (short) 1);
        java.lang.String str82 = builder14.getstatisticsTypeName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test7275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7275");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str8 = mongoDBRiverDefinition1.mongoDb;
        boolean boolean9 = mongoDBRiverDefinition1.getimportAllCollections();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7276");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str8 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(byteSizeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "servers" + "'", str8, "servers");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "connect_timeout" + "'", str9, "connect_timeout");
    }

    @Test
    public void test7277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7277");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoDb();
        boolean boolean12 = mongoDBRiverDefinition1.isMongoGridFS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition1.initialTimestamp;
        boolean boolean14 = mongoDBRiverDefinition1.getstoreStatistics();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test7278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7278");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.setmongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder14.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder14.setmongoOplogFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        builder22.skipInitialImport = false;
        builder22.setscriptType("script");
        java.lang.String[] strArray44 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder22.excludeFields((java.util.Set<java.lang.String>) strSet45);
        builder14.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder14.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory51 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean53 = builder52.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.script("bulk");
        com.mongodb.BasicDBObject basicDBObject56 = builder55.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript57 = docScoreNativeScriptFactory51.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder14.mongoCollectionFilter = basicDBObject56;
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder5.mongoOplogFilter = basicDBObject56;
        builder5.throttleSize = '#';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder5.advancedTransformation(true);
        java.lang.String str66 = builder65.getmongoDb();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(executableScript57);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test7279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7279");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        builder7.setincludeCollection("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.indexName("throttle_size");
        builder11.storeStatistics = true;
        builder11.mongoAdminPassword = "credentials";
        java.lang.String str16 = builder11.includeCollection;
        java.lang.String str17 = builder11.mongoAdminPassword;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "credentials" + "'", str16, "credentials");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "credentials" + "'", str17, "credentials");
    }

    @Test
    public void test7280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7280");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
    }

    @Test
    public void test7281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7281");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_fields" + "'", str10, "include_fields");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "type" + "'", str11, "type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "store_statistics" + "'", str13, "store_statistics");
    }

    @Test
    public void test7282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7282");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean6 = mongoDBRiverDefinition1.isDropCollection();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "type" + "'", str8, "type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "user" + "'", str9, "user");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "null.null" + "'", str11, "null.null");
    }

    @Test
    public void test7283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7283");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        com.mongodb.BasicDBObject basicDBObject7 = builder5.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.connectTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder13.setmongoOplogFilter(basicDBObject14);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder13.setmongoOplogFilter(basicDBObject16);
        builder13.statisticsIndexName = "socket_timeout";
        java.lang.String str20 = builder13.riverIndexName;
        boolean boolean21 = builder13.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.dropCollection(true);
        builder23.mongoAdminPassword = "_river";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = builder26.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = mongoDBRiverDefinition27.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue29 = mongoDBRiverDefinition27.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean30 = mongoDBRiverDefinition27.dropCollection;
        boolean boolean31 = mongoDBRiverDefinition27.isMongoSecondaryReadPreference();
        java.lang.String str32 = mongoDBRiverDefinition27.getStatisticsTypeName();
        java.lang.String str33 = mongoDBRiverDefinition27.getMongoLocalPassword();
        java.lang.String str34 = mongoDBRiverDefinition27.getCONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet35 = mongoDBRiverDefinition27.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject36 = mongoDBRiverDefinition27.mongoCollectionFilter;
        builder23.setmongoCollectionFilter(basicDBObject36);
        builder9.mongoOplogFilter = basicDBObject36;
        builder9.dropCollection = true;
        builder9.settypeName("credentials");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "connect_timeout" + "'", str34, "connect_timeout");
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(basicDBObject36);
    }

    @Test
    public void test7284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7284");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str9 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getDB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "type" + "'", str5, "type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "is_mongos" + "'", str6, "is_mongos");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "initial_timestamp" + "'", str7, "initial_timestamp");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "disable_index_refresh" + "'", str9, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "db" + "'", str10, "db");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7285");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder9.setmongoCollection("advanced_transformation");
        boolean boolean12 = builder9.getdropCollection();
        boolean boolean13 = builder9.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.mongoCollection("admin");
        int int16 = builder15.socketTimeout;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test7286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7286");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str10 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "advanced_transformation" + "'", str11, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "servers" + "'", str12, "servers");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
    }

    @Test
    public void test7287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7287");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str7 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.parentTypes;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondary_read_preference" + "'", str7, "secondary_read_preference");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test7288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7288");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str9 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "options" + "'", str9, "options");
    }

    @Test
    public void test7289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7289");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.scriptType("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.mongoAdminPassword("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder5.connectTimeout((int) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.throttleSize((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.statisticsTypeName("flush_interval");
        builder22.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test7290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7290");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("", "bulk_size");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?bulk_size?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test7291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7291");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218408" + "'", str3, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820217755" + "'", str4, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218424" + "'", str5, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings6);
    }

    @Test
    public void test7292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7292");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "options" + "'", str7, "options");
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "null.null" + "'", str10, "null.null");
    }

    @Test
    public void test7293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7293");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str9 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoDb;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index" + "'", str10, "index");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7294");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str10 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean11 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str12 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str14 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index" + "'", str10, "index");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "collection" + "'", str14, "collection");
    }

    @Test
    public void test7295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7295");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.getMongoServers();
        boolean boolean8 = mongoDBRiverDefinition1.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions9 = mongoDBRiverDefinition1.mongoClientOptions;
        boolean boolean10 = mongoDBRiverDefinition1.disableIndexRefresh;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7296");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218387" + "'", str3, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218424" + "'", str4, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNotNull(riverSettings6);
    }

    @Test
    public void test7297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7297");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean2 = builder1.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.disableIndexRefresh(false);
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        java.lang.String str10 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition9.parentTypes;
        boolean boolean12 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean13 = mongoDBRiverDefinition9.dropCollection;
        java.lang.String str14 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.Object obj16 = docScoreSearchScript0.unwrap((java.lang.Object) str15);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("socket_timeout");
        java.lang.String str25 = builder24.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.connectTimeout((int) (short) 1);
        boolean boolean28 = builder24.skipInitialImport;
        java.lang.String str29 = builder24.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean31 = builder30.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("socket_timeout");
        java.lang.String str36 = builder35.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject39 = builder35.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder24.mongoOplogFilter(basicDBObject39);
        java.lang.Object obj41 = docScoreSearchScript0.unwrap((java.lang.Object) builder24);
        org.bson.types.Binary binary42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder24.initialTimestamp(binary42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index" + "'", str10, "index");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "throttle_size" + "'", obj16, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(obj41);
    }

    @Test
    public void test7298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7298");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoDb();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.disableIndexRefresh(false);
        java.lang.String str17 = builder16.getstatisticsTypeName();
        java.lang.String str18 = builder16.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder24.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder24.setmongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        builder32.skipInitialImport = false;
        builder32.setscriptType("script");
        java.lang.String[] strArray54 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder32.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet55);
        builder16.includeFields = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder5.excludeFields((java.util.Set<java.lang.String>) strSet55);
        java.lang.String str61 = builder60.mongoDb;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test7300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7300");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str7 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.disableIndexRefresh;
        boolean boolean9 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoLocalUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test7301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7301");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.mongoSSLVerifyCertificate;
        int int13 = builder11.getsocketTimeout();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test7302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7302");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoAdminUser();
        java.lang.String str5 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean7 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "parent_types" + "'", str5, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test7303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7303");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        int int5 = builder4.connectTimeout;
        java.util.Set<java.lang.String> strSet6 = builder4.getexcludeFields();
        builder4.mongoUseSSL = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.statisticsTypeName("type");
        boolean boolean11 = builder10.mongoGridFS;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7304");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str6 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getTYPE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.isDropCollection();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "advanced_transformation" + "'", str6, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "type" + "'", str7, "type");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7305");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean12 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str13 = mongoDBRiverDefinition1.riverIndexName;
        boolean boolean14 = mongoDBRiverDefinition1.getskipInitialImport();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter15 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str16 = serializedObjectSupporter15.deserializeObjectString7();
        java.lang.String str17 = serializedObjectSupporter15.deserializeObjectString11();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings19 = serializedObjectSupporter15.deserializeObjectRiverSettings5();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter15;
        java.lang.String str21 = serializedObjectSupporter15.deserializeObjectString11();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218326" + "'", str16, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb-1638820218387" + "'", str17, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218363" + "'", str18, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb-1638820218387" + "'", str21, "mongodb-1638820218387");
    }

    @Test
    public void test7306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7306");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.includeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean15 = mongoDBRiverDefinition1.isMongoUseSSL();
        boolean boolean16 = mongoDBRiverDefinition1.isImportAllCollections();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "skip_initial_import" + "'", str11, "skip_initial_import");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test7307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7307");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.connectTimeout((int) (short) 1);
        boolean boolean9 = builder5.skipInitialImport;
        builder5.skipInitialImport = false;
        java.lang.String str12 = builder5.riverIndexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7308");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        java.lang.String str32 = builder3.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder3.mongoCollection("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoSecondaryReadPreference(false);
        builder36.setmongoGridFS(true);
        boolean boolean39 = builder36.getadvancedTransformation();
        builder36.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test7309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7309");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.Boolean boolean9 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str10 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flush_interval" + "'", str10, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7310");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder21.setmongoOplogFilter(basicDBObject22);
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder21.setmongoOplogFilter(basicDBObject24);
        builder21.statisticsIndexName = "socket_timeout";
        java.lang.String str28 = builder21.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder21.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory31 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean33 = builder32.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.script("bulk");
        com.mongodb.BasicDBObject basicDBObject36 = builder35.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript37 = docScoreNativeScriptFactory31.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder21.mongoCollectionFilter(basicDBObject36);
        boolean boolean39 = builder38.dropCollection;
        builder38.setriverName("collection");
        builder38.mongoGridFS = true;
        builder38.setisMongos((java.lang.Boolean) true);
        java.lang.String str46 = builder38.riverName;
        builder38.advancedTransformation = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean50 = builder49.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder49.script("bulk");
        builder49.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean56 = builder55.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder55.script("bulk");
        builder58.skipInitialImport = false;
        builder58.setscriptType("script");
        java.lang.String[] strArray80 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder58.excludeFields((java.util.Set<java.lang.String>) strSet81);
        builder49.setparentTypes((java.util.Set<java.lang.String>) strSet81);
        builder38.includeFields = strSet81;
        builder13.setincludeFields((java.util.Set<java.lang.String>) strSet81);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(executableScript37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "collection" + "'", str46, "collection");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test7311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7311");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        boolean boolean23 = builder5.getstoreStatistics();
        java.lang.String str24 = builder5.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        builder25.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder25.connectTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder25.statisticsTypeName("credentials");
        java.lang.String str35 = builder25.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder25.statisticsIndexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        java.lang.String str40 = builder38.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        com.mongodb.BasicDBObject basicDBObject45 = null;
        builder44.setmongoOplogFilter(basicDBObject45);
        com.mongodb.BasicDBObject basicDBObject47 = null;
        builder44.setmongoOplogFilter(basicDBObject47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean50 = builder49.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder49.script("bulk");
        builder52.skipInitialImport = false;
        builder52.setscriptType("script");
        java.lang.String[] strArray74 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder52.excludeFields((java.util.Set<java.lang.String>) strSet75);
        builder44.setexcludeFields((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder44.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder44.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet83 = builder44.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder38.parentTypes(strSet83);
        builder25.excludeFields = strSet83;
        builder5.setexcludeFields(strSet83);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test7312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7312");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218264" + "'", str3, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218264" + "'", str5, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings6);
    }

    @Test
    public void test7313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7313");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        com.mongodb.BasicDBObject basicDBObject2 = builder0.mongoCollectionFilter;
        builder0.disableIndexRefresh = false;
        java.lang.String str5 = builder0.getscriptType();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(basicDBObject2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test7314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7314");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        builder4.setmongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.typeName("script_type");
        boolean boolean9 = builder8.disableIndexRefresh;
        java.lang.String str10 = builder8.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7315");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder0.getstatisticsTypeName();
        java.lang.String str7 = builder0.script;
        java.lang.String str8 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean10 = builder9.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.script("bulk");
        builder9.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter15 = builder9.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        builder9.mongoClientOptions = mongoClientOptions16;
        builder9.settypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder25.setmongoOplogFilter(basicDBObject26);
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder25.setmongoOplogFilter(basicDBObject28);
        java.lang.String str30 = builder25.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean32 = builder31.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoAdminUser("socket_timeout");
        java.lang.String str37 = builder36.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject40 = builder36.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder25.mongoCollectionFilter(basicDBObject40);
        builder41.riverName = "mongodb-1638820218264";
        builder41.mongoGridFS = true;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter48 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str49 = serializedObjectSupporter48.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings50 = serializedObjectSupporter48.deserializeObjectRiverSettings4();
        java.lang.String str51 = serializedObjectSupporter48.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings52 = serializedObjectSupporter48.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings52, scriptService53);
        java.lang.String str55 = mongoDBRiverDefinition54.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions56 = mongoDBRiverDefinition54.mongoClientOptions;
        builder41.mongoClientOptions = mongoClientOptions56;
        builder9.setmongoClientOptions(mongoClientOptions56);
        builder0.setmongoClientOptions(mongoClientOptions56);
        java.util.Set<java.lang.String> strSet60 = builder0.getincludeFields();
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        builder0.setmongoClientOptions(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk" + "'", str7, "bulk");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(serializedObjectSupporter15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "mongodb-1638820218326" + "'", str49, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "mongodb-1638820218326" + "'", str51, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings52);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "mycollection" + "'", str55, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertNull(strSet60);
    }

    @Test
    public void test7316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7316");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getimportAllCollections();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.parentTypes;
        int int11 = mongoDBRiverDefinition1.connectTimeout;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_bulk_requests" + "'", str6, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test7317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7317");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder38.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder47.skipInitialImport = false;
        builder47.setscriptType("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder47.excludeFields((java.util.Set<java.lang.String>) strSet70);
        builder38.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder3.includeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder3.throttleSize(1000);
        builder76.setskipInitialImport(false);
        builder76.setstatisticsTypeName("localhost");
        java.lang.String str81 = builder76.statisticsTypeName;
        java.lang.String str82 = builder76.indexName;
        builder76.dropCollection = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "localhost" + "'", str81, "localhost");
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test7318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7318");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.includeCollection;
        boolean boolean12 = mongoDBRiverDefinition1.getdropCollection();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition1.getExcludeFields();
        java.lang.String str14 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        boolean boolean17 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str18 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_fields" + "'", str10, "include_fields");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "size" + "'", str14, "size");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script_type" + "'", str15, "script_type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "is_mongos" + "'", str16, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "import_all_collections" + "'", str18, "import_all_collections");
    }

    @Test
    public void test7319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7319");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str9 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoDb;
        boolean boolean12 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(basicDBObject8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gridfs" + "'", str9, "gridfs");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "filter" + "'", str10, "filter");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7320");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        builder3.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        java.lang.String str43 = builder3.statisticsIndexName;
        builder3.includeCollection = "throttle_size";
        int int46 = builder3.getconnectTimeout();
        builder3.setstatisticsTypeName("bulk");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test7321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7321");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test7322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7322");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = builder31.build();
        java.lang.String str33 = mongoDBRiverDefinition32.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet34 = mongoDBRiverDefinition32.parentTypes;
        java.lang.String str35 = mongoDBRiverDefinition32.riverName;
        boolean boolean36 = mongoDBRiverDefinition32.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = mongoDBRiverDefinition32.mongoServers;
        builder3.mongoServers = serverAddressList37;
        builder3.mongoLocalPassword = "disable_index_refresh";
        java.util.Set<java.lang.String> strSet41 = builder3.excludeFields;
        builder3.throttleSize = 32;
        builder3.setriverIndexName("_river");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "index" + "'", str33, "index");
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertNotNull(strSet41);
    }

    @Test
    public void test7323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7323");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.getadvancedTransformation();
        boolean boolean8 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean9 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str10 = mongoDBRiverDefinition1.getScript();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name" + "'", str5, "name");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "throttle_size" + "'", str6, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test7324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7324");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getIndexName();
        int int8 = mongoDBRiverDefinition1.getThrottleSize();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_requests" + "'", str6, "concurrent_requests");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test7325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7325");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.riverName("script.disable_dynamic");
        builder8.setmongoSecondaryReadPreference(false);
        builder8.socketTimeout = 27017;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoDb("ssl");
        int int15 = builder8.connectTimeout;
        java.lang.String str16 = builder8.getmongoAdminPassword();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test7326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        java.lang.String str12 = builder11.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoAdminUser("localhost");
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder11.setmongoClientOptions(mongoClientOptions15);
        builder11.setstatisticsTypeName("size");
        java.lang.String str19 = builder11.getstatisticsTypeName();
        builder11.importAllCollections = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "size" + "'", str19, "size");
    }

    @Test
    public void test7327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7327");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setconnectTimeout((int) (byte) 1);
        builder3.mongoLocalPassword = "script_type";
        java.lang.String str14 = builder3.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder3.connectTimeout((int) (byte) 1);
        boolean boolean17 = builder16.mongoGridFS;
        builder16.indexName = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = builder20.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition21.mongoServers;
        java.lang.String str23 = mongoDBRiverDefinition21.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet24 = mongoDBRiverDefinition21.getParentTypes();
        int int25 = mongoDBRiverDefinition21.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp26 = mongoDBRiverDefinition21.getInitialTimestamp();
        java.lang.String str27 = mongoDBRiverDefinition21.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition21.getCONNECT_TIMEOUT();
        boolean boolean29 = mongoDBRiverDefinition21.storeStatistics;
        java.util.Set<java.lang.String> strSet30 = mongoDBRiverDefinition21.parentTypes;
        com.mongodb.BasicDBObject basicDBObject31 = mongoDBRiverDefinition21.mongoCollectionFilter;
        builder16.setmongoOplogFilter(basicDBObject31);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition21);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "bulk_timeout" + "'", str23, "bulk_timeout");
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "script" + "'", str27, "script");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "connect_timeout" + "'", str28, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(basicDBObject31);
    }

    @Test
    public void test7328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7328");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.socketTimeout = (byte) -1;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder2.mongoOplogFilter = basicDBObject5;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.storeStatistics(false);
        java.lang.String str9 = builder8.includeCollection;
        builder8.throttleSize = 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.disableIndexRefresh(true);
        builder8.connectTimeout = (byte) 10;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test7329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7329");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setmongoAdminUser("bulk");
        builder5.isMongos = true;
        boolean boolean10 = builder5.importAllCollections;
        builder5.setindexName("socket_timeout");
        builder5.setscriptType("connect_timeout");
        boolean boolean15 = builder5.mongoUseSSL;
        java.lang.String str16 = builder5.script;
        int int17 = builder5.getthrottleSize();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk" + "'", str16, "bulk");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test7330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7330");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.includeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean15 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str16 = mongoDBRiverDefinition1.getUSER_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "skip_initial_import" + "'", str11, "skip_initial_import");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "user" + "'", str16, "user");
    }

    @Test
    public void test7331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7331");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.Boolean boolean8 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.elasticsearch.common.logging.ESLogger eSLogger10 = mongoDBRiverDefinition1.getlogger();
        boolean boolean11 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str12 = mongoDBRiverDefinition1.getMongoDb();
        int int13 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "null.null" + "'", str9, "null.null");
        org.junit.Assert.assertNotNull(eSLogger10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test7332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7332");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition1.disableIndexRefresh;
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str9 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getHOST_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = mongoDBRiverDefinition1.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "parent_types" + "'", str9, "parent_types");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "host" + "'", str10, "host");
        org.junit.Assert.assertNull(serializedObjectSupporter11);
    }

    @Test
    public void test7333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7333");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        boolean boolean8 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str9 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        int int10 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str11 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "is_mongos" + "'", str9, "is_mongos");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_requests" + "'", str11, "concurrent_requests");
    }

    @Test
    public void test7334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7334");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.lang.String str14 = builder11.getincludeCollection();
        builder11.setdisableIndexRefresh(false);
        java.lang.String str17 = builder11.getriverName();
        builder11.setriverIndexName("dummy-stats");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test7335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7335");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.disableIndexRefresh(false);
        java.lang.String str14 = builder13.getstatisticsTypeName();
        java.lang.String str15 = builder13.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getdropCollection();
        java.lang.String str18 = builder16.getscript();
        boolean boolean19 = builder16.dropCollection;
        builder16.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.script("bulk");
        com.mongodb.BasicDBObject basicDBObject27 = builder26.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder16.mongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder13.mongoCollectionFilter(basicDBObject27);
        builder7.mongoOplogFilter = basicDBObject27;
        builder7.mongoLocalUser = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        int int35 = mongoDBRiverDefinition34.getDEFAULT_BULK_ACTIONS();
        boolean boolean36 = mongoDBRiverDefinition34.isStoreStatistics();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1000 + "'", int35 == 1000);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test7336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7336");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.connectTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.typeName("include_fields");
        java.lang.String str11 = builder5.getincludeCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test7337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7337");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        java.lang.String str7 = builder5.gettypeName();
        java.lang.String str8 = builder5.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.includeCollection("include_fields");
        int int11 = builder5.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoCollection("skip_initial_import");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter14 = builder5.serializedObjectSupporter;
        builder5.skipInitialImport = false;
        builder5.setstatisticsIndexName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.mongoAdminUser("type");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test7338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7338");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue8 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str9 = mongoDBRiverDefinition1.getRiverName();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoDb();
        int int12 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str13 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 60000 + "'", int10 == 60000);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "exclude_fields" + "'", str13, "exclude_fields");
    }

    @Test
    public void test7339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7339");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.throttleSize(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        builder8.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder8.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject26 = builder25.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.socketTimeout((int) (byte) 0);
        com.mongodb.BasicDBObject basicDBObject29 = builder28.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder7.mongoOplogFilter(basicDBObject29);
        java.util.Set<java.lang.String> strSet31 = builder30.parentTypes;
        boolean boolean32 = builder30.getmongoSecondaryReadPreference();
        java.lang.String str33 = builder30.script;
        builder30.setindexName("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "bulk" + "'", str33, "bulk");
    }

    @Test
    public void test7340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7340");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820217755" + "'", str2, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
    }

    @Test
    public void test7341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7341");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        int int9 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.mongoLocalPassword("include_fields");
        java.lang.String str12 = builder11.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder11.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.statisticsTypeName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.lang.String str17 = mongoDBRiverDefinition16.getFLUSH_INTERVAL_FIELD();
        boolean boolean18 = mongoDBRiverDefinition16.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "flush_interval" + "'", str17, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test7342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7342");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        int int6 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 30000 + "'", int6 == 30000);
    }

    @Test
    public void test7343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7343");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder3.initialTimestamp;
        builder3.setmongoAdminUser("concurrent_requests");
        builder3.mongoAdminUser = "disable_index_refresh";
        java.lang.String str15 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getdropCollection();
        java.lang.String str18 = builder16.getscript();
        boolean boolean19 = builder16.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray20 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList21 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList21, serverAddressArray20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder16.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean25 = builder24.getdropCollection();
        java.lang.String str26 = builder24.getscript();
        boolean boolean27 = builder24.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder24.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        builder16.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        java.util.Set<java.lang.String> strSet33 = builder16.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder16.riverName("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder39.setmongoOplogFilter(basicDBObject40);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder39.setmongoOplogFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder47.skipInitialImport = false;
        builder47.setscriptType("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder47.excludeFields((java.util.Set<java.lang.String>) strSet70);
        builder39.setexcludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder39.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder39.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet78 = builder39.getexcludeFields();
        builder16.setexcludeFields(strSet78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder3.parentTypes(strSet78);
        builder3.settypeName("credentials");
        com.mongodb.BasicDBObject basicDBObject83 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder3.mongoCollectionFilter(basicDBObject83);
        java.lang.String str85 = builder84.mongoAdminPassword;
        boolean boolean86 = builder84.getmongoUseSSL();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serverAddressArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test7344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7344");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        int int12 = mongoDBRiverDefinition1.connectTimeout;
        boolean boolean13 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.Boolean boolean15 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str16 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str17 = mongoDBRiverDefinition1.indexName;
        java.lang.String str18 = mongoDBRiverDefinition1.getMongoAdminUser();
        int int19 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str20 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null.null" + "'", str16, "null.null");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script" + "'", str20, "script");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "include_collection" + "'", str21, "include_collection");
    }

    @Test
    public void test7345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7345");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str14 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str15 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition1.getMongoOplogFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition1.getMongoServers();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ssl_verify_certificate" + "'", str15, "ssl_verify_certificate");
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertNotNull(serverAddressList17);
    }

    @Test
    public void test7346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7346");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("mongodb-1638820218264", "script_type", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?script_type?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test7347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7347");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.Boolean boolean11 = mongoDBRiverDefinition1.getisMongos();
        int int12 = mongoDBRiverDefinition1.socketTimeout;
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str14 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disable_index_refresh" + "'", str15, "disable_index_refresh");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7348");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory40 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        builder3.mongoCollectionFilter = basicDBObject45;
        builder3.disableIndexRefresh = true;
        builder3.setdropCollection(true);
        builder3.setdisableIndexRefresh(true);
        builder3.setscriptType("mongodb-1638820218387");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript46);
    }

    @Test
    public void test7349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7349");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet42 = builder3.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean44 = builder43.getdropCollection();
        java.lang.String str45 = builder43.getscript();
        boolean boolean46 = builder43.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray47 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList48 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList48, serverAddressArray47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder43.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean52 = builder51.getdropCollection();
        java.lang.String str53 = builder51.getscript();
        boolean boolean54 = builder51.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray55 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList56 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList56, serverAddressArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder51.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        builder43.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        builder3.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        java.lang.String str61 = builder3.getmongoLocalUser();
        builder3.mongoAdminUser = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder3.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder3.riverIndexName("null.null");
        int int68 = builder3.connectTimeout;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serverAddressArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serverAddressArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test7350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7350");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.isMongos((java.lang.Boolean) true);
        java.lang.String str15 = builder11.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.statisticsIndexName("");
        builder11.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder11.mongoDb("connect_timeout");
        builder21.setmongoUseSSL(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7351");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        builder5.skipInitialImport = true;
        builder5.indexName = "ssl_verify_certificate";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoCollection("mongodb-1638820218449");
        java.lang.String str14 = builder13.getmongoAdminUser();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test7352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7352");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.riverIndexName("drop_collection");
        builder8.setsocketTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoLocalUser("port");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7353");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        builder3.riverName = "bulk";
        builder3.importAllCollections = true;
        java.lang.String str46 = builder3.getmongoDb();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test7354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7354");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoAdminUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "options" + "'", str7, "options");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "port" + "'", str8, "port");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test7355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7355");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        java.lang.String str4 = builder3.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.scriptType("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.script("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoDb("bulk_size");
        boolean boolean11 = builder6.importAllCollections;
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder6.getmongoServers();
        builder6.connectTimeout = 10;
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(serverAddressList12);
    }

    @Test
    public void test7356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7356");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.env.Environment environment6 = null;
        org.elasticsearch.script.ScriptEngineService[] scriptEngineServiceArray7 = new org.elasticsearch.script.ScriptEngineService[] {};
        java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService> scriptEngineServiceSet8 = new java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet8, scriptEngineServiceArray7);
        org.elasticsearch.watcher.ResourceWatcherService resourceWatcherService10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.script.ScriptService scriptService11 = new org.elasticsearch.script.ScriptService(settings5, environment6, (java.util.Set<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet8, resourceWatcherService10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(scriptEngineServiceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7357");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString12();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218299" + "'", str3, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218363" + "'", str4, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
    }

    @Test
    public void test7358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7358");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.scriptType("gridfs");
        java.lang.String str15 = builder5.getscriptType();
        builder5.mongoLocalUser = "size";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gridfs" + "'", str15, "gridfs");
    }

    @Test
    public void test7359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7359");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean7 = builder6.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.script("bulk");
        builder9.skipInitialImport = false;
        builder9.setscriptType("script");
        java.lang.String[] strArray31 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet32);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        builder39.skipInitialImport = false;
        builder39.setscriptType("script");
        java.lang.String[] strArray61 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder39.excludeFields((java.util.Set<java.lang.String>) strSet62);
        java.lang.String str65 = builder64.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder64.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.riverIndexName("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = builder70.build();
        java.lang.String str72 = mongoDBRiverDefinition71.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet73 = mongoDBRiverDefinition71.parentTypes;
        java.lang.String str74 = mongoDBRiverDefinition71.riverName;
        boolean boolean75 = mongoDBRiverDefinition71.disableIndexRefresh;
        java.lang.String str76 = mongoDBRiverDefinition71.riverIndexName;
        boolean boolean77 = mongoDBRiverDefinition71.getadvancedTransformation();
        java.util.List<com.mongodb.ServerAddress> serverAddressList78 = mongoDBRiverDefinition71.getMongoServers();
        builder67.mongoServers = serverAddressList78;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder0.mongoServers(serverAddressList78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder0.disableIndexRefresh(true);
        builder82.dropCollection = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder82.script("bulk");
        java.lang.String str87 = builder82.getmongoCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "index" + "'", str72, "index");
        org.junit.Assert.assertNull(strSet73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(serverAddressList78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test7360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7360");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        java.lang.String str7 = builder5.gettypeName();
        java.lang.String str8 = builder5.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.includeCollection("include_fields");
        builder5.setstatisticsIndexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.storeStatistics(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7361");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoGridFS(false);
        builder6.scriptType = "flush_interval";
        boolean boolean9 = builder6.storeStatistics;
        int int10 = builder6.getconnectTimeout();
        java.lang.String str11 = builder6.mongoCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7362");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str6 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalPassword;
        boolean boolean8 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str9 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "advanced_transformation" + "'", str6, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "connect_timeout" + "'", str10, "connect_timeout");
    }

    @Test
    public void test7363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        com.mongodb.MongoClientOptions mongoClientOptions6 = mongoDBRiverDefinition1.getMongoClientOptions();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        boolean boolean9 = mongoDBRiverDefinition1.getadvancedTransformation();
        boolean boolean10 = mongoDBRiverDefinition1.advancedTransformation;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7364");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        int int6 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean7 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str8 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isAdvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disable_index_refresh" + "'", str8, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertNull(basicDBObject11);
    }

    @Test
    public void test7365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7365");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("actions");
        java.lang.String str23 = builder22.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("bulk");
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder29.setmongoOplogFilter(basicDBObject30);
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder29.setmongoOplogFilter(basicDBObject32);
        builder29.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp36 = builder29.initialTimestamp;
        builder29.setmongoAdminUser("concurrent_requests");
        builder29.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder41.disableIndexRefresh(false);
        java.lang.String str47 = builder46.getstatisticsTypeName();
        java.lang.String str48 = builder46.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean52 = builder51.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder51.script("bulk");
        com.mongodb.BasicDBObject basicDBObject55 = null;
        builder54.setmongoOplogFilter(basicDBObject55);
        com.mongodb.BasicDBObject basicDBObject57 = null;
        builder54.setmongoOplogFilter(basicDBObject57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean60 = builder59.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder59.script("bulk");
        builder62.skipInitialImport = false;
        builder62.setscriptType("script");
        java.lang.String[] strArray84 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet85 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet85, strArray84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder62.excludeFields((java.util.Set<java.lang.String>) strSet85);
        builder54.setexcludeFields((java.util.Set<java.lang.String>) strSet85);
        builder46.includeFields = strSet85;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder29.excludeFields((java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder22.includeFields((java.util.Set<java.lang.String>) strSet85);
        builder22.setsocketTimeout((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "actions" + "'", str23, "actions");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(wildcardTimestamp36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test7366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7366");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        boolean boolean12 = builder5.importAllCollections;
        builder5.mongoCollection = "advanced_transformation";
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.mongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter23 = null;
        builder19.serializedObjectSupporter = serializedObjectSupporter23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.mongoAdminPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder32.setmongoOplogFilter(basicDBObject33);
        com.mongodb.BasicDBObject basicDBObject35 = null;
        builder32.setmongoOplogFilter(basicDBObject35);
        builder32.statisticsIndexName = "socket_timeout";
        java.lang.String str39 = builder32.riverIndexName;
        boolean boolean40 = builder32.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder32.dropCollection(true);
        boolean boolean43 = builder42.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder44.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder44.connectTimeout((int) (byte) 10);
        builder44.disableIndexRefresh = true;
        boolean boolean54 = builder44.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean56 = builder55.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder55.script("bulk");
        builder58.skipInitialImport = false;
        builder58.setscriptType("script");
        java.lang.String[] strArray80 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder58.excludeFields((java.util.Set<java.lang.String>) strSet81);
        builder44.setparentTypes((java.util.Set<java.lang.String>) strSet81);
        builder42.parentTypes = strSet81;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter88 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str89 = serializedObjectSupporter88.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings90 = serializedObjectSupporter88.deserializeObjectRiverSettings4();
        java.lang.String str91 = serializedObjectSupporter88.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings92 = serializedObjectSupporter88.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService93 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition94 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings92, scriptService93);
        java.lang.String str95 = mongoDBRiverDefinition94.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions96 = mongoDBRiverDefinition94.mongoClientOptions;
        builder42.setmongoClientOptions(mongoClientOptions96);
        builder28.mongoClientOptions = mongoClientOptions96;
        builder5.setmongoClientOptions(mongoClientOptions96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "mongodb-1638820218326" + "'", str89, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "mongodb-1638820218326" + "'", str91, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings92);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "mycollection" + "'", str95, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions96);
    }

    @Test
    public void test7367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7367");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition1.getlogger();
        boolean boolean6 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str7 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "options" + "'", str7, "options");
    }

    @Test
    public void test7368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7368");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.indexName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoGridFS(true);
        java.lang.String str10 = builder5.getscriptType();
        java.lang.String str11 = builder5.mongoDb;
        java.lang.String str12 = builder5.mongoLocalUser;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test7369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7369");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        builder8.mongoSSLVerifyCertificate = false;
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder8.setmongoClientOptions(mongoClientOptions11);
        java.util.Set<java.lang.String> strSet13 = null;
        builder8.setexcludeFields(strSet13);
        java.lang.String str15 = builder8.riverName;
        int int16 = builder8.connectTimeout;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test7370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7370");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.riverName;
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str12 = mongoDBRiverDefinition1.getScriptType();
        boolean boolean13 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str14 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_timeout" + "'", str14, "bulk_timeout");
    }

    @Test
    public void test7371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7371");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        boolean boolean7 = mongoDBRiverDefinition1.getmongoGridFS();
        boolean boolean8 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7372");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        boolean boolean42 = builder3.getadvancedTransformation();
        java.lang.String str43 = builder3.getriverIndexName();
        java.lang.String str44 = builder3.riverIndexName;
        java.util.Set<java.lang.String> strSet45 = builder3.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder3.includeCollection("bulk_size");
        java.lang.String str48 = builder3.getmongoDb();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "bulk_timeout" + "'", str43, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test7373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7373");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.setincludeCollection("port");
        java.lang.String str11 = builder3.getscript();
        int int12 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder3.mongoLocalPassword("port");
        java.lang.String str15 = builder14.mongoAdminUser;
        builder14.socketTimeout = ' ';
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk" + "'", str11, "bulk");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test7374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7374");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        int int8 = builder5.connectTimeout;
        java.lang.Boolean boolean9 = builder5.isMongos;
        java.lang.String str10 = builder5.mongoLocalPassword;
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.mongoClientOptions(mongoClientOptions11);
        builder5.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7375");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString17();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218449" + "'", str7, "mongodb-1638820218449");
    }

    @Test
    public void test7376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7376");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        java.lang.String str4 = builder3.script;
        builder3.mongoGridFS = true;
        builder3.includeCollection = "localhost";
        java.lang.Boolean boolean9 = builder3.isMongos;
        builder3.setmongoUseSSL(true);
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test7377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7377");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.indexName = "script.default_lang";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.statisticsIndexName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        java.lang.String str14 = builder12.getscript();
        boolean boolean15 = builder12.dropCollection;
        builder12.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        com.mongodb.BasicDBObject basicDBObject23 = builder22.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript24 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder12.mongoOplogFilter(basicDBObject23);
        builder12.storeStatistics = true;
        com.mongodb.BasicDBObject basicDBObject28 = builder12.getmongoCollectionFilter();
        builder11.setmongoOplogFilter(basicDBObject28);
        java.lang.Boolean boolean30 = builder11.getisMongos();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(executableScript24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNull(boolean30);
    }

    @Test
    public void test7378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7378");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder0.mongoAdminUser;
        java.lang.String str7 = builder0.getmongoAdminUser();
        int int8 = builder0.connectTimeout;
        builder0.statisticsTypeName = "db";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.includeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.mongoAdminPassword("mongodb-1638820218264");
        builder42.riverIndexName = "concurrent_bulk_requests";
        java.lang.String str45 = builder42.statisticsIndexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test7379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7379");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str10 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
    }

    @Test
    public void test7380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7380");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = builder0.mongoLocalPassword;
        boolean boolean3 = builder0.storeStatistics;
        boolean boolean4 = builder0.getstoreStatistics();
        java.lang.String str5 = builder0.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.scriptType("");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test7381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7381");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "import_all_collections" + "'", str11, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
    }

    @Test
    public void test7382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7382");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.mongoSSLVerifyCertificate;
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoClientOptions(mongoClientOptions13);
        java.lang.String str15 = builder11.getincludeCollection();
        builder11.setmongoSSLVerifyCertificate(false);
        builder11.setskipInitialImport(false);
        java.lang.String str20 = builder11.mongoCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test7383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7383");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.mongoGridFS;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str7 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "advanced_transformation" + "'", str7, "advanced_transformation");
    }

    @Test
    public void test7384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7384");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        java.lang.String str13 = builder3.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder17.setmongoOplogFilter(basicDBObject18);
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder17.setmongoOplogFilter(basicDBObject20);
        boolean boolean22 = builder17.mongoGridFS;
        java.lang.String[] strArray65 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder17.includeFields((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet66);
        java.util.List<com.mongodb.ServerAddress> serverAddressList70 = builder3.getmongoServers();
        boolean boolean71 = builder3.getskipInitialImport();
        builder3.script = "collection";
        builder3.scriptType = "parent_types";
        java.lang.String str76 = builder3.getriverName();
        builder3.importAllCollections = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(serverAddressList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test7385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7385");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        java.util.Set<java.lang.String> strSet5 = builder2.getparentTypes();
        builder2.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoGridFS(true);
        builder2.skipInitialImport = true;
        builder2.setscript("mongodb-1638820218363");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7386");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        builder3.riverName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder3.connectTimeout((int) (byte) 10);
        builder3.setscript("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder3.scriptType("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.statisticsIndexName("mongodb-1638820218363");
        boolean boolean24 = builder21.mongoUseSSL;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test7387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.setmongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder14.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder14.setmongoOplogFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        builder22.skipInitialImport = false;
        builder22.setscriptType("script");
        java.lang.String[] strArray44 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder22.excludeFields((java.util.Set<java.lang.String>) strSet45);
        builder14.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder14.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory51 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean53 = builder52.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.script("bulk");
        com.mongodb.BasicDBObject basicDBObject56 = builder55.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript57 = docScoreNativeScriptFactory51.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder14.mongoCollectionFilter = basicDBObject56;
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder5.mongoOplogFilter = basicDBObject56;
        builder5.throttleSize = '#';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder5.advancedTransformation(true);
        java.lang.Boolean boolean66 = builder5.getisMongos();
        java.lang.String str67 = builder5.getriverName();
        boolean boolean68 = builder5.getstoreStatistics();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(executableScript57);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(boolean66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test7388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7388");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str7 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str8 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.dropCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "is_mongos" + "'", str8, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7389");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.Boolean boolean8 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str11 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition1.getMongoServers();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition1.mongoOplogFilter;
        boolean boolean14 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str15 = mongoDBRiverDefinition1.getMongoCollection();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_timeout" + "'", str11, "bulk_timeout");
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test7390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7390");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        builder3.setmongoSSLVerifyCertificate(false);
        java.util.Set<java.lang.String> strSet42 = builder3.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder3.indexName("secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test7391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7391");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str7 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "password" + "'", str10, "password");
    }

    @Test
    public void test7392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7392");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        java.lang.String str31 = mongoDBRiverDefinition19.getSOCKET_TIMEOUT();
        java.lang.String str32 = mongoDBRiverDefinition19.getFLUSH_INTERVAL_FIELD();
        java.lang.String str33 = mongoDBRiverDefinition19.getINDEX_OBJECT();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "socket_timeout" + "'", str31, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "flush_interval" + "'", str32, "flush_interval");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "index" + "'", str33, "index");
    }

    @Test
    public void test7393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7393");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.riverName("script.disable_dynamic");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject14 = builder13.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.mongoCollectionFilter(basicDBObject14);
        builder16.riverName = "mongodb-1638820218299";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.script("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.statisticsIndexName("index");
        builder22.setdisableIndexRefresh(false);
        java.lang.String str25 = builder22.getmongoDb();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test7394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7394");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.dropCollection(false);
        boolean boolean12 = builder9.storeStatistics;
        java.util.Set<java.lang.String> strSet13 = builder9.parentTypes;
        boolean boolean14 = builder9.getmongoSSLVerifyCertificate();
        builder9.setscriptType("bulk_size");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test7395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7395");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        builder7.setincludeCollection("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.indexName("throttle_size");
        java.util.Set<java.lang.String> strSet12 = builder11.parentTypes;
        builder11.setmongoAdminPassword("admin");
        java.util.Set<java.lang.String> strSet15 = builder11.getparentTypes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test7396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7396");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder17.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.socketTimeout((int) (byte) 0);
        builder17.setincludeCollection("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder17.dropCollection(true);
        boolean boolean25 = builder24.mongoUseSSL;
        java.util.Set<java.lang.String> strSet26 = builder24.getincludeFields();
        builder24.setisMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder24.scriptType("is_mongos");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test7397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7397");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet7 = builder5.excludeFields;
        java.lang.String str8 = builder5.mongoLocalUser;
        boolean boolean9 = builder5.mongoUseSSL;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7398");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str12 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str13 = mongoDBRiverDefinition1.getSIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "size" + "'", str13, "size");
    }

    @Test
    public void test7399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7399");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition1.getMongoClientOptions();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "exclude_fields" + "'", str11, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(mongoClientOptions13);
    }

    @Test
    public void test7400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7400");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        int int8 = builder5.connectTimeout;
        java.lang.Boolean boolean9 = builder5.isMongos;
        java.lang.String str10 = builder5.mongoLocalPassword;
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.mongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean14 = builder13.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.disableIndexRefresh(false);
        builder18.setmongoAdminUser("bulk");
        com.mongodb.BasicDBObject basicDBObject21 = builder18.getmongoCollectionFilter();
        builder12.mongoOplogFilter = basicDBObject21;
        boolean boolean23 = builder12.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder12.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject26 = builder25.mongoOplogFilter;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
    }

    @Test
    public void test7401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7401");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("options");
        boolean boolean8 = builder7.getmongoGridFS();
        builder7.mongoLocalUser = "script.default_lang";
        builder7.setmongoAdminPassword("bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7402");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_requests" + "'", str6, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_collection" + "'", str8, "include_collection");
    }

    @Test
    public void test7403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7403");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str7 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str9 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.excludeFields;
        int int11 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str12 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str13 = mongoDBRiverDefinition1.getScript();
        int int14 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition1.excludeFields;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "credentials" + "'", str7, "credentials");
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "initial_timestamp" + "'", str9, "initial_timestamp");
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "options" + "'", str15, "options");
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test7404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7404");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder0.mongoClientOptions;
        builder0.mongoDb = "hi!";
        builder0.riverName = "script.disable_dynamic";
        com.mongodb.BasicDBObject basicDBObject11 = builder0.getmongoCollectionFilter();
        java.lang.String str12 = builder0.indexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7405");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        int int9 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.mongoLocalPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.script("store_statistics");
        java.lang.String str15 = builder12.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder21.setmongoOplogFilter(basicDBObject22);
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder21.setmongoOplogFilter(basicDBObject24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("bulk");
        builder29.skipInitialImport = false;
        builder29.setscriptType("script");
        java.lang.String[] strArray51 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder29.excludeFields((java.util.Set<java.lang.String>) strSet52);
        builder21.setexcludeFields((java.util.Set<java.lang.String>) strSet52);
        builder12.setexcludeFields((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        com.mongodb.BasicDBObject basicDBObject58 = builder57.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.riverName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder57.statisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp63 = builder62.initialTimestamp;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "store_statistics" + "'", str15, "store_statistics");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(basicDBObject58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(wildcardTimestamp63);
    }

    @Test
    public void test7406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7406");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.disableIndexRefresh(false);
        java.lang.String str17 = builder16.getstatisticsTypeName();
        java.lang.String str18 = builder16.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder24.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder24.setmongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        builder32.skipInitialImport = false;
        builder32.setscriptType("script");
        java.lang.String[] strArray54 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder32.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet55);
        builder16.includeFields = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder5.excludeFields((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoLocalPassword("advanced_transformation");
        java.lang.String str63 = builder62.riverName;
        builder62.mongoDb = "include_fields";
        com.mongodb.BasicDBObject basicDBObject66 = builder62.mongoOplogFilter;
        builder62.setconnectTimeout(30000);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(basicDBObject66);
    }

    @Test
    public void test7407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7407");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString13();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218424" + "'", str2, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218408" + "'", str4, "mongodb-1638820218408");
    }

    @Test
    public void test7408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean7 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7409");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str8 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions9 = mongoDBRiverDefinition1.mongoClientOptions;
        java.lang.String str10 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "drop_collection" + "'", str8, "drop_collection");
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk_size" + "'", str10, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7410");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str6 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoGridFS();
        int int8 = mongoDBRiverDefinition1.connectTimeout;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "store_statistics" + "'", str6, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test7411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7411");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.riverIndexName("secondary_read_preference");
        builder13.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoLocalUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoLocalPassword("mongodb-1638820218449");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test7412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7412");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter2.deserializeObjectString12();
        java.lang.String str6 = serializedObjectSupporter2.deserializeObjectString10();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter2.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("throttle_size", "mongodb-1638820218387", riverSettings7, scriptService8);
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition9.includeFields;
        boolean boolean11 = mongoDBRiverDefinition9.skipInitialImport;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7413");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoSecondaryReadPreference(true);
        builder10.indexName = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean14 = builder13.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("bulk");
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder16.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder16.setmongoOplogFilter(basicDBObject19);
        boolean boolean21 = builder16.mongoGridFS;
        java.lang.String[] strArray64 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder16.includeFields((java.util.Set<java.lang.String>) strSet65);
        int int68 = builder67.throttleSize;
        java.lang.String str69 = builder67.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean71 = builder70.getdropCollection();
        java.lang.String str72 = builder70.getscript();
        boolean boolean73 = builder70.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray74 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList75 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList75, serverAddressArray74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder70.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList75);
        builder67.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder10.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList75);
        builder10.scriptType = "admin";
        builder10.mongoSecondaryReadPreference = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder10.indexName("mongodb-1638820218264");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(serverAddressArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test7414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7414");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getBULK_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str9 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str10 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk" + "'", str7, "bulk");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test7415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7415");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        int int55 = builder54.throttleSize;
        builder54.mongoSecondaryReadPreference = false;
        builder54.setconnectTimeout((int) (byte) 1);
        builder54.setimportAllCollections(true);
        int int62 = builder54.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder54.socketTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.riverIndexName("script.disable_dynamic");
        builder64.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder64.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test7416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7416");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.dropCollection(false);
        java.lang.String str9 = builder6.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoSecondaryReadPreference(false);
        boolean boolean12 = builder11.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7417");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218424" + "'", str4, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218299" + "'", str7, "mongodb-1638820218299");
    }

    @Test
    public void test7418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7418");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        boolean boolean15 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str16 = mongoDBRiverDefinition1.getIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7419");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.setscriptType("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder2.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder11.setmongoOplogFilter(basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder11.setmongoOplogFilter(basicDBObject14);
        builder11.statisticsIndexName = "socket_timeout";
        java.lang.String str18 = builder11.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory21 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript27 = docScoreNativeScriptFactory21.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder2.mongoOplogFilter(basicDBObject26);
        builder29.setthrottleSize((int) ' ');
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter32 = builder29.serializedObjectSupporter;
        java.lang.String str33 = builder29.gettypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(executableScript27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(serializedObjectSupporter32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test7420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7420");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        org.apache.lucene.search.Scorer scorer33 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test7421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7421");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = mongoDBRiverDefinition1.serializedObjectSupporter;
        int int9 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str10 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(serializedObjectSupporter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "collection" + "'", str10, "collection");
    }

    @Test
    public void test7422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7422");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder3.disableIndexRefresh(false);
        java.lang.String str9 = builder8.getstatisticsTypeName();
        java.lang.String str10 = builder8.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.socketTimeout(100);
        boolean boolean13 = builder8.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        java.lang.String str20 = builder19.getstatisticsTypeName();
        java.lang.String str21 = builder19.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean25 = builder24.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.script("bulk");
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder27.setmongoOplogFilter(basicDBObject28);
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder27.setmongoOplogFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean33 = builder32.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.script("bulk");
        builder35.skipInitialImport = false;
        builder35.setscriptType("script");
        java.lang.String[] strArray57 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder35.excludeFields((java.util.Set<java.lang.String>) strSet58);
        builder27.setexcludeFields((java.util.Set<java.lang.String>) strSet58);
        builder19.includeFields = strSet58;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder8.excludeFields((java.util.Set<java.lang.String>) strSet58);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet58);
        builder0.setmongoLocalPassword("local");
        builder0.throttleSize = '#';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder0.mongoGridFS(true);
        builder70.setstatisticsIndexName("bulk");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test7423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7423");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        boolean boolean23 = builder5.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder5.connectTimeout((int) 'a');
        java.lang.String str26 = builder5.getincludeCollection();
        java.lang.String str27 = builder5.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder5.mongoAdminUser("script.default_lang");
        builder5.socketTimeout = (byte) 100;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.statisticsIndexName("mongodb-1638820218326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = builder36.build();
        java.lang.String str38 = mongoDBRiverDefinition37.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet39 = mongoDBRiverDefinition37.parentTypes;
        java.lang.String str40 = mongoDBRiverDefinition37.riverName;
        java.lang.String str41 = mongoDBRiverDefinition37.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition37.mongoServers;
        builder35.setmongoServers(serverAddressList42);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "index" + "'", str38, "index");
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList42);
    }

    @Test
    public void test7424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7424");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        builder19.setthrottleSize((int) ' ');
        boolean boolean22 = builder19.getadvancedTransformation();
        java.lang.String str23 = builder19.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = null;
        builder19.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str26 = builder19.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.isMongos((java.lang.Boolean) true);
        builder19.setindexName("script.default_lang");
        java.lang.String str31 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder19.getinitialTimestamp();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder19);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        docScoreSearchScript0.setNextScore((-1.0f));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = builder39.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList41 = mongoDBRiverDefinition40.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue42 = mongoDBRiverDefinition40.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean43 = mongoDBRiverDefinition40.dropCollection;
        java.lang.String str44 = mongoDBRiverDefinition40.getDB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition40.getMongoCollection();
        java.lang.String str46 = mongoDBRiverDefinition40.getCONNECT_TIMEOUT();
        java.lang.String str47 = mongoDBRiverDefinition40.getSCRIPT_TYPE_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition40.mongoAdminUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList49 = mongoDBRiverDefinition40.mongoServers;
        docScoreSearchScript0.setNextVar("exclude_fields", (java.lang.Object) serverAddressList49);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition40);
        org.junit.Assert.assertNotNull(serverAddressList41);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "db" + "'", str44, "db");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "connect_timeout" + "'", str46, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script_type" + "'", str47, "script_type");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(serverAddressList49);
    }

    @Test
    public void test7425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7425");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoSSLVerifyCertificate(true);
        boolean boolean34 = builder31.getmongoSSLVerifyCertificate();
        builder31.setmongoLocalUser("bulk");
        builder31.typeName = ".scripts";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test7426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7426");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
    }

    @Test
    public void test7427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7427");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition1.getPORT_FIELD();
        boolean boolean17 = mongoDBRiverDefinition1.getdropCollection();
        java.lang.String str18 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "concurrent_bulk_requests" + "'", str14, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disable_index_refresh" + "'", str15, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "port" + "'", str16, "port");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "is_mongos" + "'", str18, "is_mongos");
    }

    @Test
    public void test7428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7428");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString8();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218387" + "'", str3, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
    }

    @Test
    public void test7429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7429");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setmongoAdminUser("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder15.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder15.mongoGridFS;
        builder15.setindexName("initial_timestamp");
        boolean boolean23 = builder15.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean25 = builder24.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.disableIndexRefresh(false);
        java.lang.String str30 = builder29.getstatisticsTypeName();
        java.lang.String str31 = builder29.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.socketTimeout(100);
        boolean boolean34 = builder29.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean36 = builder35.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder35.disableIndexRefresh(false);
        java.lang.String str41 = builder40.getstatisticsTypeName();
        java.lang.String str42 = builder40.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean46 = builder45.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.script("bulk");
        com.mongodb.BasicDBObject basicDBObject49 = null;
        builder48.setmongoOplogFilter(basicDBObject49);
        com.mongodb.BasicDBObject basicDBObject51 = null;
        builder48.setmongoOplogFilter(basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean54 = builder53.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder53.script("bulk");
        builder56.skipInitialImport = false;
        builder56.setscriptType("script");
        java.lang.String[] strArray78 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder56.excludeFields((java.util.Set<java.lang.String>) strSet79);
        builder48.setexcludeFields((java.util.Set<java.lang.String>) strSet79);
        builder40.includeFields = strSet79;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder29.excludeFields((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder15.includeFields((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder3.includeFields((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder86.mongoDb("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder88.mongoAdminPassword("host");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test7430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7430");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder17.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.socketTimeout((int) (byte) 0);
        com.mongodb.BasicDBObject basicDBObject21 = builder20.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder25.setmongoOplogFilter(basicDBObject26);
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder25.setmongoOplogFilter(basicDBObject28);
        builder25.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder25.throttleSize((int) (short) 0);
        builder25.mongoLocalPassword = "script.disable_dynamic";
        java.lang.String str36 = builder25.getmongoCollection();
        boolean boolean37 = builder25.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder38.disableIndexRefresh(false);
        java.lang.String str44 = builder43.getstatisticsTypeName();
        java.lang.String str45 = builder43.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean47 = builder46.getdropCollection();
        java.lang.String str48 = builder46.getscript();
        boolean boolean49 = builder46.dropCollection;
        builder46.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory52 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean54 = builder53.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder53.script("bulk");
        com.mongodb.BasicDBObject basicDBObject57 = builder56.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript58 = docScoreNativeScriptFactory52.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder46.mongoOplogFilter(basicDBObject57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder43.mongoCollectionFilter(basicDBObject57);
        builder25.setmongoOplogFilter(basicDBObject57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder20.mongoOplogFilter(basicDBObject57);
        builder20.setconnectTimeout(60000);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(basicDBObject57);
        org.junit.Assert.assertNotNull(executableScript58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test7431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7431");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = builder32.build();
        java.lang.String str34 = mongoDBRiverDefinition33.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet35 = mongoDBRiverDefinition33.parentTypes;
        boolean boolean36 = mongoDBRiverDefinition33.isStoreStatistics();
        boolean boolean37 = mongoDBRiverDefinition33.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter38 = null;
        mongoDBRiverDefinition33.serializedObjectSupporter = serializedObjectSupporter38;
        java.lang.String str40 = mongoDBRiverDefinition33.getSOCKET_TIMEOUT();
        java.lang.String str41 = mongoDBRiverDefinition33.getPASSWORD_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition33.getMongoAdminUser();
        boolean boolean43 = mongoDBRiverDefinition33.getskipInitialImport();
        java.lang.String str44 = mongoDBRiverDefinition33.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition33.getMongoOplogFilter();
        java.lang.String str46 = mongoDBRiverDefinition33.getIncludeCollection();
        boolean boolean47 = mongoDBRiverDefinition33.isMongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition33.getMongoCollectionFilter();
        builder31.mongoCollectionFilter = basicDBObject48;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "index" + "'", str34, "index");
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "socket_timeout" + "'", str40, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "password" + "'", str41, "password");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "localhost" + "'", str44, "localhost");
        org.junit.Assert.assertNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(basicDBObject48);
    }

    @Test
    public void test7432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7432");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean35 = builder34.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoAdminUser("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.throttleSize(27017);
        docScoreSearchScript0.setNextVar(".scripts", (java.lang.Object) builder39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder39.mongoUseSSL(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test7433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7433");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.getRiverName();
        int int14 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str15 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition1.getScript();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 60000 + "'", int14 == 60000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "bulk" + "'", str15, "bulk");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7434");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("concurrent_requests", (java.lang.Object) (-1));
        docScoreSearchScript0.setNextVar("skip_initial_import", (java.lang.Object) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition9.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue11 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean12 = mongoDBRiverDefinition9.dropCollection;
        boolean boolean13 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        int int15 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = mongoDBRiverDefinition9.getInitialTimestamp();
        boolean boolean17 = mongoDBRiverDefinition9.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.lang.String str19 = mongoDBRiverDefinition9.riverName;
        docScoreSearchScript0.setNextVar("", (java.lang.Object) mongoDBRiverDefinition9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = builder22.build();
        java.lang.String str24 = mongoDBRiverDefinition23.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet25 = mongoDBRiverDefinition23.parentTypes;
        java.lang.String str26 = mongoDBRiverDefinition23.riverName;
        boolean boolean27 = mongoDBRiverDefinition23.getimportAllCollections();
        java.lang.String str28 = mongoDBRiverDefinition23.getBULK_SIZE_FIELD();
        boolean boolean29 = mongoDBRiverDefinition23.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet30 = mongoDBRiverDefinition23.getExcludeFields();
        docScoreSearchScript0.setNextVar("mycollection", (java.lang.Object) strSet30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean34 = builder33.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.script("bulk");
        builder36.skipInitialImport = false;
        builder36.setscriptType("script");
        java.lang.String[] strArray58 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder36.excludeFields((java.util.Set<java.lang.String>) strSet59);
        java.lang.String str62 = builder61.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder61.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoSSLVerifyCertificate(true);
        boolean boolean67 = builder64.advancedTransformation;
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) boolean67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean71 = builder70.getdropCollection();
        java.lang.String str72 = builder70.getscript();
        boolean boolean73 = builder70.dropCollection;
        builder70.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory76 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean78 = builder77.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder77.script("bulk");
        com.mongodb.BasicDBObject basicDBObject81 = builder80.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript82 = docScoreNativeScriptFactory76.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder70.mongoOplogFilter(basicDBObject81);
        docScoreSearchScript0.setNextVar("script", (java.lang.Object) builder83);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext85 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(basicDBObject18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "index" + "'", str24, "index");
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bulk_size" + "'", str28, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(basicDBObject81);
        org.junit.Assert.assertNotNull(executableScript82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test7435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7435");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition1.mongoClientOptions;
        java.lang.String str13 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "throttle_size" + "'", str10, "throttle_size");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "throttle_size" + "'", str13, "throttle_size");
    }

    @Test
    public void test7436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7436");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition1.disableIndexRefresh;
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str9 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        int int10 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean11 = mongoDBRiverDefinition1.isMongos();
        boolean boolean12 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter13;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "parent_types" + "'", str9, "parent_types");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7437");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.getMongoServers();
        boolean boolean8 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str9 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getFILTER_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = mongoDBRiverDefinition1.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "disable_index_refresh" + "'", str9, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "port" + "'", str10, "port");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "filter" + "'", str11, "filter");
        org.junit.Assert.assertNull(serializedObjectSupporter12);
    }

    @Test
    public void test7438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7438");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str6 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_requests" + "'", str7, "concurrent_requests");
    }

    @Test
    public void test7439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7439");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.socketTimeout = (byte) -1;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder2.mongoOplogFilter = basicDBObject5;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.storeStatistics(false);
        java.lang.String str9 = builder8.includeCollection;
        builder8.throttleSize = 1;
        java.util.Set<java.lang.String> strSet12 = builder8.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoAdminUser("advanced_transformation");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder8.getmongoClientOptions();
        boolean boolean16 = builder8.getmongoSecondaryReadPreference();
        builder8.mongoAdminUser = "flush_interval";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test7440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7440");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        builder0.setdropCollection(false);
        boolean boolean11 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverIndexName("skip_initial_import");
        java.lang.String str14 = builder13.gettypeName();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoClientOptions(mongoClientOptions15);
        builder16.statisticsIndexName = "import_all_collections";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str20 = mongoDBRiverDefinition19.riverName;
        java.lang.String str21 = mongoDBRiverDefinition19.getFLUSH_INTERVAL_FIELD();
        java.util.Set<java.lang.String> strSet22 = mongoDBRiverDefinition19.getIncludeFields();
        java.lang.String str23 = mongoDBRiverDefinition19.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "flush_interval" + "'", str21, "flush_interval");
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "advanced_transformation" + "'", str23, "advanced_transformation");
    }

    @Test
    public void test7441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7441");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str10 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "initial_timestamp" + "'", str8, "initial_timestamp");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
    }

    @Test
    public void test7442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7442");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean8 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(basicDBObject10);
    }

    @Test
    public void test7443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7443");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = builder0.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder0.mongoClientOptions = mongoClientOptions7;
        builder0.settypeName("size");
        builder0.setisMongos((java.lang.Boolean) true);
        builder0.script = "skip_initial_import";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(serializedObjectSupporter6);
    }

    @Test
    public void test7444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7444");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.statisticsTypeName("");
        boolean boolean11 = builder6.getskipInitialImport();
        java.lang.String str12 = builder6.scriptType;
        java.lang.Boolean boolean13 = builder6.getisMongos();
        int int14 = builder6.getsocketTimeout();
        builder6.mongoCollection = "stats";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test7445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7445");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "name" + "'", str4, "name");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test7446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7446");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.throttleSize((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoSSLVerifyCertificate(false);
        java.lang.String str16 = builder11.getmongoCollection();
        builder11.includeCollection = "";
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = builder11.mongoServers;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(serverAddressList19);
    }

    @Test
    public void test7447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7447");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoAdminUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "type" + "'", str7, "type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test7448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7448");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218424" + "'", str4, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNotNull(riverSettings6);
    }

    @Test
    public void test7449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.statisticsTypeName;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = mongoDBRiverDefinition1.serializedObjectSupporter;
        boolean boolean8 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str9 = mongoDBRiverDefinition1.typeName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name" + "'", str5, "name");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7450");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.setmongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoLocalPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder14.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder14.setmongoOplogFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        builder22.skipInitialImport = false;
        builder22.setscriptType("script");
        java.lang.String[] strArray44 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder22.excludeFields((java.util.Set<java.lang.String>) strSet45);
        builder14.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder14.throttleSize(100);
        builder14.setmongoSSLVerifyCertificate(false);
        java.util.Set<java.lang.String> strSet53 = builder14.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder10.parentTypes(strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder10.script("mongodb-1638820218424");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test7451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7451");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        java.util.Set<java.lang.String> strSet6 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.statisticsTypeName("include_collection");
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder10.setmongoClientOptions(mongoClientOptions11);
        java.lang.String str13 = builder10.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.statisticsTypeName("local");
        builder15.setstoreStatistics(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7452");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean12 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.Boolean boolean13 = mongoDBRiverDefinition1.getisMongos();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test7453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7453");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.socketTimeout = (byte) -1;
        builder2.setstatisticsTypeName("mongodb-1638820217755");
        builder2.statisticsIndexName = "stats";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean10 = builder9.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = null;
        builder9.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.mongoAdminPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder22.setmongoOplogFilter(basicDBObject23);
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder22.setmongoOplogFilter(basicDBObject25);
        builder22.statisticsIndexName = "socket_timeout";
        java.lang.String str29 = builder22.riverIndexName;
        boolean boolean30 = builder22.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder22.dropCollection(true);
        boolean boolean33 = builder32.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean35 = builder34.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.script("bulk");
        builder34.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.connectTimeout((int) (byte) 10);
        builder34.disableIndexRefresh = true;
        boolean boolean44 = builder34.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean46 = builder45.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.script("bulk");
        builder48.skipInitialImport = false;
        builder48.setscriptType("script");
        java.lang.String[] strArray70 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder48.excludeFields((java.util.Set<java.lang.String>) strSet71);
        builder34.setparentTypes((java.util.Set<java.lang.String>) strSet71);
        builder32.parentTypes = strSet71;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter78 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str79 = serializedObjectSupporter78.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings80 = serializedObjectSupporter78.deserializeObjectRiverSettings4();
        java.lang.String str81 = serializedObjectSupporter78.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings82 = serializedObjectSupporter78.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService83 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition84 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings82, scriptService83);
        java.lang.String str85 = mongoDBRiverDefinition84.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions86 = mongoDBRiverDefinition84.mongoClientOptions;
        builder32.setmongoClientOptions(mongoClientOptions86);
        builder18.mongoClientOptions = mongoClientOptions86;
        builder2.setmongoClientOptions(mongoClientOptions86);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "mongodb-1638820218326" + "'", str79, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "mongodb-1638820218326" + "'", str81, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings82);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "mycollection" + "'", str85, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions86);
    }

    @Test
    public void test7454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7454");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
    }

    @Test
    public void test7455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7455");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition1.isAdvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "local" + "'", str9, "local");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7456");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder38.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder47.skipInitialImport = false;
        builder47.setscriptType("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder47.excludeFields((java.util.Set<java.lang.String>) strSet70);
        builder38.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder3.includeFields((java.util.Set<java.lang.String>) strSet70);
        java.util.Set<java.lang.String> strSet75 = builder74.getexcludeFields();
        java.lang.String str76 = builder74.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = builder74.build();
        java.lang.Boolean boolean78 = mongoDBRiverDefinition77.getisMongos();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition77);
        org.junit.Assert.assertNull(boolean78);
    }

    @Test
    public void test7457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7457");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder11.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.connectTimeout((int) (byte) 10);
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.disableIndexRefresh(false);
        java.lang.String str26 = builder25.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet27 = builder25.excludeFields;
        java.lang.Object obj28 = docScoreSearchScript0.unwrap((java.lang.Object) strSet27);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            float float31 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test7458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7458");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder6.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder6.setmongoOplogFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder6.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet45 = builder6.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.parentTypes(strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder0.riverName("throttle_size");
        boolean boolean49 = builder0.getdisableIndexRefresh();
        java.util.Set<java.lang.String> strSet50 = builder0.getparentTypes();
        boolean boolean51 = builder0.mongoGridFS;
        builder0.mongoLocalPassword = "mongodb-1638820218424";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test7459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7459");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter2.deserializeObjectString12();
        java.lang.String str6 = serializedObjectSupporter2.deserializeObjectString10();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter2.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("throttle_size", "mongodb-1638820218387", riverSettings7, scriptService8);
        boolean boolean10 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test7460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7460");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str9 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.script;
        boolean boolean12 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str13 = mongoDBRiverDefinition1.typeName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondary_read_preference" + "'", str10, "secondary_read_preference");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7461");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.mongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.includeFields(strSet15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.disableIndexRefresh(false);
        java.lang.String str23 = builder22.getstatisticsTypeName();
        java.lang.String str24 = builder22.riverName;
        int int25 = builder22.connectTimeout;
        java.lang.String[] strArray72 = new java.lang.String[] { "type", "index", "", "db", "null.null", "_river", "mongodb-1638820217755", "mongodb-1638820218449", "local", "script.default_lang", "bulk_size", "host", "size", ".scripts", "secondary_read_preference", "script", "script_type", "mongodb-1638820218424", "script", "bulk_timeout", "collection", "mongodb-1638820218424", "initial_timestamp", "skip_initial_import", "", "port", "initial_timestamp", "mongodb-1638820217755", ".scripts", "index", "password", ".scripts", "flush_interval", "is_mongos", "ssl_verify_certificate", "servers", "localhost", "script.disable_dynamic", "ssl_verify_certificate", "bulk", "connect_timeout", "mongodb-1638820218449", "", "skip_initial_import", "mongodb-1638820218449", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet73);
        builder5.setexcludeFields((java.util.Set<java.lang.String>) strSet73);
        java.util.Set<java.lang.String> strSet77 = builder5.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder5.indexName("servers");
        boolean boolean80 = builder79.importAllCollections;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test7462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7462");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        java.lang.String str55 = builder3.mongoLocalPassword;
        builder3.setconnectTimeout((int) ' ');
        builder3.setthrottleSize((int) (byte) 100);
        int int60 = builder3.connectTimeout;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
    }

    @Test
    public void test7463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7463");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str10 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str11 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disable_index_refresh" + "'", str11, "disable_index_refresh");
    }

    @Test
    public void test7464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7464");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.disableIndexRefresh(false);
        java.lang.String str17 = builder16.getstatisticsTypeName();
        java.lang.String str18 = builder16.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder24.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder24.setmongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        builder32.skipInitialImport = false;
        builder32.setscriptType("script");
        java.lang.String[] strArray54 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder32.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet55);
        builder16.includeFields = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder5.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder60.mongoSSLVerifyCertificate = true;
        java.lang.String str63 = builder60.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder60.statisticsIndexName("throttle_size");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test7465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7465");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getBULK_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str9 = mongoDBRiverDefinition1.getIndexName();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk" + "'", str7, "bulk");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
    }

    @Test
    public void test7466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7466");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray4 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList5 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList5, serverAddressArray4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder11.setmongoOplogFilter(basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder11.setmongoOplogFilter(basicDBObject14);
        builder11.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.throttleSize((int) (short) 0);
        builder11.connectTimeout = 27017;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder11.throttleSize(1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = builder23.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder0.mongoServers(serverAddressList24);
        java.lang.String str26 = builder0.getriverIndexName();
        builder0.mongoDb = "mongodb-1638820218449";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder0.socketTimeout(97);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serverAddressArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test7467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7467");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean6 = mongoDBRiverDefinition1.isDropCollection();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue9 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str10 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        int int12 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "local" + "'", str10, "local");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "credentials" + "'", str11, "credentials");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 30000 + "'", int12 == 30000);
    }

    @Test
    public void test7468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7468");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString15();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218424" + "'", str5, "mongodb-1638820218424");
    }

    @Test
    public void test7469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7469");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        int int6 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean7 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str8 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_requests" + "'", str9, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "credentials" + "'", str10, "credentials");
    }

    @Test
    public void test7470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7470");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean11 = mongoDBRiverDefinition1.getimportAllCollections();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7471");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoCollection;
        boolean boolean10 = mongoDBRiverDefinition1.getdropCollection();
        java.lang.String str11 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getMongoAdminPassword();
        int int14 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str15 = mongoDBRiverDefinition1.getSIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondary_read_preference" + "'", str11, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "advanced_transformation" + "'", str12, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "size" + "'", str15, "size");
    }

    @Test
    public void test7472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7472");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str7 = mongoDBRiverDefinition1.getNAME_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "name" + "'", str7, "name");
    }

    @Test
    public void test7473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7473");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("mongodb-1638820218299", "concurrent_requests");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?concurrent_requests?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test7474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7474");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.isMongos((java.lang.Boolean) false);
        int int10 = builder7.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.throttleSize((int) (byte) 1);
        builder7.settypeName("concurrent_requests");
        builder7.settypeName("user");
        builder7.riverIndexName = "options";
        builder7.mongoAdminPassword = "bulk_size";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7475");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminPassword("secondary_read_preference");
        builder13.setmongoCollection("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test7476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7476");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.storeStatistics = false;
        builder5.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter11.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings14 = riverSettings13.globalSettings();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder18.setmongoOplogFilter(basicDBObject19);
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder18.setmongoOplogFilter(basicDBObject21);
        builder18.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp25 = builder18.initialTimestamp;
        com.mongodb.BasicDBObject basicDBObject26 = builder18.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings27 = new org.elasticsearch.river.RiverSettings(settings14, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean29 = builder28.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.script("bulk");
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder31.setmongoOplogFilter(basicDBObject32);
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder31.setmongoOplogFilter(basicDBObject34);
        builder31.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.throttleSize((int) (short) 0);
        builder31.mongoLocalPassword = "script.disable_dynamic";
        java.lang.String str42 = builder31.getmongoCollection();
        boolean boolean43 = builder31.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.disableIndexRefresh(false);
        java.lang.String str50 = builder49.getstatisticsTypeName();
        java.lang.String str51 = builder49.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean53 = builder52.getdropCollection();
        java.lang.String str54 = builder52.getscript();
        boolean boolean55 = builder52.dropCollection;
        builder52.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory58 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean60 = builder59.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder59.script("bulk");
        com.mongodb.BasicDBObject basicDBObject63 = builder62.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript64 = docScoreNativeScriptFactory58.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder52.mongoOplogFilter(basicDBObject63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder49.mongoCollectionFilter(basicDBObject63);
        builder31.setmongoOplogFilter(basicDBObject63);
        org.elasticsearch.river.RiverSettings riverSettings68 = new org.elasticsearch.river.RiverSettings(settings14, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder5.mongoCollectionFilter(basicDBObject63);
        java.lang.String str70 = builder69.getmongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter71 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str72 = serializedObjectSupporter71.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings73 = serializedObjectSupporter71.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings74 = serializedObjectSupporter71.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings75 = serializedObjectSupporter71.deserializeObjectRiverSettings2();
        java.lang.String str76 = serializedObjectSupporter71.deserializeObjectString16();
        java.lang.String str77 = serializedObjectSupporter71.deserializeObjectString5();
        java.lang.String str78 = serializedObjectSupporter71.deserializeObjectString18();
        java.lang.String str79 = serializedObjectSupporter71.deserializeObjectString1();
        builder69.serializedObjectSupporter = serializedObjectSupporter71;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218326" + "'", str12, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(wildcardTimestamp25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(executableScript64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "_river" + "'", str72, "_river");
        org.junit.Assert.assertNotNull(riverSettings73);
        org.junit.Assert.assertNotNull(riverSettings74);
        org.junit.Assert.assertNotNull(riverSettings75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_river" + "'", str76, "_river");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "mongodb-1638820218299" + "'", str77, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "_river" + "'", str78, "_river");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "mongodb-1638820217755" + "'", str79, "mongodb-1638820217755");
    }

    @Test
    public void test7477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7477");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.dropCollection(true);
        builder13.mongoAdminPassword = "_river";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = builder16.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition17.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue19 = mongoDBRiverDefinition17.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean20 = mongoDBRiverDefinition17.dropCollection;
        boolean boolean21 = mongoDBRiverDefinition17.isMongoSecondaryReadPreference();
        java.lang.String str22 = mongoDBRiverDefinition17.getStatisticsTypeName();
        java.lang.String str23 = mongoDBRiverDefinition17.getMongoLocalPassword();
        java.lang.String str24 = mongoDBRiverDefinition17.getCONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet25 = mongoDBRiverDefinition17.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject26 = mongoDBRiverDefinition17.mongoCollectionFilter;
        builder13.setmongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder13.socketTimeout((int) (short) 1);
        builder13.setmongoUseSSL(true);
        builder13.dropCollection = true;
        builder13.riverIndexName = "socket_timeout";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition17);
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "connect_timeout" + "'", str24, "connect_timeout");
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test7478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7478");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        org.elasticsearch.common.logging.ESLogger eSLogger4 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str5 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition1.typeName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str10 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(eSLogger4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "socket_timeout" + "'", str5, "socket_timeout");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondary_read_preference" + "'", str8, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "advanced_transformation" + "'", str10, "advanced_transformation");
    }

    @Test
    public void test7479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7479");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getmongoAdminPassword();
        java.util.Set<java.lang.String> strSet5 = builder2.getexcludeFields();
        builder2.mongoAdminPassword = "bulk_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.skipInitialImport(true);
        boolean boolean12 = builder11.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean14 = builder13.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.disableIndexRefresh(false);
        java.lang.String str19 = builder13.mongoAdminUser;
        java.lang.String str20 = builder13.getindexName();
        builder13.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.disableIndexRefresh(false);
        builder28.setthrottleSize((int) ' ');
        java.lang.String str31 = builder28.getriverName();
        builder28.connectTimeout = 100;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet35 = builder34.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.mongoLocalUser("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.script("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean41 = builder40.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.script("bulk");
        builder40.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter46 = builder40.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        builder40.mongoClientOptions = mongoClientOptions47;
        builder40.settypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder40.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean54 = builder53.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder53.script("bulk");
        com.mongodb.BasicDBObject basicDBObject57 = null;
        builder56.setmongoOplogFilter(basicDBObject57);
        com.mongodb.BasicDBObject basicDBObject59 = null;
        builder56.setmongoOplogFilter(basicDBObject59);
        java.lang.String str61 = builder56.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean63 = builder62.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder62.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoAdminUser("socket_timeout");
        java.lang.String str68 = builder67.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder67.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject71 = builder67.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder56.mongoCollectionFilter(basicDBObject71);
        builder72.riverName = "mongodb-1638820218264";
        builder72.mongoGridFS = true;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter79 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str80 = serializedObjectSupporter79.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings81 = serializedObjectSupporter79.deserializeObjectRiverSettings4();
        java.lang.String str82 = serializedObjectSupporter79.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings83 = serializedObjectSupporter79.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService84 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition85 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings83, scriptService84);
        java.lang.String str86 = mongoDBRiverDefinition85.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions87 = mongoDBRiverDefinition85.mongoClientOptions;
        builder72.mongoClientOptions = mongoClientOptions87;
        builder40.setmongoClientOptions(mongoClientOptions87);
        builder37.setmongoClientOptions(mongoClientOptions87);
        builder28.setmongoClientOptions(mongoClientOptions87);
        builder13.mongoClientOptions = mongoClientOptions87;
        builder11.setmongoClientOptions(mongoClientOptions87);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(serializedObjectSupporter46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "mongodb-1638820218326" + "'", str80, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "mongodb-1638820218326" + "'", str82, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings83);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "mycollection" + "'", str86, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions87);
    }

    @Test
    public void test7480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7480");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218299" + "'", str6, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
    }

    @Test
    public void test7481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7481");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        java.lang.String str18 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.mongoUseSSL(false);
        builder20.setisMongos((java.lang.Boolean) true);
        java.util.Set<java.lang.String> strSet23 = builder20.getparentTypes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strSet23);
    }

    @Test
    public void test7482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7482");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = riverSettings8.settings();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218326" + "'", str6, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test7483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7483");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        int int9 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder13.setmongoOplogFilter(basicDBObject14);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder13.setmongoOplogFilter(basicDBObject16);
        builder13.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.throttleSize((int) (short) 0);
        builder13.connectTimeout = 27017;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder13.throttleSize(1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder25.getmongoServers();
        builder3.mongoServers = serverAddressList26;
        builder3.setriverIndexName("import_all_collections");
        boolean boolean30 = builder3.getdropCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test7484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7484");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str12 = mongoDBRiverDefinition1.riverName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_fields" + "'", str9, "include_fields");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7485");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str10 = mongoDBRiverDefinition1.getFILTER_FIELD();
        int int11 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str12 = mongoDBRiverDefinition1.getScript();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "filter" + "'", str10, "filter");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7486");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        java.lang.String str20 = builder19.getstatisticsTypeName();
        builder19.scriptType = "user";
        builder19.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("bulk");
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        builder19.setmongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder3.mongoOplogFilter(basicDBObject30);
        builder33.storeStatistics = false;
        com.mongodb.BasicDBObject basicDBObject36 = builder33.mongoOplogFilter;
        builder33.setmongoDb("mongodb-1638820218264");
        builder33.connectTimeout = (short) 10;
        boolean boolean41 = builder33.advancedTransformation;
        java.lang.String str42 = builder33.getscript();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "bulk" + "'", str42, "bulk");
    }

    @Test
    public void test7487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7487");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str12 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str14 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        boolean boolean15 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "type" + "'", str9, "type");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "admin" + "'", str12, "admin");
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "flush_interval" + "'", str14, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test7488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7488");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean11 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str12 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition1.getMongoOplogFilter();
        java.lang.String str14 = mongoDBRiverDefinition1.getIncludeCollection();
        boolean boolean15 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        boolean boolean16 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str17 = mongoDBRiverDefinition1.getSIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "localhost" + "'", str12, "localhost");
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "size" + "'", str17, "size");
    }

    @Test
    public void test7489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7489");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        int int55 = builder54.throttleSize;
        builder54.setmongoSSLVerifyCertificate(false);
        boolean boolean58 = builder54.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder54.advancedTransformation(false);
        builder54.throttleSize = 0;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test7490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7490");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        builder3.setmongoLocalPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder3.storeStatistics(false);
        builder8.setmongoAdminPassword("stats");
        boolean boolean11 = builder8.advancedTransformation;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7491");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        java.lang.String str32 = builder3.typeName;
        java.lang.String str33 = builder3.indexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test7492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7492");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString16();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218387" + "'", str3, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218264" + "'", str5, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
    }

    @Test
    public void test7493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7493");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet42 = builder3.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean44 = builder43.getdropCollection();
        java.lang.String str45 = builder43.getscript();
        boolean boolean46 = builder43.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray47 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList48 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList48, serverAddressArray47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder43.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean52 = builder51.getdropCollection();
        java.lang.String str53 = builder51.getscript();
        boolean boolean54 = builder51.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray55 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList56 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList56, serverAddressArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder51.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        builder43.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        builder3.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        boolean boolean61 = builder3.getdropCollection();
        java.lang.String str62 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder3.importAllCollections(true);
        java.lang.String str65 = builder64.getmongoAdminPassword();
        builder64.importAllCollections = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serverAddressArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serverAddressArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test7494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7494");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString10();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString15();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218299" + "'", str4, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218363" + "'", str9, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218424" + "'", str10, "mongodb-1638820218424");
    }

    @Test
    public void test7495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7495");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        builder19.setthrottleSize((int) ' ');
        boolean boolean22 = builder19.getadvancedTransformation();
        java.lang.String str23 = builder19.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = null;
        builder19.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str26 = builder19.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.isMongos((java.lang.Boolean) true);
        builder19.setindexName("script.default_lang");
        java.lang.String str31 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder19.getinitialTimestamp();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder19);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder39.setmongoOplogFilter(basicDBObject40);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder39.setmongoOplogFilter(basicDBObject42);
        boolean boolean44 = builder39.mongoGridFS;
        int int45 = builder39.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.mongoLocalPassword("include_fields");
        java.lang.String str48 = builder47.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = builder47.getinitialTimestamp();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = builder51.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList53 = mongoDBRiverDefinition52.mongoServers;
        java.lang.String str54 = mongoDBRiverDefinition52.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition52.getParentTypes();
        java.lang.Object obj56 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean58 = builder57.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.script("bulk");
        com.mongodb.BasicDBObject basicDBObject61 = null;
        builder60.setmongoOplogFilter(basicDBObject61);
        com.mongodb.BasicDBObject basicDBObject63 = null;
        builder60.setmongoOplogFilter(basicDBObject63);
        builder60.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder60.throttleSize((int) (short) 0);
        boolean boolean69 = builder68.getmongoUseSSL();
        java.lang.String str70 = builder68.includeCollection;
        java.lang.String str71 = builder68.mongoAdminUser;
        java.lang.Object obj72 = docScoreSearchScript0.unwrap((java.lang.Object) builder68);
        com.mongodb.BasicDBObject basicDBObject73 = builder68.mongoOplogFilter;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(wildcardTimestamp49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition52);
        org.junit.Assert.assertNotNull(serverAddressList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "bulk_timeout" + "'", str54, "bulk_timeout");
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNull(basicDBObject73);
    }

    @Test
    public void test7496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7496");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) true);
        builder5.setindexName("script.default_lang");
        boolean boolean17 = builder5.mongoSSLVerifyCertificate;
        builder5.throttleSize = (short) 1;
        builder5.mongoSecondaryReadPreference = true;
        builder5.importAllCollections = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test7497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7497");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.Boolean boolean11 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str12 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "null.null" + "'", str12, "null.null");
    }

    @Test
    public void test7498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7498");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str6 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoGridFS();
        boolean boolean8 = mongoDBRiverDefinition1.getdropCollection();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "store_statistics" + "'", str6, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7499");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.statisticsTypeName = "name";
        builder5.throttleSize = 0;
        com.mongodb.BasicDBObject basicDBObject12 = builder5.mongoOplogFilter;
        builder5.setmongoAdminUser("collection");
        org.bson.types.BSONTimestamp bSONTimestamp15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.initialTimestamp(bSONTimestamp15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(basicDBObject12);
    }

    @Test
    public void test7500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7500");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        builder7.setadvancedTransformation(false);
        java.util.Set<java.lang.String> strSet10 = builder7.getexcludeFields();
        com.mongodb.BasicDBObject basicDBObject11 = builder7.mongoCollectionFilter;
        java.util.Set<java.lang.String> strSet12 = builder7.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.mongoCollection("connect_timeout");
        java.lang.String str15 = builder7.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.dropCollection(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }
}

